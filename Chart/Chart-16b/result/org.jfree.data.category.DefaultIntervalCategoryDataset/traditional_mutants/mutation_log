AORB_1:232:void_setStartValue(int,java.lang.Comparable,java.lang.Number):getSeriesCount() - 1 => getSeriesCount() * 1
AORB_2:232:void_setStartValue(int,java.lang.Comparable,java.lang.Number):getSeriesCount() - 1 => getSeriesCount() / 1
AORB_3:232:void_setStartValue(int,java.lang.Comparable,java.lang.Number):getSeriesCount() - 1 => getSeriesCount() % 1
AORB_4:232:void_setStartValue(int,java.lang.Comparable,java.lang.Number):getSeriesCount() - 1 => getSeriesCount() + 1
AORB_5:245:void_setEndValue(int,java.lang.Comparable,java.lang.Number):getSeriesCount() - 1 => getSeriesCount() * 1
AORB_6:245:void_setEndValue(int,java.lang.Comparable,java.lang.Number):getSeriesCount() - 1 => getSeriesCount() / 1
AORB_7:245:void_setEndValue(int,java.lang.Comparable,java.lang.Number):getSeriesCount() - 1 => getSeriesCount() % 1
AORB_8:245:void_setEndValue(int,java.lang.Comparable,java.lang.Number):getSeriesCount() - 1 => getSeriesCount() + 1
AORB_9:273:java.lang.Comparable[]_generateKeys(int,java.lang.String):i + 1 => i * 1
AORB_10:273:java.lang.Comparable[]_generateKeys(int,java.lang.String):i + 1 => i / 1
AORB_11:273:java.lang.Comparable[]_generateKeys(int,java.lang.String):i + 1 => i % 1
AORB_12:273:java.lang.Comparable[]_generateKeys(int,java.lang.String):i + 1 => i - 1
ROR_1:47:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): starts != null  =>   starts == null
ROR_2:47:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): ends != null  =>   ends == null
ROR_3:51:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): seriesCount != ends.length  =>   seriesCount > ends.length
ROR_4:51:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): seriesCount != ends.length  =>   seriesCount >= ends.length
ROR_5:51:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): seriesCount != ends.length  =>   seriesCount < ends.length
ROR_6:51:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): seriesCount != ends.length  =>   seriesCount <= ends.length
ROR_7:51:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): seriesCount != ends.length  =>   seriesCount == ends.length
ROR_8:51:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): seriesCount != ends.length  =>   true
ROR_9:51:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): seriesCount != ends.length  =>   false
ROR_10:55:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): seriesCount > 0  =>   seriesCount >= 0
ROR_11:55:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): seriesCount > 0  =>   seriesCount < 0
ROR_12:55:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): seriesCount > 0  =>   seriesCount <= 0
ROR_13:55:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): seriesCount > 0  =>   seriesCount == 0
ROR_14:55:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): seriesCount > 0  =>   seriesCount != 0
ROR_15:55:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): seriesCount > 0  =>   true
ROR_16:55:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): seriesCount > 0  =>   false
ROR_17:56:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): seriesKeys != null  =>   seriesKeys == null
ROR_18:57:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): seriesKeys.length != seriesCount  =>   seriesKeys.length > seriesCount
ROR_19:57:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): seriesKeys.length != seriesCount  =>   seriesKeys.length >= seriesCount
ROR_20:57:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): seriesKeys.length != seriesCount  =>   seriesKeys.length < seriesCount
ROR_21:57:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): seriesKeys.length != seriesCount  =>   seriesKeys.length <= seriesCount
ROR_22:57:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): seriesKeys.length != seriesCount  =>   seriesKeys.length == seriesCount
ROR_23:57:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): seriesKeys.length != seriesCount  =>   true
ROR_24:57:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): seriesKeys.length != seriesCount  =>   false
ROR_25:66:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): categoryCount != ends[0].length  =>   categoryCount > ends[0].length
ROR_26:66:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): categoryCount != ends[0].length  =>   categoryCount >= ends[0].length
ROR_27:66:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): categoryCount != ends[0].length  =>   categoryCount < ends[0].length
ROR_28:66:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): categoryCount != ends[0].length  =>   categoryCount <= ends[0].length
ROR_29:66:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): categoryCount != ends[0].length  =>   categoryCount == ends[0].length
ROR_30:66:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): categoryCount != ends[0].length  =>   true
ROR_31:66:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): categoryCount != ends[0].length  =>   false
ROR_32:70:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): categoryKeys != null  =>   categoryKeys == null
ROR_33:71:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): categoryKeys.length != categoryCount  =>   categoryKeys.length > categoryCount
ROR_34:71:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): categoryKeys.length != categoryCount  =>   categoryKeys.length >= categoryCount
ROR_35:71:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): categoryKeys.length != categoryCount  =>   categoryKeys.length < categoryCount
ROR_36:71:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): categoryKeys.length != categoryCount  =>   categoryKeys.length <= categoryCount
ROR_37:71:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): categoryKeys.length != categoryCount  =>   categoryKeys.length == categoryCount
ROR_38:71:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): categoryKeys.length != categoryCount  =>   true
ROR_39:71:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): categoryKeys.length != categoryCount  =>   false
ROR_40:89:int_getSeriesCount(): this.startData != null  =>   this.startData == null
ROR_41:98:int_getSeriesIndex(java.lang.Comparable): i < this.seriesKeys.length  =>   i > this.seriesKeys.length
ROR_42:98:int_getSeriesIndex(java.lang.Comparable): i < this.seriesKeys.length  =>   i >= this.seriesKeys.length
ROR_43:98:int_getSeriesIndex(java.lang.Comparable): i < this.seriesKeys.length  =>   i <= this.seriesKeys.length
ROR_44:98:int_getSeriesIndex(java.lang.Comparable): i < this.seriesKeys.length  =>   i == this.seriesKeys.length
ROR_45:98:int_getSeriesIndex(java.lang.Comparable): i < this.seriesKeys.length  =>   i != this.seriesKeys.length
ROR_46:98:int_getSeriesIndex(java.lang.Comparable): i < this.seriesKeys.length  =>   true
ROR_47:98:int_getSeriesIndex(java.lang.Comparable): i < this.seriesKeys.length  =>   false
ROR_48:109:java.lang.Comparable_getSeriesKey(int): series >= getSeriesCount()  =>   series > getSeriesCount()
ROR_49:109:java.lang.Comparable_getSeriesKey(int): series >= getSeriesCount()  =>   series < getSeriesCount()
ROR_50:109:java.lang.Comparable_getSeriesKey(int): series >= getSeriesCount()  =>   series <= getSeriesCount()
ROR_51:109:java.lang.Comparable_getSeriesKey(int): series >= getSeriesCount()  =>   series == getSeriesCount()
ROR_52:109:java.lang.Comparable_getSeriesKey(int): series >= getSeriesCount()  =>   series != getSeriesCount()
ROR_53:109:java.lang.Comparable_getSeriesKey(int): series >= getSeriesCount()  =>   true
ROR_54:109:java.lang.Comparable_getSeriesKey(int): series >= getSeriesCount()  =>   false
ROR_55:109:java.lang.Comparable_getSeriesKey(int): series < 0  =>   series > 0
ROR_56:109:java.lang.Comparable_getSeriesKey(int): series < 0  =>   series >= 0
ROR_57:109:java.lang.Comparable_getSeriesKey(int): series < 0  =>   series <= 0
ROR_58:109:java.lang.Comparable_getSeriesKey(int): series < 0  =>   series == 0
ROR_59:109:java.lang.Comparable_getSeriesKey(int): series < 0  =>   series != 0
ROR_60:109:java.lang.Comparable_getSeriesKey(int): series < 0  =>   true
ROR_61:109:java.lang.Comparable_getSeriesKey(int): series < 0  =>   false
ROR_62:117:void_setSeriesKeys(java.lang.Comparable[]): seriesKeys == null  =>   seriesKeys != null
ROR_63:120:void_setSeriesKeys(java.lang.Comparable[]): seriesKeys.length != getSeriesCount()  =>   seriesKeys.length > getSeriesCount()
ROR_64:120:void_setSeriesKeys(java.lang.Comparable[]): seriesKeys.length != getSeriesCount()  =>   seriesKeys.length >= getSeriesCount()
ROR_65:120:void_setSeriesKeys(java.lang.Comparable[]): seriesKeys.length != getSeriesCount()  =>   seriesKeys.length < getSeriesCount()
ROR_66:120:void_setSeriesKeys(java.lang.Comparable[]): seriesKeys.length != getSeriesCount()  =>   seriesKeys.length <= getSeriesCount()
ROR_67:120:void_setSeriesKeys(java.lang.Comparable[]): seriesKeys.length != getSeriesCount()  =>   seriesKeys.length == getSeriesCount()
ROR_68:120:void_setSeriesKeys(java.lang.Comparable[]): seriesKeys.length != getSeriesCount()  =>   true
ROR_69:120:void_setSeriesKeys(java.lang.Comparable[]): seriesKeys.length != getSeriesCount()  =>   false
ROR_70:130:int_getCategoryCount(): this.startData != null  =>   this.startData == null
ROR_71:131:int_getCategoryCount(): getSeriesCount() > 0  =>   getSeriesCount() >= 0
ROR_72:131:int_getCategoryCount(): getSeriesCount() > 0  =>   getSeriesCount() < 0
ROR_73:131:int_getCategoryCount(): getSeriesCount() > 0  =>   getSeriesCount() <= 0
ROR_74:131:int_getCategoryCount(): getSeriesCount() > 0  =>   getSeriesCount() == 0
ROR_75:131:int_getCategoryCount(): getSeriesCount() > 0  =>   getSeriesCount() != 0
ROR_76:131:int_getCategoryCount(): getSeriesCount() > 0  =>   true
ROR_77:131:int_getCategoryCount(): getSeriesCount() > 0  =>   false
ROR_78:140:java.util.List_getColumnKeys(): this.categoryKeys == null  =>   this.categoryKeys != null
ROR_79:149:void_setCategoryKeys(java.lang.Comparable[]): categoryKeys == null  =>   categoryKeys != null
ROR_80:152:void_setCategoryKeys(java.lang.Comparable[]): categoryKeys.length != this.startData[0].length  =>   categoryKeys.length > this.startData[0].length
ROR_81:152:void_setCategoryKeys(java.lang.Comparable[]): categoryKeys.length != this.startData[0].length  =>   categoryKeys.length >= this.startData[0].length
ROR_82:152:void_setCategoryKeys(java.lang.Comparable[]): categoryKeys.length != this.startData[0].length  =>   categoryKeys.length < this.startData[0].length
ROR_83:152:void_setCategoryKeys(java.lang.Comparable[]): categoryKeys.length != this.startData[0].length  =>   categoryKeys.length <= this.startData[0].length
ROR_84:152:void_setCategoryKeys(java.lang.Comparable[]): categoryKeys.length != this.startData[0].length  =>   categoryKeys.length == this.startData[0].length
ROR_85:152:void_setCategoryKeys(java.lang.Comparable[]): categoryKeys.length != this.startData[0].length  =>   true
ROR_86:152:void_setCategoryKeys(java.lang.Comparable[]): categoryKeys.length != this.startData[0].length  =>   false
ROR_87:155:void_setCategoryKeys(java.lang.Comparable[]): i < categoryKeys.length  =>   i > categoryKeys.length
ROR_88:155:void_setCategoryKeys(java.lang.Comparable[]): i < categoryKeys.length  =>   i >= categoryKeys.length
ROR_89:155:void_setCategoryKeys(java.lang.Comparable[]): i < categoryKeys.length  =>   i <= categoryKeys.length
ROR_90:155:void_setCategoryKeys(java.lang.Comparable[]): i < categoryKeys.length  =>   i == categoryKeys.length
ROR_91:155:void_setCategoryKeys(java.lang.Comparable[]): i < categoryKeys.length  =>   i != categoryKeys.length
ROR_92:155:void_setCategoryKeys(java.lang.Comparable[]): i < categoryKeys.length  =>   true
ROR_93:155:void_setCategoryKeys(java.lang.Comparable[]): i < categoryKeys.length  =>   false
ROR_94:156:void_setCategoryKeys(java.lang.Comparable[]): categoryKeys[i] == null  =>   categoryKeys[i] != null
ROR_95:167:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): seriesIndex < 0  =>   seriesIndex > 0
ROR_96:167:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): seriesIndex < 0  =>   seriesIndex >= 0
ROR_97:167:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): seriesIndex < 0  =>   seriesIndex <= 0
ROR_98:167:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): seriesIndex < 0  =>   seriesIndex == 0
ROR_99:167:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): seriesIndex < 0  =>   seriesIndex != 0
ROR_100:167:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): seriesIndex < 0  =>   true
ROR_101:167:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): seriesIndex < 0  =>   false
ROR_102:171:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): itemIndex < 0  =>   itemIndex > 0
ROR_103:171:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): itemIndex < 0  =>   itemIndex >= 0
ROR_104:171:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): itemIndex < 0  =>   itemIndex <= 0
ROR_105:171:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): itemIndex < 0  =>   itemIndex == 0
ROR_106:171:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): itemIndex < 0  =>   itemIndex != 0
ROR_107:171:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): itemIndex < 0  =>   true
ROR_108:171:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): itemIndex < 0  =>   false
ROR_109:185:java.lang.Number_getStartValue(java.lang.Comparable,java.lang.Comparable): seriesIndex < 0  =>   seriesIndex > 0
ROR_110:185:java.lang.Number_getStartValue(java.lang.Comparable,java.lang.Comparable): seriesIndex < 0  =>   seriesIndex >= 0
ROR_111:185:java.lang.Number_getStartValue(java.lang.Comparable,java.lang.Comparable): seriesIndex < 0  =>   seriesIndex <= 0
ROR_112:185:java.lang.Number_getStartValue(java.lang.Comparable,java.lang.Comparable): seriesIndex < 0  =>   seriesIndex == 0
ROR_113:185:java.lang.Number_getStartValue(java.lang.Comparable,java.lang.Comparable): seriesIndex < 0  =>   seriesIndex != 0
ROR_114:185:java.lang.Number_getStartValue(java.lang.Comparable,java.lang.Comparable): seriesIndex < 0  =>   true
ROR_115:185:java.lang.Number_getStartValue(java.lang.Comparable,java.lang.Comparable): seriesIndex < 0  =>   false
ROR_116:189:java.lang.Number_getStartValue(java.lang.Comparable,java.lang.Comparable): itemIndex < 0  =>   itemIndex > 0
ROR_117:189:java.lang.Number_getStartValue(java.lang.Comparable,java.lang.Comparable): itemIndex < 0  =>   itemIndex >= 0
ROR_118:189:java.lang.Number_getStartValue(java.lang.Comparable,java.lang.Comparable): itemIndex < 0  =>   itemIndex <= 0
ROR_119:189:java.lang.Number_getStartValue(java.lang.Comparable,java.lang.Comparable): itemIndex < 0  =>   itemIndex == 0
ROR_120:189:java.lang.Number_getStartValue(java.lang.Comparable,java.lang.Comparable): itemIndex < 0  =>   itemIndex != 0
ROR_121:189:java.lang.Number_getStartValue(java.lang.Comparable,java.lang.Comparable): itemIndex < 0  =>   true
ROR_122:189:java.lang.Number_getStartValue(java.lang.Comparable,java.lang.Comparable): itemIndex < 0  =>   false
ROR_123:197:java.lang.Number_getStartValue(int,int): series < 0  =>   series > 0
ROR_124:197:java.lang.Number_getStartValue(int,int): series < 0  =>   series >= 0
ROR_125:197:java.lang.Number_getStartValue(int,int): series < 0  =>   series <= 0
ROR_126:197:java.lang.Number_getStartValue(int,int): series < 0  =>   series == 0
ROR_127:197:java.lang.Number_getStartValue(int,int): series < 0  =>   series != 0
ROR_128:197:java.lang.Number_getStartValue(int,int): series < 0  =>   true
ROR_129:197:java.lang.Number_getStartValue(int,int): series < 0  =>   false
ROR_130:197:java.lang.Number_getStartValue(int,int): series >= getSeriesCount()  =>   series > getSeriesCount()
ROR_131:197:java.lang.Number_getStartValue(int,int): series >= getSeriesCount()  =>   series < getSeriesCount()
ROR_132:197:java.lang.Number_getStartValue(int,int): series >= getSeriesCount()  =>   series <= getSeriesCount()
ROR_133:197:java.lang.Number_getStartValue(int,int): series >= getSeriesCount()  =>   series == getSeriesCount()
ROR_134:197:java.lang.Number_getStartValue(int,int): series >= getSeriesCount()  =>   series != getSeriesCount()
ROR_135:197:java.lang.Number_getStartValue(int,int): series >= getSeriesCount()  =>   true
ROR_136:197:java.lang.Number_getStartValue(int,int): series >= getSeriesCount()  =>   false
ROR_137:200:java.lang.Number_getStartValue(int,int): category < 0  =>   category > 0
ROR_138:200:java.lang.Number_getStartValue(int,int): category < 0  =>   category >= 0
ROR_139:200:java.lang.Number_getStartValue(int,int): category < 0  =>   category <= 0
ROR_140:200:java.lang.Number_getStartValue(int,int): category < 0  =>   category == 0
ROR_141:200:java.lang.Number_getStartValue(int,int): category < 0  =>   category != 0
ROR_142:200:java.lang.Number_getStartValue(int,int): category < 0  =>   true
ROR_143:200:java.lang.Number_getStartValue(int,int): category < 0  =>   false
ROR_144:200:java.lang.Number_getStartValue(int,int): category >= getCategoryCount()  =>   category > getCategoryCount()
ROR_145:200:java.lang.Number_getStartValue(int,int): category >= getCategoryCount()  =>   category < getCategoryCount()
ROR_146:200:java.lang.Number_getStartValue(int,int): category >= getCategoryCount()  =>   category <= getCategoryCount()
ROR_147:200:java.lang.Number_getStartValue(int,int): category >= getCategoryCount()  =>   category == getCategoryCount()
ROR_148:200:java.lang.Number_getStartValue(int,int): category >= getCategoryCount()  =>   category != getCategoryCount()
ROR_149:200:java.lang.Number_getStartValue(int,int): category >= getCategoryCount()  =>   true
ROR_150:200:java.lang.Number_getStartValue(int,int): category >= getCategoryCount()  =>   false
ROR_151:209:java.lang.Number_getEndValue(java.lang.Comparable,java.lang.Comparable): seriesIndex < 0  =>   seriesIndex > 0
ROR_152:209:java.lang.Number_getEndValue(java.lang.Comparable,java.lang.Comparable): seriesIndex < 0  =>   seriesIndex >= 0
ROR_153:209:java.lang.Number_getEndValue(java.lang.Comparable,java.lang.Comparable): seriesIndex < 0  =>   seriesIndex <= 0
ROR_154:209:java.lang.Number_getEndValue(java.lang.Comparable,java.lang.Comparable): seriesIndex < 0  =>   seriesIndex == 0
ROR_155:209:java.lang.Number_getEndValue(java.lang.Comparable,java.lang.Comparable): seriesIndex < 0  =>   seriesIndex != 0
ROR_156:209:java.lang.Number_getEndValue(java.lang.Comparable,java.lang.Comparable): seriesIndex < 0  =>   true
ROR_157:209:java.lang.Number_getEndValue(java.lang.Comparable,java.lang.Comparable): seriesIndex < 0  =>   false
ROR_158:213:java.lang.Number_getEndValue(java.lang.Comparable,java.lang.Comparable): itemIndex < 0  =>   itemIndex > 0
ROR_159:213:java.lang.Number_getEndValue(java.lang.Comparable,java.lang.Comparable): itemIndex < 0  =>   itemIndex >= 0
ROR_160:213:java.lang.Number_getEndValue(java.lang.Comparable,java.lang.Comparable): itemIndex < 0  =>   itemIndex <= 0
ROR_161:213:java.lang.Number_getEndValue(java.lang.Comparable,java.lang.Comparable): itemIndex < 0  =>   itemIndex == 0
ROR_162:213:java.lang.Number_getEndValue(java.lang.Comparable,java.lang.Comparable): itemIndex < 0  =>   itemIndex != 0
ROR_163:213:java.lang.Number_getEndValue(java.lang.Comparable,java.lang.Comparable): itemIndex < 0  =>   true
ROR_164:213:java.lang.Number_getEndValue(java.lang.Comparable,java.lang.Comparable): itemIndex < 0  =>   false
ROR_165:221:java.lang.Number_getEndValue(int,int): series < 0  =>   series > 0
ROR_166:221:java.lang.Number_getEndValue(int,int): series < 0  =>   series >= 0
ROR_167:221:java.lang.Number_getEndValue(int,int): series < 0  =>   series <= 0
ROR_168:221:java.lang.Number_getEndValue(int,int): series < 0  =>   series == 0
ROR_169:221:java.lang.Number_getEndValue(int,int): series < 0  =>   series != 0
ROR_170:221:java.lang.Number_getEndValue(int,int): series < 0  =>   true
ROR_171:221:java.lang.Number_getEndValue(int,int): series < 0  =>   false
ROR_172:221:java.lang.Number_getEndValue(int,int): series >= getSeriesCount()  =>   series > getSeriesCount()
ROR_173:221:java.lang.Number_getEndValue(int,int): series >= getSeriesCount()  =>   series < getSeriesCount()
ROR_174:221:java.lang.Number_getEndValue(int,int): series >= getSeriesCount()  =>   series <= getSeriesCount()
ROR_175:221:java.lang.Number_getEndValue(int,int): series >= getSeriesCount()  =>   series == getSeriesCount()
ROR_176:221:java.lang.Number_getEndValue(int,int): series >= getSeriesCount()  =>   series != getSeriesCount()
ROR_177:221:java.lang.Number_getEndValue(int,int): series >= getSeriesCount()  =>   true
ROR_178:221:java.lang.Number_getEndValue(int,int): series >= getSeriesCount()  =>   false
ROR_179:224:java.lang.Number_getEndValue(int,int): category < 0  =>   category > 0
ROR_180:224:java.lang.Number_getEndValue(int,int): category < 0  =>   category >= 0
ROR_181:224:java.lang.Number_getEndValue(int,int): category < 0  =>   category <= 0
ROR_182:224:java.lang.Number_getEndValue(int,int): category < 0  =>   category == 0
ROR_183:224:java.lang.Number_getEndValue(int,int): category < 0  =>   category != 0
ROR_184:224:java.lang.Number_getEndValue(int,int): category < 0  =>   true
ROR_185:224:java.lang.Number_getEndValue(int,int): category < 0  =>   false
ROR_186:224:java.lang.Number_getEndValue(int,int): category >= getCategoryCount()  =>   category > getCategoryCount()
ROR_187:224:java.lang.Number_getEndValue(int,int): category >= getCategoryCount()  =>   category < getCategoryCount()
ROR_188:224:java.lang.Number_getEndValue(int,int): category >= getCategoryCount()  =>   category <= getCategoryCount()
ROR_189:224:java.lang.Number_getEndValue(int,int): category >= getCategoryCount()  =>   category == getCategoryCount()
ROR_190:224:java.lang.Number_getEndValue(int,int): category >= getCategoryCount()  =>   category != getCategoryCount()
ROR_191:224:java.lang.Number_getEndValue(int,int): category >= getCategoryCount()  =>   true
ROR_192:224:java.lang.Number_getEndValue(int,int): category >= getCategoryCount()  =>   false
ROR_193:232:void_setStartValue(int,java.lang.Comparable,java.lang.Number): series < 0  =>   series > 0
ROR_194:232:void_setStartValue(int,java.lang.Comparable,java.lang.Number): series < 0  =>   series >= 0
ROR_195:232:void_setStartValue(int,java.lang.Comparable,java.lang.Number): series < 0  =>   series <= 0
ROR_196:232:void_setStartValue(int,java.lang.Comparable,java.lang.Number): series < 0  =>   series == 0
ROR_197:232:void_setStartValue(int,java.lang.Comparable,java.lang.Number): series < 0  =>   series != 0
ROR_198:232:void_setStartValue(int,java.lang.Comparable,java.lang.Number): series < 0  =>   true
ROR_199:232:void_setStartValue(int,java.lang.Comparable,java.lang.Number): series < 0  =>   false
ROR_200:232:void_setStartValue(int,java.lang.Comparable,java.lang.Number): series > getSeriesCount() - 1  =>   series >= getSeriesCount() - 1
ROR_201:232:void_setStartValue(int,java.lang.Comparable,java.lang.Number): series > getSeriesCount() - 1  =>   series < getSeriesCount() - 1
ROR_202:232:void_setStartValue(int,java.lang.Comparable,java.lang.Number): series > getSeriesCount() - 1  =>   series <= getSeriesCount() - 1
ROR_203:232:void_setStartValue(int,java.lang.Comparable,java.lang.Number): series > getSeriesCount() - 1  =>   series == getSeriesCount() - 1
ROR_204:232:void_setStartValue(int,java.lang.Comparable,java.lang.Number): series > getSeriesCount() - 1  =>   series != getSeriesCount() - 1
ROR_205:232:void_setStartValue(int,java.lang.Comparable,java.lang.Number): series > getSeriesCount() - 1  =>   true
ROR_206:232:void_setStartValue(int,java.lang.Comparable,java.lang.Number): series > getSeriesCount() - 1  =>   false
ROR_207:236:void_setStartValue(int,java.lang.Comparable,java.lang.Number): categoryIndex < 0  =>   categoryIndex > 0
ROR_208:236:void_setStartValue(int,java.lang.Comparable,java.lang.Number): categoryIndex < 0  =>   categoryIndex >= 0
ROR_209:236:void_setStartValue(int,java.lang.Comparable,java.lang.Number): categoryIndex < 0  =>   categoryIndex <= 0
ROR_210:236:void_setStartValue(int,java.lang.Comparable,java.lang.Number): categoryIndex < 0  =>   categoryIndex == 0
ROR_211:236:void_setStartValue(int,java.lang.Comparable,java.lang.Number): categoryIndex < 0  =>   categoryIndex != 0
ROR_212:236:void_setStartValue(int,java.lang.Comparable,java.lang.Number): categoryIndex < 0  =>   true
ROR_213:236:void_setStartValue(int,java.lang.Comparable,java.lang.Number): categoryIndex < 0  =>   false
ROR_214:245:void_setEndValue(int,java.lang.Comparable,java.lang.Number): series < 0  =>   series > 0
ROR_215:245:void_setEndValue(int,java.lang.Comparable,java.lang.Number): series < 0  =>   series >= 0
ROR_216:245:void_setEndValue(int,java.lang.Comparable,java.lang.Number): series < 0  =>   series <= 0
ROR_217:245:void_setEndValue(int,java.lang.Comparable,java.lang.Number): series < 0  =>   series == 0
ROR_218:245:void_setEndValue(int,java.lang.Comparable,java.lang.Number): series < 0  =>   series != 0
ROR_219:245:void_setEndValue(int,java.lang.Comparable,java.lang.Number): series < 0  =>   true
ROR_220:245:void_setEndValue(int,java.lang.Comparable,java.lang.Number): series < 0  =>   false
ROR_221:245:void_setEndValue(int,java.lang.Comparable,java.lang.Number): series > getSeriesCount() - 1  =>   series >= getSeriesCount() - 1
ROR_222:245:void_setEndValue(int,java.lang.Comparable,java.lang.Number): series > getSeriesCount() - 1  =>   series < getSeriesCount() - 1
ROR_223:245:void_setEndValue(int,java.lang.Comparable,java.lang.Number): series > getSeriesCount() - 1  =>   series <= getSeriesCount() - 1
ROR_224:245:void_setEndValue(int,java.lang.Comparable,java.lang.Number): series > getSeriesCount() - 1  =>   series == getSeriesCount() - 1
ROR_225:245:void_setEndValue(int,java.lang.Comparable,java.lang.Number): series > getSeriesCount() - 1  =>   series != getSeriesCount() - 1
ROR_226:245:void_setEndValue(int,java.lang.Comparable,java.lang.Number): series > getSeriesCount() - 1  =>   true
ROR_227:245:void_setEndValue(int,java.lang.Comparable,java.lang.Number): series > getSeriesCount() - 1  =>   false
ROR_228:249:void_setEndValue(int,java.lang.Comparable,java.lang.Number): categoryIndex < 0  =>   categoryIndex > 0
ROR_229:249:void_setEndValue(int,java.lang.Comparable,java.lang.Number): categoryIndex < 0  =>   categoryIndex >= 0
ROR_230:249:void_setEndValue(int,java.lang.Comparable,java.lang.Number): categoryIndex < 0  =>   categoryIndex <= 0
ROR_231:249:void_setEndValue(int,java.lang.Comparable,java.lang.Number): categoryIndex < 0  =>   categoryIndex == 0
ROR_232:249:void_setEndValue(int,java.lang.Comparable,java.lang.Number): categoryIndex < 0  =>   categoryIndex != 0
ROR_233:249:void_setEndValue(int,java.lang.Comparable,java.lang.Number): categoryIndex < 0  =>   true
ROR_234:249:void_setEndValue(int,java.lang.Comparable,java.lang.Number): categoryIndex < 0  =>   false
ROR_235:259:int_getCategoryIndex(java.lang.Comparable): i < this.categoryKeys.length  =>   i > this.categoryKeys.length
ROR_236:259:int_getCategoryIndex(java.lang.Comparable): i < this.categoryKeys.length  =>   i >= this.categoryKeys.length
ROR_237:259:int_getCategoryIndex(java.lang.Comparable): i < this.categoryKeys.length  =>   i <= this.categoryKeys.length
ROR_238:259:int_getCategoryIndex(java.lang.Comparable): i < this.categoryKeys.length  =>   i == this.categoryKeys.length
ROR_239:259:int_getCategoryIndex(java.lang.Comparable): i < this.categoryKeys.length  =>   i != this.categoryKeys.length
ROR_240:259:int_getCategoryIndex(java.lang.Comparable): i < this.categoryKeys.length  =>   true
ROR_241:259:int_getCategoryIndex(java.lang.Comparable): i < this.categoryKeys.length  =>   false
ROR_242:272:java.lang.Comparable[]_generateKeys(int,java.lang.String): i < count  =>   i > count
ROR_243:272:java.lang.Comparable[]_generateKeys(int,java.lang.String): i < count  =>   i >= count
ROR_244:272:java.lang.Comparable[]_generateKeys(int,java.lang.String): i < count  =>   i <= count
ROR_245:272:java.lang.Comparable[]_generateKeys(int,java.lang.String): i < count  =>   i == count
ROR_246:272:java.lang.Comparable[]_generateKeys(int,java.lang.String): i < count  =>   i != count
ROR_247:272:java.lang.Comparable[]_generateKeys(int,java.lang.String): i < count  =>   true
ROR_248:272:java.lang.Comparable[]_generateKeys(int,java.lang.String): i < count  =>   false
ROR_249:286:int_getColumnIndex(java.lang.Comparable): columnKey == null  =>   columnKey != null
ROR_250:299:java.util.List_getRowKeys(): this.seriesKeys == null  =>   this.seriesKeys != null
ROR_251:308:java.lang.Comparable_getRowKey(int): row >= getRowCount()  =>   row > getRowCount()
ROR_252:308:java.lang.Comparable_getRowKey(int): row >= getRowCount()  =>   row < getRowCount()
ROR_253:308:java.lang.Comparable_getRowKey(int): row >= getRowCount()  =>   row <= getRowCount()
ROR_254:308:java.lang.Comparable_getRowKey(int): row >= getRowCount()  =>   row == getRowCount()
ROR_255:308:java.lang.Comparable_getRowKey(int): row >= getRowCount()  =>   row != getRowCount()
ROR_256:308:java.lang.Comparable_getRowKey(int): row >= getRowCount()  =>   true
ROR_257:308:java.lang.Comparable_getRowKey(int): row >= getRowCount()  =>   false
ROR_258:308:java.lang.Comparable_getRowKey(int): row < 0  =>   row > 0
ROR_259:308:java.lang.Comparable_getRowKey(int): row < 0  =>   row >= 0
ROR_260:308:java.lang.Comparable_getRowKey(int): row < 0  =>   row <= 0
ROR_261:308:java.lang.Comparable_getRowKey(int): row < 0  =>   row == 0
ROR_262:308:java.lang.Comparable_getRowKey(int): row < 0  =>   row != 0
ROR_263:308:java.lang.Comparable_getRowKey(int): row < 0  =>   true
ROR_264:308:java.lang.Comparable_getRowKey(int): row < 0  =>   false
ROR_265:326:boolean_equals(java.lang.Object): obj == this  =>   obj != this
ROR_266:361:boolean_equal(java.lang.Number[][],java.lang.Number[][]): array1 == null  =>   array1 != null
ROR_267:362:boolean_equal(java.lang.Number[][],java.lang.Number[][]): array2 == null  =>   array2 != null
ROR_268:364:boolean_equal(java.lang.Number[][],java.lang.Number[][]): array2 == null  =>   array2 != null
ROR_269:367:boolean_equal(java.lang.Number[][],java.lang.Number[][]): array1.length != array2.length  =>   array1.length > array2.length
ROR_270:367:boolean_equal(java.lang.Number[][],java.lang.Number[][]): array1.length != array2.length  =>   array1.length >= array2.length
ROR_271:367:boolean_equal(java.lang.Number[][],java.lang.Number[][]): array1.length != array2.length  =>   array1.length < array2.length
ROR_272:367:boolean_equal(java.lang.Number[][],java.lang.Number[][]): array1.length != array2.length  =>   array1.length <= array2.length
ROR_273:367:boolean_equal(java.lang.Number[][],java.lang.Number[][]): array1.length != array2.length  =>   array1.length == array2.length
ROR_274:367:boolean_equal(java.lang.Number[][],java.lang.Number[][]): array1.length != array2.length  =>   true
ROR_275:367:boolean_equal(java.lang.Number[][],java.lang.Number[][]): array1.length != array2.length  =>   false
ROR_276:370:boolean_equal(java.lang.Number[][],java.lang.Number[][]): i < array1.length  =>   i > array1.length
ROR_277:370:boolean_equal(java.lang.Number[][],java.lang.Number[][]): i < array1.length  =>   i >= array1.length
ROR_278:370:boolean_equal(java.lang.Number[][],java.lang.Number[][]): i < array1.length  =>   i <= array1.length
ROR_279:370:boolean_equal(java.lang.Number[][],java.lang.Number[][]): i < array1.length  =>   i == array1.length
ROR_280:370:boolean_equal(java.lang.Number[][],java.lang.Number[][]): i < array1.length  =>   i != array1.length
ROR_281:370:boolean_equal(java.lang.Number[][],java.lang.Number[][]): i < array1.length  =>   true
ROR_282:370:boolean_equal(java.lang.Number[][],java.lang.Number[][]): i < array1.length  =>   false
ROR_283:380:java.lang.Number[][]_clone(java.lang.Number[][]): array == null  =>   array != null
ROR_284:384:java.lang.Number[][]_clone(java.lang.Number[][]): i < array.length  =>   i > array.length
ROR_285:384:java.lang.Number[][]_clone(java.lang.Number[][]): i < array.length  =>   i >= array.length
ROR_286:384:java.lang.Number[][]_clone(java.lang.Number[][]): i < array.length  =>   i <= array.length
ROR_287:384:java.lang.Number[][]_clone(java.lang.Number[][]): i < array.length  =>   i == array.length
ROR_288:384:java.lang.Number[][]_clone(java.lang.Number[][]): i < array.length  =>   i != array.length
ROR_289:384:java.lang.Number[][]_clone(java.lang.Number[][]): i < array.length  =>   true
ROR_290:384:java.lang.Number[][]_clone(java.lang.Number[][]): i < array.length  =>   false
COR_1:47:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): starts != null && ends != null  =>   starts != null || ends != null
COR_2:47:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): starts != null && ends != null  =>   starts != null ^ ends != null
COR_3:109:java.lang.Comparable_getSeriesKey(int): series >= getSeriesCount() || series < 0  =>   series >= getSeriesCount() && series < 0
COR_4:109:java.lang.Comparable_getSeriesKey(int): series >= getSeriesCount() || series < 0  =>   series >= getSeriesCount() ^ series < 0
COR_5:197:java.lang.Number_getStartValue(int,int): series < 0 || series >= getSeriesCount()  =>   series < 0 && series >= getSeriesCount()
COR_6:197:java.lang.Number_getStartValue(int,int): series < 0 || series >= getSeriesCount()  =>   series < 0 ^ series >= getSeriesCount()
COR_7:200:java.lang.Number_getStartValue(int,int): category < 0 || category >= getCategoryCount()  =>   category < 0 && category >= getCategoryCount()
COR_8:200:java.lang.Number_getStartValue(int,int): category < 0 || category >= getCategoryCount()  =>   category < 0 ^ category >= getCategoryCount()
COR_9:221:java.lang.Number_getEndValue(int,int): series < 0 || series >= getSeriesCount()  =>   series < 0 && series >= getSeriesCount()
COR_10:221:java.lang.Number_getEndValue(int,int): series < 0 || series >= getSeriesCount()  =>   series < 0 ^ series >= getSeriesCount()
COR_11:224:java.lang.Number_getEndValue(int,int): category < 0 || category >= getCategoryCount()  =>   category < 0 && category >= getCategoryCount()
COR_12:224:java.lang.Number_getEndValue(int,int): category < 0 || category >= getCategoryCount()  =>   category < 0 ^ category >= getCategoryCount()
COR_13:232:void_setStartValue(int,java.lang.Comparable,java.lang.Number): series < 0 || series > getSeriesCount() - 1  =>   series < 0 && series > getSeriesCount() - 1
COR_14:232:void_setStartValue(int,java.lang.Comparable,java.lang.Number): series < 0 || series > getSeriesCount() - 1  =>   series < 0 ^ series > getSeriesCount() - 1
COR_15:245:void_setEndValue(int,java.lang.Comparable,java.lang.Number): series < 0 || series > getSeriesCount() - 1  =>   series < 0 && series > getSeriesCount() - 1
COR_16:245:void_setEndValue(int,java.lang.Comparable,java.lang.Number): series < 0 || series > getSeriesCount() - 1  =>   series < 0 ^ series > getSeriesCount() - 1
COR_17:308:java.lang.Comparable_getRowKey(int): row >= getRowCount() || row < 0  =>   row >= getRowCount() && row < 0
COR_18:308:java.lang.Comparable_getRowKey(int): row >= getRowCount() || row < 0  =>   row >= getRowCount() ^ row < 0
SDL_1:83:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): this.startData = starts; this.endData = ends; if (starts != null && ends != null) {     java.lang.String baseName = \"org.jfree.data.resources.DataPackageResources\";     java.util.ResourceBundle resources = ResourceBundle.getBundle( baseName );     int seriesCount = starts.length;     if (seriesCount != ends.length) {         java.lang.String errMsg = \"DefaultIntervalCategoryDataset: the number \" + \"of series in the start value dataset does \" + \"not match the number of series in the end \" + \"value dataset.\";         throw new java.lang.IllegalArgumentException( errMsg );     }     if (seriesCount > 0) {         if (seriesKeys != null) {             if (seriesKeys.length != seriesCount) {                 throw new java.lang.IllegalArgumentException( \"The number of series keys does not \" + \"match the number of series in the data.\" );             }             this.seriesKeys = seriesKeys;         } else {             java.lang.String prefix = resources.getString( \"series.default-prefix\" ) + \" \";             this.seriesKeys = generateKeys( seriesCount, prefix );         }         int categoryCount = starts[0].length;         if (categoryCount != ends[0].length) {             java.lang.String errMsg = \"DefaultIntervalCategoryDataset: the \" + \"number of categories in the start value \" + \"dataset does not match the number of \" + \"categories in the end value dataset.\";             throw new java.lang.IllegalArgumentException( errMsg );         }         if (categoryKeys != null) {             if (categoryKeys.length != categoryCount) {                 throw new java.lang.IllegalArgumentException( \"The number of category keys does not match \" + \"the number of categories in the data.\" );             }             this.categoryKeys = categoryKeys;         } else {             java.lang.String prefix = resources.getString( \"categories.default-prefix\" ) + \" \";             this.categoryKeys = generateKeys( categoryCount, prefix );         }     } else {         this.seriesKeys = null;         this.categoryKeys = null;     } }  =>   this.endData = ends; if (starts != null && ends != null) {     java.lang.String baseName = \"org.jfree.data.resources.DataPackageResources\";     java.util.ResourceBundle resources = ResourceBundle.getBundle( baseName );     int seriesCount = starts.length;     if (seriesCount != ends.length) {         java.lang.String errMsg = \"DefaultIntervalCategoryDataset: the number \" + \"of series in the start value dataset does \" + \"not match the number of series in the end \" + \"value dataset.\";         throw new java.lang.IllegalArgumentException( errMsg );     }     if (seriesCount > 0) {         if (seriesKeys != null) {             if (seriesKeys.length != seriesCount) {                 throw new java.lang.IllegalArgumentException( \"The number of series keys does not \" + \"match the number of series in the data.\" );             }             this.seriesKeys = seriesKeys;         } else {             java.lang.String prefix = resources.getString( \"series.default-prefix\" ) + \" \";             this.seriesKeys = generateKeys( seriesCount, prefix );         }         int categoryCount = starts[0].length;         if (categoryCount != ends[0].length) {             java.lang.String errMsg = \"DefaultIntervalCategoryDataset: the \" + \"number of categories in the start value \" + \"dataset does not match the number of \" + \"categories in the end value dataset.\";             throw new java.lang.IllegalArgumentException( errMsg );         }         if (categoryKeys != null) {             if (categoryKeys.length != categoryCount) {                 throw new java.lang.IllegalArgumentException( \"The number of category keys does not match \" + \"the number of categories in the data.\" );             }             this.categoryKeys = categoryKeys;         } else {             java.lang.String prefix = resources.getString( \"categories.default-prefix\" ) + \" \";             this.categoryKeys = generateKeys( categoryCount, prefix );         }     } else {         this.seriesKeys = null;         this.categoryKeys = null;     } }
SDL_2:83:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): this.startData = starts; this.endData = ends; if (starts != null && ends != null) {     java.lang.String baseName = \"org.jfree.data.resources.DataPackageResources\";     java.util.ResourceBundle resources = ResourceBundle.getBundle( baseName );     int seriesCount = starts.length;     if (seriesCount != ends.length) {         java.lang.String errMsg = \"DefaultIntervalCategoryDataset: the number \" + \"of series in the start value dataset does \" + \"not match the number of series in the end \" + \"value dataset.\";         throw new java.lang.IllegalArgumentException( errMsg );     }     if (seriesCount > 0) {         if (seriesKeys != null) {             if (seriesKeys.length != seriesCount) {                 throw new java.lang.IllegalArgumentException( \"The number of series keys does not \" + \"match the number of series in the data.\" );             }             this.seriesKeys = seriesKeys;         } else {             java.lang.String prefix = resources.getString( \"series.default-prefix\" ) + \" \";             this.seriesKeys = generateKeys( seriesCount, prefix );         }         int categoryCount = starts[0].length;         if (categoryCount != ends[0].length) {             java.lang.String errMsg = \"DefaultIntervalCategoryDataset: the \" + \"number of categories in the start value \" + \"dataset does not match the number of \" + \"categories in the end value dataset.\";             throw new java.lang.IllegalArgumentException( errMsg );         }         if (categoryKeys != null) {             if (categoryKeys.length != categoryCount) {                 throw new java.lang.IllegalArgumentException( \"The number of category keys does not match \" + \"the number of categories in the data.\" );             }             this.categoryKeys = categoryKeys;         } else {             java.lang.String prefix = resources.getString( \"categories.default-prefix\" ) + \" \";             this.categoryKeys = generateKeys( categoryCount, prefix );         }     } else {         this.seriesKeys = null;         this.categoryKeys = null;     } }  =>   this.startData = starts; if (starts != null && ends != null) {     java.lang.String baseName = \"org.jfree.data.resources.DataPackageResources\";     java.util.ResourceBundle resources = ResourceBundle.getBundle( baseName );     int seriesCount = starts.length;     if (seriesCount != ends.length) {         java.lang.String errMsg = \"DefaultIntervalCategoryDataset: the number \" + \"of series in the start value dataset does \" + \"not match the number of series in the end \" + \"value dataset.\";         throw new java.lang.IllegalArgumentException( errMsg );     }     if (seriesCount > 0) {         if (seriesKeys != null) {             if (seriesKeys.length != seriesCount) {                 throw new java.lang.IllegalArgumentException( \"The number of series keys does not \" + \"match the number of series in the data.\" );             }             this.seriesKeys = seriesKeys;         } else {             java.lang.String prefix = resources.getString( \"series.default-prefix\" ) + \" \";             this.seriesKeys = generateKeys( seriesCount, prefix );         }         int categoryCount = starts[0].length;         if (categoryCount != ends[0].length) {             java.lang.String errMsg = \"DefaultIntervalCategoryDataset: the \" + \"number of categories in the start value \" + \"dataset does not match the number of \" + \"categories in the end value dataset.\";             throw new java.lang.IllegalArgumentException( errMsg );         }         if (categoryKeys != null) {             if (categoryKeys.length != categoryCount) {                 throw new java.lang.IllegalArgumentException( \"The number of category keys does not match \" + \"the number of categories in the data.\" );             }             this.categoryKeys = categoryKeys;         } else {             java.lang.String prefix = resources.getString( \"categories.default-prefix\" ) + \" \";             this.categoryKeys = generateKeys( categoryCount, prefix );         }     } else {         this.seriesKeys = null;         this.categoryKeys = null;     } }
SDL_3:47:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): this.startData = starts; this.endData = ends; if (starts != null && ends != null) {     java.lang.String baseName = \"org.jfree.data.resources.DataPackageResources\";     java.util.ResourceBundle resources = ResourceBundle.getBundle( baseName );     int seriesCount = starts.length;     if (seriesCount != ends.length) {         java.lang.String errMsg = \"DefaultIntervalCategoryDataset: the number \" + \"of series in the start value dataset does \" + \"not match the number of series in the end \" + \"value dataset.\";         throw new java.lang.IllegalArgumentException( errMsg );     }     if (seriesCount > 0) {         if (seriesKeys != null) {             if (seriesKeys.length != seriesCount) {                 throw new java.lang.IllegalArgumentException( \"The number of series keys does not \" + \"match the number of series in the data.\" );             }             this.seriesKeys = seriesKeys;         } else {             java.lang.String prefix = resources.getString( \"series.default-prefix\" ) + \" \";             this.seriesKeys = generateKeys( seriesCount, prefix );         }         int categoryCount = starts[0].length;         if (categoryCount != ends[0].length) {             java.lang.String errMsg = \"DefaultIntervalCategoryDataset: the \" + \"number of categories in the start value \" + \"dataset does not match the number of \" + \"categories in the end value dataset.\";             throw new java.lang.IllegalArgumentException( errMsg );         }         if (categoryKeys != null) {             if (categoryKeys.length != categoryCount) {                 throw new java.lang.IllegalArgumentException( \"The number of category keys does not match \" + \"the number of categories in the data.\" );             }             this.categoryKeys = categoryKeys;         } else {             java.lang.String prefix = resources.getString( \"categories.default-prefix\" ) + \" \";             this.categoryKeys = generateKeys( categoryCount, prefix );         }     } else {         this.seriesKeys = null;         this.categoryKeys = null;     } }  =>   this.startData = starts; this.endData = ends;
SDL_4:79:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): java.lang.String baseName = \"org.jfree.data.resources.DataPackageResources\"; java.util.ResourceBundle resources = ResourceBundle.getBundle( baseName ); int seriesCount = starts.length; if (seriesCount != ends.length) {     java.lang.String errMsg = \"DefaultIntervalCategoryDataset: the number \" + \"of series in the start value dataset does \" + \"not match the number of series in the end \" + \"value dataset.\";     throw new java.lang.IllegalArgumentException( errMsg ); } if (seriesCount > 0) {     if (seriesKeys != null) {         if (seriesKeys.length != seriesCount) {             throw new java.lang.IllegalArgumentException( \"The number of series keys does not \" + \"match the number of series in the data.\" );         }         this.seriesKeys = seriesKeys;     } else {         java.lang.String prefix = resources.getString( \"series.default-prefix\" ) + \" \";         this.seriesKeys = generateKeys( seriesCount, prefix );     }     int categoryCount = starts[0].length;     if (categoryCount != ends[0].length) {         java.lang.String errMsg = \"DefaultIntervalCategoryDataset: the \" + \"number of categories in the start value \" + \"dataset does not match the number of \" + \"categories in the end value dataset.\";         throw new java.lang.IllegalArgumentException( errMsg );     }     if (categoryKeys != null) {         if (categoryKeys.length != categoryCount) {             throw new java.lang.IllegalArgumentException( \"The number of category keys does not match \" + \"the number of categories in the data.\" );         }         this.categoryKeys = categoryKeys;     } else {         java.lang.String prefix = resources.getString( \"categories.default-prefix\" ) + \" \";         this.categoryKeys = generateKeys( categoryCount, prefix );     } } else {     this.seriesKeys = null;     this.categoryKeys = null; }  =>   java.lang.String baseName = \"org.jfree.data.resources.DataPackageResources\"; java.util.ResourceBundle resources = ResourceBundle.getBundle( baseName ); int seriesCount = starts.length; if (seriesCount > 0) {     if (seriesKeys != null) {         if (seriesKeys.length != seriesCount) {             throw new java.lang.IllegalArgumentException( \"The number of series keys does not \" + \"match the number of series in the data.\" );         }         this.seriesKeys = seriesKeys;     } else {         java.lang.String prefix = resources.getString( \"series.default-prefix\" ) + \" \";         this.seriesKeys = generateKeys( seriesCount, prefix );     }     int categoryCount = starts[0].length;     if (categoryCount != ends[0].length) {         java.lang.String errMsg = \"DefaultIntervalCategoryDataset: the \" + \"number of categories in the start value \" + \"dataset does not match the number of \" + \"categories in the end value dataset.\";         throw new java.lang.IllegalArgumentException( errMsg );     }     if (categoryKeys != null) {         if (categoryKeys.length != categoryCount) {             throw new java.lang.IllegalArgumentException( \"The number of category keys does not match \" + \"the number of categories in the data.\" );         }         this.categoryKeys = categoryKeys;     } else {         java.lang.String prefix = resources.getString( \"categories.default-prefix\" ) + \" \";         this.categoryKeys = generateKeys( categoryCount, prefix );     } } else {     this.seriesKeys = null;     this.categoryKeys = null; }
SDL_5:55:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): java.lang.String baseName = \"org.jfree.data.resources.DataPackageResources\"; java.util.ResourceBundle resources = ResourceBundle.getBundle( baseName ); int seriesCount = starts.length; if (seriesCount != ends.length) {     java.lang.String errMsg = \"DefaultIntervalCategoryDataset: the number \" + \"of series in the start value dataset does \" + \"not match the number of series in the end \" + \"value dataset.\";     throw new java.lang.IllegalArgumentException( errMsg ); } if (seriesCount > 0) {     if (seriesKeys != null) {         if (seriesKeys.length != seriesCount) {             throw new java.lang.IllegalArgumentException( \"The number of series keys does not \" + \"match the number of series in the data.\" );         }         this.seriesKeys = seriesKeys;     } else {         java.lang.String prefix = resources.getString( \"series.default-prefix\" ) + \" \";         this.seriesKeys = generateKeys( seriesCount, prefix );     }     int categoryCount = starts[0].length;     if (categoryCount != ends[0].length) {         java.lang.String errMsg = \"DefaultIntervalCategoryDataset: the \" + \"number of categories in the start value \" + \"dataset does not match the number of \" + \"categories in the end value dataset.\";         throw new java.lang.IllegalArgumentException( errMsg );     }     if (categoryKeys != null) {         if (categoryKeys.length != categoryCount) {             throw new java.lang.IllegalArgumentException( \"The number of category keys does not match \" + \"the number of categories in the data.\" );         }         this.categoryKeys = categoryKeys;     } else {         java.lang.String prefix = resources.getString( \"categories.default-prefix\" ) + \" \";         this.categoryKeys = generateKeys( categoryCount, prefix );     } } else {     this.seriesKeys = null;     this.categoryKeys = null; }  =>   java.lang.String baseName = \"org.jfree.data.resources.DataPackageResources\"; java.util.ResourceBundle resources = ResourceBundle.getBundle( baseName ); int seriesCount = starts.length; if (seriesCount != ends.length) {     java.lang.String errMsg = \"DefaultIntervalCategoryDataset: the number \" + \"of series in the start value dataset does \" + \"not match the number of series in the end \" + \"value dataset.\";     throw new java.lang.IllegalArgumentException( errMsg ); }
SDL_6:84:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): if (starts != null && ends != null) {     java.lang.String baseName = \"org.jfree.data.resources.DataPackageResources\";     java.util.ResourceBundle resources = ResourceBundle.getBundle( baseName );     int seriesCount = starts.length;     if (seriesCount != ends.length) {         java.lang.String errMsg = \"DefaultIntervalCategoryDataset: the number \" + \"of series in the start value dataset does \" + \"not match the number of series in the end \" + \"value dataset.\";         throw new java.lang.IllegalArgumentException( errMsg );     }     if (seriesCount > 0) {         if (seriesKeys != null) {             if (seriesKeys.length != seriesCount) {                 throw new java.lang.IllegalArgumentException( \"The number of series keys does not \" + \"match the number of series in the data.\" );             }             this.seriesKeys = seriesKeys;         } else {             java.lang.String prefix = resources.getString( \"series.default-prefix\" ) + \" \";             this.seriesKeys = generateKeys( seriesCount, prefix );         }         int categoryCount = starts[0].length;         if (categoryCount != ends[0].length) {             java.lang.String errMsg = \"DefaultIntervalCategoryDataset: the \" + \"number of categories in the start value \" + \"dataset does not match the number of \" + \"categories in the end value dataset.\";             throw new java.lang.IllegalArgumentException( errMsg );         }         if (categoryKeys != null) {             if (categoryKeys.length != categoryCount) {                 throw new java.lang.IllegalArgumentException( \"The number of category keys does not match \" + \"the number of categories in the data.\" );             }             this.categoryKeys = categoryKeys;         } else {             java.lang.String prefix = resources.getString( \"categories.default-prefix\" ) + \" \";             this.categoryKeys = generateKeys( categoryCount, prefix );         }     } else {         this.seriesKeys = null;         this.categoryKeys = null;     } }  =>   if (true) {     java.lang.String baseName = \"org.jfree.data.resources.DataPackageResources\";     java.util.ResourceBundle resources = ResourceBundle.getBundle( baseName );     int seriesCount = starts.length;     if (seriesCount != ends.length) {         java.lang.String errMsg = \"DefaultIntervalCategoryDataset: the number \" + \"of series in the start value dataset does \" + \"not match the number of series in the end \" + \"value dataset.\";         throw new java.lang.IllegalArgumentException( errMsg );     }     if (seriesCount > 0) {         if (seriesKeys != null) {             if (seriesKeys.length != seriesCount) {                 throw new java.lang.IllegalArgumentException( \"The number of series keys does not \" + \"match the number of series in the data.\" );             }             this.seriesKeys = seriesKeys;         } else {             java.lang.String prefix = resources.getString( \"series.default-prefix\" ) + \" \";             this.seriesKeys = generateKeys( seriesCount, prefix );         }         int categoryCount = starts[0].length;         if (categoryCount != ends[0].length) {             java.lang.String errMsg = \"DefaultIntervalCategoryDataset: the \" + \"number of categories in the start value \" + \"dataset does not match the number of \" + \"categories in the end value dataset.\";             throw new java.lang.IllegalArgumentException( errMsg );         }         if (categoryKeys != null) {             if (categoryKeys.length != categoryCount) {                 throw new java.lang.IllegalArgumentException( \"The number of category keys does not match \" + \"the number of categories in the data.\" );             }             this.categoryKeys = categoryKeys;         } else {             java.lang.String prefix = resources.getString( \"categories.default-prefix\" ) + \" \";             this.categoryKeys = generateKeys( categoryCount, prefix );         }     } else {         this.seriesKeys = null;         this.categoryKeys = null;     } }
SDL_7:53:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): java.lang.String errMsg = \"DefaultIntervalCategoryDataset: the number \" + \"of series in the start value dataset does \" + \"not match the number of series in the end \" + \"value dataset.\"; throw new java.lang.IllegalArgumentException( errMsg );  =>   java.lang.String errMsg = \"DefaultIntervalCategoryDataset: the number \" + \"of series in the start value dataset does \" + \"not match the number of series in the end \" + \"value dataset.\";
SDL_8:55:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): if (seriesCount != ends.length) {     java.lang.String errMsg = \"DefaultIntervalCategoryDataset: the number \" + \"of series in the start value dataset does \" + \"not match the number of series in the end \" + \"value dataset.\";     throw new java.lang.IllegalArgumentException( errMsg ); }  =>   if (true) {     java.lang.String errMsg = \"DefaultIntervalCategoryDataset: the number \" + \"of series in the start value dataset does \" + \"not match the number of series in the end \" + \"value dataset.\";     throw new java.lang.IllegalArgumentException( errMsg ); }
SDL_9:70:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): if (seriesKeys != null) {     if (seriesKeys.length != seriesCount) {         throw new java.lang.IllegalArgumentException( \"The number of series keys does not \" + \"match the number of series in the data.\" );     }     this.seriesKeys = seriesKeys; } else {     java.lang.String prefix = resources.getString( \"series.default-prefix\" ) + \" \";     this.seriesKeys = generateKeys( seriesCount, prefix ); } int categoryCount = starts[0].length; if (categoryCount != ends[0].length) {     java.lang.String errMsg = \"DefaultIntervalCategoryDataset: the \" + \"number of categories in the start value \" + \"dataset does not match the number of \" + \"categories in the end value dataset.\";     throw new java.lang.IllegalArgumentException( errMsg ); } if (categoryKeys != null) {     if (categoryKeys.length != categoryCount) {         throw new java.lang.IllegalArgumentException( \"The number of category keys does not match \" + \"the number of categories in the data.\" );     }     this.categoryKeys = categoryKeys; } else {     java.lang.String prefix = resources.getString( \"categories.default-prefix\" ) + \" \";     this.categoryKeys = generateKeys( categoryCount, prefix ); }  =>   int categoryCount = starts[0].length; if (categoryCount != ends[0].length) {     java.lang.String errMsg = \"DefaultIntervalCategoryDataset: the \" + \"number of categories in the start value \" + \"dataset does not match the number of \" + \"categories in the end value dataset.\";     throw new java.lang.IllegalArgumentException( errMsg ); } if (categoryKeys != null) {     if (categoryKeys.length != categoryCount) {         throw new java.lang.IllegalArgumentException( \"The number of category keys does not match \" + \"the number of categories in the data.\" );     }     this.categoryKeys = categoryKeys; } else {     java.lang.String prefix = resources.getString( \"categories.default-prefix\" ) + \" \";     this.categoryKeys = generateKeys( categoryCount, prefix ); }
SDL_10:75:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): if (seriesKeys != null) {     if (seriesKeys.length != seriesCount) {         throw new java.lang.IllegalArgumentException( \"The number of series keys does not \" + \"match the number of series in the data.\" );     }     this.seriesKeys = seriesKeys; } else {     java.lang.String prefix = resources.getString( \"series.default-prefix\" ) + \" \";     this.seriesKeys = generateKeys( seriesCount, prefix ); } int categoryCount = starts[0].length; if (categoryCount != ends[0].length) {     java.lang.String errMsg = \"DefaultIntervalCategoryDataset: the \" + \"number of categories in the start value \" + \"dataset does not match the number of \" + \"categories in the end value dataset.\";     throw new java.lang.IllegalArgumentException( errMsg ); } if (categoryKeys != null) {     if (categoryKeys.length != categoryCount) {         throw new java.lang.IllegalArgumentException( \"The number of category keys does not match \" + \"the number of categories in the data.\" );     }     this.categoryKeys = categoryKeys; } else {     java.lang.String prefix = resources.getString( \"categories.default-prefix\" ) + \" \";     this.categoryKeys = generateKeys( categoryCount, prefix ); }  =>   if (seriesKeys != null) {     if (seriesKeys.length != seriesCount) {         throw new java.lang.IllegalArgumentException( \"The number of series keys does not \" + \"match the number of series in the data.\" );     }     this.seriesKeys = seriesKeys; } else {     java.lang.String prefix = resources.getString( \"series.default-prefix\" ) + \" \";     this.seriesKeys = generateKeys( seriesCount, prefix ); } int categoryCount = starts[0].length; if (categoryKeys != null) {     if (categoryKeys.length != categoryCount) {         throw new java.lang.IllegalArgumentException( \"The number of category keys does not match \" + \"the number of categories in the data.\" );     }     this.categoryKeys = categoryKeys; } else {     java.lang.String prefix = resources.getString( \"categories.default-prefix\" ) + \" \";     this.categoryKeys = generateKeys( categoryCount, prefix ); }
SDL_11:70:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): if (seriesKeys != null) {     if (seriesKeys.length != seriesCount) {         throw new java.lang.IllegalArgumentException( \"The number of series keys does not \" + \"match the number of series in the data.\" );     }     this.seriesKeys = seriesKeys; } else {     java.lang.String prefix = resources.getString( \"series.default-prefix\" ) + \" \";     this.seriesKeys = generateKeys( seriesCount, prefix ); } int categoryCount = starts[0].length; if (categoryCount != ends[0].length) {     java.lang.String errMsg = \"DefaultIntervalCategoryDataset: the \" + \"number of categories in the start value \" + \"dataset does not match the number of \" + \"categories in the end value dataset.\";     throw new java.lang.IllegalArgumentException( errMsg ); } if (categoryKeys != null) {     if (categoryKeys.length != categoryCount) {         throw new java.lang.IllegalArgumentException( \"The number of category keys does not match \" + \"the number of categories in the data.\" );     }     this.categoryKeys = categoryKeys; } else {     java.lang.String prefix = resources.getString( \"categories.default-prefix\" ) + \" \";     this.categoryKeys = generateKeys( categoryCount, prefix ); }  =>   if (seriesKeys != null) {     if (seriesKeys.length != seriesCount) {         throw new java.lang.IllegalArgumentException( \"The number of series keys does not \" + \"match the number of series in the data.\" );     }     this.seriesKeys = seriesKeys; } else {     java.lang.String prefix = resources.getString( \"series.default-prefix\" ) + \" \";     this.seriesKeys = generateKeys( seriesCount, prefix ); } int categoryCount = starts[0].length; if (categoryCount != ends[0].length) {     java.lang.String errMsg = \"DefaultIntervalCategoryDataset: the \" + \"number of categories in the start value \" + \"dataset does not match the number of \" + \"categories in the end value dataset.\";     throw new java.lang.IllegalArgumentException( errMsg ); }
SDL_12:83:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): if (seriesCount > 0) {     if (seriesKeys != null) {         if (seriesKeys.length != seriesCount) {             throw new java.lang.IllegalArgumentException( \"The number of series keys does not \" + \"match the number of series in the data.\" );         }         this.seriesKeys = seriesKeys;     } else {         java.lang.String prefix = resources.getString( \"series.default-prefix\" ) + \" \";         this.seriesKeys = generateKeys( seriesCount, prefix );     }     int categoryCount = starts[0].length;     if (categoryCount != ends[0].length) {         java.lang.String errMsg = \"DefaultIntervalCategoryDataset: the \" + \"number of categories in the start value \" + \"dataset does not match the number of \" + \"categories in the end value dataset.\";         throw new java.lang.IllegalArgumentException( errMsg );     }     if (categoryKeys != null) {         if (categoryKeys.length != categoryCount) {             throw new java.lang.IllegalArgumentException( \"The number of category keys does not match \" + \"the number of categories in the data.\" );         }         this.categoryKeys = categoryKeys;     } else {         java.lang.String prefix = resources.getString( \"categories.default-prefix\" ) + \" \";         this.categoryKeys = generateKeys( categoryCount, prefix );     } } else {     this.seriesKeys = null;     this.categoryKeys = null; }  =>   if (true) {     if (seriesKeys != null) {         if (seriesKeys.length != seriesCount) {             throw new java.lang.IllegalArgumentException( \"The number of series keys does not \" + \"match the number of series in the data.\" );         }         this.seriesKeys = seriesKeys;     } else {         java.lang.String prefix = resources.getString( \"series.default-prefix\" ) + \" \";         this.seriesKeys = generateKeys( seriesCount, prefix );     }     int categoryCount = starts[0].length;     if (categoryCount != ends[0].length) {         java.lang.String errMsg = \"DefaultIntervalCategoryDataset: the \" + \"number of categories in the start value \" + \"dataset does not match the number of \" + \"categories in the end value dataset.\";         throw new java.lang.IllegalArgumentException( errMsg );     }     if (categoryKeys != null) {         if (categoryKeys.length != categoryCount) {             throw new java.lang.IllegalArgumentException( \"The number of category keys does not match \" + \"the number of categories in the data.\" );         }         this.categoryKeys = categoryKeys;     } else {         java.lang.String prefix = resources.getString( \"categories.default-prefix\" ) + \" \";         this.categoryKeys = generateKeys( categoryCount, prefix );     } } else {     this.seriesKeys = null;     this.categoryKeys = null; }
SDL_13:81:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): this.seriesKeys = null; this.categoryKeys = null;  =>   this.categoryKeys = null;
SDL_14:81:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): this.seriesKeys = null; this.categoryKeys = null;  =>   this.seriesKeys = null;
SDL_15:58:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): if (seriesKeys.length != seriesCount) {     throw new java.lang.IllegalArgumentException( \"The number of series keys does not \" + \"match the number of series in the data.\" ); } this.seriesKeys = seriesKeys;  =>   this.seriesKeys = seriesKeys;
SDL_16:60:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): if (seriesKeys.length != seriesCount) {     throw new java.lang.IllegalArgumentException( \"The number of series keys does not \" + \"match the number of series in the data.\" ); } this.seriesKeys = seriesKeys;  =>   if (seriesKeys.length != seriesCount) {     throw new java.lang.IllegalArgumentException( \"The number of series keys does not \" + \"match the number of series in the data.\" ); }
SDL_17:65:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): if (seriesKeys != null) {     if (seriesKeys.length != seriesCount) {         throw new java.lang.IllegalArgumentException( \"The number of series keys does not \" + \"match the number of series in the data.\" );     }     this.seriesKeys = seriesKeys; } else {     java.lang.String prefix = resources.getString( \"series.default-prefix\" ) + \" \";     this.seriesKeys = generateKeys( seriesCount, prefix ); }  =>   if (true) {     if (seriesKeys.length != seriesCount) {         throw new java.lang.IllegalArgumentException( \"The number of series keys does not \" + \"match the number of series in the data.\" );     }     this.seriesKeys = seriesKeys; } else {     java.lang.String prefix = resources.getString( \"series.default-prefix\" ) + \" \";     this.seriesKeys = generateKeys( seriesCount, prefix ); }
SDL_18:63:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): java.lang.String prefix = resources.getString( \"series.default-prefix\" ) + \" \"; this.seriesKeys = generateKeys( seriesCount, prefix );  =>   java.lang.String prefix = resources.getString( \"series.default-prefix\" ) + \" \";
SDL_19:58:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): throw new java.lang.IllegalArgumentException( \"The number of series keys does not \" + \"match the number of series in the data.\" );  =>  
SDL_20:60:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): if (seriesKeys.length != seriesCount) {     throw new java.lang.IllegalArgumentException( \"The number of series keys does not \" + \"match the number of series in the data.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The number of series keys does not \" + \"match the number of series in the data.\" ); }
SDL_21:68:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): java.lang.String errMsg = \"DefaultIntervalCategoryDataset: the \" + \"number of categories in the start value \" + \"dataset does not match the number of \" + \"categories in the end value dataset.\"; throw new java.lang.IllegalArgumentException( errMsg );  =>   java.lang.String errMsg = \"DefaultIntervalCategoryDataset: the \" + \"number of categories in the start value \" + \"dataset does not match the number of \" + \"categories in the end value dataset.\";
SDL_22:70:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): if (categoryCount != ends[0].length) {     java.lang.String errMsg = \"DefaultIntervalCategoryDataset: the \" + \"number of categories in the start value \" + \"dataset does not match the number of \" + \"categories in the end value dataset.\";     throw new java.lang.IllegalArgumentException( errMsg ); }  =>   if (true) {     java.lang.String errMsg = \"DefaultIntervalCategoryDataset: the \" + \"number of categories in the start value \" + \"dataset does not match the number of \" + \"categories in the end value dataset.\";     throw new java.lang.IllegalArgumentException( errMsg ); }
SDL_23:72:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): if (categoryKeys.length != categoryCount) {     throw new java.lang.IllegalArgumentException( \"The number of category keys does not match \" + \"the number of categories in the data.\" ); } this.categoryKeys = categoryKeys;  =>   this.categoryKeys = categoryKeys;
SDL_24:74:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): if (categoryKeys.length != categoryCount) {     throw new java.lang.IllegalArgumentException( \"The number of category keys does not match \" + \"the number of categories in the data.\" ); } this.categoryKeys = categoryKeys;  =>   if (categoryKeys.length != categoryCount) {     throw new java.lang.IllegalArgumentException( \"The number of category keys does not match \" + \"the number of categories in the data.\" ); }
SDL_25:79:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): if (categoryKeys != null) {     if (categoryKeys.length != categoryCount) {         throw new java.lang.IllegalArgumentException( \"The number of category keys does not match \" + \"the number of categories in the data.\" );     }     this.categoryKeys = categoryKeys; } else {     java.lang.String prefix = resources.getString( \"categories.default-prefix\" ) + \" \";     this.categoryKeys = generateKeys( categoryCount, prefix ); }  =>   if (true) {     if (categoryKeys.length != categoryCount) {         throw new java.lang.IllegalArgumentException( \"The number of category keys does not match \" + \"the number of categories in the data.\" );     }     this.categoryKeys = categoryKeys; } else {     java.lang.String prefix = resources.getString( \"categories.default-prefix\" ) + \" \";     this.categoryKeys = generateKeys( categoryCount, prefix ); }
SDL_26:77:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): java.lang.String prefix = resources.getString( \"categories.default-prefix\" ) + \" \"; this.categoryKeys = generateKeys( categoryCount, prefix );  =>   java.lang.String prefix = resources.getString( \"categories.default-prefix\" ) + \" \";
SDL_27:72:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): throw new java.lang.IllegalArgumentException( \"The number of category keys does not match \" + \"the number of categories in the data.\" );  =>  
SDL_28:74:DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][]): if (categoryKeys.length != categoryCount) {     throw new java.lang.IllegalArgumentException( \"The number of category keys does not match \" + \"the number of categories in the data.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The number of category keys does not match \" + \"the number of categories in the data.\" ); }
SDL_29:90:int_getSeriesCount(): int result = 0; if (this.startData != null) {     result = this.startData.length; } return result;  =>   int result = 0; return result;
SDL_30:90:int_getSeriesCount(): result = this.startData.length;  =>  
SDL_31:92:int_getSeriesCount(): if (this.startData != null) {     result = this.startData.length; }  =>   if (true) {     result = this.startData.length; }
SDL_32:93:int_getSeriesCount(): return result;  =>   return 0;
SDL_33:99:int_getSeriesIndex(java.lang.Comparable): int result = -1; for (int i = 0; i < this.seriesKeys.length; i++) {     if (seriesKey.equals( this.seriesKeys[i] )) {         result = i;         break;     } } return result;  =>   int result = -1; return result;
SDL_34:99:int_getSeriesIndex(java.lang.Comparable): if (seriesKey.equals( this.seriesKeys[i] )) {     result = i;     break; }  =>  
SDL_35:104:int_getSeriesIndex(java.lang.Comparable): for (int i = 0; i < this.seriesKeys.length; i++) {     if (seriesKey.equals( this.seriesKeys[i] )) {         result = i;         break;     } }  =>   for (int i = 0;; i++) {     if (seriesKey.equals( this.seriesKeys[i] )) {         result = i;         break;     } }
SDL_36:104:int_getSeriesIndex(java.lang.Comparable): for (int i = 0; i < this.seriesKeys.length; i++) {     if (seriesKey.equals( this.seriesKeys[i] )) {         result = i;         break;     } }  =>   for (int i = 0; i < this.seriesKeys.length;) {     if (seriesKey.equals( this.seriesKeys[i] )) {         result = i;         break;     } }
SDL_37:101:int_getSeriesIndex(java.lang.Comparable): result = i; break;  =>   break;
SDL_38:101:int_getSeriesIndex(java.lang.Comparable): result = i; break;  =>   result = i;
SDL_39:103:int_getSeriesIndex(java.lang.Comparable): if (seriesKey.equals( this.seriesKeys[i] )) {     result = i;     break; }  =>   if (true) {     result = i;     break; }
SDL_40:105:int_getSeriesIndex(java.lang.Comparable): return result;  =>   return 0;
SDL_41:110:java.lang.Comparable_getSeriesKey(int): if (series >= getSeriesCount() || series < 0) {     throw new java.lang.IllegalArgumentException( \"No such series : \" + series ); } return this.seriesKeys[series];  =>   return this.seriesKeys[series];
SDL_42:110:java.lang.Comparable_getSeriesKey(int): throw new java.lang.IllegalArgumentException( \"No such series : \" + series );  =>  
SDL_43:112:java.lang.Comparable_getSeriesKey(int): if (series >= getSeriesCount() || series < 0) {     throw new java.lang.IllegalArgumentException( \"No such series : \" + series ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"No such series : \" + series ); }
SDL_44:122:void_setSeriesKeys(java.lang.Comparable[]): if (seriesKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'seriesKeys' argument.\" ); } if (seriesKeys.length != getSeriesCount()) {     throw new java.lang.IllegalArgumentException( \"The number of series keys does not match the data.\" ); } this.seriesKeys = seriesKeys; fireDatasetChanged();  =>   if (seriesKeys.length != getSeriesCount()) {     throw new java.lang.IllegalArgumentException( \"The number of series keys does not match the data.\" ); } this.seriesKeys = seriesKeys; fireDatasetChanged();
SDL_45:122:void_setSeriesKeys(java.lang.Comparable[]): if (seriesKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'seriesKeys' argument.\" ); } if (seriesKeys.length != getSeriesCount()) {     throw new java.lang.IllegalArgumentException( \"The number of series keys does not match the data.\" ); } this.seriesKeys = seriesKeys; fireDatasetChanged();  =>   if (seriesKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'seriesKeys' argument.\" ); } this.seriesKeys = seriesKeys; fireDatasetChanged();
SDL_46:124:void_setSeriesKeys(java.lang.Comparable[]): if (seriesKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'seriesKeys' argument.\" ); } if (seriesKeys.length != getSeriesCount()) {     throw new java.lang.IllegalArgumentException( \"The number of series keys does not match the data.\" ); } this.seriesKeys = seriesKeys; fireDatasetChanged();  =>   if (seriesKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'seriesKeys' argument.\" ); } if (seriesKeys.length != getSeriesCount()) {     throw new java.lang.IllegalArgumentException( \"The number of series keys does not match the data.\" ); } fireDatasetChanged();
SDL_47:124:void_setSeriesKeys(java.lang.Comparable[]): if (seriesKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'seriesKeys' argument.\" ); } if (seriesKeys.length != getSeriesCount()) {     throw new java.lang.IllegalArgumentException( \"The number of series keys does not match the data.\" ); } this.seriesKeys = seriesKeys; fireDatasetChanged();  =>   if (seriesKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'seriesKeys' argument.\" ); } if (seriesKeys.length != getSeriesCount()) {     throw new java.lang.IllegalArgumentException( \"The number of series keys does not match the data.\" ); } this.seriesKeys = seriesKeys;
SDL_48:118:void_setSeriesKeys(java.lang.Comparable[]): throw new java.lang.IllegalArgumentException( \"Null 'seriesKeys' argument.\" );  =>  
SDL_49:120:void_setSeriesKeys(java.lang.Comparable[]): if (seriesKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'seriesKeys' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'seriesKeys' argument.\" ); }
SDL_50:121:void_setSeriesKeys(java.lang.Comparable[]): throw new java.lang.IllegalArgumentException( \"The number of series keys does not match the data.\" );  =>  
SDL_51:123:void_setSeriesKeys(java.lang.Comparable[]): if (seriesKeys.length != getSeriesCount()) {     throw new java.lang.IllegalArgumentException( \"The number of series keys does not match the data.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The number of series keys does not match the data.\" ); }
SDL_52:131:int_getCategoryCount(): int result = 0; if (this.startData != null) {     if (getSeriesCount() > 0) {         result = this.startData[0].length;     } } return result;  =>   int result = 0; return result;
SDL_53:131:int_getCategoryCount(): if (getSeriesCount() > 0) {     result = this.startData[0].length; }  =>  
SDL_54:135:int_getCategoryCount(): if (this.startData != null) {     if (getSeriesCount() > 0) {         result = this.startData[0].length;     } }  =>   if (true) {     if (getSeriesCount() > 0) {         result = this.startData[0].length;     } }
SDL_55:132:int_getCategoryCount(): result = this.startData[0].length;  =>  
SDL_56:134:int_getCategoryCount(): if (getSeriesCount() > 0) {     result = this.startData[0].length; }  =>   if (true) {     result = this.startData[0].length; }
SDL_57:136:int_getCategoryCount(): return result;  =>   return 0;
SDL_58:140:java.util.List_getColumnKeys(): if (this.categoryKeys == null) {     return new java.util.ArrayList(); } else {     return Collections.unmodifiableList( Arrays.asList( this.categoryKeys ) ); }  =>  
SDL_59:145:java.util.List_getColumnKeys(): if (this.categoryKeys == null) {     return new java.util.ArrayList(); } else {     return Collections.unmodifiableList( Arrays.asList( this.categoryKeys ) ); }  =>   if (true) {     return new java.util.ArrayList(); } else {     return Collections.unmodifiableList( Arrays.asList( this.categoryKeys ) ); }
SDL_60:159:void_setCategoryKeys(java.lang.Comparable[]): if (categoryKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'categoryKeys' argument.\" ); } if (categoryKeys.length != this.startData[0].length) {     throw new java.lang.IllegalArgumentException( \"The number of categories does not match the data.\" ); } for (int i = 0; i < categoryKeys.length; i++) {     if (categoryKeys[i] == null) {         throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setCategoryKeys(): \" + \"null category not permitted.\" );     } } this.categoryKeys = categoryKeys; fireDatasetChanged();  =>   if (categoryKeys.length != this.startData[0].length) {     throw new java.lang.IllegalArgumentException( \"The number of categories does not match the data.\" ); } for (int i = 0; i < categoryKeys.length; i++) {     if (categoryKeys[i] == null) {         throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setCategoryKeys(): \" + \"null category not permitted.\" );     } } this.categoryKeys = categoryKeys; fireDatasetChanged();
SDL_61:159:void_setCategoryKeys(java.lang.Comparable[]): if (categoryKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'categoryKeys' argument.\" ); } if (categoryKeys.length != this.startData[0].length) {     throw new java.lang.IllegalArgumentException( \"The number of categories does not match the data.\" ); } for (int i = 0; i < categoryKeys.length; i++) {     if (categoryKeys[i] == null) {         throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setCategoryKeys(): \" + \"null category not permitted.\" );     } } this.categoryKeys = categoryKeys; fireDatasetChanged();  =>   if (categoryKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'categoryKeys' argument.\" ); } for (int i = 0; i < categoryKeys.length; i++) {     if (categoryKeys[i] == null) {         throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setCategoryKeys(): \" + \"null category not permitted.\" );     } } this.categoryKeys = categoryKeys; fireDatasetChanged();
SDL_62:157:void_setCategoryKeys(java.lang.Comparable[]): if (categoryKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'categoryKeys' argument.\" ); } if (categoryKeys.length != this.startData[0].length) {     throw new java.lang.IllegalArgumentException( \"The number of categories does not match the data.\" ); } for (int i = 0; i < categoryKeys.length; i++) {     if (categoryKeys[i] == null) {         throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setCategoryKeys(): \" + \"null category not permitted.\" );     } } this.categoryKeys = categoryKeys; fireDatasetChanged();  =>   if (categoryKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'categoryKeys' argument.\" ); } if (categoryKeys.length != this.startData[0].length) {     throw new java.lang.IllegalArgumentException( \"The number of categories does not match the data.\" ); } this.categoryKeys = categoryKeys; fireDatasetChanged();
SDL_63:161:void_setCategoryKeys(java.lang.Comparable[]): if (categoryKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'categoryKeys' argument.\" ); } if (categoryKeys.length != this.startData[0].length) {     throw new java.lang.IllegalArgumentException( \"The number of categories does not match the data.\" ); } for (int i = 0; i < categoryKeys.length; i++) {     if (categoryKeys[i] == null) {         throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setCategoryKeys(): \" + \"null category not permitted.\" );     } } this.categoryKeys = categoryKeys; fireDatasetChanged();  =>   if (categoryKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'categoryKeys' argument.\" ); } if (categoryKeys.length != this.startData[0].length) {     throw new java.lang.IllegalArgumentException( \"The number of categories does not match the data.\" ); } for (int i = 0; i < categoryKeys.length; i++) {     if (categoryKeys[i] == null) {         throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setCategoryKeys(): \" + \"null category not permitted.\" );     } } fireDatasetChanged();
SDL_64:161:void_setCategoryKeys(java.lang.Comparable[]): if (categoryKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'categoryKeys' argument.\" ); } if (categoryKeys.length != this.startData[0].length) {     throw new java.lang.IllegalArgumentException( \"The number of categories does not match the data.\" ); } for (int i = 0; i < categoryKeys.length; i++) {     if (categoryKeys[i] == null) {         throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setCategoryKeys(): \" + \"null category not permitted.\" );     } } this.categoryKeys = categoryKeys; fireDatasetChanged();  =>   if (categoryKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'categoryKeys' argument.\" ); } if (categoryKeys.length != this.startData[0].length) {     throw new java.lang.IllegalArgumentException( \"The number of categories does not match the data.\" ); } for (int i = 0; i < categoryKeys.length; i++) {     if (categoryKeys[i] == null) {         throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setCategoryKeys(): \" + \"null category not permitted.\" );     } } this.categoryKeys = categoryKeys;
SDL_65:150:void_setCategoryKeys(java.lang.Comparable[]): throw new java.lang.IllegalArgumentException( \"Null 'categoryKeys' argument.\" );  =>  
SDL_66:152:void_setCategoryKeys(java.lang.Comparable[]): if (categoryKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'categoryKeys' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'categoryKeys' argument.\" ); }
SDL_67:153:void_setCategoryKeys(java.lang.Comparable[]): throw new java.lang.IllegalArgumentException( \"The number of categories does not match the data.\" );  =>  
SDL_68:155:void_setCategoryKeys(java.lang.Comparable[]): if (categoryKeys.length != this.startData[0].length) {     throw new java.lang.IllegalArgumentException( \"The number of categories does not match the data.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The number of categories does not match the data.\" ); }
SDL_69:156:void_setCategoryKeys(java.lang.Comparable[]): if (categoryKeys[i] == null) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setCategoryKeys(): \" + \"null category not permitted.\" ); }  =>  
SDL_70:160:void_setCategoryKeys(java.lang.Comparable[]): for (int i = 0; i < categoryKeys.length; i++) {     if (categoryKeys[i] == null) {         throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setCategoryKeys(): \" + \"null category not permitted.\" );     } }  =>   for (int i = 0;; i++) {     if (categoryKeys[i] == null) {         throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setCategoryKeys(): \" + \"null category not permitted.\" );     } }
SDL_71:160:void_setCategoryKeys(java.lang.Comparable[]): for (int i = 0; i < categoryKeys.length; i++) {     if (categoryKeys[i] == null) {         throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setCategoryKeys(): \" + \"null category not permitted.\" );     } }  =>   for (int i = 0; i < categoryKeys.length;) {     if (categoryKeys[i] == null) {         throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setCategoryKeys(): \" + \"null category not permitted.\" );     } }
SDL_72:157:void_setCategoryKeys(java.lang.Comparable[]): throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setCategoryKeys(): \" + \"null category not permitted.\" );  =>  
SDL_73:159:void_setCategoryKeys(java.lang.Comparable[]): if (categoryKeys[i] == null) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setCategoryKeys(): \" + \"null category not permitted.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setCategoryKeys(): \" + \"null category not permitted.\" ); }
SDL_74:172:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): int seriesIndex = getSeriesIndex( series ); if (seriesIndex < 0) {     throw new org.jfree.data.UnknownKeyException( \"Unknown 'series' key.\" ); } int itemIndex = getColumnIndex( category ); if (itemIndex < 0) {     throw new org.jfree.data.UnknownKeyException( \"Unknown 'category' key.\" ); } return getValue( seriesIndex, itemIndex );  =>   int seriesIndex = getSeriesIndex( series ); int itemIndex = getColumnIndex( category ); if (itemIndex < 0) {     throw new org.jfree.data.UnknownKeyException( \"Unknown 'category' key.\" ); } return getValue( seriesIndex, itemIndex );
SDL_75:172:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): int seriesIndex = getSeriesIndex( series ); if (seriesIndex < 0) {     throw new org.jfree.data.UnknownKeyException( \"Unknown 'series' key.\" ); } int itemIndex = getColumnIndex( category ); if (itemIndex < 0) {     throw new org.jfree.data.UnknownKeyException( \"Unknown 'category' key.\" ); } return getValue( seriesIndex, itemIndex );  =>   int seriesIndex = getSeriesIndex( series ); if (seriesIndex < 0) {     throw new org.jfree.data.UnknownKeyException( \"Unknown 'series' key.\" ); } int itemIndex = getColumnIndex( category ); return getValue( seriesIndex, itemIndex );
SDL_76:168:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): throw new org.jfree.data.UnknownKeyException( \"Unknown 'series' key.\" );  =>  
SDL_77:170:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): if (seriesIndex < 0) {     throw new org.jfree.data.UnknownKeyException( \"Unknown 'series' key.\" ); }  =>   if (true) {     throw new org.jfree.data.UnknownKeyException( \"Unknown 'series' key.\" ); }
SDL_78:172:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): throw new org.jfree.data.UnknownKeyException( \"Unknown 'category' key.\" );  =>  
SDL_79:174:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): if (itemIndex < 0) {     throw new org.jfree.data.UnknownKeyException( \"Unknown 'category' key.\" ); }  =>   if (true) {     throw new org.jfree.data.UnknownKeyException( \"Unknown 'category' key.\" ); }
SDL_80:190:java.lang.Number_getStartValue(java.lang.Comparable,java.lang.Comparable): int seriesIndex = getSeriesIndex( series ); if (seriesIndex < 0) {     throw new org.jfree.data.UnknownKeyException( \"Unknown 'series' key.\" ); } int itemIndex = getColumnIndex( category ); if (itemIndex < 0) {     throw new org.jfree.data.UnknownKeyException( \"Unknown 'category' key.\" ); } return getStartValue( seriesIndex, itemIndex );  =>   int seriesIndex = getSeriesIndex( series ); int itemIndex = getColumnIndex( category ); if (itemIndex < 0) {     throw new org.jfree.data.UnknownKeyException( \"Unknown 'category' key.\" ); } return getStartValue( seriesIndex, itemIndex );
SDL_81:190:java.lang.Number_getStartValue(java.lang.Comparable,java.lang.Comparable): int seriesIndex = getSeriesIndex( series ); if (seriesIndex < 0) {     throw new org.jfree.data.UnknownKeyException( \"Unknown 'series' key.\" ); } int itemIndex = getColumnIndex( category ); if (itemIndex < 0) {     throw new org.jfree.data.UnknownKeyException( \"Unknown 'category' key.\" ); } return getStartValue( seriesIndex, itemIndex );  =>   int seriesIndex = getSeriesIndex( series ); if (seriesIndex < 0) {     throw new org.jfree.data.UnknownKeyException( \"Unknown 'series' key.\" ); } int itemIndex = getColumnIndex( category ); return getStartValue( seriesIndex, itemIndex );
SDL_82:186:java.lang.Number_getStartValue(java.lang.Comparable,java.lang.Comparable): throw new org.jfree.data.UnknownKeyException( \"Unknown 'series' key.\" );  =>  
SDL_83:188:java.lang.Number_getStartValue(java.lang.Comparable,java.lang.Comparable): if (seriesIndex < 0) {     throw new org.jfree.data.UnknownKeyException( \"Unknown 'series' key.\" ); }  =>   if (true) {     throw new org.jfree.data.UnknownKeyException( \"Unknown 'series' key.\" ); }
SDL_84:190:java.lang.Number_getStartValue(java.lang.Comparable,java.lang.Comparable): throw new org.jfree.data.UnknownKeyException( \"Unknown 'category' key.\" );  =>  
SDL_85:192:java.lang.Number_getStartValue(java.lang.Comparable,java.lang.Comparable): if (itemIndex < 0) {     throw new org.jfree.data.UnknownKeyException( \"Unknown 'category' key.\" ); }  =>   if (true) {     throw new org.jfree.data.UnknownKeyException( \"Unknown 'category' key.\" ); }
SDL_86:201:java.lang.Number_getStartValue(int,int): if (series < 0 || series >= getSeriesCount()) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.getValue(): \" + \"series index out of range.\" ); } if (category < 0 || category >= getCategoryCount()) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.getValue(): \" + \"category index out of range.\" ); } return this.startData[series][category];  =>   if (category < 0 || category >= getCategoryCount()) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.getValue(): \" + \"category index out of range.\" ); } return this.startData[series][category];
SDL_87:201:java.lang.Number_getStartValue(int,int): if (series < 0 || series >= getSeriesCount()) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.getValue(): \" + \"series index out of range.\" ); } if (category < 0 || category >= getCategoryCount()) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.getValue(): \" + \"category index out of range.\" ); } return this.startData[series][category];  =>   if (series < 0 || series >= getSeriesCount()) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.getValue(): \" + \"series index out of range.\" ); } return this.startData[series][category];
SDL_88:198:java.lang.Number_getStartValue(int,int): throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.getValue(): \" + \"series index out of range.\" );  =>  
SDL_89:200:java.lang.Number_getStartValue(int,int): if (series < 0 || series >= getSeriesCount()) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.getValue(): \" + \"series index out of range.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.getValue(): \" + \"series index out of range.\" ); }
SDL_90:201:java.lang.Number_getStartValue(int,int): throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.getValue(): \" + \"category index out of range.\" );  =>  
SDL_91:203:java.lang.Number_getStartValue(int,int): if (category < 0 || category >= getCategoryCount()) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.getValue(): \" + \"category index out of range.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.getValue(): \" + \"category index out of range.\" ); }
SDL_92:214:java.lang.Number_getEndValue(java.lang.Comparable,java.lang.Comparable): int seriesIndex = getSeriesIndex( series ); if (seriesIndex < 0) {     throw new org.jfree.data.UnknownKeyException( \"Unknown 'series' key.\" ); } int itemIndex = getColumnIndex( category ); if (itemIndex < 0) {     throw new org.jfree.data.UnknownKeyException( \"Unknown 'category' key.\" ); } return getEndValue( seriesIndex, itemIndex );  =>   int seriesIndex = getSeriesIndex( series ); int itemIndex = getColumnIndex( category ); if (itemIndex < 0) {     throw new org.jfree.data.UnknownKeyException( \"Unknown 'category' key.\" ); } return getEndValue( seriesIndex, itemIndex );
SDL_93:214:java.lang.Number_getEndValue(java.lang.Comparable,java.lang.Comparable): int seriesIndex = getSeriesIndex( series ); if (seriesIndex < 0) {     throw new org.jfree.data.UnknownKeyException( \"Unknown 'series' key.\" ); } int itemIndex = getColumnIndex( category ); if (itemIndex < 0) {     throw new org.jfree.data.UnknownKeyException( \"Unknown 'category' key.\" ); } return getEndValue( seriesIndex, itemIndex );  =>   int seriesIndex = getSeriesIndex( series ); if (seriesIndex < 0) {     throw new org.jfree.data.UnknownKeyException( \"Unknown 'series' key.\" ); } int itemIndex = getColumnIndex( category ); return getEndValue( seriesIndex, itemIndex );
SDL_94:210:java.lang.Number_getEndValue(java.lang.Comparable,java.lang.Comparable): throw new org.jfree.data.UnknownKeyException( \"Unknown 'series' key.\" );  =>  
SDL_95:212:java.lang.Number_getEndValue(java.lang.Comparable,java.lang.Comparable): if (seriesIndex < 0) {     throw new org.jfree.data.UnknownKeyException( \"Unknown 'series' key.\" ); }  =>   if (true) {     throw new org.jfree.data.UnknownKeyException( \"Unknown 'series' key.\" ); }
SDL_96:214:java.lang.Number_getEndValue(java.lang.Comparable,java.lang.Comparable): throw new org.jfree.data.UnknownKeyException( \"Unknown 'category' key.\" );  =>  
SDL_97:216:java.lang.Number_getEndValue(java.lang.Comparable,java.lang.Comparable): if (itemIndex < 0) {     throw new org.jfree.data.UnknownKeyException( \"Unknown 'category' key.\" ); }  =>   if (true) {     throw new org.jfree.data.UnknownKeyException( \"Unknown 'category' key.\" ); }
SDL_98:225:java.lang.Number_getEndValue(int,int): if (series < 0 || series >= getSeriesCount()) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.getValue(): \" + \"series index out of range.\" ); } if (category < 0 || category >= getCategoryCount()) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.getValue(): \" + \"category index out of range.\" ); } return this.endData[series][category];  =>   if (category < 0 || category >= getCategoryCount()) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.getValue(): \" + \"category index out of range.\" ); } return this.endData[series][category];
SDL_99:225:java.lang.Number_getEndValue(int,int): if (series < 0 || series >= getSeriesCount()) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.getValue(): \" + \"series index out of range.\" ); } if (category < 0 || category >= getCategoryCount()) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.getValue(): \" + \"category index out of range.\" ); } return this.endData[series][category];  =>   if (series < 0 || series >= getSeriesCount()) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.getValue(): \" + \"series index out of range.\" ); } return this.endData[series][category];
SDL_100:222:java.lang.Number_getEndValue(int,int): throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.getValue(): \" + \"series index out of range.\" );  =>  
SDL_101:224:java.lang.Number_getEndValue(int,int): if (series < 0 || series >= getSeriesCount()) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.getValue(): \" + \"series index out of range.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.getValue(): \" + \"series index out of range.\" ); }
SDL_102:225:java.lang.Number_getEndValue(int,int): throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.getValue(): \" + \"category index out of range.\" );  =>  
SDL_103:227:java.lang.Number_getEndValue(int,int): if (category < 0 || category >= getCategoryCount()) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.getValue(): \" + \"category index out of range.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.getValue(): \" + \"category index out of range.\" ); }
SDL_104:238:void_setStartValue(int,java.lang.Comparable,java.lang.Number): if (series < 0 || series > getSeriesCount() - 1) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"series outside valid range.\" ); } int categoryIndex = getCategoryIndex( category ); if (categoryIndex < 0) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"unrecognised category.\" ); } this.startData[series][categoryIndex] = value; fireDatasetChanged();  =>   int categoryIndex = getCategoryIndex( category ); if (categoryIndex < 0) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"unrecognised category.\" ); } this.startData[series][categoryIndex] = value; fireDatasetChanged();
SDL_105:238:void_setStartValue(int,java.lang.Comparable,java.lang.Number): if (series < 0 || series > getSeriesCount() - 1) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"series outside valid range.\" ); } int categoryIndex = getCategoryIndex( category ); if (categoryIndex < 0) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"unrecognised category.\" ); } this.startData[series][categoryIndex] = value; fireDatasetChanged();  =>   if (series < 0 || series > getSeriesCount() - 1) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"series outside valid range.\" ); } int categoryIndex = getCategoryIndex( category ); this.startData[series][categoryIndex] = value; fireDatasetChanged();
SDL_106:240:void_setStartValue(int,java.lang.Comparable,java.lang.Number): if (series < 0 || series > getSeriesCount() - 1) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"series outside valid range.\" ); } int categoryIndex = getCategoryIndex( category ); if (categoryIndex < 0) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"unrecognised category.\" ); } this.startData[series][categoryIndex] = value; fireDatasetChanged();  =>   if (series < 0 || series > getSeriesCount() - 1) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"series outside valid range.\" ); } int categoryIndex = getCategoryIndex( category ); if (categoryIndex < 0) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"unrecognised category.\" ); } fireDatasetChanged();
SDL_107:240:void_setStartValue(int,java.lang.Comparable,java.lang.Number): if (series < 0 || series > getSeriesCount() - 1) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"series outside valid range.\" ); } int categoryIndex = getCategoryIndex( category ); if (categoryIndex < 0) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"unrecognised category.\" ); } this.startData[series][categoryIndex] = value; fireDatasetChanged();  =>   if (series < 0 || series > getSeriesCount() - 1) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"series outside valid range.\" ); } int categoryIndex = getCategoryIndex( category ); if (categoryIndex < 0) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"unrecognised category.\" ); } this.startData[series][categoryIndex] = value;
SDL_108:233:void_setStartValue(int,java.lang.Comparable,java.lang.Number): throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"series outside valid range.\" );  =>  
SDL_109:235:void_setStartValue(int,java.lang.Comparable,java.lang.Number): if (series < 0 || series > getSeriesCount() - 1) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"series outside valid range.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"series outside valid range.\" ); }
SDL_110:237:void_setStartValue(int,java.lang.Comparable,java.lang.Number): throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"unrecognised category.\" );  =>  
SDL_111:239:void_setStartValue(int,java.lang.Comparable,java.lang.Number): if (categoryIndex < 0) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"unrecognised category.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"unrecognised category.\" ); }
SDL_112:251:void_setEndValue(int,java.lang.Comparable,java.lang.Number): if (series < 0 || series > getSeriesCount() - 1) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"series outside valid range.\" ); } int categoryIndex = getCategoryIndex( category ); if (categoryIndex < 0) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"unrecognised category.\" ); } this.endData[series][categoryIndex] = value; fireDatasetChanged();  =>   int categoryIndex = getCategoryIndex( category ); if (categoryIndex < 0) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"unrecognised category.\" ); } this.endData[series][categoryIndex] = value; fireDatasetChanged();
SDL_113:251:void_setEndValue(int,java.lang.Comparable,java.lang.Number): if (series < 0 || series > getSeriesCount() - 1) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"series outside valid range.\" ); } int categoryIndex = getCategoryIndex( category ); if (categoryIndex < 0) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"unrecognised category.\" ); } this.endData[series][categoryIndex] = value; fireDatasetChanged();  =>   if (series < 0 || series > getSeriesCount() - 1) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"series outside valid range.\" ); } int categoryIndex = getCategoryIndex( category ); this.endData[series][categoryIndex] = value; fireDatasetChanged();
SDL_114:253:void_setEndValue(int,java.lang.Comparable,java.lang.Number): if (series < 0 || series > getSeriesCount() - 1) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"series outside valid range.\" ); } int categoryIndex = getCategoryIndex( category ); if (categoryIndex < 0) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"unrecognised category.\" ); } this.endData[series][categoryIndex] = value; fireDatasetChanged();  =>   if (series < 0 || series > getSeriesCount() - 1) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"series outside valid range.\" ); } int categoryIndex = getCategoryIndex( category ); if (categoryIndex < 0) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"unrecognised category.\" ); } fireDatasetChanged();
SDL_115:253:void_setEndValue(int,java.lang.Comparable,java.lang.Number): if (series < 0 || series > getSeriesCount() - 1) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"series outside valid range.\" ); } int categoryIndex = getCategoryIndex( category ); if (categoryIndex < 0) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"unrecognised category.\" ); } this.endData[series][categoryIndex] = value; fireDatasetChanged();  =>   if (series < 0 || series > getSeriesCount() - 1) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"series outside valid range.\" ); } int categoryIndex = getCategoryIndex( category ); if (categoryIndex < 0) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"unrecognised category.\" ); } this.endData[series][categoryIndex] = value;
SDL_116:246:void_setEndValue(int,java.lang.Comparable,java.lang.Number): throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"series outside valid range.\" );  =>  
SDL_117:248:void_setEndValue(int,java.lang.Comparable,java.lang.Number): if (series < 0 || series > getSeriesCount() - 1) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"series outside valid range.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"series outside valid range.\" ); }
SDL_118:250:void_setEndValue(int,java.lang.Comparable,java.lang.Number): throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"unrecognised category.\" );  =>  
SDL_119:252:void_setEndValue(int,java.lang.Comparable,java.lang.Number): if (categoryIndex < 0) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"unrecognised category.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"DefaultIntervalCategoryDataset.setValue: \" + \"unrecognised category.\" ); }
SDL_120:260:int_getCategoryIndex(java.lang.Comparable): int result = -1; for (int i = 0; i < this.categoryKeys.length; i++) {     if (category.equals( this.categoryKeys[i] )) {         result = i;         break;     } } return result;  =>   int result = -1; return result;
SDL_121:260:int_getCategoryIndex(java.lang.Comparable): if (category.equals( this.categoryKeys[i] )) {     result = i;     break; }  =>  
SDL_122:265:int_getCategoryIndex(java.lang.Comparable): for (int i = 0; i < this.categoryKeys.length; i++) {     if (category.equals( this.categoryKeys[i] )) {         result = i;         break;     } }  =>   for (int i = 0;; i++) {     if (category.equals( this.categoryKeys[i] )) {         result = i;         break;     } }
SDL_123:265:int_getCategoryIndex(java.lang.Comparable): for (int i = 0; i < this.categoryKeys.length; i++) {     if (category.equals( this.categoryKeys[i] )) {         result = i;         break;     } }  =>   for (int i = 0; i < this.categoryKeys.length;) {     if (category.equals( this.categoryKeys[i] )) {         result = i;         break;     } }
SDL_124:262:int_getCategoryIndex(java.lang.Comparable): result = i; break;  =>   break;
SDL_125:262:int_getCategoryIndex(java.lang.Comparable): result = i; break;  =>   result = i;
SDL_126:264:int_getCategoryIndex(java.lang.Comparable): if (category.equals( this.categoryKeys[i] )) {     result = i;     break; }  =>   if (true) {     result = i;     break; }
SDL_127:266:int_getCategoryIndex(java.lang.Comparable): return result;  =>   return 0;
SDL_128:273:java.lang.Comparable[]_generateKeys(int,java.lang.String): java.lang.Comparable[] result = new java.lang.Comparable[count]; java.lang.String name; for (int i = 0; i < count; i++) {     name = prefix + (i + 1);     result[i] = name; } return result;  =>   java.lang.Comparable[] result = new java.lang.Comparable[count]; java.lang.String name; return result;
SDL_129:274:java.lang.Comparable[]_generateKeys(int,java.lang.String): name = prefix + (i + 1); result[i] = name;  =>   result[i] = name;
SDL_130:274:java.lang.Comparable[]_generateKeys(int,java.lang.String): name = prefix + (i + 1); result[i] = name;  =>   name = prefix + (i + 1);
SDL_131:276:java.lang.Comparable[]_generateKeys(int,java.lang.String): for (int i = 0; i < count; i++) {     name = prefix + (i + 1);     result[i] = name; }  =>   for (int i = 0;; i++) {     name = prefix + (i + 1);     result[i] = name; }
SDL_132:276:java.lang.Comparable[]_generateKeys(int,java.lang.String): for (int i = 0; i < count; i++) {     name = prefix + (i + 1);     result[i] = name; }  =>   for (int i = 0; i < count;) {     name = prefix + (i + 1);     result[i] = name; }
SDL_133:287:int_getColumnIndex(java.lang.Comparable): if (columnKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" ); } return getCategoryIndex( columnKey );  =>   return getCategoryIndex( columnKey );
SDL_134:287:int_getColumnIndex(java.lang.Comparable): throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" );  =>  
SDL_135:289:int_getColumnIndex(java.lang.Comparable): if (columnKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" ); }
SDL_136:290:int_getColumnIndex(java.lang.Comparable): return getCategoryIndex( columnKey );  =>   return 0;
SDL_137:295:int_getRowIndex(java.lang.Comparable): return getSeriesIndex( rowKey );  =>   return 0;
SDL_138:299:java.util.List_getRowKeys(): if (this.seriesKeys == null) {     return new java.util.ArrayList(); } else {     return Collections.unmodifiableList( Arrays.asList( this.seriesKeys ) ); }  =>  
SDL_139:304:java.util.List_getRowKeys(): if (this.seriesKeys == null) {     return new java.util.ArrayList(); } else {     return Collections.unmodifiableList( Arrays.asList( this.seriesKeys ) ); }  =>   if (true) {     return new java.util.ArrayList(); } else {     return Collections.unmodifiableList( Arrays.asList( this.seriesKeys ) ); }
SDL_140:309:java.lang.Comparable_getRowKey(int): if (row >= getRowCount() || row < 0) {     throw new java.lang.IllegalArgumentException( \"The 'row' argument is out of bounds.\" ); } return this.seriesKeys[row];  =>   return this.seriesKeys[row];
SDL_141:309:java.lang.Comparable_getRowKey(int): throw new java.lang.IllegalArgumentException( \"The 'row' argument is out of bounds.\" );  =>  
SDL_142:311:java.lang.Comparable_getRowKey(int): if (row >= getRowCount() || row < 0) {     throw new java.lang.IllegalArgumentException( \"The 'row' argument is out of bounds.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The 'row' argument is out of bounds.\" ); }
SDL_143:317:int_getColumnCount(): return this.categoryKeys.length;  =>   return 0;
SDL_144:322:int_getRowCount(): return this.seriesKeys.length;  =>   return 0;
SDL_145:343:boolean_equals(java.lang.Object): if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.category.DefaultIntervalCategoryDataset)) {     return false; } org.jfree.data.category.DefaultIntervalCategoryDataset that = (org.jfree.data.category.DefaultIntervalCategoryDataset) obj; if (!Arrays.equals( this.seriesKeys, that.seriesKeys )) {     return false; } if (!Arrays.equals( this.categoryKeys, that.categoryKeys )) {     return false; } if (!equal( this.startData, that.startData )) {     return false; } if (!equal( this.endData, that.endData )) {     return false; } return true;  =>   if (!(obj instanceof org.jfree.data.category.DefaultIntervalCategoryDataset)) {     return false; } org.jfree.data.category.DefaultIntervalCategoryDataset that = (org.jfree.data.category.DefaultIntervalCategoryDataset) obj; if (!Arrays.equals( this.seriesKeys, that.seriesKeys )) {     return false; } if (!Arrays.equals( this.categoryKeys, that.categoryKeys )) {     return false; } if (!equal( this.startData, that.startData )) {     return false; } if (!equal( this.endData, that.endData )) {     return false; } return true;
SDL_146:343:boolean_equals(java.lang.Object): if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.category.DefaultIntervalCategoryDataset)) {     return false; } org.jfree.data.category.DefaultIntervalCategoryDataset that = (org.jfree.data.category.DefaultIntervalCategoryDataset) obj; if (!Arrays.equals( this.seriesKeys, that.seriesKeys )) {     return false; } if (!Arrays.equals( this.categoryKeys, that.categoryKeys )) {     return false; } if (!equal( this.startData, that.startData )) {     return false; } if (!equal( this.endData, that.endData )) {     return false; } return true;  =>   if (obj == this) {     return true; } org.jfree.data.category.DefaultIntervalCategoryDataset that = (org.jfree.data.category.DefaultIntervalCategoryDataset) obj; if (!Arrays.equals( this.seriesKeys, that.seriesKeys )) {     return false; } if (!Arrays.equals( this.categoryKeys, that.categoryKeys )) {     return false; } if (!equal( this.startData, that.startData )) {     return false; } if (!equal( this.endData, that.endData )) {     return false; } return true;
SDL_147:343:boolean_equals(java.lang.Object): if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.category.DefaultIntervalCategoryDataset)) {     return false; } org.jfree.data.category.DefaultIntervalCategoryDataset that = (org.jfree.data.category.DefaultIntervalCategoryDataset) obj; if (!Arrays.equals( this.seriesKeys, that.seriesKeys )) {     return false; } if (!Arrays.equals( this.categoryKeys, that.categoryKeys )) {     return false; } if (!equal( this.startData, that.startData )) {     return false; } if (!equal( this.endData, that.endData )) {     return false; } return true;  =>   if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.category.DefaultIntervalCategoryDataset)) {     return false; } org.jfree.data.category.DefaultIntervalCategoryDataset that = (org.jfree.data.category.DefaultIntervalCategoryDataset) obj; if (!Arrays.equals( this.categoryKeys, that.categoryKeys )) {     return false; } if (!equal( this.startData, that.startData )) {     return false; } if (!equal( this.endData, that.endData )) {     return false; } return true;
SDL_148:343:boolean_equals(java.lang.Object): if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.category.DefaultIntervalCategoryDataset)) {     return false; } org.jfree.data.category.DefaultIntervalCategoryDataset that = (org.jfree.data.category.DefaultIntervalCategoryDataset) obj; if (!Arrays.equals( this.seriesKeys, that.seriesKeys )) {     return false; } if (!Arrays.equals( this.categoryKeys, that.categoryKeys )) {     return false; } if (!equal( this.startData, that.startData )) {     return false; } if (!equal( this.endData, that.endData )) {     return false; } return true;  =>   if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.category.DefaultIntervalCategoryDataset)) {     return false; } org.jfree.data.category.DefaultIntervalCategoryDataset that = (org.jfree.data.category.DefaultIntervalCategoryDataset) obj; if (!Arrays.equals( this.seriesKeys, that.seriesKeys )) {     return false; } if (!equal( this.startData, that.startData )) {     return false; } if (!equal( this.endData, that.endData )) {     return false; } return true;
SDL_149:343:boolean_equals(java.lang.Object): if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.category.DefaultIntervalCategoryDataset)) {     return false; } org.jfree.data.category.DefaultIntervalCategoryDataset that = (org.jfree.data.category.DefaultIntervalCategoryDataset) obj; if (!Arrays.equals( this.seriesKeys, that.seriesKeys )) {     return false; } if (!Arrays.equals( this.categoryKeys, that.categoryKeys )) {     return false; } if (!equal( this.startData, that.startData )) {     return false; } if (!equal( this.endData, that.endData )) {     return false; } return true;  =>   if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.category.DefaultIntervalCategoryDataset)) {     return false; } org.jfree.data.category.DefaultIntervalCategoryDataset that = (org.jfree.data.category.DefaultIntervalCategoryDataset) obj; if (!Arrays.equals( this.seriesKeys, that.seriesKeys )) {     return false; } if (!Arrays.equals( this.categoryKeys, that.categoryKeys )) {     return false; } if (!equal( this.endData, that.endData )) {     return false; } return true;
SDL_150:343:boolean_equals(java.lang.Object): if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.category.DefaultIntervalCategoryDataset)) {     return false; } org.jfree.data.category.DefaultIntervalCategoryDataset that = (org.jfree.data.category.DefaultIntervalCategoryDataset) obj; if (!Arrays.equals( this.seriesKeys, that.seriesKeys )) {     return false; } if (!Arrays.equals( this.categoryKeys, that.categoryKeys )) {     return false; } if (!equal( this.startData, that.startData )) {     return false; } if (!equal( this.endData, that.endData )) {     return false; } return true;  =>   if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.category.DefaultIntervalCategoryDataset)) {     return false; } org.jfree.data.category.DefaultIntervalCategoryDataset that = (org.jfree.data.category.DefaultIntervalCategoryDataset) obj; if (!Arrays.equals( this.seriesKeys, that.seriesKeys )) {     return false; } if (!Arrays.equals( this.categoryKeys, that.categoryKeys )) {     return false; } if (!equal( this.startData, that.startData )) {     return false; } return true;
SDL_151:329:boolean_equals(java.lang.Object): if (obj == this) {     return true; }  =>   if (true) {     return true; }
SDL_152:328:boolean_equals(java.lang.Object): return true;  =>   return false;
SDL_153:332:boolean_equals(java.lang.Object): if (!(obj instanceof org.jfree.data.category.DefaultIntervalCategoryDataset)) {     return false; }  =>   if (true) {     return false; }
SDL_154:331:boolean_equals(java.lang.Object): return false;  =>   return true;
SDL_155:336:boolean_equals(java.lang.Object): if (!Arrays.equals( this.seriesKeys, that.seriesKeys )) {     return false; }  =>   if (true) {     return false; }
SDL_156:335:boolean_equals(java.lang.Object): return false;  =>   return true;
SDL_157:339:boolean_equals(java.lang.Object): if (!Arrays.equals( this.categoryKeys, that.categoryKeys )) {     return false; }  =>   if (true) {     return false; }
SDL_158:338:boolean_equals(java.lang.Object): return false;  =>   return true;
SDL_159:342:boolean_equals(java.lang.Object): if (!equal( this.startData, that.startData )) {     return false; }  =>   if (true) {     return false; }
SDL_160:341:boolean_equals(java.lang.Object): return false;  =>   return true;
SDL_161:345:boolean_equals(java.lang.Object): if (!equal( this.endData, that.endData )) {     return false; }  =>   if (true) {     return false; }
SDL_162:344:boolean_equals(java.lang.Object): return false;  =>   return true;
SDL_163:346:boolean_equals(java.lang.Object): return true;  =>   return false;
SDL_164:356:java.lang.Object_clone(): org.jfree.data.category.DefaultIntervalCategoryDataset clone = (org.jfree.data.category.DefaultIntervalCategoryDataset) super.clone(); clone.categoryKeys = (java.lang.Comparable[]) this.categoryKeys.clone(); clone.seriesKeys = (java.lang.Comparable[]) this.seriesKeys.clone(); clone.startData = clone( this.startData ); clone.endData = clone( this.endData ); return clone;  =>   org.jfree.data.category.DefaultIntervalCategoryDataset clone = (org.jfree.data.category.DefaultIntervalCategoryDataset) super.clone(); clone.seriesKeys = (java.lang.Comparable[]) this.seriesKeys.clone(); clone.startData = clone( this.startData ); clone.endData = clone( this.endData ); return clone;
SDL_165:356:java.lang.Object_clone(): org.jfree.data.category.DefaultIntervalCategoryDataset clone = (org.jfree.data.category.DefaultIntervalCategoryDataset) super.clone(); clone.categoryKeys = (java.lang.Comparable[]) this.categoryKeys.clone(); clone.seriesKeys = (java.lang.Comparable[]) this.seriesKeys.clone(); clone.startData = clone( this.startData ); clone.endData = clone( this.endData ); return clone;  =>   org.jfree.data.category.DefaultIntervalCategoryDataset clone = (org.jfree.data.category.DefaultIntervalCategoryDataset) super.clone(); clone.categoryKeys = (java.lang.Comparable[]) this.categoryKeys.clone(); clone.startData = clone( this.startData ); clone.endData = clone( this.endData ); return clone;
SDL_166:356:java.lang.Object_clone(): org.jfree.data.category.DefaultIntervalCategoryDataset clone = (org.jfree.data.category.DefaultIntervalCategoryDataset) super.clone(); clone.categoryKeys = (java.lang.Comparable[]) this.categoryKeys.clone(); clone.seriesKeys = (java.lang.Comparable[]) this.seriesKeys.clone(); clone.startData = clone( this.startData ); clone.endData = clone( this.endData ); return clone;  =>   org.jfree.data.category.DefaultIntervalCategoryDataset clone = (org.jfree.data.category.DefaultIntervalCategoryDataset) super.clone(); clone.categoryKeys = (java.lang.Comparable[]) this.categoryKeys.clone(); clone.seriesKeys = (java.lang.Comparable[]) this.seriesKeys.clone(); clone.endData = clone( this.endData ); return clone;
SDL_167:356:java.lang.Object_clone(): org.jfree.data.category.DefaultIntervalCategoryDataset clone = (org.jfree.data.category.DefaultIntervalCategoryDataset) super.clone(); clone.categoryKeys = (java.lang.Comparable[]) this.categoryKeys.clone(); clone.seriesKeys = (java.lang.Comparable[]) this.seriesKeys.clone(); clone.startData = clone( this.startData ); clone.endData = clone( this.endData ); return clone;  =>   org.jfree.data.category.DefaultIntervalCategoryDataset clone = (org.jfree.data.category.DefaultIntervalCategoryDataset) super.clone(); clone.categoryKeys = (java.lang.Comparable[]) this.categoryKeys.clone(); clone.seriesKeys = (java.lang.Comparable[]) this.seriesKeys.clone(); clone.startData = clone( this.startData ); return clone;
SDL_168:373:boolean_equal(java.lang.Number[][],java.lang.Number[][]): if (array1 == null) {     return array2 == null; } if (array2 == null) {     return false; } if (array1.length != array2.length) {     return false; } for (int i = 0; i < array1.length; i++) {     if (!Arrays.equals( array1[i], array2[i] )) {         return false;     } } return true;  =>   if (array2 == null) {     return false; } if (array1.length != array2.length) {     return false; } for (int i = 0; i < array1.length; i++) {     if (!Arrays.equals( array1[i], array2[i] )) {         return false;     } } return true;
SDL_169:373:boolean_equal(java.lang.Number[][],java.lang.Number[][]): if (array1 == null) {     return array2 == null; } if (array2 == null) {     return false; } if (array1.length != array2.length) {     return false; } for (int i = 0; i < array1.length; i++) {     if (!Arrays.equals( array1[i], array2[i] )) {         return false;     } } return true;  =>   if (array1 == null) {     return array2 == null; } if (array1.length != array2.length) {     return false; } for (int i = 0; i < array1.length; i++) {     if (!Arrays.equals( array1[i], array2[i] )) {         return false;     } } return true;
SDL_170:373:boolean_equal(java.lang.Number[][],java.lang.Number[][]): if (array1 == null) {     return array2 == null; } if (array2 == null) {     return false; } if (array1.length != array2.length) {     return false; } for (int i = 0; i < array1.length; i++) {     if (!Arrays.equals( array1[i], array2[i] )) {         return false;     } } return true;  =>   if (array1 == null) {     return array2 == null; } if (array2 == null) {     return false; } for (int i = 0; i < array1.length; i++) {     if (!Arrays.equals( array1[i], array2[i] )) {         return false;     } } return true;
SDL_171:371:boolean_equal(java.lang.Number[][],java.lang.Number[][]): if (array1 == null) {     return array2 == null; } if (array2 == null) {     return false; } if (array1.length != array2.length) {     return false; } for (int i = 0; i < array1.length; i++) {     if (!Arrays.equals( array1[i], array2[i] )) {         return false;     } } return true;  =>   if (array1 == null) {     return array2 == null; } if (array2 == null) {     return false; } if (array1.length != array2.length) {     return false; } return true;
SDL_172:364:boolean_equal(java.lang.Number[][],java.lang.Number[][]): if (array1 == null) {     return array2 == null; }  =>   if (true) {     return array2 == null; }
SDL_173:363:boolean_equal(java.lang.Number[][],java.lang.Number[][]): return array2 == null;  =>   return true;
SDL_174:363:boolean_equal(java.lang.Number[][],java.lang.Number[][]): return array2 == null;  =>   return false;
SDL_175:367:boolean_equal(java.lang.Number[][],java.lang.Number[][]): if (array2 == null) {     return false; }  =>   if (true) {     return false; }
SDL_176:366:boolean_equal(java.lang.Number[][],java.lang.Number[][]): return false;  =>   return true;
SDL_177:370:boolean_equal(java.lang.Number[][],java.lang.Number[][]): if (array1.length != array2.length) {     return false; }  =>   if (true) {     return false; }
SDL_178:369:boolean_equal(java.lang.Number[][],java.lang.Number[][]): return false;  =>   return true;
SDL_179:371:boolean_equal(java.lang.Number[][],java.lang.Number[][]): if (!Arrays.equals( array1[i], array2[i] )) {     return false; }  =>  
SDL_180:375:boolean_equal(java.lang.Number[][],java.lang.Number[][]): for (int i = 0; i < array1.length; i++) {     if (!Arrays.equals( array1[i], array2[i] )) {         return false;     } }  =>   for (int i = 0;; i++) {     if (!Arrays.equals( array1[i], array2[i] )) {         return false;     } }
SDL_181:375:boolean_equal(java.lang.Number[][],java.lang.Number[][]): for (int i = 0; i < array1.length; i++) {     if (!Arrays.equals( array1[i], array2[i] )) {         return false;     } }  =>   for (int i = 0; i < array1.length;) {     if (!Arrays.equals( array1[i], array2[i] )) {         return false;     } }
SDL_182:374:boolean_equal(java.lang.Number[][],java.lang.Number[][]): if (!Arrays.equals( array1[i], array2[i] )) {     return false; }  =>   if (true) {     return false; }
SDL_183:373:boolean_equal(java.lang.Number[][],java.lang.Number[][]): return false;  =>   return true;
SDL_184:376:boolean_equal(java.lang.Number[][],java.lang.Number[][]): return true;  =>   return false;
SDL_185:388:java.lang.Number[][]_clone(java.lang.Number[][]): if (array == null) {     throw new java.lang.IllegalArgumentException( \"Null 'array' argument.\" ); } java.lang.Number[][] result = new java.lang.Number[array.length][]; for (int i = 0; i < array.length; i++) {     java.lang.Number[] child = array[i];     java.lang.Number[] copychild = new java.lang.Number[child.length];     System.arraycopy( child, 0, copychild, 0, child.length );     result[i] = copychild; } return result;  =>   java.lang.Number[][] result = new java.lang.Number[array.length][]; for (int i = 0; i < array.length; i++) {     java.lang.Number[] child = array[i];     java.lang.Number[] copychild = new java.lang.Number[child.length];     System.arraycopy( child, 0, copychild, 0, child.length );     result[i] = copychild; } return result;
SDL_186:385:java.lang.Number[][]_clone(java.lang.Number[][]): if (array == null) {     throw new java.lang.IllegalArgumentException( \"Null 'array' argument.\" ); } java.lang.Number[][] result = new java.lang.Number[array.length][]; for (int i = 0; i < array.length; i++) {     java.lang.Number[] child = array[i];     java.lang.Number[] copychild = new java.lang.Number[child.length];     System.arraycopy( child, 0, copychild, 0, child.length );     result[i] = copychild; } return result;  =>   if (array == null) {     throw new java.lang.IllegalArgumentException( \"Null 'array' argument.\" ); } java.lang.Number[][] result = new java.lang.Number[array.length][]; return result;
SDL_187:381:java.lang.Number[][]_clone(java.lang.Number[][]): throw new java.lang.IllegalArgumentException( \"Null 'array' argument.\" );  =>  
SDL_188:383:java.lang.Number[][]_clone(java.lang.Number[][]): if (array == null) {     throw new java.lang.IllegalArgumentException( \"Null 'array' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'array' argument.\" ); }
SDL_189:388:java.lang.Number[][]_clone(java.lang.Number[][]): java.lang.Number[] child = array[i]; java.lang.Number[] copychild = new java.lang.Number[child.length]; System.arraycopy( child, 0, copychild, 0, child.length ); result[i] = copychild;  =>   java.lang.Number[] child = array[i]; java.lang.Number[] copychild = new java.lang.Number[child.length]; result[i] = copychild;
SDL_190:388:java.lang.Number[][]_clone(java.lang.Number[][]): java.lang.Number[] child = array[i]; java.lang.Number[] copychild = new java.lang.Number[child.length]; System.arraycopy( child, 0, copychild, 0, child.length ); result[i] = copychild;  =>   java.lang.Number[] child = array[i]; java.lang.Number[] copychild = new java.lang.Number[child.length]; System.arraycopy( child, 0, copychild, 0, child.length );
SDL_191:390:java.lang.Number[][]_clone(java.lang.Number[][]): for (int i = 0; i < array.length; i++) {     java.lang.Number[] child = array[i];     java.lang.Number[] copychild = new java.lang.Number[child.length];     System.arraycopy( child, 0, copychild, 0, child.length );     result[i] = copychild; }  =>   for (int i = 0;; i++) {     java.lang.Number[] child = array[i];     java.lang.Number[] copychild = new java.lang.Number[child.length];     System.arraycopy( child, 0, copychild, 0, child.length );     result[i] = copychild; }
SDL_192:390:java.lang.Number[][]_clone(java.lang.Number[][]): for (int i = 0; i < array.length; i++) {     java.lang.Number[] child = array[i];     java.lang.Number[] copychild = new java.lang.Number[child.length];     System.arraycopy( child, 0, copychild, 0, child.length );     result[i] = copychild; }  =>   for (int i = 0; i < array.length;) {     java.lang.Number[] child = array[i];     java.lang.Number[] copychild = new java.lang.Number[child.length];     System.arraycopy( child, 0, copychild, 0, child.length );     result[i] = copychild; }
