AORB_1:103:void_setValue(java.lang.Comparable,java.lang.Number):this.keys.size() - 1 => this.keys.size() * 1
AORB_2:103:void_setValue(java.lang.Comparable,java.lang.Number):this.keys.size() - 1 => this.keys.size() / 1
AORB_3:103:void_setValue(java.lang.Comparable,java.lang.Number):this.keys.size() - 1 => this.keys.size() % 1
AORB_4:103:void_setValue(java.lang.Comparable,java.lang.Number):this.keys.size() - 1 => this.keys.size() + 1
ROR_1:52:int_getIndex(java.lang.Comparable): key == null  =>   key != null
ROR_2:56:int_getIndex(java.lang.Comparable): i == null  =>   i != null
ROR_3:70:java.lang.Number_getValue(java.lang.Comparable): index < 0  =>   index > 0
ROR_4:70:java.lang.Number_getValue(java.lang.Comparable): index < 0  =>   index >= 0
ROR_5:70:java.lang.Number_getValue(java.lang.Comparable): index < 0  =>   index <= 0
ROR_6:70:java.lang.Number_getValue(java.lang.Comparable): index < 0  =>   index == 0
ROR_7:70:java.lang.Number_getValue(java.lang.Comparable): index < 0  =>   index != 0
ROR_8:70:java.lang.Number_getValue(java.lang.Comparable): index < 0  =>   true
ROR_9:70:java.lang.Number_getValue(java.lang.Comparable): index < 0  =>   false
ROR_10:93:void_setValue(java.lang.Comparable,java.lang.Number): key == null  =>   key != null
ROR_11:97:void_setValue(java.lang.Comparable,java.lang.Number): keyIndex >= 0  =>   keyIndex > 0
ROR_12:97:void_setValue(java.lang.Comparable,java.lang.Number): keyIndex >= 0  =>   keyIndex < 0
ROR_13:97:void_setValue(java.lang.Comparable,java.lang.Number): keyIndex >= 0  =>   keyIndex <= 0
ROR_14:97:void_setValue(java.lang.Comparable,java.lang.Number): keyIndex >= 0  =>   keyIndex == 0
ROR_15:97:void_setValue(java.lang.Comparable,java.lang.Number): keyIndex >= 0  =>   keyIndex != 0
ROR_16:97:void_setValue(java.lang.Comparable,java.lang.Number): keyIndex >= 0  =>   true
ROR_17:97:void_setValue(java.lang.Comparable,java.lang.Number): keyIndex >= 0  =>   false
ROR_18:114:void_insertValue(int,java.lang.Comparable,java.lang.Number): position < 0  =>   position > 0
ROR_19:114:void_insertValue(int,java.lang.Comparable,java.lang.Number): position < 0  =>   position >= 0
ROR_20:114:void_insertValue(int,java.lang.Comparable,java.lang.Number): position < 0  =>   position <= 0
ROR_21:114:void_insertValue(int,java.lang.Comparable,java.lang.Number): position < 0  =>   position == 0
ROR_22:114:void_insertValue(int,java.lang.Comparable,java.lang.Number): position < 0  =>   position != 0
ROR_23:114:void_insertValue(int,java.lang.Comparable,java.lang.Number): position < 0  =>   true
ROR_24:114:void_insertValue(int,java.lang.Comparable,java.lang.Number): position < 0  =>   false
ROR_25:114:void_insertValue(int,java.lang.Comparable,java.lang.Number): position > getItemCount()  =>   position >= getItemCount()
ROR_26:114:void_insertValue(int,java.lang.Comparable,java.lang.Number): position > getItemCount()  =>   position < getItemCount()
ROR_27:114:void_insertValue(int,java.lang.Comparable,java.lang.Number): position > getItemCount()  =>   position <= getItemCount()
ROR_28:114:void_insertValue(int,java.lang.Comparable,java.lang.Number): position > getItemCount()  =>   position == getItemCount()
ROR_29:114:void_insertValue(int,java.lang.Comparable,java.lang.Number): position > getItemCount()  =>   position != getItemCount()
ROR_30:114:void_insertValue(int,java.lang.Comparable,java.lang.Number): position > getItemCount()  =>   true
ROR_31:114:void_insertValue(int,java.lang.Comparable,java.lang.Number): position > getItemCount()  =>   false
ROR_32:117:void_insertValue(int,java.lang.Comparable,java.lang.Number): key == null  =>   key != null
ROR_33:121:void_insertValue(int,java.lang.Comparable,java.lang.Number): pos == position  =>   pos > position
ROR_34:121:void_insertValue(int,java.lang.Comparable,java.lang.Number): pos == position  =>   pos >= position
ROR_35:121:void_insertValue(int,java.lang.Comparable,java.lang.Number): pos == position  =>   pos < position
ROR_36:121:void_insertValue(int,java.lang.Comparable,java.lang.Number): pos == position  =>   pos <= position
ROR_37:121:void_insertValue(int,java.lang.Comparable,java.lang.Number): pos == position  =>   pos != position
ROR_38:121:void_insertValue(int,java.lang.Comparable,java.lang.Number): pos == position  =>   true
ROR_39:121:void_insertValue(int,java.lang.Comparable,java.lang.Number): pos == position  =>   false
ROR_40:125:void_insertValue(int,java.lang.Comparable,java.lang.Number): pos >= 0  =>   pos > 0
ROR_41:125:void_insertValue(int,java.lang.Comparable,java.lang.Number): pos >= 0  =>   pos < 0
ROR_42:125:void_insertValue(int,java.lang.Comparable,java.lang.Number): pos >= 0  =>   pos <= 0
ROR_43:125:void_insertValue(int,java.lang.Comparable,java.lang.Number): pos >= 0  =>   pos == 0
ROR_44:125:void_insertValue(int,java.lang.Comparable,java.lang.Number): pos >= 0  =>   pos != 0
ROR_45:125:void_insertValue(int,java.lang.Comparable,java.lang.Number): pos >= 0  =>   true
ROR_46:125:void_insertValue(int,java.lang.Comparable,java.lang.Number): pos >= 0  =>   false
ROR_47:138:void_rebuildIndex(): i < this.keys.size()  =>   i > this.keys.size()
ROR_48:138:void_rebuildIndex(): i < this.keys.size()  =>   i >= this.keys.size()
ROR_49:138:void_rebuildIndex(): i < this.keys.size()  =>   i <= this.keys.size()
ROR_50:138:void_rebuildIndex(): i < this.keys.size()  =>   i == this.keys.size()
ROR_51:138:void_rebuildIndex(): i < this.keys.size()  =>   i != this.keys.size()
ROR_52:138:void_rebuildIndex(): i < this.keys.size()  =>   true
ROR_53:138:void_rebuildIndex(): i < this.keys.size()  =>   false
ROR_54:148:void_removeValue(int): index < this.keys.size()  =>   index > this.keys.size()
ROR_55:148:void_removeValue(int): index < this.keys.size()  =>   index >= this.keys.size()
ROR_56:148:void_removeValue(int): index < this.keys.size()  =>   index <= this.keys.size()
ROR_57:148:void_removeValue(int): index < this.keys.size()  =>   index == this.keys.size()
ROR_58:148:void_removeValue(int): index < this.keys.size()  =>   index != this.keys.size()
ROR_59:148:void_removeValue(int): index < this.keys.size()  =>   true
ROR_60:148:void_removeValue(int): index < this.keys.size()  =>   false
ROR_61:156:void_removeValue(java.lang.Comparable): index < 0  =>   index > 0
ROR_62:156:void_removeValue(java.lang.Comparable): index < 0  =>   index >= 0
ROR_63:156:void_removeValue(java.lang.Comparable): index < 0  =>   index <= 0
ROR_64:156:void_removeValue(java.lang.Comparable): index < 0  =>   index == 0
ROR_65:156:void_removeValue(java.lang.Comparable): index < 0  =>   index != 0
ROR_66:156:void_removeValue(java.lang.Comparable): index < 0  =>   true
ROR_67:156:void_removeValue(java.lang.Comparable): index < 0  =>   false
ROR_68:173:void_sortByKeys(org.jfree.chart.util.SortOrder): i < size  =>   i > size
ROR_69:173:void_sortByKeys(org.jfree.chart.util.SortOrder): i < size  =>   i >= size
ROR_70:173:void_sortByKeys(org.jfree.chart.util.SortOrder): i < size  =>   i <= size
ROR_71:173:void_sortByKeys(org.jfree.chart.util.SortOrder): i < size  =>   i == size
ROR_72:173:void_sortByKeys(org.jfree.chart.util.SortOrder): i < size  =>   i != size
ROR_73:173:void_sortByKeys(org.jfree.chart.util.SortOrder): i < size  =>   true
ROR_74:173:void_sortByKeys(org.jfree.chart.util.SortOrder): i < size  =>   false
ROR_75:179:void_sortByKeys(org.jfree.chart.util.SortOrder): i < data.length  =>   i > data.length
ROR_76:179:void_sortByKeys(org.jfree.chart.util.SortOrder): i < data.length  =>   i >= data.length
ROR_77:179:void_sortByKeys(org.jfree.chart.util.SortOrder): i < data.length  =>   i <= data.length
ROR_78:179:void_sortByKeys(org.jfree.chart.util.SortOrder): i < data.length  =>   i == data.length
ROR_79:179:void_sortByKeys(org.jfree.chart.util.SortOrder): i < data.length  =>   i != data.length
ROR_80:179:void_sortByKeys(org.jfree.chart.util.SortOrder): i < data.length  =>   true
ROR_81:179:void_sortByKeys(org.jfree.chart.util.SortOrder): i < data.length  =>   false
ROR_82:189:void_sortByValues(org.jfree.chart.util.SortOrder): i < size  =>   i > size
ROR_83:189:void_sortByValues(org.jfree.chart.util.SortOrder): i < size  =>   i >= size
ROR_84:189:void_sortByValues(org.jfree.chart.util.SortOrder): i < size  =>   i <= size
ROR_85:189:void_sortByValues(org.jfree.chart.util.SortOrder): i < size  =>   i == size
ROR_86:189:void_sortByValues(org.jfree.chart.util.SortOrder): i < size  =>   i != size
ROR_87:189:void_sortByValues(org.jfree.chart.util.SortOrder): i < size  =>   true
ROR_88:189:void_sortByValues(org.jfree.chart.util.SortOrder): i < size  =>   false
ROR_89:195:void_sortByValues(org.jfree.chart.util.SortOrder): i < data.length  =>   i > data.length
ROR_90:195:void_sortByValues(org.jfree.chart.util.SortOrder): i < data.length  =>   i >= data.length
ROR_91:195:void_sortByValues(org.jfree.chart.util.SortOrder): i < data.length  =>   i <= data.length
ROR_92:195:void_sortByValues(org.jfree.chart.util.SortOrder): i < data.length  =>   i == data.length
ROR_93:195:void_sortByValues(org.jfree.chart.util.SortOrder): i < data.length  =>   i != data.length
ROR_94:195:void_sortByValues(org.jfree.chart.util.SortOrder): i < data.length  =>   true
ROR_95:195:void_sortByValues(org.jfree.chart.util.SortOrder): i < data.length  =>   false
ROR_96:203:boolean_equals(java.lang.Object): obj == this  =>   obj != this
ROR_97:211:boolean_equals(java.lang.Object): count != that.getItemCount()  =>   count > that.getItemCount()
ROR_98:211:boolean_equals(java.lang.Object): count != that.getItemCount()  =>   count >= that.getItemCount()
ROR_99:211:boolean_equals(java.lang.Object): count != that.getItemCount()  =>   count < that.getItemCount()
ROR_100:211:boolean_equals(java.lang.Object): count != that.getItemCount()  =>   count <= that.getItemCount()
ROR_101:211:boolean_equals(java.lang.Object): count != that.getItemCount()  =>   count == that.getItemCount()
ROR_102:211:boolean_equals(java.lang.Object): count != that.getItemCount()  =>   true
ROR_103:211:boolean_equals(java.lang.Object): count != that.getItemCount()  =>   false
ROR_104:214:boolean_equals(java.lang.Object): i < count  =>   i > count
ROR_105:214:boolean_equals(java.lang.Object): i < count  =>   i >= count
ROR_106:214:boolean_equals(java.lang.Object): i < count  =>   i <= count
ROR_107:214:boolean_equals(java.lang.Object): i < count  =>   i == count
ROR_108:214:boolean_equals(java.lang.Object): i < count  =>   i != count
ROR_109:214:boolean_equals(java.lang.Object): i < count  =>   true
ROR_110:214:boolean_equals(java.lang.Object): i < count  =>   false
ROR_111:222:boolean_equals(java.lang.Object): v1 == null  =>   v1 != null
ROR_112:223:boolean_equals(java.lang.Object): v2 != null  =>   v2 == null
ROR_113:237:int_hashCode(): this.keys != null  =>   this.keys == null
COR_1:114:void_insertValue(int,java.lang.Comparable,java.lang.Number): position < 0 || position > getItemCount()  =>   position < 0 && position > getItemCount()
COR_2:114:void_insertValue(int,java.lang.Comparable,java.lang.Number): position < 0 || position > getItemCount()  =>   position < 0 ^ position > getItemCount()
SDL_1:32:DefaultKeyedValues(): this.keys = new java.util.ArrayList(); this.values = new java.util.ArrayList(); this.indexMap = new java.util.HashMap();  =>   this.values = new java.util.ArrayList(); this.indexMap = new java.util.HashMap();
SDL_2:32:DefaultKeyedValues(): this.keys = new java.util.ArrayList(); this.values = new java.util.ArrayList(); this.indexMap = new java.util.HashMap();  =>   this.keys = new java.util.ArrayList(); this.indexMap = new java.util.HashMap();
SDL_3:32:DefaultKeyedValues(): this.keys = new java.util.ArrayList(); this.values = new java.util.ArrayList(); this.indexMap = new java.util.HashMap();  =>   this.keys = new java.util.ArrayList(); this.values = new java.util.ArrayList();
SDL_4:38:int_getItemCount(): return this.indexMap.size();  =>   return 0;
SDL_5:57:int_getIndex(java.lang.Comparable): if (key == null) {     throw new java.lang.IllegalArgumentException( \"Null 'key' argument.\" ); } final java.lang.Integer i = (java.lang.Integer) this.indexMap.get( key ); if (i == null) {     return -1; } return i.intValue();  =>   final java.lang.Integer i = (java.lang.Integer) this.indexMap.get( key ); if (i == null) {     return -1; } return i.intValue();
SDL_6:57:int_getIndex(java.lang.Comparable): if (key == null) {     throw new java.lang.IllegalArgumentException( \"Null 'key' argument.\" ); } final java.lang.Integer i = (java.lang.Integer) this.indexMap.get( key ); if (i == null) {     return -1; } return i.intValue();  =>   if (key == null) {     throw new java.lang.IllegalArgumentException( \"Null 'key' argument.\" ); } final java.lang.Integer i = (java.lang.Integer) this.indexMap.get( key ); return i.intValue();
SDL_7:53:int_getIndex(java.lang.Comparable): throw new java.lang.IllegalArgumentException( \"Null 'key' argument.\" );  =>  
SDL_8:55:int_getIndex(java.lang.Comparable): if (key == null) {     throw new java.lang.IllegalArgumentException( \"Null 'key' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'key' argument.\" ); }
SDL_9:59:int_getIndex(java.lang.Comparable): if (i == null) {     return -1; }  =>   if (true) {     return -1; }
SDL_10:58:int_getIndex(java.lang.Comparable): return -1;  =>   return 0;
SDL_11:60:int_getIndex(java.lang.Comparable): return i.intValue();  =>   return 0;
SDL_12:71:java.lang.Number_getValue(java.lang.Comparable): int index = getIndex( key ); if (index < 0) {     throw new org.jfree.data.UnknownKeyException( \"Key not found: \" + key ); } return getValue( index );  =>   int index = getIndex( key ); return getValue( index );
SDL_13:71:java.lang.Number_getValue(java.lang.Comparable): throw new org.jfree.data.UnknownKeyException( \"Key not found: \" + key );  =>  
SDL_14:73:java.lang.Number_getValue(java.lang.Comparable): if (index < 0) {     throw new org.jfree.data.UnknownKeyException( \"Key not found: \" + key ); }  =>   if (true) {     throw new org.jfree.data.UnknownKeyException( \"Key not found: \" + key ); }
SDL_15:78:void_addValue(java.lang.Comparable,double): addValue( key, new java.lang.Double( value ) );  =>  
SDL_16:83:void_addValue(java.lang.Comparable,java.lang.Number): setValue( key, value );  =>  
SDL_17:88:void_setValue(java.lang.Comparable,double): setValue( key, new java.lang.Double( value ) );  =>  
SDL_18:102:void_setValue(java.lang.Comparable,java.lang.Number): if (key == null) {     throw new java.lang.IllegalArgumentException( \"Null 'key' argument.\" ); } int keyIndex = getIndex( key ); if (keyIndex >= 0) {     this.keys.set( keyIndex, key );     this.values.set( keyIndex, value ); } else {     this.keys.add( key );     this.values.add( value );     this.indexMap.put( key, new java.lang.Integer( this.keys.size() - 1 ) ); }  =>   int keyIndex = getIndex( key ); if (keyIndex >= 0) {     this.keys.set( keyIndex, key );     this.values.set( keyIndex, value ); } else {     this.keys.add( key );     this.values.add( value );     this.indexMap.put( key, new java.lang.Integer( this.keys.size() - 1 ) ); }
SDL_19:97:void_setValue(java.lang.Comparable,java.lang.Number): if (key == null) {     throw new java.lang.IllegalArgumentException( \"Null 'key' argument.\" ); } int keyIndex = getIndex( key ); if (keyIndex >= 0) {     this.keys.set( keyIndex, key );     this.values.set( keyIndex, value ); } else {     this.keys.add( key );     this.values.add( value );     this.indexMap.put( key, new java.lang.Integer( this.keys.size() - 1 ) ); }  =>   if (key == null) {     throw new java.lang.IllegalArgumentException( \"Null 'key' argument.\" ); } int keyIndex = getIndex( key );
SDL_20:94:void_setValue(java.lang.Comparable,java.lang.Number): throw new java.lang.IllegalArgumentException( \"Null 'key' argument.\" );  =>  
SDL_21:96:void_setValue(java.lang.Comparable,java.lang.Number): if (key == null) {     throw new java.lang.IllegalArgumentException( \"Null 'key' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'key' argument.\" ); }
SDL_22:99:void_setValue(java.lang.Comparable,java.lang.Number): this.keys.set( keyIndex, key ); this.values.set( keyIndex, value );  =>   this.values.set( keyIndex, value );
SDL_23:99:void_setValue(java.lang.Comparable,java.lang.Number): this.keys.set( keyIndex, key ); this.values.set( keyIndex, value );  =>   this.keys.set( keyIndex, key );
SDL_24:105:void_setValue(java.lang.Comparable,java.lang.Number): if (keyIndex >= 0) {     this.keys.set( keyIndex, key );     this.values.set( keyIndex, value ); } else {     this.keys.add( key );     this.values.add( value );     this.indexMap.put( key, new java.lang.Integer( this.keys.size() - 1 ) ); }  =>   if (true) {     this.keys.set( keyIndex, key );     this.values.set( keyIndex, value ); } else {     this.keys.add( key );     this.values.add( value );     this.indexMap.put( key, new java.lang.Integer( this.keys.size() - 1 ) ); }
SDL_25:103:void_setValue(java.lang.Comparable,java.lang.Number): this.keys.add( key ); this.values.add( value ); this.indexMap.put( key, new java.lang.Integer( this.keys.size() - 1 ) );  =>   this.values.add( value ); this.indexMap.put( key, new java.lang.Integer( this.keys.size() - 1 ) );
SDL_26:103:void_setValue(java.lang.Comparable,java.lang.Number): this.keys.add( key ); this.values.add( value ); this.indexMap.put( key, new java.lang.Integer( this.keys.size() - 1 ) );  =>   this.keys.add( key ); this.indexMap.put( key, new java.lang.Integer( this.keys.size() - 1 ) );
SDL_27:103:void_setValue(java.lang.Comparable,java.lang.Number): this.keys.add( key ); this.values.add( value ); this.indexMap.put( key, new java.lang.Integer( this.keys.size() - 1 ) );  =>   this.keys.add( key ); this.values.add( value );
SDL_28:109:void_insertValue(int,java.lang.Comparable,double): insertValue( position, key, new java.lang.Double( value ) );  =>  
SDL_29:130:void_insertValue(int,java.lang.Comparable,java.lang.Number): if (position < 0 || position > getItemCount()) {     throw new java.lang.IllegalArgumentException( \"'position' out of bounds.\" ); } if (key == null) {     throw new java.lang.IllegalArgumentException( \"Null 'key' argument.\" ); } int pos = getIndex( key ); if (pos == position) {     this.keys.set( pos, key );     this.values.set( pos, value ); } else {     if (pos >= 0) {         this.keys.remove( pos );         this.values.remove( pos );     }     this.keys.add( position, key );     this.values.add( position, value );     rebuildIndex(); }  =>   if (key == null) {     throw new java.lang.IllegalArgumentException( \"Null 'key' argument.\" ); } int pos = getIndex( key ); if (pos == position) {     this.keys.set( pos, key );     this.values.set( pos, value ); } else {     if (pos >= 0) {         this.keys.remove( pos );         this.values.remove( pos );     }     this.keys.add( position, key );     this.values.add( position, value );     rebuildIndex(); }
SDL_30:130:void_insertValue(int,java.lang.Comparable,java.lang.Number): if (position < 0 || position > getItemCount()) {     throw new java.lang.IllegalArgumentException( \"'position' out of bounds.\" ); } if (key == null) {     throw new java.lang.IllegalArgumentException( \"Null 'key' argument.\" ); } int pos = getIndex( key ); if (pos == position) {     this.keys.set( pos, key );     this.values.set( pos, value ); } else {     if (pos >= 0) {         this.keys.remove( pos );         this.values.remove( pos );     }     this.keys.add( position, key );     this.values.add( position, value );     rebuildIndex(); }  =>   if (position < 0 || position > getItemCount()) {     throw new java.lang.IllegalArgumentException( \"'position' out of bounds.\" ); } int pos = getIndex( key ); if (pos == position) {     this.keys.set( pos, key );     this.values.set( pos, value ); } else {     if (pos >= 0) {         this.keys.remove( pos );         this.values.remove( pos );     }     this.keys.add( position, key );     this.values.add( position, value );     rebuildIndex(); }
SDL_31:121:void_insertValue(int,java.lang.Comparable,java.lang.Number): if (position < 0 || position > getItemCount()) {     throw new java.lang.IllegalArgumentException( \"'position' out of bounds.\" ); } if (key == null) {     throw new java.lang.IllegalArgumentException( \"Null 'key' argument.\" ); } int pos = getIndex( key ); if (pos == position) {     this.keys.set( pos, key );     this.values.set( pos, value ); } else {     if (pos >= 0) {         this.keys.remove( pos );         this.values.remove( pos );     }     this.keys.add( position, key );     this.values.add( position, value );     rebuildIndex(); }  =>   if (position < 0 || position > getItemCount()) {     throw new java.lang.IllegalArgumentException( \"'position' out of bounds.\" ); } if (key == null) {     throw new java.lang.IllegalArgumentException( \"Null 'key' argument.\" ); } int pos = getIndex( key );
SDL_32:115:void_insertValue(int,java.lang.Comparable,java.lang.Number): throw new java.lang.IllegalArgumentException( \"'position' out of bounds.\" );  =>  
SDL_33:117:void_insertValue(int,java.lang.Comparable,java.lang.Number): if (position < 0 || position > getItemCount()) {     throw new java.lang.IllegalArgumentException( \"'position' out of bounds.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"'position' out of bounds.\" ); }
SDL_34:118:void_insertValue(int,java.lang.Comparable,java.lang.Number): throw new java.lang.IllegalArgumentException( \"Null 'key' argument.\" );  =>  
SDL_35:120:void_insertValue(int,java.lang.Comparable,java.lang.Number): if (key == null) {     throw new java.lang.IllegalArgumentException( \"Null 'key' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'key' argument.\" ); }
SDL_36:123:void_insertValue(int,java.lang.Comparable,java.lang.Number): this.keys.set( pos, key ); this.values.set( pos, value );  =>   this.values.set( pos, value );
SDL_37:123:void_insertValue(int,java.lang.Comparable,java.lang.Number): this.keys.set( pos, key ); this.values.set( pos, value );  =>   this.keys.set( pos, key );
SDL_38:133:void_insertValue(int,java.lang.Comparable,java.lang.Number): if (pos == position) {     this.keys.set( pos, key );     this.values.set( pos, value ); } else {     if (pos >= 0) {         this.keys.remove( pos );         this.values.remove( pos );     }     this.keys.add( position, key );     this.values.add( position, value );     rebuildIndex(); }  =>   if (true) {     this.keys.set( pos, key );     this.values.set( pos, value ); } else {     if (pos >= 0) {         this.keys.remove( pos );         this.values.remove( pos );     }     this.keys.add( position, key );     this.values.add( position, value );     rebuildIndex(); }
SDL_39:128:void_insertValue(int,java.lang.Comparable,java.lang.Number): if (pos >= 0) {     this.keys.remove( pos );     this.values.remove( pos ); } this.keys.add( position, key ); this.values.add( position, value ); rebuildIndex();  =>   this.keys.add( position, key ); this.values.add( position, value ); rebuildIndex();
SDL_40:131:void_insertValue(int,java.lang.Comparable,java.lang.Number): if (pos >= 0) {     this.keys.remove( pos );     this.values.remove( pos ); } this.keys.add( position, key ); this.values.add( position, value ); rebuildIndex();  =>   if (pos >= 0) {     this.keys.remove( pos );     this.values.remove( pos ); } this.values.add( position, value ); rebuildIndex();
SDL_41:131:void_insertValue(int,java.lang.Comparable,java.lang.Number): if (pos >= 0) {     this.keys.remove( pos );     this.values.remove( pos ); } this.keys.add( position, key ); this.values.add( position, value ); rebuildIndex();  =>   if (pos >= 0) {     this.keys.remove( pos );     this.values.remove( pos ); } this.keys.add( position, key ); rebuildIndex();
SDL_42:131:void_insertValue(int,java.lang.Comparable,java.lang.Number): if (pos >= 0) {     this.keys.remove( pos );     this.values.remove( pos ); } this.keys.add( position, key ); this.values.add( position, value ); rebuildIndex();  =>   if (pos >= 0) {     this.keys.remove( pos );     this.values.remove( pos ); } this.keys.add( position, key ); this.values.add( position, value );
SDL_43:127:void_insertValue(int,java.lang.Comparable,java.lang.Number): this.keys.remove( pos ); this.values.remove( pos );  =>   this.values.remove( pos );
SDL_44:127:void_insertValue(int,java.lang.Comparable,java.lang.Number): this.keys.remove( pos ); this.values.remove( pos );  =>   this.keys.remove( pos );
SDL_45:129:void_insertValue(int,java.lang.Comparable,java.lang.Number): if (pos >= 0) {     this.keys.remove( pos );     this.values.remove( pos ); }  =>   if (true) {     this.keys.remove( pos );     this.values.remove( pos ); }
SDL_46:141:void_rebuildIndex(): this.indexMap.clear(); for (int i = 0; i < this.keys.size(); i++) {     final java.lang.Object key = this.keys.get( i );     this.indexMap.put( key, new java.lang.Integer( i ) ); }  =>   for (int i = 0; i < this.keys.size(); i++) {     final java.lang.Object key = this.keys.get( i );     this.indexMap.put( key, new java.lang.Integer( i ) ); }
SDL_47:138:void_rebuildIndex(): this.indexMap.clear(); for (int i = 0; i < this.keys.size(); i++) {     final java.lang.Object key = this.keys.get( i );     this.indexMap.put( key, new java.lang.Integer( i ) ); }  =>   this.indexMap.clear();
SDL_48:140:void_rebuildIndex(): final java.lang.Object key = this.keys.get( i ); this.indexMap.put( key, new java.lang.Integer( i ) );  =>   final java.lang.Object key = this.keys.get( i );
SDL_49:142:void_rebuildIndex(): for (int i = 0; i < this.keys.size(); i++) {     final java.lang.Object key = this.keys.get( i );     this.indexMap.put( key, new java.lang.Integer( i ) ); }  =>   for (int i = 0;; i++) {     final java.lang.Object key = this.keys.get( i );     this.indexMap.put( key, new java.lang.Integer( i ) ); }
SDL_50:142:void_rebuildIndex(): for (int i = 0; i < this.keys.size(); i++) {     final java.lang.Object key = this.keys.get( i );     this.indexMap.put( key, new java.lang.Integer( i ) ); }  =>   for (int i = 0; i < this.keys.size();) {     final java.lang.Object key = this.keys.get( i );     this.indexMap.put( key, new java.lang.Integer( i ) ); }
SDL_51:150:void_removeValue(int): this.keys.remove( index ); this.values.remove( index ); if (index < this.keys.size()) {     rebuildIndex(); }  =>   this.values.remove( index ); if (index < this.keys.size()) {     rebuildIndex(); }
SDL_52:150:void_removeValue(int): this.keys.remove( index ); this.values.remove( index ); if (index < this.keys.size()) {     rebuildIndex(); }  =>   this.keys.remove( index ); if (index < this.keys.size()) {     rebuildIndex(); }
SDL_53:148:void_removeValue(int): this.keys.remove( index ); this.values.remove( index ); if (index < this.keys.size()) {     rebuildIndex(); }  =>   this.keys.remove( index ); this.values.remove( index );
SDL_54:149:void_removeValue(int): rebuildIndex();  =>  
SDL_55:151:void_removeValue(int): if (index < this.keys.size()) {     rebuildIndex(); }  =>   if (true) {     rebuildIndex(); }
SDL_56:157:void_removeValue(java.lang.Comparable): int index = getIndex( key ); if (index < 0) {     return; } removeValue( index );  =>   int index = getIndex( key ); removeValue( index );
SDL_57:159:void_removeValue(java.lang.Comparable): int index = getIndex( key ); if (index < 0) {     return; } removeValue( index );  =>   int index = getIndex( key ); if (index < 0) {     return; }
SDL_58:159:void_removeValue(java.lang.Comparable): if (index < 0) {     return; }  =>   if (true) {     return; }
SDL_59:166:void_clear(): this.keys.clear(); this.values.clear(); this.indexMap.clear();  =>   this.values.clear(); this.indexMap.clear();
SDL_60:166:void_clear(): this.keys.clear(); this.values.clear(); this.indexMap.clear();  =>   this.keys.clear(); this.indexMap.clear();
SDL_61:166:void_clear(): this.keys.clear(); this.values.clear(); this.indexMap.clear();  =>   this.keys.clear(); this.values.clear();
SDL_62:180:void_sortByKeys(org.jfree.chart.util.SortOrder): final int size = this.keys.size(); final org.jfree.data.DefaultKeyedValue[] data = new org.jfree.data.DefaultKeyedValue[size]; for (int i = 0; i < size; i++) {     data[i] = new org.jfree.data.DefaultKeyedValue( (java.lang.Comparable) this.keys.get( i ), (java.lang.Number) this.values.get( i ) ); } java.util.Comparator comparator = new org.jfree.data.KeyedValueComparator( KeyedValueComparatorType.BY_KEY, order ); Arrays.sort( data, comparator ); clear(); for (int i = 0; i < data.length; i++) {     final org.jfree.data.DefaultKeyedValue value = data[i];     addValue( value.getKey(), value.getValue() ); }  =>   final int size = this.keys.size(); final org.jfree.data.DefaultKeyedValue[] data = new org.jfree.data.DefaultKeyedValue[size]; java.util.Comparator comparator = new org.jfree.data.KeyedValueComparator( KeyedValueComparatorType.BY_KEY, order ); Arrays.sort( data, comparator ); clear(); for (int i = 0; i < data.length; i++) {     final org.jfree.data.DefaultKeyedValue value = data[i];     addValue( value.getKey(), value.getValue() ); }
SDL_63:182:void_sortByKeys(org.jfree.chart.util.SortOrder): final int size = this.keys.size(); final org.jfree.data.DefaultKeyedValue[] data = new org.jfree.data.DefaultKeyedValue[size]; for (int i = 0; i < size; i++) {     data[i] = new org.jfree.data.DefaultKeyedValue( (java.lang.Comparable) this.keys.get( i ), (java.lang.Number) this.values.get( i ) ); } java.util.Comparator comparator = new org.jfree.data.KeyedValueComparator( KeyedValueComparatorType.BY_KEY, order ); Arrays.sort( data, comparator ); clear(); for (int i = 0; i < data.length; i++) {     final org.jfree.data.DefaultKeyedValue value = data[i];     addValue( value.getKey(), value.getValue() ); }  =>   final int size = this.keys.size(); final org.jfree.data.DefaultKeyedValue[] data = new org.jfree.data.DefaultKeyedValue[size]; for (int i = 0; i < size; i++) {     data[i] = new org.jfree.data.DefaultKeyedValue( (java.lang.Comparable) this.keys.get( i ), (java.lang.Number) this.values.get( i ) ); } java.util.Comparator comparator = new org.jfree.data.KeyedValueComparator( KeyedValueComparatorType.BY_KEY, order ); clear(); for (int i = 0; i < data.length; i++) {     final org.jfree.data.DefaultKeyedValue value = data[i];     addValue( value.getKey(), value.getValue() ); }
SDL_64:182:void_sortByKeys(org.jfree.chart.util.SortOrder): final int size = this.keys.size(); final org.jfree.data.DefaultKeyedValue[] data = new org.jfree.data.DefaultKeyedValue[size]; for (int i = 0; i < size; i++) {     data[i] = new org.jfree.data.DefaultKeyedValue( (java.lang.Comparable) this.keys.get( i ), (java.lang.Number) this.values.get( i ) ); } java.util.Comparator comparator = new org.jfree.data.KeyedValueComparator( KeyedValueComparatorType.BY_KEY, order ); Arrays.sort( data, comparator ); clear(); for (int i = 0; i < data.length; i++) {     final org.jfree.data.DefaultKeyedValue value = data[i];     addValue( value.getKey(), value.getValue() ); }  =>   final int size = this.keys.size(); final org.jfree.data.DefaultKeyedValue[] data = new org.jfree.data.DefaultKeyedValue[size]; for (int i = 0; i < size; i++) {     data[i] = new org.jfree.data.DefaultKeyedValue( (java.lang.Comparable) this.keys.get( i ), (java.lang.Number) this.values.get( i ) ); } java.util.Comparator comparator = new org.jfree.data.KeyedValueComparator( KeyedValueComparatorType.BY_KEY, order ); Arrays.sort( data, comparator ); for (int i = 0; i < data.length; i++) {     final org.jfree.data.DefaultKeyedValue value = data[i];     addValue( value.getKey(), value.getValue() ); }
SDL_65:179:void_sortByKeys(org.jfree.chart.util.SortOrder): final int size = this.keys.size(); final org.jfree.data.DefaultKeyedValue[] data = new org.jfree.data.DefaultKeyedValue[size]; for (int i = 0; i < size; i++) {     data[i] = new org.jfree.data.DefaultKeyedValue( (java.lang.Comparable) this.keys.get( i ), (java.lang.Number) this.values.get( i ) ); } java.util.Comparator comparator = new org.jfree.data.KeyedValueComparator( KeyedValueComparatorType.BY_KEY, order ); Arrays.sort( data, comparator ); clear(); for (int i = 0; i < data.length; i++) {     final org.jfree.data.DefaultKeyedValue value = data[i];     addValue( value.getKey(), value.getValue() ); }  =>   final int size = this.keys.size(); final org.jfree.data.DefaultKeyedValue[] data = new org.jfree.data.DefaultKeyedValue[size]; for (int i = 0; i < size; i++) {     data[i] = new org.jfree.data.DefaultKeyedValue( (java.lang.Comparable) this.keys.get( i ), (java.lang.Number) this.values.get( i ) ); } java.util.Comparator comparator = new org.jfree.data.KeyedValueComparator( KeyedValueComparatorType.BY_KEY, order ); Arrays.sort( data, comparator ); clear();
SDL_66:174:void_sortByKeys(org.jfree.chart.util.SortOrder): data[i] = new org.jfree.data.DefaultKeyedValue( (java.lang.Comparable) this.keys.get( i ), (java.lang.Number) this.values.get( i ) );  =>  
SDL_67:176:void_sortByKeys(org.jfree.chart.util.SortOrder): for (int i = 0; i < size; i++) {     data[i] = new org.jfree.data.DefaultKeyedValue( (java.lang.Comparable) this.keys.get( i ), (java.lang.Number) this.values.get( i ) ); }  =>   for (int i = 0;; i++) {     data[i] = new org.jfree.data.DefaultKeyedValue( (java.lang.Comparable) this.keys.get( i ), (java.lang.Number) this.values.get( i ) ); }
SDL_68:176:void_sortByKeys(org.jfree.chart.util.SortOrder): for (int i = 0; i < size; i++) {     data[i] = new org.jfree.data.DefaultKeyedValue( (java.lang.Comparable) this.keys.get( i ), (java.lang.Number) this.values.get( i ) ); }  =>   for (int i = 0; i < size;) {     data[i] = new org.jfree.data.DefaultKeyedValue( (java.lang.Comparable) this.keys.get( i ), (java.lang.Number) this.values.get( i ) ); }
SDL_69:181:void_sortByKeys(org.jfree.chart.util.SortOrder): final org.jfree.data.DefaultKeyedValue value = data[i]; addValue( value.getKey(), value.getValue() );  =>   final org.jfree.data.DefaultKeyedValue value = data[i];
SDL_70:183:void_sortByKeys(org.jfree.chart.util.SortOrder): for (int i = 0; i < data.length; i++) {     final org.jfree.data.DefaultKeyedValue value = data[i];     addValue( value.getKey(), value.getValue() ); }  =>   for (int i = 0;; i++) {     final org.jfree.data.DefaultKeyedValue value = data[i];     addValue( value.getKey(), value.getValue() ); }
SDL_71:183:void_sortByKeys(org.jfree.chart.util.SortOrder): for (int i = 0; i < data.length; i++) {     final org.jfree.data.DefaultKeyedValue value = data[i];     addValue( value.getKey(), value.getValue() ); }  =>   for (int i = 0; i < data.length;) {     final org.jfree.data.DefaultKeyedValue value = data[i];     addValue( value.getKey(), value.getValue() ); }
SDL_72:196:void_sortByValues(org.jfree.chart.util.SortOrder): final int size = this.keys.size(); final org.jfree.data.DefaultKeyedValue[] data = new org.jfree.data.DefaultKeyedValue[size]; for (int i = 0; i < size; i++) {     data[i] = new org.jfree.data.DefaultKeyedValue( (java.lang.Comparable) this.keys.get( i ), (java.lang.Number) this.values.get( i ) ); } java.util.Comparator comparator = new org.jfree.data.KeyedValueComparator( KeyedValueComparatorType.BY_VALUE, order ); Arrays.sort( data, comparator ); clear(); for (int i = 0; i < data.length; i++) {     final org.jfree.data.DefaultKeyedValue value = data[i];     addValue( value.getKey(), value.getValue() ); }  =>   final int size = this.keys.size(); final org.jfree.data.DefaultKeyedValue[] data = new org.jfree.data.DefaultKeyedValue[size]; java.util.Comparator comparator = new org.jfree.data.KeyedValueComparator( KeyedValueComparatorType.BY_VALUE, order ); Arrays.sort( data, comparator ); clear(); for (int i = 0; i < data.length; i++) {     final org.jfree.data.DefaultKeyedValue value = data[i];     addValue( value.getKey(), value.getValue() ); }
SDL_73:198:void_sortByValues(org.jfree.chart.util.SortOrder): final int size = this.keys.size(); final org.jfree.data.DefaultKeyedValue[] data = new org.jfree.data.DefaultKeyedValue[size]; for (int i = 0; i < size; i++) {     data[i] = new org.jfree.data.DefaultKeyedValue( (java.lang.Comparable) this.keys.get( i ), (java.lang.Number) this.values.get( i ) ); } java.util.Comparator comparator = new org.jfree.data.KeyedValueComparator( KeyedValueComparatorType.BY_VALUE, order ); Arrays.sort( data, comparator ); clear(); for (int i = 0; i < data.length; i++) {     final org.jfree.data.DefaultKeyedValue value = data[i];     addValue( value.getKey(), value.getValue() ); }  =>   final int size = this.keys.size(); final org.jfree.data.DefaultKeyedValue[] data = new org.jfree.data.DefaultKeyedValue[size]; for (int i = 0; i < size; i++) {     data[i] = new org.jfree.data.DefaultKeyedValue( (java.lang.Comparable) this.keys.get( i ), (java.lang.Number) this.values.get( i ) ); } java.util.Comparator comparator = new org.jfree.data.KeyedValueComparator( KeyedValueComparatorType.BY_VALUE, order ); clear(); for (int i = 0; i < data.length; i++) {     final org.jfree.data.DefaultKeyedValue value = data[i];     addValue( value.getKey(), value.getValue() ); }
SDL_74:198:void_sortByValues(org.jfree.chart.util.SortOrder): final int size = this.keys.size(); final org.jfree.data.DefaultKeyedValue[] data = new org.jfree.data.DefaultKeyedValue[size]; for (int i = 0; i < size; i++) {     data[i] = new org.jfree.data.DefaultKeyedValue( (java.lang.Comparable) this.keys.get( i ), (java.lang.Number) this.values.get( i ) ); } java.util.Comparator comparator = new org.jfree.data.KeyedValueComparator( KeyedValueComparatorType.BY_VALUE, order ); Arrays.sort( data, comparator ); clear(); for (int i = 0; i < data.length; i++) {     final org.jfree.data.DefaultKeyedValue value = data[i];     addValue( value.getKey(), value.getValue() ); }  =>   final int size = this.keys.size(); final org.jfree.data.DefaultKeyedValue[] data = new org.jfree.data.DefaultKeyedValue[size]; for (int i = 0; i < size; i++) {     data[i] = new org.jfree.data.DefaultKeyedValue( (java.lang.Comparable) this.keys.get( i ), (java.lang.Number) this.values.get( i ) ); } java.util.Comparator comparator = new org.jfree.data.KeyedValueComparator( KeyedValueComparatorType.BY_VALUE, order ); Arrays.sort( data, comparator ); for (int i = 0; i < data.length; i++) {     final org.jfree.data.DefaultKeyedValue value = data[i];     addValue( value.getKey(), value.getValue() ); }
SDL_75:195:void_sortByValues(org.jfree.chart.util.SortOrder): final int size = this.keys.size(); final org.jfree.data.DefaultKeyedValue[] data = new org.jfree.data.DefaultKeyedValue[size]; for (int i = 0; i < size; i++) {     data[i] = new org.jfree.data.DefaultKeyedValue( (java.lang.Comparable) this.keys.get( i ), (java.lang.Number) this.values.get( i ) ); } java.util.Comparator comparator = new org.jfree.data.KeyedValueComparator( KeyedValueComparatorType.BY_VALUE, order ); Arrays.sort( data, comparator ); clear(); for (int i = 0; i < data.length; i++) {     final org.jfree.data.DefaultKeyedValue value = data[i];     addValue( value.getKey(), value.getValue() ); }  =>   final int size = this.keys.size(); final org.jfree.data.DefaultKeyedValue[] data = new org.jfree.data.DefaultKeyedValue[size]; for (int i = 0; i < size; i++) {     data[i] = new org.jfree.data.DefaultKeyedValue( (java.lang.Comparable) this.keys.get( i ), (java.lang.Number) this.values.get( i ) ); } java.util.Comparator comparator = new org.jfree.data.KeyedValueComparator( KeyedValueComparatorType.BY_VALUE, order ); Arrays.sort( data, comparator ); clear();
SDL_76:190:void_sortByValues(org.jfree.chart.util.SortOrder): data[i] = new org.jfree.data.DefaultKeyedValue( (java.lang.Comparable) this.keys.get( i ), (java.lang.Number) this.values.get( i ) );  =>  
SDL_77:192:void_sortByValues(org.jfree.chart.util.SortOrder): for (int i = 0; i < size; i++) {     data[i] = new org.jfree.data.DefaultKeyedValue( (java.lang.Comparable) this.keys.get( i ), (java.lang.Number) this.values.get( i ) ); }  =>   for (int i = 0;; i++) {     data[i] = new org.jfree.data.DefaultKeyedValue( (java.lang.Comparable) this.keys.get( i ), (java.lang.Number) this.values.get( i ) ); }
SDL_78:192:void_sortByValues(org.jfree.chart.util.SortOrder): for (int i = 0; i < size; i++) {     data[i] = new org.jfree.data.DefaultKeyedValue( (java.lang.Comparable) this.keys.get( i ), (java.lang.Number) this.values.get( i ) ); }  =>   for (int i = 0; i < size;) {     data[i] = new org.jfree.data.DefaultKeyedValue( (java.lang.Comparable) this.keys.get( i ), (java.lang.Number) this.values.get( i ) ); }
SDL_79:197:void_sortByValues(org.jfree.chart.util.SortOrder): final org.jfree.data.DefaultKeyedValue value = data[i]; addValue( value.getKey(), value.getValue() );  =>   final org.jfree.data.DefaultKeyedValue value = data[i];
SDL_80:199:void_sortByValues(org.jfree.chart.util.SortOrder): for (int i = 0; i < data.length; i++) {     final org.jfree.data.DefaultKeyedValue value = data[i];     addValue( value.getKey(), value.getValue() ); }  =>   for (int i = 0;; i++) {     final org.jfree.data.DefaultKeyedValue value = data[i];     addValue( value.getKey(), value.getValue() ); }
SDL_81:199:void_sortByValues(org.jfree.chart.util.SortOrder): for (int i = 0; i < data.length; i++) {     final org.jfree.data.DefaultKeyedValue value = data[i];     addValue( value.getKey(), value.getValue() ); }  =>   for (int i = 0; i < data.length;) {     final org.jfree.data.DefaultKeyedValue value = data[i];     addValue( value.getKey(), value.getValue() ); }
SDL_82:230:boolean_equals(java.lang.Object): if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.KeyedValues)) {     return false; } org.jfree.data.KeyedValues that = (org.jfree.data.KeyedValues) obj; int count = getItemCount(); if (count != that.getItemCount()) {     return false; } for (int i = 0; i < count; i++) {     java.lang.Comparable k1 = getKey( i );     java.lang.Comparable k2 = that.getKey( i );     if (!k1.equals( k2 )) {         return false;     }     java.lang.Number v1 = getValue( i );     java.lang.Number v2 = that.getValue( i );     if (v1 == null) {         if (v2 != null) {             return false;         }     } else {         if (!v1.equals( v2 )) {             return false;         }     } } return true;  =>   if (!(obj instanceof org.jfree.data.KeyedValues)) {     return false; } org.jfree.data.KeyedValues that = (org.jfree.data.KeyedValues) obj; int count = getItemCount(); if (count != that.getItemCount()) {     return false; } for (int i = 0; i < count; i++) {     java.lang.Comparable k1 = getKey( i );     java.lang.Comparable k2 = that.getKey( i );     if (!k1.equals( k2 )) {         return false;     }     java.lang.Number v1 = getValue( i );     java.lang.Number v2 = that.getValue( i );     if (v1 == null) {         if (v2 != null) {             return false;         }     } else {         if (!v1.equals( v2 )) {             return false;         }     } } return true;
SDL_83:230:boolean_equals(java.lang.Object): if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.KeyedValues)) {     return false; } org.jfree.data.KeyedValues that = (org.jfree.data.KeyedValues) obj; int count = getItemCount(); if (count != that.getItemCount()) {     return false; } for (int i = 0; i < count; i++) {     java.lang.Comparable k1 = getKey( i );     java.lang.Comparable k2 = that.getKey( i );     if (!k1.equals( k2 )) {         return false;     }     java.lang.Number v1 = getValue( i );     java.lang.Number v2 = that.getValue( i );     if (v1 == null) {         if (v2 != null) {             return false;         }     } else {         if (!v1.equals( v2 )) {             return false;         }     } } return true;  =>   if (obj == this) {     return true; } org.jfree.data.KeyedValues that = (org.jfree.data.KeyedValues) obj; int count = getItemCount(); if (count != that.getItemCount()) {     return false; } for (int i = 0; i < count; i++) {     java.lang.Comparable k1 = getKey( i );     java.lang.Comparable k2 = that.getKey( i );     if (!k1.equals( k2 )) {         return false;     }     java.lang.Number v1 = getValue( i );     java.lang.Number v2 = that.getValue( i );     if (v1 == null) {         if (v2 != null) {             return false;         }     } else {         if (!v1.equals( v2 )) {             return false;         }     } } return true;
SDL_84:230:boolean_equals(java.lang.Object): if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.KeyedValues)) {     return false; } org.jfree.data.KeyedValues that = (org.jfree.data.KeyedValues) obj; int count = getItemCount(); if (count != that.getItemCount()) {     return false; } for (int i = 0; i < count; i++) {     java.lang.Comparable k1 = getKey( i );     java.lang.Comparable k2 = that.getKey( i );     if (!k1.equals( k2 )) {         return false;     }     java.lang.Number v1 = getValue( i );     java.lang.Number v2 = that.getValue( i );     if (v1 == null) {         if (v2 != null) {             return false;         }     } else {         if (!v1.equals( v2 )) {             return false;         }     } } return true;  =>   if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.KeyedValues)) {     return false; } org.jfree.data.KeyedValues that = (org.jfree.data.KeyedValues) obj; int count = getItemCount(); for (int i = 0; i < count; i++) {     java.lang.Comparable k1 = getKey( i );     java.lang.Comparable k2 = that.getKey( i );     if (!k1.equals( k2 )) {         return false;     }     java.lang.Number v1 = getValue( i );     java.lang.Number v2 = that.getValue( i );     if (v1 == null) {         if (v2 != null) {             return false;         }     } else {         if (!v1.equals( v2 )) {             return false;         }     } } return true;
SDL_85:215:boolean_equals(java.lang.Object): if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.KeyedValues)) {     return false; } org.jfree.data.KeyedValues that = (org.jfree.data.KeyedValues) obj; int count = getItemCount(); if (count != that.getItemCount()) {     return false; } for (int i = 0; i < count; i++) {     java.lang.Comparable k1 = getKey( i );     java.lang.Comparable k2 = that.getKey( i );     if (!k1.equals( k2 )) {         return false;     }     java.lang.Number v1 = getValue( i );     java.lang.Number v2 = that.getValue( i );     if (v1 == null) {         if (v2 != null) {             return false;         }     } else {         if (!v1.equals( v2 )) {             return false;         }     } } return true;  =>   if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.KeyedValues)) {     return false; } org.jfree.data.KeyedValues that = (org.jfree.data.KeyedValues) obj; int count = getItemCount(); if (count != that.getItemCount()) {     return false; } return true;
SDL_86:206:boolean_equals(java.lang.Object): if (obj == this) {     return true; }  =>   if (true) {     return true; }
SDL_87:205:boolean_equals(java.lang.Object): return true;  =>   return false;
SDL_88:209:boolean_equals(java.lang.Object): if (!(obj instanceof org.jfree.data.KeyedValues)) {     return false; }  =>   if (true) {     return false; }
SDL_89:208:boolean_equals(java.lang.Object): return false;  =>   return true;
SDL_90:214:boolean_equals(java.lang.Object): if (count != that.getItemCount()) {     return false; }  =>   if (true) {     return false; }
SDL_91:213:boolean_equals(java.lang.Object): return false;  =>   return true;
SDL_92:228:boolean_equals(java.lang.Object): java.lang.Comparable k1 = getKey( i ); java.lang.Comparable k2 = that.getKey( i ); if (!k1.equals( k2 )) {     return false; } java.lang.Number v1 = getValue( i ); java.lang.Number v2 = that.getValue( i ); if (v1 == null) {     if (v2 != null) {         return false;     } } else {     if (!v1.equals( v2 )) {         return false;     } }  =>   java.lang.Comparable k1 = getKey( i ); java.lang.Comparable k2 = that.getKey( i ); java.lang.Number v1 = getValue( i ); java.lang.Number v2 = that.getValue( i ); if (v1 == null) {     if (v2 != null) {         return false;     } } else {     if (!v1.equals( v2 )) {         return false;     } }
SDL_93:222:boolean_equals(java.lang.Object): java.lang.Comparable k1 = getKey( i ); java.lang.Comparable k2 = that.getKey( i ); if (!k1.equals( k2 )) {     return false; } java.lang.Number v1 = getValue( i ); java.lang.Number v2 = that.getValue( i ); if (v1 == null) {     if (v2 != null) {         return false;     } } else {     if (!v1.equals( v2 )) {         return false;     } }  =>   java.lang.Comparable k1 = getKey( i ); java.lang.Comparable k2 = that.getKey( i ); if (!k1.equals( k2 )) {     return false; } java.lang.Number v1 = getValue( i ); java.lang.Number v2 = that.getValue( i );
SDL_94:232:boolean_equals(java.lang.Object): for (int i = 0; i < count; i++) {     java.lang.Comparable k1 = getKey( i );     java.lang.Comparable k2 = that.getKey( i );     if (!k1.equals( k2 )) {         return false;     }     java.lang.Number v1 = getValue( i );     java.lang.Number v2 = that.getValue( i );     if (v1 == null) {         if (v2 != null) {             return false;         }     } else {         if (!v1.equals( v2 )) {             return false;         }     } }  =>   for (int i = 0;; i++) {     java.lang.Comparable k1 = getKey( i );     java.lang.Comparable k2 = that.getKey( i );     if (!k1.equals( k2 )) {         return false;     }     java.lang.Number v1 = getValue( i );     java.lang.Number v2 = that.getValue( i );     if (v1 == null) {         if (v2 != null) {             return false;         }     } else {         if (!v1.equals( v2 )) {             return false;         }     } }
SDL_95:232:boolean_equals(java.lang.Object): for (int i = 0; i < count; i++) {     java.lang.Comparable k1 = getKey( i );     java.lang.Comparable k2 = that.getKey( i );     if (!k1.equals( k2 )) {         return false;     }     java.lang.Number v1 = getValue( i );     java.lang.Number v2 = that.getValue( i );     if (v1 == null) {         if (v2 != null) {             return false;         }     } else {         if (!v1.equals( v2 )) {             return false;         }     } }  =>   for (int i = 0; i < count;) {     java.lang.Comparable k1 = getKey( i );     java.lang.Comparable k2 = that.getKey( i );     if (!k1.equals( k2 )) {         return false;     }     java.lang.Number v1 = getValue( i );     java.lang.Number v2 = that.getValue( i );     if (v1 == null) {         if (v2 != null) {             return false;         }     } else {         if (!v1.equals( v2 )) {             return false;         }     } }
SDL_96:220:boolean_equals(java.lang.Object): if (!k1.equals( k2 )) {     return false; }  =>   if (true) {     return false; }
SDL_97:219:boolean_equals(java.lang.Object): return false;  =>   return true;
SDL_98:223:boolean_equals(java.lang.Object): if (v2 != null) {     return false; }  =>  
SDL_99:231:boolean_equals(java.lang.Object): if (v1 == null) {     if (v2 != null) {         return false;     } } else {     if (!v1.equals( v2 )) {         return false;     } }  =>   if (true) {     if (v2 != null) {         return false;     } } else {     if (!v1.equals( v2 )) {         return false;     } }
SDL_100:227:boolean_equals(java.lang.Object): if (!v1.equals( v2 )) {     return false; }  =>  
SDL_101:226:boolean_equals(java.lang.Object): if (v2 != null) {     return false; }  =>   if (true) {     return false; }
SDL_102:225:boolean_equals(java.lang.Object): return false;  =>   return true;
SDL_103:230:boolean_equals(java.lang.Object): if (!v1.equals( v2 )) {     return false; }  =>   if (true) {     return false; }
SDL_104:229:boolean_equals(java.lang.Object): return false;  =>   return true;
SDL_105:233:boolean_equals(java.lang.Object): return true;  =>   return false;
SDL_106:238:int_hashCode(): return this.keys != null ? this.keys.hashCode() : 0;  =>   return 0;
SDL_107:247:java.lang.Object_clone(): org.jfree.data.DefaultKeyedValues clone = (org.jfree.data.DefaultKeyedValues) super.clone(); clone.keys = (java.util.ArrayList) this.keys.clone(); clone.values = (java.util.ArrayList) this.values.clone(); clone.indexMap = (java.util.HashMap) this.indexMap.clone(); return clone;  =>   org.jfree.data.DefaultKeyedValues clone = (org.jfree.data.DefaultKeyedValues) super.clone(); clone.values = (java.util.ArrayList) this.values.clone(); clone.indexMap = (java.util.HashMap) this.indexMap.clone(); return clone;
SDL_108:247:java.lang.Object_clone(): org.jfree.data.DefaultKeyedValues clone = (org.jfree.data.DefaultKeyedValues) super.clone(); clone.keys = (java.util.ArrayList) this.keys.clone(); clone.values = (java.util.ArrayList) this.values.clone(); clone.indexMap = (java.util.HashMap) this.indexMap.clone(); return clone;  =>   org.jfree.data.DefaultKeyedValues clone = (org.jfree.data.DefaultKeyedValues) super.clone(); clone.keys = (java.util.ArrayList) this.keys.clone(); clone.indexMap = (java.util.HashMap) this.indexMap.clone(); return clone;
SDL_109:247:java.lang.Object_clone(): org.jfree.data.DefaultKeyedValues clone = (org.jfree.data.DefaultKeyedValues) super.clone(); clone.keys = (java.util.ArrayList) this.keys.clone(); clone.values = (java.util.ArrayList) this.values.clone(); clone.indexMap = (java.util.HashMap) this.indexMap.clone(); return clone;  =>   org.jfree.data.DefaultKeyedValues clone = (org.jfree.data.DefaultKeyedValues) super.clone(); clone.keys = (java.util.ArrayList) this.keys.clone(); clone.values = (java.util.ArrayList) this.values.clone(); return clone;
