AORB_1:140:void_setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable):-rowIndex - 1 => -rowIndex * 1
AORB_2:140:void_setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable):-rowIndex - 1 => -rowIndex / 1
AORB_3:140:void_setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable):-rowIndex - 1 => -rowIndex % 1
AORB_4:140:void_setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable):-rowIndex - 1 => -rowIndex + 1
AORB_5:274:int_hashCode():29 * result => 29 / result
AORB_6:274:int_hashCode():29 * result => 29 % result
AORB_7:274:int_hashCode():29 * result => 29 + result
AORB_8:274:int_hashCode():29 * result => 29 - result
AORB_9:274:int_hashCode():29 * result + this.columnKeys.hashCode() => 29 * result * this.columnKeys.hashCode()
AORB_10:274:int_hashCode():29 * result + this.columnKeys.hashCode() => 29 * result / this.columnKeys.hashCode()
AORB_11:274:int_hashCode():29 * result + this.columnKeys.hashCode() => 29 * result % this.columnKeys.hashCode()
AORB_12:274:int_hashCode():29 * result + this.columnKeys.hashCode() => 29 * result - this.columnKeys.hashCode()
AORB_13:275:int_hashCode():29 * result => 29 / result
AORB_14:275:int_hashCode():29 * result => 29 % result
AORB_15:275:int_hashCode():29 * result => 29 + result
AORB_16:275:int_hashCode():29 * result => 29 - result
AORB_17:275:int_hashCode():29 * result + this.rows.hashCode() => 29 * result * this.rows.hashCode()
AORB_18:275:int_hashCode():29 * result + this.rows.hashCode() => 29 * result / this.rows.hashCode()
AORB_19:275:int_hashCode():29 * result + this.rows.hashCode() => 29 * result % this.rows.hashCode()
AORB_20:275:int_hashCode():29 * result + this.rows.hashCode() => 29 * result - this.rows.hashCode()
ROR_1:55:java.lang.Number_getValue(int,int): rowData != null  =>   rowData == null
ROR_2:58:java.lang.Number_getValue(int,int): index >= 0  =>   index > 0
ROR_3:58:java.lang.Number_getValue(int,int): index >= 0  =>   index < 0
ROR_4:58:java.lang.Number_getValue(int,int): index >= 0  =>   index <= 0
ROR_5:58:java.lang.Number_getValue(int,int): index >= 0  =>   index == 0
ROR_6:58:java.lang.Number_getValue(int,int): index >= 0  =>   index != 0
ROR_7:58:java.lang.Number_getValue(int,int): index >= 0  =>   true
ROR_8:58:java.lang.Number_getValue(int,int): index >= 0  =>   false
ROR_9:72:int_getRowIndex(java.lang.Comparable): key == null  =>   key != null
ROR_10:94:int_getColumnIndex(java.lang.Comparable): key == null  =>   key != null
ROR_11:107:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): rowKey == null  =>   rowKey != null
ROR_12:110:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): columnKey == null  =>   columnKey != null
ROR_13:117:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): row >= 0  =>   row > 0
ROR_14:117:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): row >= 0  =>   row < 0
ROR_15:117:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): row >= 0  =>   row <= 0
ROR_16:117:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): row >= 0  =>   row == 0
ROR_17:117:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): row >= 0  =>   row != 0
ROR_18:117:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): row >= 0  =>   true
ROR_19:117:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): row >= 0  =>   false
ROR_20:120:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): col >= 0  =>   col > 0
ROR_21:120:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): col >= 0  =>   col < 0
ROR_22:120:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): col >= 0  =>   col <= 0
ROR_23:120:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): col >= 0  =>   col == 0
ROR_24:120:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): col >= 0  =>   col != 0
ROR_25:120:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): col >= 0  =>   true
ROR_26:120:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): col >= 0  =>   false
ROR_27:135:void_setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable): rowIndex >= 0  =>   rowIndex > 0
ROR_28:135:void_setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable): rowIndex >= 0  =>   rowIndex < 0
ROR_29:135:void_setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable): rowIndex >= 0  =>   rowIndex <= 0
ROR_30:135:void_setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable): rowIndex >= 0  =>   rowIndex == 0
ROR_31:135:void_setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable): rowIndex >= 0  =>   rowIndex != 0
ROR_32:135:void_setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable): rowIndex >= 0  =>   true
ROR_33:135:void_setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable): rowIndex >= 0  =>   false
ROR_34:150:void_setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable): columnIndex < 0  =>   columnIndex > 0
ROR_35:150:void_setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable): columnIndex < 0  =>   columnIndex >= 0
ROR_36:150:void_setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable): columnIndex < 0  =>   columnIndex <= 0
ROR_37:150:void_setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable): columnIndex < 0  =>   columnIndex == 0
ROR_38:150:void_setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable): columnIndex < 0  =>   columnIndex != 0
ROR_39:150:void_setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable): columnIndex < 0  =>   true
ROR_40:150:void_setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable): columnIndex < 0  =>   false
ROR_41:161:void_removeValue(java.lang.Comparable,java.lang.Comparable): item < itemCount  =>   item > itemCount
ROR_42:161:void_removeValue(java.lang.Comparable,java.lang.Comparable): item < itemCount  =>   item >= itemCount
ROR_43:161:void_removeValue(java.lang.Comparable,java.lang.Comparable): item < itemCount  =>   item <= itemCount
ROR_44:161:void_removeValue(java.lang.Comparable,java.lang.Comparable): item < itemCount  =>   item == itemCount
ROR_45:161:void_removeValue(java.lang.Comparable,java.lang.Comparable): item < itemCount  =>   item != itemCount
ROR_46:161:void_removeValue(java.lang.Comparable,java.lang.Comparable): item < itemCount  =>   true
ROR_47:161:void_removeValue(java.lang.Comparable,java.lang.Comparable): item < itemCount  =>   false
ROR_48:162:void_removeValue(java.lang.Comparable,java.lang.Comparable): row.getValue( item ) != null  =>   row.getValue( item ) == null
ROR_49:172:void_removeValue(java.lang.Comparable,java.lang.Comparable): item < itemCount  =>   item > itemCount
ROR_50:172:void_removeValue(java.lang.Comparable,java.lang.Comparable): item < itemCount  =>   item >= itemCount
ROR_51:172:void_removeValue(java.lang.Comparable,java.lang.Comparable): item < itemCount  =>   item <= itemCount
ROR_52:172:void_removeValue(java.lang.Comparable,java.lang.Comparable): item < itemCount  =>   item == itemCount
ROR_53:172:void_removeValue(java.lang.Comparable,java.lang.Comparable): item < itemCount  =>   item != itemCount
ROR_54:172:void_removeValue(java.lang.Comparable,java.lang.Comparable): item < itemCount  =>   true
ROR_55:172:void_removeValue(java.lang.Comparable,java.lang.Comparable): item < itemCount  =>   false
ROR_56:175:void_removeValue(java.lang.Comparable,java.lang.Comparable): columnIndex >= 0  =>   columnIndex > 0
ROR_57:175:void_removeValue(java.lang.Comparable,java.lang.Comparable): columnIndex >= 0  =>   columnIndex < 0
ROR_58:175:void_removeValue(java.lang.Comparable,java.lang.Comparable): columnIndex >= 0  =>   columnIndex <= 0
ROR_59:175:void_removeValue(java.lang.Comparable,java.lang.Comparable): columnIndex >= 0  =>   columnIndex == 0
ROR_60:175:void_removeValue(java.lang.Comparable,java.lang.Comparable): columnIndex >= 0  =>   columnIndex != 0
ROR_61:175:void_removeValue(java.lang.Comparable,java.lang.Comparable): columnIndex >= 0  =>   true
ROR_62:175:void_removeValue(java.lang.Comparable,java.lang.Comparable): columnIndex >= 0  =>   false
ROR_63:175:void_removeValue(java.lang.Comparable,java.lang.Comparable): row.getValue( columnIndex ) != null  =>   row.getValue( columnIndex ) == null
ROR_64:181:void_removeValue(java.lang.Comparable,java.lang.Comparable): item < itemCount  =>   item > itemCount
ROR_65:181:void_removeValue(java.lang.Comparable,java.lang.Comparable): item < itemCount  =>   item >= itemCount
ROR_66:181:void_removeValue(java.lang.Comparable,java.lang.Comparable): item < itemCount  =>   item <= itemCount
ROR_67:181:void_removeValue(java.lang.Comparable,java.lang.Comparable): item < itemCount  =>   item == itemCount
ROR_68:181:void_removeValue(java.lang.Comparable,java.lang.Comparable): item < itemCount  =>   item != itemCount
ROR_69:181:void_removeValue(java.lang.Comparable,java.lang.Comparable): item < itemCount  =>   true
ROR_70:181:void_removeValue(java.lang.Comparable,java.lang.Comparable): item < itemCount  =>   false
ROR_71:184:void_removeValue(java.lang.Comparable,java.lang.Comparable): columnIndex >= 0  =>   columnIndex > 0
ROR_72:184:void_removeValue(java.lang.Comparable,java.lang.Comparable): columnIndex >= 0  =>   columnIndex < 0
ROR_73:184:void_removeValue(java.lang.Comparable,java.lang.Comparable): columnIndex >= 0  =>   columnIndex <= 0
ROR_74:184:void_removeValue(java.lang.Comparable,java.lang.Comparable): columnIndex >= 0  =>   columnIndex == 0
ROR_75:184:void_removeValue(java.lang.Comparable,java.lang.Comparable): columnIndex >= 0  =>   columnIndex != 0
ROR_76:184:void_removeValue(java.lang.Comparable,java.lang.Comparable): columnIndex >= 0  =>   true
ROR_77:184:void_removeValue(java.lang.Comparable,java.lang.Comparable): columnIndex >= 0  =>   false
ROR_78:228:boolean_equals(java.lang.Object): o == null  =>   o != null
ROR_79:231:boolean_equals(java.lang.Object): o == this  =>   o != this
ROR_80:245:boolean_equals(java.lang.Object): rowCount != kv2D.getRowCount()  =>   rowCount > kv2D.getRowCount()
ROR_81:245:boolean_equals(java.lang.Object): rowCount != kv2D.getRowCount()  =>   rowCount >= kv2D.getRowCount()
ROR_82:245:boolean_equals(java.lang.Object): rowCount != kv2D.getRowCount()  =>   rowCount < kv2D.getRowCount()
ROR_83:245:boolean_equals(java.lang.Object): rowCount != kv2D.getRowCount()  =>   rowCount <= kv2D.getRowCount()
ROR_84:245:boolean_equals(java.lang.Object): rowCount != kv2D.getRowCount()  =>   rowCount == kv2D.getRowCount()
ROR_85:245:boolean_equals(java.lang.Object): rowCount != kv2D.getRowCount()  =>   true
ROR_86:245:boolean_equals(java.lang.Object): rowCount != kv2D.getRowCount()  =>   false
ROR_87:249:boolean_equals(java.lang.Object): colCount != kv2D.getColumnCount()  =>   colCount > kv2D.getColumnCount()
ROR_88:249:boolean_equals(java.lang.Object): colCount != kv2D.getColumnCount()  =>   colCount >= kv2D.getColumnCount()
ROR_89:249:boolean_equals(java.lang.Object): colCount != kv2D.getColumnCount()  =>   colCount < kv2D.getColumnCount()
ROR_90:249:boolean_equals(java.lang.Object): colCount != kv2D.getColumnCount()  =>   colCount <= kv2D.getColumnCount()
ROR_91:249:boolean_equals(java.lang.Object): colCount != kv2D.getColumnCount()  =>   colCount == kv2D.getColumnCount()
ROR_92:249:boolean_equals(java.lang.Object): colCount != kv2D.getColumnCount()  =>   true
ROR_93:249:boolean_equals(java.lang.Object): colCount != kv2D.getColumnCount()  =>   false
ROR_94:252:boolean_equals(java.lang.Object): r < rowCount  =>   r > rowCount
ROR_95:252:boolean_equals(java.lang.Object): r < rowCount  =>   r >= rowCount
ROR_96:252:boolean_equals(java.lang.Object): r < rowCount  =>   r <= rowCount
ROR_97:252:boolean_equals(java.lang.Object): r < rowCount  =>   r == rowCount
ROR_98:252:boolean_equals(java.lang.Object): r < rowCount  =>   r != rowCount
ROR_99:252:boolean_equals(java.lang.Object): r < rowCount  =>   true
ROR_100:252:boolean_equals(java.lang.Object): r < rowCount  =>   false
ROR_101:253:boolean_equals(java.lang.Object): c < colCount  =>   c > colCount
ROR_102:253:boolean_equals(java.lang.Object): c < colCount  =>   c >= colCount
ROR_103:253:boolean_equals(java.lang.Object): c < colCount  =>   c <= colCount
ROR_104:253:boolean_equals(java.lang.Object): c < colCount  =>   c == colCount
ROR_105:253:boolean_equals(java.lang.Object): c < colCount  =>   c != colCount
ROR_106:253:boolean_equals(java.lang.Object): c < colCount  =>   true
ROR_107:253:boolean_equals(java.lang.Object): c < colCount  =>   false
ROR_108:256:boolean_equals(java.lang.Object): v1 == null  =>   v1 != null
ROR_109:257:boolean_equals(java.lang.Object): v2 != null  =>   v2 == null
COR_1:175:void_removeValue(java.lang.Comparable,java.lang.Comparable): columnIndex >= 0 && row.getValue( columnIndex ) != null  =>   columnIndex >= 0 || row.getValue( columnIndex ) != null
COR_2:175:void_removeValue(java.lang.Comparable,java.lang.Comparable): columnIndex >= 0 && row.getValue( columnIndex ) != null  =>   columnIndex >= 0 ^ row.getValue( columnIndex ) != null
SDL_1:38:DefaultKeyedValues2D(boolean): this.rowKeys = new java.util.ArrayList(); this.columnKeys = new java.util.ArrayList(); this.rows = new java.util.ArrayList(); this.sortRowKeys = sortRowKeys;  =>   this.columnKeys = new java.util.ArrayList(); this.rows = new java.util.ArrayList(); this.sortRowKeys = sortRowKeys;
SDL_2:38:DefaultKeyedValues2D(boolean): this.rowKeys = new java.util.ArrayList(); this.columnKeys = new java.util.ArrayList(); this.rows = new java.util.ArrayList(); this.sortRowKeys = sortRowKeys;  =>   this.rowKeys = new java.util.ArrayList(); this.rows = new java.util.ArrayList(); this.sortRowKeys = sortRowKeys;
SDL_3:38:DefaultKeyedValues2D(boolean): this.rowKeys = new java.util.ArrayList(); this.columnKeys = new java.util.ArrayList(); this.rows = new java.util.ArrayList(); this.sortRowKeys = sortRowKeys;  =>   this.rowKeys = new java.util.ArrayList(); this.columnKeys = new java.util.ArrayList(); this.sortRowKeys = sortRowKeys;
SDL_4:38:DefaultKeyedValues2D(boolean): this.rowKeys = new java.util.ArrayList(); this.columnKeys = new java.util.ArrayList(); this.rows = new java.util.ArrayList(); this.sortRowKeys = sortRowKeys;  =>   this.rowKeys = new java.util.ArrayList(); this.columnKeys = new java.util.ArrayList(); this.rows = new java.util.ArrayList();
SDL_5:44:int_getRowCount(): return this.rowKeys.size();  =>   return 0;
SDL_6:49:int_getColumnCount(): return this.columnKeys.size();  =>   return 0;
SDL_7:56:java.lang.Number_getValue(int,int): java.lang.Number result = null; org.jfree.data.DefaultKeyedValues rowData = (org.jfree.data.DefaultKeyedValues) this.rows.get( row ); if (rowData != null) {     java.lang.Comparable columnKey = (java.lang.Comparable) this.columnKeys.get( column );     int index = rowData.getIndex( columnKey );     if (index >= 0) {         result = rowData.getValue( index );     } } return result;  =>   java.lang.Number result = null; org.jfree.data.DefaultKeyedValues rowData = (org.jfree.data.DefaultKeyedValues) this.rows.get( row ); return result;
SDL_8:58:java.lang.Number_getValue(int,int): java.lang.Comparable columnKey = (java.lang.Comparable) this.columnKeys.get( column ); int index = rowData.getIndex( columnKey ); if (index >= 0) {     result = rowData.getValue( index ); }  =>   java.lang.Comparable columnKey = (java.lang.Comparable) this.columnKeys.get( column ); int index = rowData.getIndex( columnKey );
SDL_9:62:java.lang.Number_getValue(int,int): if (rowData != null) {     java.lang.Comparable columnKey = (java.lang.Comparable) this.columnKeys.get( column );     int index = rowData.getIndex( columnKey );     if (index >= 0) {         result = rowData.getValue( index );     } }  =>   if (true) {     java.lang.Comparable columnKey = (java.lang.Comparable) this.columnKeys.get( column );     int index = rowData.getIndex( columnKey );     if (index >= 0) {         result = rowData.getValue( index );     } }
SDL_10:59:java.lang.Number_getValue(int,int): result = rowData.getValue( index );  =>  
SDL_11:61:java.lang.Number_getValue(int,int): if (index >= 0) {     result = rowData.getValue( index ); }  =>   if (true) {     result = rowData.getValue( index ); }
SDL_12:77:int_getRowIndex(java.lang.Comparable): if (key == null) {     throw new java.lang.IllegalArgumentException( \"Null 'key' argument.\" ); } if (this.sortRowKeys) {     return Collections.binarySearch( this.rowKeys, key ); } else {     return this.rowKeys.indexOf( key ); }  =>   if (this.sortRowKeys) {     return Collections.binarySearch( this.rowKeys, key ); } else {     return this.rowKeys.indexOf( key ); }
SDL_13:75:int_getRowIndex(java.lang.Comparable): if (key == null) {     throw new java.lang.IllegalArgumentException( \"Null 'key' argument.\" ); } if (this.sortRowKeys) {     return Collections.binarySearch( this.rowKeys, key ); } else {     return this.rowKeys.indexOf( key ); }  =>   if (key == null) {     throw new java.lang.IllegalArgumentException( \"Null 'key' argument.\" ); }
SDL_14:73:int_getRowIndex(java.lang.Comparable): throw new java.lang.IllegalArgumentException( \"Null 'key' argument.\" );  =>  
SDL_15:75:int_getRowIndex(java.lang.Comparable): if (key == null) {     throw new java.lang.IllegalArgumentException( \"Null 'key' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'key' argument.\" ); }
SDL_16:80:int_getRowIndex(java.lang.Comparable): if (this.sortRowKeys) {     return Collections.binarySearch( this.rowKeys, key ); } else {     return this.rowKeys.indexOf( key ); }  =>   if (true) {     return Collections.binarySearch( this.rowKeys, key ); } else {     return this.rowKeys.indexOf( key ); }
SDL_17:77:int_getRowIndex(java.lang.Comparable): return Collections.binarySearch( this.rowKeys, key );  =>   return 0;
SDL_18:79:int_getRowIndex(java.lang.Comparable): return this.rowKeys.indexOf( key );  =>   return 0;
SDL_19:95:int_getColumnIndex(java.lang.Comparable): if (key == null) {     throw new java.lang.IllegalArgumentException( \"Null 'key' argument.\" ); } return this.columnKeys.indexOf( key );  =>   return this.columnKeys.indexOf( key );
SDL_20:95:int_getColumnIndex(java.lang.Comparable): throw new java.lang.IllegalArgumentException( \"Null 'key' argument.\" );  =>  
SDL_21:97:int_getColumnIndex(java.lang.Comparable): if (key == null) {     throw new java.lang.IllegalArgumentException( \"Null 'key' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'key' argument.\" ); }
SDL_22:98:int_getColumnIndex(java.lang.Comparable): return this.columnKeys.indexOf( key );  =>   return 0;
SDL_23:121:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); } if (columnKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" ); } if (!this.columnKeys.contains( columnKey )) {     throw new org.jfree.data.UnknownKeyException( \"Unrecognised columnKey: \" + columnKey ); } int row = getRowIndex( rowKey ); if (row >= 0) {     org.jfree.data.DefaultKeyedValues rowData = (org.jfree.data.DefaultKeyedValues) this.rows.get( row );     int col = rowData.getIndex( columnKey );     return col >= 0 ? rowData.getValue( col ) : null; } else {     throw new org.jfree.data.UnknownKeyException( \"Unrecognised rowKey: \" + rowKey ); }  =>   if (columnKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" ); } if (!this.columnKeys.contains( columnKey )) {     throw new org.jfree.data.UnknownKeyException( \"Unrecognised columnKey: \" + columnKey ); } int row = getRowIndex( rowKey ); if (row >= 0) {     org.jfree.data.DefaultKeyedValues rowData = (org.jfree.data.DefaultKeyedValues) this.rows.get( row );     int col = rowData.getIndex( columnKey );     return col >= 0 ? rowData.getValue( col ) : null; } else {     throw new org.jfree.data.UnknownKeyException( \"Unrecognised rowKey: \" + rowKey ); }
SDL_24:121:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); } if (columnKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" ); } if (!this.columnKeys.contains( columnKey )) {     throw new org.jfree.data.UnknownKeyException( \"Unrecognised columnKey: \" + columnKey ); } int row = getRowIndex( rowKey ); if (row >= 0) {     org.jfree.data.DefaultKeyedValues rowData = (org.jfree.data.DefaultKeyedValues) this.rows.get( row );     int col = rowData.getIndex( columnKey );     return col >= 0 ? rowData.getValue( col ) : null; } else {     throw new org.jfree.data.UnknownKeyException( \"Unrecognised rowKey: \" + rowKey ); }  =>   if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); } if (!this.columnKeys.contains( columnKey )) {     throw new org.jfree.data.UnknownKeyException( \"Unrecognised columnKey: \" + columnKey ); } int row = getRowIndex( rowKey ); if (row >= 0) {     org.jfree.data.DefaultKeyedValues rowData = (org.jfree.data.DefaultKeyedValues) this.rows.get( row );     int col = rowData.getIndex( columnKey );     return col >= 0 ? rowData.getValue( col ) : null; } else {     throw new org.jfree.data.UnknownKeyException( \"Unrecognised rowKey: \" + rowKey ); }
SDL_25:121:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); } if (columnKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" ); } if (!this.columnKeys.contains( columnKey )) {     throw new org.jfree.data.UnknownKeyException( \"Unrecognised columnKey: \" + columnKey ); } int row = getRowIndex( rowKey ); if (row >= 0) {     org.jfree.data.DefaultKeyedValues rowData = (org.jfree.data.DefaultKeyedValues) this.rows.get( row );     int col = rowData.getIndex( columnKey );     return col >= 0 ? rowData.getValue( col ) : null; } else {     throw new org.jfree.data.UnknownKeyException( \"Unrecognised rowKey: \" + rowKey ); }  =>   if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); } if (columnKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" ); } int row = getRowIndex( rowKey ); if (row >= 0) {     org.jfree.data.DefaultKeyedValues rowData = (org.jfree.data.DefaultKeyedValues) this.rows.get( row );     int col = rowData.getIndex( columnKey );     return col >= 0 ? rowData.getValue( col ) : null; } else {     throw new org.jfree.data.UnknownKeyException( \"Unrecognised rowKey: \" + rowKey ); }
SDL_26:117:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); } if (columnKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" ); } if (!this.columnKeys.contains( columnKey )) {     throw new org.jfree.data.UnknownKeyException( \"Unrecognised columnKey: \" + columnKey ); } int row = getRowIndex( rowKey ); if (row >= 0) {     org.jfree.data.DefaultKeyedValues rowData = (org.jfree.data.DefaultKeyedValues) this.rows.get( row );     int col = rowData.getIndex( columnKey );     return col >= 0 ? rowData.getValue( col ) : null; } else {     throw new org.jfree.data.UnknownKeyException( \"Unrecognised rowKey: \" + rowKey ); }  =>   if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); } if (columnKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" ); } if (!this.columnKeys.contains( columnKey )) {     throw new org.jfree.data.UnknownKeyException( \"Unrecognised columnKey: \" + columnKey ); } int row = getRowIndex( rowKey );
SDL_27:108:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" );  =>  
SDL_28:110:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); }
SDL_29:111:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" );  =>  
SDL_30:113:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): if (columnKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" ); }
SDL_31:114:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): throw new org.jfree.data.UnknownKeyException( \"Unrecognised columnKey: \" + columnKey );  =>  
SDL_32:116:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): if (!this.columnKeys.contains( columnKey )) {     throw new org.jfree.data.UnknownKeyException( \"Unrecognised columnKey: \" + columnKey ); }  =>   if (true) {     throw new org.jfree.data.UnknownKeyException( \"Unrecognised columnKey: \" + columnKey ); }
SDL_33:124:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): if (row >= 0) {     org.jfree.data.DefaultKeyedValues rowData = (org.jfree.data.DefaultKeyedValues) this.rows.get( row );     int col = rowData.getIndex( columnKey );     return col >= 0 ? rowData.getValue( col ) : null; } else {     throw new org.jfree.data.UnknownKeyException( \"Unrecognised rowKey: \" + rowKey ); }  =>   if (true) {     org.jfree.data.DefaultKeyedValues rowData = (org.jfree.data.DefaultKeyedValues) this.rows.get( row );     int col = rowData.getIndex( columnKey );     return col >= 0 ? rowData.getValue( col ) : null; } else {     throw new org.jfree.data.UnknownKeyException( \"Unrecognised rowKey: \" + rowKey ); }
SDL_34:122:java.lang.Number_getValue(java.lang.Comparable,java.lang.Comparable): throw new org.jfree.data.UnknownKeyException( \"Unrecognised rowKey: \" + rowKey );  =>  
SDL_35:128:void_addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable): setValue( value, rowKey, columnKey );  =>  
SDL_36:140:void_setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable): org.jfree.data.DefaultKeyedValues row; int rowIndex = getRowIndex( rowKey ); if (rowIndex >= 0) {     row = (org.jfree.data.DefaultKeyedValues) this.rows.get( rowIndex ); } else {     row = new org.jfree.data.DefaultKeyedValues();     if (this.sortRowKeys) {         rowIndex = -rowIndex - 1;         this.rowKeys.add( rowIndex, rowKey );         this.rows.add( rowIndex, row );     } else {         this.rowKeys.add( rowKey );         this.rows.add( row );     } } row.setValue( columnKey, value ); int columnIndex = this.columnKeys.indexOf( columnKey ); if (columnIndex < 0) {     this.columnKeys.add( columnKey ); }  =>   org.jfree.data.DefaultKeyedValues row; int rowIndex = getRowIndex( rowKey ); row.setValue( columnKey, value ); int columnIndex = this.columnKeys.indexOf( columnKey ); if (columnIndex < 0) {     this.columnKeys.add( columnKey ); }
SDL_37:152:void_setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable): org.jfree.data.DefaultKeyedValues row; int rowIndex = getRowIndex( rowKey ); if (rowIndex >= 0) {     row = (org.jfree.data.DefaultKeyedValues) this.rows.get( rowIndex ); } else {     row = new org.jfree.data.DefaultKeyedValues();     if (this.sortRowKeys) {         rowIndex = -rowIndex - 1;         this.rowKeys.add( rowIndex, rowKey );         this.rows.add( rowIndex, row );     } else {         this.rowKeys.add( rowKey );         this.rows.add( row );     } } row.setValue( columnKey, value ); int columnIndex = this.columnKeys.indexOf( columnKey ); if (columnIndex < 0) {     this.columnKeys.add( columnKey ); }  =>   org.jfree.data.DefaultKeyedValues row; int rowIndex = getRowIndex( rowKey ); if (rowIndex >= 0) {     row = (org.jfree.data.DefaultKeyedValues) this.rows.get( rowIndex ); } else {     row = new org.jfree.data.DefaultKeyedValues();     if (this.sortRowKeys) {         rowIndex = -rowIndex - 1;         this.rowKeys.add( rowIndex, rowKey );         this.rows.add( rowIndex, row );     } else {         this.rowKeys.add( rowKey );         this.rows.add( row );     } } int columnIndex = this.columnKeys.indexOf( columnKey ); if (columnIndex < 0) {     this.columnKeys.add( columnKey ); }
SDL_38:150:void_setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable): org.jfree.data.DefaultKeyedValues row; int rowIndex = getRowIndex( rowKey ); if (rowIndex >= 0) {     row = (org.jfree.data.DefaultKeyedValues) this.rows.get( rowIndex ); } else {     row = new org.jfree.data.DefaultKeyedValues();     if (this.sortRowKeys) {         rowIndex = -rowIndex - 1;         this.rowKeys.add( rowIndex, rowKey );         this.rows.add( rowIndex, row );     } else {         this.rowKeys.add( rowKey );         this.rows.add( row );     } } row.setValue( columnKey, value ); int columnIndex = this.columnKeys.indexOf( columnKey ); if (columnIndex < 0) {     this.columnKeys.add( columnKey ); }  =>   org.jfree.data.DefaultKeyedValues row; int rowIndex = getRowIndex( rowKey ); if (rowIndex >= 0) {     row = (org.jfree.data.DefaultKeyedValues) this.rows.get( rowIndex ); } else {     row = new org.jfree.data.DefaultKeyedValues();     if (this.sortRowKeys) {         rowIndex = -rowIndex - 1;         this.rowKeys.add( rowIndex, rowKey );         this.rows.add( rowIndex, row );     } else {         this.rowKeys.add( rowKey );         this.rows.add( row );     } } row.setValue( columnKey, value ); int columnIndex = this.columnKeys.indexOf( columnKey );
SDL_39:136:void_setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable): row = (org.jfree.data.DefaultKeyedValues) this.rows.get( rowIndex );  =>  
SDL_40:148:void_setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable): if (rowIndex >= 0) {     row = (org.jfree.data.DefaultKeyedValues) this.rows.get( rowIndex ); } else {     row = new org.jfree.data.DefaultKeyedValues();     if (this.sortRowKeys) {         rowIndex = -rowIndex - 1;         this.rowKeys.add( rowIndex, rowKey );         this.rows.add( rowIndex, row );     } else {         this.rowKeys.add( rowKey );         this.rows.add( row );     } }  =>   if (true) {     row = (org.jfree.data.DefaultKeyedValues) this.rows.get( rowIndex ); } else {     row = new org.jfree.data.DefaultKeyedValues();     if (this.sortRowKeys) {         rowIndex = -rowIndex - 1;         this.rowKeys.add( rowIndex, rowKey );         this.rows.add( rowIndex, row );     } else {         this.rowKeys.add( rowKey );         this.rows.add( row );     } }
SDL_41:146:void_setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable): row = new org.jfree.data.DefaultKeyedValues(); if (this.sortRowKeys) {     rowIndex = -rowIndex - 1;     this.rowKeys.add( rowIndex, rowKey );     this.rows.add( rowIndex, row ); } else {     this.rowKeys.add( rowKey );     this.rows.add( row ); }  =>   if (this.sortRowKeys) {     rowIndex = -rowIndex - 1;     this.rowKeys.add( rowIndex, rowKey );     this.rows.add( rowIndex, row ); } else {     this.rowKeys.add( rowKey );     this.rows.add( row ); }
SDL_42:139:void_setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable): row = new org.jfree.data.DefaultKeyedValues(); if (this.sortRowKeys) {     rowIndex = -rowIndex - 1;     this.rowKeys.add( rowIndex, rowKey );     this.rows.add( rowIndex, row ); } else {     this.rowKeys.add( rowKey );     this.rows.add( row ); }  =>   row = new org.jfree.data.DefaultKeyedValues();
SDL_43:142:void_setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable): rowIndex = -rowIndex - 1; this.rowKeys.add( rowIndex, rowKey ); this.rows.add( rowIndex, row );  =>   this.rowKeys.add( rowIndex, rowKey ); this.rows.add( rowIndex, row );
SDL_44:142:void_setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable): rowIndex = -rowIndex - 1; this.rowKeys.add( rowIndex, rowKey ); this.rows.add( rowIndex, row );  =>   rowIndex = -rowIndex - 1; this.rows.add( rowIndex, row );
SDL_45:142:void_setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable): rowIndex = -rowIndex - 1; this.rowKeys.add( rowIndex, rowKey ); this.rows.add( rowIndex, row );  =>   rowIndex = -rowIndex - 1; this.rowKeys.add( rowIndex, rowKey );
SDL_46:147:void_setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable): if (this.sortRowKeys) {     rowIndex = -rowIndex - 1;     this.rowKeys.add( rowIndex, rowKey );     this.rows.add( rowIndex, row ); } else {     this.rowKeys.add( rowKey );     this.rows.add( row ); }  =>   if (true) {     rowIndex = -rowIndex - 1;     this.rowKeys.add( rowIndex, rowKey );     this.rows.add( rowIndex, row ); } else {     this.rowKeys.add( rowKey );     this.rows.add( row ); }
SDL_47:145:void_setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable): this.rowKeys.add( rowKey ); this.rows.add( row );  =>   this.rows.add( row );
SDL_48:145:void_setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable): this.rowKeys.add( rowKey ); this.rows.add( row );  =>   this.rowKeys.add( rowKey );
SDL_49:151:void_setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable): this.columnKeys.add( columnKey );  =>  
SDL_50:153:void_setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable): if (columnIndex < 0) {     this.columnKeys.add( columnKey ); }  =>   if (true) {     this.columnKeys.add( columnKey ); }
SDL_51:189:void_removeValue(java.lang.Comparable,java.lang.Comparable): setValue( null, rowKey, columnKey ); boolean allNull = true; int rowIndex = getRowIndex( rowKey ); org.jfree.data.DefaultKeyedValues row = (org.jfree.data.DefaultKeyedValues) this.rows.get( rowIndex ); for (int item = 0, itemCount = row.getItemCount(); item < itemCount; item++) {     if (row.getValue( item ) != null) {         allNull = false;         break;     } } if (allNull) {     this.rowKeys.remove( rowIndex );     this.rows.remove( rowIndex ); } allNull = true; for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) {     row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item );     int columnIndex = row.getIndex( columnKey );     if (columnIndex >= 0 && row.getValue( columnIndex ) != null) {         allNull = false;         break;     } } if (allNull) {     for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) {         row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item );         int columnIndex = row.getIndex( columnKey );         if (columnIndex >= 0) {             row.removeValue( columnIndex );         }     }     this.columnKeys.remove( columnKey ); }  =>   boolean allNull = true; int rowIndex = getRowIndex( rowKey ); org.jfree.data.DefaultKeyedValues row = (org.jfree.data.DefaultKeyedValues) this.rows.get( rowIndex ); for (int item = 0, itemCount = row.getItemCount(); item < itemCount; item++) {     if (row.getValue( item ) != null) {         allNull = false;         break;     } } if (allNull) {     this.rowKeys.remove( rowIndex );     this.rows.remove( rowIndex ); } allNull = true; for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) {     row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item );     int columnIndex = row.getIndex( columnKey );     if (columnIndex >= 0 && row.getValue( columnIndex ) != null) {         allNull = false;         break;     } } if (allNull) {     for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) {         row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item );         int columnIndex = row.getIndex( columnKey );         if (columnIndex >= 0) {             row.removeValue( columnIndex );         }     }     this.columnKeys.remove( columnKey ); }
SDL_52:184:void_removeValue(java.lang.Comparable,java.lang.Comparable): setValue( null, rowKey, columnKey ); boolean allNull = true; int rowIndex = getRowIndex( rowKey ); org.jfree.data.DefaultKeyedValues row = (org.jfree.data.DefaultKeyedValues) this.rows.get( rowIndex ); for (int item = 0, itemCount = row.getItemCount(); item < itemCount; item++) {     if (row.getValue( item ) != null) {         allNull = false;         break;     } } if (allNull) {     this.rowKeys.remove( rowIndex );     this.rows.remove( rowIndex ); } allNull = true; for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) {     row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item );     int columnIndex = row.getIndex( columnKey );     if (columnIndex >= 0 && row.getValue( columnIndex ) != null) {         allNull = false;         break;     } } if (allNull) {     for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) {         row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item );         int columnIndex = row.getIndex( columnKey );         if (columnIndex >= 0) {             row.removeValue( columnIndex );         }     }     this.columnKeys.remove( columnKey ); }  =>   setValue( null, rowKey, columnKey ); boolean allNull = true; int rowIndex = getRowIndex( rowKey ); org.jfree.data.DefaultKeyedValues row = (org.jfree.data.DefaultKeyedValues) this.rows.get( rowIndex ); if (allNull) {     this.rowKeys.remove( rowIndex );     this.rows.remove( rowIndex ); } allNull = true; for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) {     row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item );     int columnIndex = row.getIndex( columnKey );     if (columnIndex >= 0 && row.getValue( columnIndex ) != null) {         allNull = false;         break;     } } if (allNull) {     for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) {         row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item );         int columnIndex = row.getIndex( columnKey );         if (columnIndex >= 0) {             row.removeValue( columnIndex );         }     }     this.columnKeys.remove( columnKey ); }
SDL_53:186:void_removeValue(java.lang.Comparable,java.lang.Comparable): setValue( null, rowKey, columnKey ); boolean allNull = true; int rowIndex = getRowIndex( rowKey ); org.jfree.data.DefaultKeyedValues row = (org.jfree.data.DefaultKeyedValues) this.rows.get( rowIndex ); for (int item = 0, itemCount = row.getItemCount(); item < itemCount; item++) {     if (row.getValue( item ) != null) {         allNull = false;         break;     } } if (allNull) {     this.rowKeys.remove( rowIndex );     this.rows.remove( rowIndex ); } allNull = true; for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) {     row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item );     int columnIndex = row.getIndex( columnKey );     if (columnIndex >= 0 && row.getValue( columnIndex ) != null) {         allNull = false;         break;     } } if (allNull) {     for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) {         row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item );         int columnIndex = row.getIndex( columnKey );         if (columnIndex >= 0) {             row.removeValue( columnIndex );         }     }     this.columnKeys.remove( columnKey ); }  =>   setValue( null, rowKey, columnKey ); boolean allNull = true; int rowIndex = getRowIndex( rowKey ); org.jfree.data.DefaultKeyedValues row = (org.jfree.data.DefaultKeyedValues) this.rows.get( rowIndex ); for (int item = 0, itemCount = row.getItemCount(); item < itemCount; item++) {     if (row.getValue( item ) != null) {         allNull = false;         break;     } } allNull = true; for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) {     row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item );     int columnIndex = row.getIndex( columnKey );     if (columnIndex >= 0 && row.getValue( columnIndex ) != null) {         allNull = false;         break;     } } if (allNull) {     for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) {         row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item );         int columnIndex = row.getIndex( columnKey );         if (columnIndex >= 0) {             row.removeValue( columnIndex );         }     }     this.columnKeys.remove( columnKey ); }
SDL_54:189:void_removeValue(java.lang.Comparable,java.lang.Comparable): setValue( null, rowKey, columnKey ); boolean allNull = true; int rowIndex = getRowIndex( rowKey ); org.jfree.data.DefaultKeyedValues row = (org.jfree.data.DefaultKeyedValues) this.rows.get( rowIndex ); for (int item = 0, itemCount = row.getItemCount(); item < itemCount; item++) {     if (row.getValue( item ) != null) {         allNull = false;         break;     } } if (allNull) {     this.rowKeys.remove( rowIndex );     this.rows.remove( rowIndex ); } allNull = true; for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) {     row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item );     int columnIndex = row.getIndex( columnKey );     if (columnIndex >= 0 && row.getValue( columnIndex ) != null) {         allNull = false;         break;     } } if (allNull) {     for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) {         row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item );         int columnIndex = row.getIndex( columnKey );         if (columnIndex >= 0) {             row.removeValue( columnIndex );         }     }     this.columnKeys.remove( columnKey ); }  =>   setValue( null, rowKey, columnKey ); boolean allNull = true; int rowIndex = getRowIndex( rowKey ); org.jfree.data.DefaultKeyedValues row = (org.jfree.data.DefaultKeyedValues) this.rows.get( rowIndex ); for (int item = 0, itemCount = row.getItemCount(); item < itemCount; item++) {     if (row.getValue( item ) != null) {         allNull = false;         break;     } } if (allNull) {     this.rowKeys.remove( rowIndex );     this.rows.remove( rowIndex ); } for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) {     row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item );     int columnIndex = row.getIndex( columnKey );     if (columnIndex >= 0 && row.getValue( columnIndex ) != null) {         allNull = false;         break;     } } if (allNull) {     for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) {         row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item );         int columnIndex = row.getIndex( columnKey );         if (columnIndex >= 0) {             row.removeValue( columnIndex );         }     }     this.columnKeys.remove( columnKey ); }
SDL_55:182:void_removeValue(java.lang.Comparable,java.lang.Comparable): setValue( null, rowKey, columnKey ); boolean allNull = true; int rowIndex = getRowIndex( rowKey ); org.jfree.data.DefaultKeyedValues row = (org.jfree.data.DefaultKeyedValues) this.rows.get( rowIndex ); for (int item = 0, itemCount = row.getItemCount(); item < itemCount; item++) {     if (row.getValue( item ) != null) {         allNull = false;         break;     } } if (allNull) {     this.rowKeys.remove( rowIndex );     this.rows.remove( rowIndex ); } allNull = true; for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) {     row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item );     int columnIndex = row.getIndex( columnKey );     if (columnIndex >= 0 && row.getValue( columnIndex ) != null) {         allNull = false;         break;     } } if (allNull) {     for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) {         row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item );         int columnIndex = row.getIndex( columnKey );         if (columnIndex >= 0) {             row.removeValue( columnIndex );         }     }     this.columnKeys.remove( columnKey ); }  =>   setValue( null, rowKey, columnKey ); boolean allNull = true; int rowIndex = getRowIndex( rowKey ); org.jfree.data.DefaultKeyedValues row = (org.jfree.data.DefaultKeyedValues) this.rows.get( rowIndex ); for (int item = 0, itemCount = row.getItemCount(); item < itemCount; item++) {     if (row.getValue( item ) != null) {         allNull = false;         break;     } } if (allNull) {     this.rowKeys.remove( rowIndex );     this.rows.remove( rowIndex ); } allNull = true; if (allNull) {     for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) {         row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item );         int columnIndex = row.getIndex( columnKey );         if (columnIndex >= 0) {             row.removeValue( columnIndex );         }     }     this.columnKeys.remove( columnKey ); }
SDL_56:180:void_removeValue(java.lang.Comparable,java.lang.Comparable): setValue( null, rowKey, columnKey ); boolean allNull = true; int rowIndex = getRowIndex( rowKey ); org.jfree.data.DefaultKeyedValues row = (org.jfree.data.DefaultKeyedValues) this.rows.get( rowIndex ); for (int item = 0, itemCount = row.getItemCount(); item < itemCount; item++) {     if (row.getValue( item ) != null) {         allNull = false;         break;     } } if (allNull) {     this.rowKeys.remove( rowIndex );     this.rows.remove( rowIndex ); } allNull = true; for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) {     row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item );     int columnIndex = row.getIndex( columnKey );     if (columnIndex >= 0 && row.getValue( columnIndex ) != null) {         allNull = false;         break;     } } if (allNull) {     for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) {         row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item );         int columnIndex = row.getIndex( columnKey );         if (columnIndex >= 0) {             row.removeValue( columnIndex );         }     }     this.columnKeys.remove( columnKey ); }  =>   setValue( null, rowKey, columnKey ); boolean allNull = true; int rowIndex = getRowIndex( rowKey ); org.jfree.data.DefaultKeyedValues row = (org.jfree.data.DefaultKeyedValues) this.rows.get( rowIndex ); for (int item = 0, itemCount = row.getItemCount(); item < itemCount; item++) {     if (row.getValue( item ) != null) {         allNull = false;         break;     } } if (allNull) {     this.rowKeys.remove( rowIndex );     this.rows.remove( rowIndex ); } allNull = true; for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) {     row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item );     int columnIndex = row.getIndex( columnKey );     if (columnIndex >= 0 && row.getValue( columnIndex ) != null) {         allNull = false;         break;     } }
SDL_57:162:void_removeValue(java.lang.Comparable,java.lang.Comparable): if (row.getValue( item ) != null) {     allNull = false;     break; }  =>  
SDL_58:167:void_removeValue(java.lang.Comparable,java.lang.Comparable): for (int item = 0, itemCount = row.getItemCount(); item < itemCount; item++) {     if (row.getValue( item ) != null) {         allNull = false;         break;     } }  =>   for (int item = 0, itemCount = row.getItemCount();; item++) {     if (row.getValue( item ) != null) {         allNull = false;         break;     } }
SDL_59:167:void_removeValue(java.lang.Comparable,java.lang.Comparable): for (int item = 0, itemCount = row.getItemCount(); item < itemCount; item++) {     if (row.getValue( item ) != null) {         allNull = false;         break;     } }  =>   for (int item = 0, itemCount = row.getItemCount(); item < itemCount;) {     if (row.getValue( item ) != null) {         allNull = false;         break;     } }
SDL_60:164:void_removeValue(java.lang.Comparable,java.lang.Comparable): allNull = false; break;  =>   break;
SDL_61:164:void_removeValue(java.lang.Comparable,java.lang.Comparable): allNull = false; break;  =>   allNull = false;
SDL_62:166:void_removeValue(java.lang.Comparable,java.lang.Comparable): if (row.getValue( item ) != null) {     allNull = false;     break; }  =>   if (true) {     allNull = false;     break; }
SDL_63:169:void_removeValue(java.lang.Comparable,java.lang.Comparable): this.rowKeys.remove( rowIndex ); this.rows.remove( rowIndex );  =>   this.rows.remove( rowIndex );
SDL_64:169:void_removeValue(java.lang.Comparable,java.lang.Comparable): this.rowKeys.remove( rowIndex ); this.rows.remove( rowIndex );  =>   this.rowKeys.remove( rowIndex );
SDL_65:171:void_removeValue(java.lang.Comparable,java.lang.Comparable): if (allNull) {     this.rowKeys.remove( rowIndex );     this.rows.remove( rowIndex ); }  =>   if (true) {     this.rowKeys.remove( rowIndex );     this.rows.remove( rowIndex ); }
SDL_66:178:void_removeValue(java.lang.Comparable,java.lang.Comparable): row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item ); int columnIndex = row.getIndex( columnKey ); if (columnIndex >= 0 && row.getValue( columnIndex ) != null) {     allNull = false;     break; }  =>   int columnIndex = row.getIndex( columnKey ); if (columnIndex >= 0 && row.getValue( columnIndex ) != null) {     allNull = false;     break; }
SDL_67:175:void_removeValue(java.lang.Comparable,java.lang.Comparable): row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item ); int columnIndex = row.getIndex( columnKey ); if (columnIndex >= 0 && row.getValue( columnIndex ) != null) {     allNull = false;     break; }  =>   row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item ); int columnIndex = row.getIndex( columnKey );
SDL_68:180:void_removeValue(java.lang.Comparable,java.lang.Comparable): for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) {     row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item );     int columnIndex = row.getIndex( columnKey );     if (columnIndex >= 0 && row.getValue( columnIndex ) != null) {         allNull = false;         break;     } }  =>   for (int item = 0, itemCount = this.rows.size();; item++) {     row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item );     int columnIndex = row.getIndex( columnKey );     if (columnIndex >= 0 && row.getValue( columnIndex ) != null) {         allNull = false;         break;     } }
SDL_69:180:void_removeValue(java.lang.Comparable,java.lang.Comparable): for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) {     row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item );     int columnIndex = row.getIndex( columnKey );     if (columnIndex >= 0 && row.getValue( columnIndex ) != null) {         allNull = false;         break;     } }  =>   for (int item = 0, itemCount = this.rows.size(); item < itemCount;) {     row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item );     int columnIndex = row.getIndex( columnKey );     if (columnIndex >= 0 && row.getValue( columnIndex ) != null) {         allNull = false;         break;     } }
SDL_70:177:void_removeValue(java.lang.Comparable,java.lang.Comparable): allNull = false; break;  =>   break;
SDL_71:177:void_removeValue(java.lang.Comparable,java.lang.Comparable): allNull = false; break;  =>   allNull = false;
SDL_72:179:void_removeValue(java.lang.Comparable,java.lang.Comparable): if (columnIndex >= 0 && row.getValue( columnIndex ) != null) {     allNull = false;     break; }  =>   if (true) {     allNull = false;     break; }
SDL_73:182:void_removeValue(java.lang.Comparable,java.lang.Comparable): for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) {     row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item );     int columnIndex = row.getIndex( columnKey );     if (columnIndex >= 0) {         row.removeValue( columnIndex );     } } this.columnKeys.remove( columnKey );  =>   this.columnKeys.remove( columnKey );
SDL_74:188:void_removeValue(java.lang.Comparable,java.lang.Comparable): for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) {     row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item );     int columnIndex = row.getIndex( columnKey );     if (columnIndex >= 0) {         row.removeValue( columnIndex );     } } this.columnKeys.remove( columnKey );  =>   for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) {     row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item );     int columnIndex = row.getIndex( columnKey );     if (columnIndex >= 0) {         row.removeValue( columnIndex );     } }
SDL_75:190:void_removeValue(java.lang.Comparable,java.lang.Comparable): if (allNull) {     for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) {         row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item );         int columnIndex = row.getIndex( columnKey );         if (columnIndex >= 0) {             row.removeValue( columnIndex );         }     }     this.columnKeys.remove( columnKey ); }  =>   if (true) {     for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) {         row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item );         int columnIndex = row.getIndex( columnKey );         if (columnIndex >= 0) {             row.removeValue( columnIndex );         }     }     this.columnKeys.remove( columnKey ); }
SDL_76:186:void_removeValue(java.lang.Comparable,java.lang.Comparable): row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item ); int columnIndex = row.getIndex( columnKey ); if (columnIndex >= 0) {     row.removeValue( columnIndex ); }  =>   int columnIndex = row.getIndex( columnKey ); if (columnIndex >= 0) {     row.removeValue( columnIndex ); }
SDL_77:184:void_removeValue(java.lang.Comparable,java.lang.Comparable): row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item ); int columnIndex = row.getIndex( columnKey ); if (columnIndex >= 0) {     row.removeValue( columnIndex ); }  =>   row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item ); int columnIndex = row.getIndex( columnKey );
SDL_78:188:void_removeValue(java.lang.Comparable,java.lang.Comparable): for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) {     row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item );     int columnIndex = row.getIndex( columnKey );     if (columnIndex >= 0) {         row.removeValue( columnIndex );     } }  =>   for (int item = 0, itemCount = this.rows.size();; item++) {     row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item );     int columnIndex = row.getIndex( columnKey );     if (columnIndex >= 0) {         row.removeValue( columnIndex );     } }
SDL_79:188:void_removeValue(java.lang.Comparable,java.lang.Comparable): for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) {     row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item );     int columnIndex = row.getIndex( columnKey );     if (columnIndex >= 0) {         row.removeValue( columnIndex );     } }  =>   for (int item = 0, itemCount = this.rows.size(); item < itemCount;) {     row = (org.jfree.data.DefaultKeyedValues) this.rows.get( item );     int columnIndex = row.getIndex( columnKey );     if (columnIndex >= 0) {         row.removeValue( columnIndex );     } }
SDL_80:185:void_removeValue(java.lang.Comparable,java.lang.Comparable): row.removeValue( columnIndex );  =>  
SDL_81:187:void_removeValue(java.lang.Comparable,java.lang.Comparable): if (columnIndex >= 0) {     row.removeValue( columnIndex ); }  =>   if (true) {     row.removeValue( columnIndex ); }
SDL_82:195:void_removeRow(int): this.rowKeys.remove( rowIndex ); this.rows.remove( rowIndex );  =>   this.rows.remove( rowIndex );
SDL_83:195:void_removeRow(int): this.rowKeys.remove( rowIndex ); this.rows.remove( rowIndex );  =>   this.rowKeys.remove( rowIndex );
SDL_84:200:void_removeRow(java.lang.Comparable): removeRow( getRowIndex( rowKey ) );  =>  
SDL_85:206:void_removeColumn(int): java.lang.Comparable columnKey = getColumnKey( columnIndex ); removeColumn( columnKey );  =>   java.lang.Comparable columnKey = getColumnKey( columnIndex );
SDL_86:213:void_removeColumn(java.lang.Comparable): java.util.Iterator iterator = this.rows.iterator(); while (iterator.hasNext()) {     org.jfree.data.DefaultKeyedValues rowData = (org.jfree.data.DefaultKeyedValues) iterator.next();     rowData.removeValue( columnKey ); } this.columnKeys.remove( columnKey );  =>   java.util.Iterator iterator = this.rows.iterator(); this.columnKeys.remove( columnKey );
SDL_87:216:void_removeColumn(java.lang.Comparable): java.util.Iterator iterator = this.rows.iterator(); while (iterator.hasNext()) {     org.jfree.data.DefaultKeyedValues rowData = (org.jfree.data.DefaultKeyedValues) iterator.next();     rowData.removeValue( columnKey ); } this.columnKeys.remove( columnKey );  =>   java.util.Iterator iterator = this.rows.iterator(); while (iterator.hasNext()) {     org.jfree.data.DefaultKeyedValues rowData = (org.jfree.data.DefaultKeyedValues) iterator.next();     rowData.removeValue( columnKey ); }
SDL_88:214:void_removeColumn(java.lang.Comparable): org.jfree.data.DefaultKeyedValues rowData = (org.jfree.data.DefaultKeyedValues) iterator.next(); rowData.removeValue( columnKey );  =>   org.jfree.data.DefaultKeyedValues rowData = (org.jfree.data.DefaultKeyedValues) iterator.next();
SDL_89:216:void_removeColumn(java.lang.Comparable): while (iterator.hasNext()) {     org.jfree.data.DefaultKeyedValues rowData = (org.jfree.data.DefaultKeyedValues) iterator.next();     rowData.removeValue( columnKey ); }  =>   while (true) {     org.jfree.data.DefaultKeyedValues rowData = (org.jfree.data.DefaultKeyedValues) iterator.next();     rowData.removeValue( columnKey ); }
SDL_90:223:void_clear(): this.rowKeys.clear(); this.columnKeys.clear(); this.rows.clear();  =>   this.columnKeys.clear(); this.rows.clear();
SDL_91:223:void_clear(): this.rowKeys.clear(); this.columnKeys.clear(); this.rows.clear();  =>   this.rowKeys.clear(); this.rows.clear();
SDL_92:223:void_clear(): this.rowKeys.clear(); this.columnKeys.clear(); this.rows.clear();  =>   this.rowKeys.clear(); this.columnKeys.clear();
SDL_93:265:boolean_equals(java.lang.Object): if (o == null) {     return false; } if (o == this) {     return true; } if (!(o instanceof org.jfree.data.KeyedValues2D)) {     return false; } org.jfree.data.KeyedValues2D kv2D = (org.jfree.data.KeyedValues2D) o; if (!getRowKeys().equals( kv2D.getRowKeys() )) {     return false; } if (!getColumnKeys().equals( kv2D.getColumnKeys() )) {     return false; } int rowCount = getRowCount(); if (rowCount != kv2D.getRowCount()) {     return false; } int colCount = getColumnCount(); if (colCount != kv2D.getColumnCount()) {     return false; } for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < colCount; c++) {         java.lang.Number v1 = getValue( r, c );         java.lang.Number v2 = kv2D.getValue( r, c );         if (v1 == null) {             if (v2 != null) {                 return false;             }         } else {             if (!v1.equals( v2 )) {                 return false;             }         }     } } return true;  =>   if (o == this) {     return true; } if (!(o instanceof org.jfree.data.KeyedValues2D)) {     return false; } org.jfree.data.KeyedValues2D kv2D = (org.jfree.data.KeyedValues2D) o; if (!getRowKeys().equals( kv2D.getRowKeys() )) {     return false; } if (!getColumnKeys().equals( kv2D.getColumnKeys() )) {     return false; } int rowCount = getRowCount(); if (rowCount != kv2D.getRowCount()) {     return false; } int colCount = getColumnCount(); if (colCount != kv2D.getColumnCount()) {     return false; } for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < colCount; c++) {         java.lang.Number v1 = getValue( r, c );         java.lang.Number v2 = kv2D.getValue( r, c );         if (v1 == null) {             if (v2 != null) {                 return false;             }         } else {             if (!v1.equals( v2 )) {                 return false;             }         }     } } return true;
SDL_94:265:boolean_equals(java.lang.Object): if (o == null) {     return false; } if (o == this) {     return true; } if (!(o instanceof org.jfree.data.KeyedValues2D)) {     return false; } org.jfree.data.KeyedValues2D kv2D = (org.jfree.data.KeyedValues2D) o; if (!getRowKeys().equals( kv2D.getRowKeys() )) {     return false; } if (!getColumnKeys().equals( kv2D.getColumnKeys() )) {     return false; } int rowCount = getRowCount(); if (rowCount != kv2D.getRowCount()) {     return false; } int colCount = getColumnCount(); if (colCount != kv2D.getColumnCount()) {     return false; } for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < colCount; c++) {         java.lang.Number v1 = getValue( r, c );         java.lang.Number v2 = kv2D.getValue( r, c );         if (v1 == null) {             if (v2 != null) {                 return false;             }         } else {             if (!v1.equals( v2 )) {                 return false;             }         }     } } return true;  =>   if (o == null) {     return false; } if (!(o instanceof org.jfree.data.KeyedValues2D)) {     return false; } org.jfree.data.KeyedValues2D kv2D = (org.jfree.data.KeyedValues2D) o; if (!getRowKeys().equals( kv2D.getRowKeys() )) {     return false; } if (!getColumnKeys().equals( kv2D.getColumnKeys() )) {     return false; } int rowCount = getRowCount(); if (rowCount != kv2D.getRowCount()) {     return false; } int colCount = getColumnCount(); if (colCount != kv2D.getColumnCount()) {     return false; } for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < colCount; c++) {         java.lang.Number v1 = getValue( r, c );         java.lang.Number v2 = kv2D.getValue( r, c );         if (v1 == null) {             if (v2 != null) {                 return false;             }         } else {             if (!v1.equals( v2 )) {                 return false;             }         }     } } return true;
SDL_95:265:boolean_equals(java.lang.Object): if (o == null) {     return false; } if (o == this) {     return true; } if (!(o instanceof org.jfree.data.KeyedValues2D)) {     return false; } org.jfree.data.KeyedValues2D kv2D = (org.jfree.data.KeyedValues2D) o; if (!getRowKeys().equals( kv2D.getRowKeys() )) {     return false; } if (!getColumnKeys().equals( kv2D.getColumnKeys() )) {     return false; } int rowCount = getRowCount(); if (rowCount != kv2D.getRowCount()) {     return false; } int colCount = getColumnCount(); if (colCount != kv2D.getColumnCount()) {     return false; } for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < colCount; c++) {         java.lang.Number v1 = getValue( r, c );         java.lang.Number v2 = kv2D.getValue( r, c );         if (v1 == null) {             if (v2 != null) {                 return false;             }         } else {             if (!v1.equals( v2 )) {                 return false;             }         }     } } return true;  =>   if (o == null) {     return false; } if (o == this) {     return true; } org.jfree.data.KeyedValues2D kv2D = (org.jfree.data.KeyedValues2D) o; if (!getRowKeys().equals( kv2D.getRowKeys() )) {     return false; } if (!getColumnKeys().equals( kv2D.getColumnKeys() )) {     return false; } int rowCount = getRowCount(); if (rowCount != kv2D.getRowCount()) {     return false; } int colCount = getColumnCount(); if (colCount != kv2D.getColumnCount()) {     return false; } for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < colCount; c++) {         java.lang.Number v1 = getValue( r, c );         java.lang.Number v2 = kv2D.getValue( r, c );         if (v1 == null) {             if (v2 != null) {                 return false;             }         } else {             if (!v1.equals( v2 )) {                 return false;             }         }     } } return true;
SDL_96:265:boolean_equals(java.lang.Object): if (o == null) {     return false; } if (o == this) {     return true; } if (!(o instanceof org.jfree.data.KeyedValues2D)) {     return false; } org.jfree.data.KeyedValues2D kv2D = (org.jfree.data.KeyedValues2D) o; if (!getRowKeys().equals( kv2D.getRowKeys() )) {     return false; } if (!getColumnKeys().equals( kv2D.getColumnKeys() )) {     return false; } int rowCount = getRowCount(); if (rowCount != kv2D.getRowCount()) {     return false; } int colCount = getColumnCount(); if (colCount != kv2D.getColumnCount()) {     return false; } for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < colCount; c++) {         java.lang.Number v1 = getValue( r, c );         java.lang.Number v2 = kv2D.getValue( r, c );         if (v1 == null) {             if (v2 != null) {                 return false;             }         } else {             if (!v1.equals( v2 )) {                 return false;             }         }     } } return true;  =>   if (o == null) {     return false; } if (o == this) {     return true; } if (!(o instanceof org.jfree.data.KeyedValues2D)) {     return false; } org.jfree.data.KeyedValues2D kv2D = (org.jfree.data.KeyedValues2D) o; if (!getColumnKeys().equals( kv2D.getColumnKeys() )) {     return false; } int rowCount = getRowCount(); if (rowCount != kv2D.getRowCount()) {     return false; } int colCount = getColumnCount(); if (colCount != kv2D.getColumnCount()) {     return false; } for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < colCount; c++) {         java.lang.Number v1 = getValue( r, c );         java.lang.Number v2 = kv2D.getValue( r, c );         if (v1 == null) {             if (v2 != null) {                 return false;             }         } else {             if (!v1.equals( v2 )) {                 return false;             }         }     } } return true;
SDL_97:265:boolean_equals(java.lang.Object): if (o == null) {     return false; } if (o == this) {     return true; } if (!(o instanceof org.jfree.data.KeyedValues2D)) {     return false; } org.jfree.data.KeyedValues2D kv2D = (org.jfree.data.KeyedValues2D) o; if (!getRowKeys().equals( kv2D.getRowKeys() )) {     return false; } if (!getColumnKeys().equals( kv2D.getColumnKeys() )) {     return false; } int rowCount = getRowCount(); if (rowCount != kv2D.getRowCount()) {     return false; } int colCount = getColumnCount(); if (colCount != kv2D.getColumnCount()) {     return false; } for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < colCount; c++) {         java.lang.Number v1 = getValue( r, c );         java.lang.Number v2 = kv2D.getValue( r, c );         if (v1 == null) {             if (v2 != null) {                 return false;             }         } else {             if (!v1.equals( v2 )) {                 return false;             }         }     } } return true;  =>   if (o == null) {     return false; } if (o == this) {     return true; } if (!(o instanceof org.jfree.data.KeyedValues2D)) {     return false; } org.jfree.data.KeyedValues2D kv2D = (org.jfree.data.KeyedValues2D) o; if (!getRowKeys().equals( kv2D.getRowKeys() )) {     return false; } int rowCount = getRowCount(); if (rowCount != kv2D.getRowCount()) {     return false; } int colCount = getColumnCount(); if (colCount != kv2D.getColumnCount()) {     return false; } for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < colCount; c++) {         java.lang.Number v1 = getValue( r, c );         java.lang.Number v2 = kv2D.getValue( r, c );         if (v1 == null) {             if (v2 != null) {                 return false;             }         } else {             if (!v1.equals( v2 )) {                 return false;             }         }     } } return true;
SDL_98:265:boolean_equals(java.lang.Object): if (o == null) {     return false; } if (o == this) {     return true; } if (!(o instanceof org.jfree.data.KeyedValues2D)) {     return false; } org.jfree.data.KeyedValues2D kv2D = (org.jfree.data.KeyedValues2D) o; if (!getRowKeys().equals( kv2D.getRowKeys() )) {     return false; } if (!getColumnKeys().equals( kv2D.getColumnKeys() )) {     return false; } int rowCount = getRowCount(); if (rowCount != kv2D.getRowCount()) {     return false; } int colCount = getColumnCount(); if (colCount != kv2D.getColumnCount()) {     return false; } for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < colCount; c++) {         java.lang.Number v1 = getValue( r, c );         java.lang.Number v2 = kv2D.getValue( r, c );         if (v1 == null) {             if (v2 != null) {                 return false;             }         } else {             if (!v1.equals( v2 )) {                 return false;             }         }     } } return true;  =>   if (o == null) {     return false; } if (o == this) {     return true; } if (!(o instanceof org.jfree.data.KeyedValues2D)) {     return false; } org.jfree.data.KeyedValues2D kv2D = (org.jfree.data.KeyedValues2D) o; if (!getRowKeys().equals( kv2D.getRowKeys() )) {     return false; } if (!getColumnKeys().equals( kv2D.getColumnKeys() )) {     return false; } int rowCount = getRowCount(); int colCount = getColumnCount(); if (colCount != kv2D.getColumnCount()) {     return false; } for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < colCount; c++) {         java.lang.Number v1 = getValue( r, c );         java.lang.Number v2 = kv2D.getValue( r, c );         if (v1 == null) {             if (v2 != null) {                 return false;             }         } else {             if (!v1.equals( v2 )) {                 return false;             }         }     } } return true;
SDL_99:265:boolean_equals(java.lang.Object): if (o == null) {     return false; } if (o == this) {     return true; } if (!(o instanceof org.jfree.data.KeyedValues2D)) {     return false; } org.jfree.data.KeyedValues2D kv2D = (org.jfree.data.KeyedValues2D) o; if (!getRowKeys().equals( kv2D.getRowKeys() )) {     return false; } if (!getColumnKeys().equals( kv2D.getColumnKeys() )) {     return false; } int rowCount = getRowCount(); if (rowCount != kv2D.getRowCount()) {     return false; } int colCount = getColumnCount(); if (colCount != kv2D.getColumnCount()) {     return false; } for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < colCount; c++) {         java.lang.Number v1 = getValue( r, c );         java.lang.Number v2 = kv2D.getValue( r, c );         if (v1 == null) {             if (v2 != null) {                 return false;             }         } else {             if (!v1.equals( v2 )) {                 return false;             }         }     } } return true;  =>   if (o == null) {     return false; } if (o == this) {     return true; } if (!(o instanceof org.jfree.data.KeyedValues2D)) {     return false; } org.jfree.data.KeyedValues2D kv2D = (org.jfree.data.KeyedValues2D) o; if (!getRowKeys().equals( kv2D.getRowKeys() )) {     return false; } if (!getColumnKeys().equals( kv2D.getColumnKeys() )) {     return false; } int rowCount = getRowCount(); if (rowCount != kv2D.getRowCount()) {     return false; } int colCount = getColumnCount(); for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < colCount; c++) {         java.lang.Number v1 = getValue( r, c );         java.lang.Number v2 = kv2D.getValue( r, c );         if (v1 == null) {             if (v2 != null) {                 return false;             }         } else {             if (!v1.equals( v2 )) {                 return false;             }         }     } } return true;
SDL_100:253:boolean_equals(java.lang.Object): if (o == null) {     return false; } if (o == this) {     return true; } if (!(o instanceof org.jfree.data.KeyedValues2D)) {     return false; } org.jfree.data.KeyedValues2D kv2D = (org.jfree.data.KeyedValues2D) o; if (!getRowKeys().equals( kv2D.getRowKeys() )) {     return false; } if (!getColumnKeys().equals( kv2D.getColumnKeys() )) {     return false; } int rowCount = getRowCount(); if (rowCount != kv2D.getRowCount()) {     return false; } int colCount = getColumnCount(); if (colCount != kv2D.getColumnCount()) {     return false; } for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < colCount; c++) {         java.lang.Number v1 = getValue( r, c );         java.lang.Number v2 = kv2D.getValue( r, c );         if (v1 == null) {             if (v2 != null) {                 return false;             }         } else {             if (!v1.equals( v2 )) {                 return false;             }         }     } } return true;  =>   if (o == null) {     return false; } if (o == this) {     return true; } if (!(o instanceof org.jfree.data.KeyedValues2D)) {     return false; } org.jfree.data.KeyedValues2D kv2D = (org.jfree.data.KeyedValues2D) o; if (!getRowKeys().equals( kv2D.getRowKeys() )) {     return false; } if (!getColumnKeys().equals( kv2D.getColumnKeys() )) {     return false; } int rowCount = getRowCount(); if (rowCount != kv2D.getRowCount()) {     return false; } int colCount = getColumnCount(); if (colCount != kv2D.getColumnCount()) {     return false; } return true;
SDL_101:231:boolean_equals(java.lang.Object): if (o == null) {     return false; }  =>   if (true) {     return false; }
SDL_102:230:boolean_equals(java.lang.Object): return false;  =>   return true;
SDL_103:234:boolean_equals(java.lang.Object): if (o == this) {     return true; }  =>   if (true) {     return true; }
SDL_104:233:boolean_equals(java.lang.Object): return true;  =>   return false;
SDL_105:237:boolean_equals(java.lang.Object): if (!(o instanceof org.jfree.data.KeyedValues2D)) {     return false; }  =>   if (true) {     return false; }
SDL_106:236:boolean_equals(java.lang.Object): return false;  =>   return true;
SDL_107:241:boolean_equals(java.lang.Object): if (!getRowKeys().equals( kv2D.getRowKeys() )) {     return false; }  =>   if (true) {     return false; }
SDL_108:240:boolean_equals(java.lang.Object): return false;  =>   return true;
SDL_109:244:boolean_equals(java.lang.Object): if (!getColumnKeys().equals( kv2D.getColumnKeys() )) {     return false; }  =>   if (true) {     return false; }
SDL_110:243:boolean_equals(java.lang.Object): return false;  =>   return true;
SDL_111:248:boolean_equals(java.lang.Object): if (rowCount != kv2D.getRowCount()) {     return false; }  =>   if (true) {     return false; }
SDL_112:247:boolean_equals(java.lang.Object): return false;  =>   return true;
SDL_113:252:boolean_equals(java.lang.Object): if (colCount != kv2D.getColumnCount()) {     return false; }  =>   if (true) {     return false; }
SDL_114:251:boolean_equals(java.lang.Object): return false;  =>   return true;
SDL_115:253:boolean_equals(java.lang.Object): for (int c = 0; c < colCount; c++) {     java.lang.Number v1 = getValue( r, c );     java.lang.Number v2 = kv2D.getValue( r, c );     if (v1 == null) {         if (v2 != null) {             return false;         }     } else {         if (!v1.equals( v2 )) {             return false;         }     } }  =>  
SDL_116:267:boolean_equals(java.lang.Object): for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < colCount; c++) {         java.lang.Number v1 = getValue( r, c );         java.lang.Number v2 = kv2D.getValue( r, c );         if (v1 == null) {             if (v2 != null) {                 return false;             }         } else {             if (!v1.equals( v2 )) {                 return false;             }         }     } }  =>   for (int r = 0;; r++) {     for (int c = 0; c < colCount; c++) {         java.lang.Number v1 = getValue( r, c );         java.lang.Number v2 = kv2D.getValue( r, c );         if (v1 == null) {             if (v2 != null) {                 return false;             }         } else {             if (!v1.equals( v2 )) {                 return false;             }         }     } }
SDL_117:267:boolean_equals(java.lang.Object): for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < colCount; c++) {         java.lang.Number v1 = getValue( r, c );         java.lang.Number v2 = kv2D.getValue( r, c );         if (v1 == null) {             if (v2 != null) {                 return false;             }         } else {             if (!v1.equals( v2 )) {                 return false;             }         }     } }  =>   for (int r = 0; r < rowCount;) {     for (int c = 0; c < colCount; c++) {         java.lang.Number v1 = getValue( r, c );         java.lang.Number v2 = kv2D.getValue( r, c );         if (v1 == null) {             if (v2 != null) {                 return false;             }         } else {             if (!v1.equals( v2 )) {                 return false;             }         }     } }
SDL_118:256:boolean_equals(java.lang.Object): java.lang.Number v1 = getValue( r, c ); java.lang.Number v2 = kv2D.getValue( r, c ); if (v1 == null) {     if (v2 != null) {         return false;     } } else {     if (!v1.equals( v2 )) {         return false;     } }  =>   java.lang.Number v1 = getValue( r, c ); java.lang.Number v2 = kv2D.getValue( r, c );
SDL_119:266:boolean_equals(java.lang.Object): for (int c = 0; c < colCount; c++) {     java.lang.Number v1 = getValue( r, c );     java.lang.Number v2 = kv2D.getValue( r, c );     if (v1 == null) {         if (v2 != null) {             return false;         }     } else {         if (!v1.equals( v2 )) {             return false;         }     } }  =>   for (int c = 0;; c++) {     java.lang.Number v1 = getValue( r, c );     java.lang.Number v2 = kv2D.getValue( r, c );     if (v1 == null) {         if (v2 != null) {             return false;         }     } else {         if (!v1.equals( v2 )) {             return false;         }     } }
SDL_120:266:boolean_equals(java.lang.Object): for (int c = 0; c < colCount; c++) {     java.lang.Number v1 = getValue( r, c );     java.lang.Number v2 = kv2D.getValue( r, c );     if (v1 == null) {         if (v2 != null) {             return false;         }     } else {         if (!v1.equals( v2 )) {             return false;         }     } }  =>   for (int c = 0; c < colCount;) {     java.lang.Number v1 = getValue( r, c );     java.lang.Number v2 = kv2D.getValue( r, c );     if (v1 == null) {         if (v2 != null) {             return false;         }     } else {         if (!v1.equals( v2 )) {             return false;         }     } }
SDL_121:257:boolean_equals(java.lang.Object): if (v2 != null) {     return false; }  =>  
SDL_122:265:boolean_equals(java.lang.Object): if (v1 == null) {     if (v2 != null) {         return false;     } } else {     if (!v1.equals( v2 )) {         return false;     } }  =>   if (true) {     if (v2 != null) {         return false;     } } else {     if (!v1.equals( v2 )) {         return false;     } }
SDL_123:261:boolean_equals(java.lang.Object): if (!v1.equals( v2 )) {     return false; }  =>  
SDL_124:260:boolean_equals(java.lang.Object): if (v2 != null) {     return false; }  =>   if (true) {     return false; }
SDL_125:259:boolean_equals(java.lang.Object): return false;  =>   return true;
SDL_126:264:boolean_equals(java.lang.Object): if (!v1.equals( v2 )) {     return false; }  =>   if (true) {     return false; }
SDL_127:263:boolean_equals(java.lang.Object): return false;  =>   return true;
SDL_128:268:boolean_equals(java.lang.Object): return true;  =>   return false;
SDL_129:276:int_hashCode(): int result; result = this.rowKeys.hashCode(); result = 29 * result + this.columnKeys.hashCode(); result = 29 * result + this.rows.hashCode(); return result;  =>   int result; result = 29 * result + this.columnKeys.hashCode(); result = 29 * result + this.rows.hashCode(); return result;
SDL_130:276:int_hashCode(): int result; result = this.rowKeys.hashCode(); result = 29 * result + this.columnKeys.hashCode(); result = 29 * result + this.rows.hashCode(); return result;  =>   int result; result = this.rowKeys.hashCode(); result = 29 * result + this.rows.hashCode(); return result;
SDL_131:276:int_hashCode(): int result; result = this.rowKeys.hashCode(); result = 29 * result + this.columnKeys.hashCode(); result = 29 * result + this.rows.hashCode(); return result;  =>   int result; result = this.rowKeys.hashCode(); result = 29 * result + this.columnKeys.hashCode(); return result;
SDL_132:277:int_hashCode(): return result;  =>   return 0;
SDL_133:286:java.lang.Object_clone(): org.jfree.data.DefaultKeyedValues2D clone = (org.jfree.data.DefaultKeyedValues2D) super.clone(); clone.columnKeys = new java.util.ArrayList( this.columnKeys ); clone.rowKeys = new java.util.ArrayList( this.rowKeys ); clone.rows = (java.util.List) ObjectUtilities.deepClone( this.rows ); return clone;  =>   org.jfree.data.DefaultKeyedValues2D clone = (org.jfree.data.DefaultKeyedValues2D) super.clone(); clone.rowKeys = new java.util.ArrayList( this.rowKeys ); clone.rows = (java.util.List) ObjectUtilities.deepClone( this.rows ); return clone;
SDL_134:286:java.lang.Object_clone(): org.jfree.data.DefaultKeyedValues2D clone = (org.jfree.data.DefaultKeyedValues2D) super.clone(); clone.columnKeys = new java.util.ArrayList( this.columnKeys ); clone.rowKeys = new java.util.ArrayList( this.rowKeys ); clone.rows = (java.util.List) ObjectUtilities.deepClone( this.rows ); return clone;  =>   org.jfree.data.DefaultKeyedValues2D clone = (org.jfree.data.DefaultKeyedValues2D) super.clone(); clone.columnKeys = new java.util.ArrayList( this.columnKeys ); clone.rows = (java.util.List) ObjectUtilities.deepClone( this.rows ); return clone;
SDL_135:286:java.lang.Object_clone(): org.jfree.data.DefaultKeyedValues2D clone = (org.jfree.data.DefaultKeyedValues2D) super.clone(); clone.columnKeys = new java.util.ArrayList( this.columnKeys ); clone.rowKeys = new java.util.ArrayList( this.rowKeys ); clone.rows = (java.util.List) ObjectUtilities.deepClone( this.rows ); return clone;  =>   org.jfree.data.DefaultKeyedValues2D clone = (org.jfree.data.DefaultKeyedValues2D) super.clone(); clone.columnKeys = new java.util.ArrayList( this.columnKeys ); clone.rowKeys = new java.util.ArrayList( this.rowKeys ); return clone;
