AORB_1:235:int_hashCode():29 * result => 29 / result
AORB_2:235:int_hashCode():29 * result => 29 % result
AORB_3:235:int_hashCode():29 * result => 29 + result
AORB_4:235:int_hashCode():29 * result => 29 - result
AORB_5:235:int_hashCode():29 * result + this.columnKeys.hashCode() => 29 * result * this.columnKeys.hashCode()
AORB_6:235:int_hashCode():29 * result + this.columnKeys.hashCode() => 29 * result / this.columnKeys.hashCode()
AORB_7:235:int_hashCode():29 * result + this.columnKeys.hashCode() => 29 * result % this.columnKeys.hashCode()
AORB_8:235:int_hashCode():29 * result + this.columnKeys.hashCode() => 29 * result - this.columnKeys.hashCode()
AORB_9:236:int_hashCode():29 * result => 29 / result
AORB_10:236:int_hashCode():29 * result => 29 % result
AORB_11:236:int_hashCode():29 * result => 29 + result
AORB_12:236:int_hashCode():29 * result => 29 - result
AORB_13:236:int_hashCode():29 * result + this.rows.hashCode() => 29 * result * this.rows.hashCode()
AORB_14:236:int_hashCode():29 * result + this.rows.hashCode() => 29 * result / this.rows.hashCode()
AORB_15:236:int_hashCode():29 * result + this.rows.hashCode() => 29 * result % this.rows.hashCode()
AORB_16:236:int_hashCode():29 * result + this.rows.hashCode() => 29 * result - this.rows.hashCode()
ROR_1:45:java.lang.Object_getObject(int,int): rowData != null  =>   rowData == null
ROR_2:47:java.lang.Object_getObject(int,int): columnKey != null  =>   columnKey == null
ROR_3:49:java.lang.Object_getObject(int,int): index >= 0  =>   index > 0
ROR_4:49:java.lang.Object_getObject(int,int): index >= 0  =>   index < 0
ROR_5:49:java.lang.Object_getObject(int,int): index >= 0  =>   index <= 0
ROR_6:49:java.lang.Object_getObject(int,int): index >= 0  =>   index == 0
ROR_7:49:java.lang.Object_getObject(int,int): index >= 0  =>   index != 0
ROR_8:49:java.lang.Object_getObject(int,int): index >= 0  =>   true
ROR_9:49:java.lang.Object_getObject(int,int): index >= 0  =>   false
ROR_10:89:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): rowKey == null  =>   rowKey != null
ROR_11:92:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): columnKey == null  =>   columnKey != null
ROR_12:96:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): row < 0  =>   row > 0
ROR_13:96:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): row < 0  =>   row >= 0
ROR_14:96:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): row < 0  =>   row <= 0
ROR_15:96:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): row < 0  =>   row == 0
ROR_16:96:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): row < 0  =>   row != 0
ROR_17:96:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): row < 0  =>   true
ROR_18:96:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): row < 0  =>   false
ROR_19:100:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): column < 0  =>   column > 0
ROR_20:100:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): column < 0  =>   column >= 0
ROR_21:100:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): column < 0  =>   column <= 0
ROR_22:100:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): column < 0  =>   column == 0
ROR_23:100:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): column < 0  =>   column != 0
ROR_24:100:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): column < 0  =>   true
ROR_25:100:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): column < 0  =>   false
ROR_26:103:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): row >= 0  =>   row > 0
ROR_27:103:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): row >= 0  =>   row < 0
ROR_28:103:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): row >= 0  =>   row <= 0
ROR_29:103:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): row >= 0  =>   row == 0
ROR_30:103:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): row >= 0  =>   row != 0
ROR_31:103:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): row >= 0  =>   true
ROR_32:103:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): row >= 0  =>   false
ROR_33:118:void_setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable): rowKey == null  =>   rowKey != null
ROR_34:121:void_setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable): columnKey == null  =>   columnKey != null
ROR_35:126:void_setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable): rowIndex >= 0  =>   rowIndex > 0
ROR_36:126:void_setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable): rowIndex >= 0  =>   rowIndex < 0
ROR_37:126:void_setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable): rowIndex >= 0  =>   rowIndex <= 0
ROR_38:126:void_setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable): rowIndex >= 0  =>   rowIndex == 0
ROR_39:126:void_setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable): rowIndex >= 0  =>   rowIndex != 0
ROR_40:126:void_setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable): rowIndex >= 0  =>   true
ROR_41:126:void_setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable): rowIndex >= 0  =>   false
ROR_42:135:void_setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable): columnIndex < 0  =>   columnIndex > 0
ROR_43:135:void_setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable): columnIndex < 0  =>   columnIndex >= 0
ROR_44:135:void_setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable): columnIndex < 0  =>   columnIndex <= 0
ROR_45:135:void_setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable): columnIndex < 0  =>   columnIndex == 0
ROR_46:135:void_setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable): columnIndex < 0  =>   columnIndex != 0
ROR_47:135:void_setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable): columnIndex < 0  =>   true
ROR_48:135:void_setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable): columnIndex < 0  =>   false
ROR_49:146:void_removeObject(java.lang.Comparable,java.lang.Comparable): item < itemCount  =>   item > itemCount
ROR_50:146:void_removeObject(java.lang.Comparable,java.lang.Comparable): item < itemCount  =>   item >= itemCount
ROR_51:146:void_removeObject(java.lang.Comparable,java.lang.Comparable): item < itemCount  =>   item <= itemCount
ROR_52:146:void_removeObject(java.lang.Comparable,java.lang.Comparable): item < itemCount  =>   item == itemCount
ROR_53:146:void_removeObject(java.lang.Comparable,java.lang.Comparable): item < itemCount  =>   item != itemCount
ROR_54:146:void_removeObject(java.lang.Comparable,java.lang.Comparable): item < itemCount  =>   true
ROR_55:146:void_removeObject(java.lang.Comparable,java.lang.Comparable): item < itemCount  =>   false
ROR_56:147:void_removeObject(java.lang.Comparable,java.lang.Comparable): row.getObject( item ) != null  =>   row.getObject( item ) == null
ROR_57:179:void_removeColumn(java.lang.Comparable): index < 0  =>   index > 0
ROR_58:179:void_removeColumn(java.lang.Comparable): index < 0  =>   index >= 0
ROR_59:179:void_removeColumn(java.lang.Comparable): index < 0  =>   index <= 0
ROR_60:179:void_removeColumn(java.lang.Comparable): index < 0  =>   index == 0
ROR_61:179:void_removeColumn(java.lang.Comparable): index < 0  =>   index != 0
ROR_62:179:void_removeColumn(java.lang.Comparable): index < 0  =>   true
ROR_63:179:void_removeColumn(java.lang.Comparable): index < 0  =>   false
ROR_64:192:boolean_equals(java.lang.Object): obj == this  =>   obj != this
ROR_65:206:boolean_equals(java.lang.Object): rowCount != that.getRowCount()  =>   rowCount > that.getRowCount()
ROR_66:206:boolean_equals(java.lang.Object): rowCount != that.getRowCount()  =>   rowCount >= that.getRowCount()
ROR_67:206:boolean_equals(java.lang.Object): rowCount != that.getRowCount()  =>   rowCount < that.getRowCount()
ROR_68:206:boolean_equals(java.lang.Object): rowCount != that.getRowCount()  =>   rowCount <= that.getRowCount()
ROR_69:206:boolean_equals(java.lang.Object): rowCount != that.getRowCount()  =>   rowCount == that.getRowCount()
ROR_70:206:boolean_equals(java.lang.Object): rowCount != that.getRowCount()  =>   true
ROR_71:206:boolean_equals(java.lang.Object): rowCount != that.getRowCount()  =>   false
ROR_72:210:boolean_equals(java.lang.Object): colCount != that.getColumnCount()  =>   colCount > that.getColumnCount()
ROR_73:210:boolean_equals(java.lang.Object): colCount != that.getColumnCount()  =>   colCount >= that.getColumnCount()
ROR_74:210:boolean_equals(java.lang.Object): colCount != that.getColumnCount()  =>   colCount < that.getColumnCount()
ROR_75:210:boolean_equals(java.lang.Object): colCount != that.getColumnCount()  =>   colCount <= that.getColumnCount()
ROR_76:210:boolean_equals(java.lang.Object): colCount != that.getColumnCount()  =>   colCount == that.getColumnCount()
ROR_77:210:boolean_equals(java.lang.Object): colCount != that.getColumnCount()  =>   true
ROR_78:210:boolean_equals(java.lang.Object): colCount != that.getColumnCount()  =>   false
ROR_79:213:boolean_equals(java.lang.Object): r < rowCount  =>   r > rowCount
ROR_80:213:boolean_equals(java.lang.Object): r < rowCount  =>   r >= rowCount
ROR_81:213:boolean_equals(java.lang.Object): r < rowCount  =>   r <= rowCount
ROR_82:213:boolean_equals(java.lang.Object): r < rowCount  =>   r == rowCount
ROR_83:213:boolean_equals(java.lang.Object): r < rowCount  =>   r != rowCount
ROR_84:213:boolean_equals(java.lang.Object): r < rowCount  =>   true
ROR_85:213:boolean_equals(java.lang.Object): r < rowCount  =>   false
ROR_86:214:boolean_equals(java.lang.Object): c < colCount  =>   c > colCount
ROR_87:214:boolean_equals(java.lang.Object): c < colCount  =>   c >= colCount
ROR_88:214:boolean_equals(java.lang.Object): c < colCount  =>   c <= colCount
ROR_89:214:boolean_equals(java.lang.Object): c < colCount  =>   c == colCount
ROR_90:214:boolean_equals(java.lang.Object): c < colCount  =>   c != colCount
ROR_91:214:boolean_equals(java.lang.Object): c < colCount  =>   true
ROR_92:214:boolean_equals(java.lang.Object): c < colCount  =>   false
ROR_93:217:boolean_equals(java.lang.Object): v1 == null  =>   v1 != null
ROR_94:218:boolean_equals(java.lang.Object): v2 != null  =>   v2 == null
SDL_1:28:KeyedObjects2D(): this.rowKeys = new java.util.ArrayList(); this.columnKeys = new java.util.ArrayList(); this.rows = new java.util.ArrayList();  =>   this.columnKeys = new java.util.ArrayList(); this.rows = new java.util.ArrayList();
SDL_2:28:KeyedObjects2D(): this.rowKeys = new java.util.ArrayList(); this.columnKeys = new java.util.ArrayList(); this.rows = new java.util.ArrayList();  =>   this.rowKeys = new java.util.ArrayList(); this.rows = new java.util.ArrayList();
SDL_3:28:KeyedObjects2D(): this.rowKeys = new java.util.ArrayList(); this.columnKeys = new java.util.ArrayList(); this.rows = new java.util.ArrayList();  =>   this.rowKeys = new java.util.ArrayList(); this.columnKeys = new java.util.ArrayList();
SDL_4:34:int_getRowCount(): return this.rowKeys.size();  =>   return 0;
SDL_5:39:int_getColumnCount(): return this.columnKeys.size();  =>   return 0;
SDL_6:46:java.lang.Object_getObject(int,int): java.lang.Object result = null; org.jfree.data.KeyedObjects rowData = (org.jfree.data.KeyedObjects) this.rows.get( row ); if (rowData != null) {     java.lang.Comparable columnKey = (java.lang.Comparable) this.columnKeys.get( column );     if (columnKey != null) {         int index = rowData.getIndex( columnKey );         if (index >= 0) {             result = rowData.getObject( columnKey );         }     } } return result;  =>   java.lang.Object result = null; org.jfree.data.KeyedObjects rowData = (org.jfree.data.KeyedObjects) this.rows.get( row ); return result;
SDL_7:47:java.lang.Object_getObject(int,int): java.lang.Comparable columnKey = (java.lang.Comparable) this.columnKeys.get( column ); if (columnKey != null) {     int index = rowData.getIndex( columnKey );     if (index >= 0) {         result = rowData.getObject( columnKey );     } }  =>   java.lang.Comparable columnKey = (java.lang.Comparable) this.columnKeys.get( column );
SDL_8:54:java.lang.Object_getObject(int,int): if (rowData != null) {     java.lang.Comparable columnKey = (java.lang.Comparable) this.columnKeys.get( column );     if (columnKey != null) {         int index = rowData.getIndex( columnKey );         if (index >= 0) {             result = rowData.getObject( columnKey );         }     } }  =>   if (true) {     java.lang.Comparable columnKey = (java.lang.Comparable) this.columnKeys.get( column );     if (columnKey != null) {         int index = rowData.getIndex( columnKey );         if (index >= 0) {             result = rowData.getObject( columnKey );         }     } }
SDL_9:49:java.lang.Object_getObject(int,int): int index = rowData.getIndex( columnKey ); if (index >= 0) {     result = rowData.getObject( columnKey ); }  =>   int index = rowData.getIndex( columnKey );
SDL_10:53:java.lang.Object_getObject(int,int): if (columnKey != null) {     int index = rowData.getIndex( columnKey );     if (index >= 0) {         result = rowData.getObject( columnKey );     } }  =>   if (true) {     int index = rowData.getIndex( columnKey );     if (index >= 0) {         result = rowData.getObject( columnKey );     } }
SDL_11:50:java.lang.Object_getObject(int,int): result = rowData.getObject( columnKey );  =>  
SDL_12:52:java.lang.Object_getObject(int,int): if (index >= 0) {     result = rowData.getObject( columnKey ); }  =>   if (true) {     result = rowData.getObject( columnKey ); }
SDL_13:65:int_getRowIndex(java.lang.Comparable): return this.rowKeys.indexOf( key );  =>   return 0;
SDL_14:80:int_getColumnIndex(java.lang.Comparable): return this.columnKeys.indexOf( key );  =>   return 0;
SDL_15:106:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); } if (columnKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" ); } int row = this.rowKeys.indexOf( rowKey ); if (row < 0) {     throw new org.jfree.data.UnknownKeyException( \"Row key (\" + rowKey + \") not recognised.\" ); } int column = this.columnKeys.indexOf( columnKey ); if (column < 0) {     throw new org.jfree.data.UnknownKeyException( \"Column key (\" + columnKey + \") not recognised.\" ); } if (row >= 0) {     org.jfree.data.KeyedObjects rowData = (org.jfree.data.KeyedObjects) this.rows.get( row );     return rowData.getObject( columnKey ); } else {     return null; }  =>   if (columnKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" ); } int row = this.rowKeys.indexOf( rowKey ); if (row < 0) {     throw new org.jfree.data.UnknownKeyException( \"Row key (\" + rowKey + \") not recognised.\" ); } int column = this.columnKeys.indexOf( columnKey ); if (column < 0) {     throw new org.jfree.data.UnknownKeyException( \"Column key (\" + columnKey + \") not recognised.\" ); } if (row >= 0) {     org.jfree.data.KeyedObjects rowData = (org.jfree.data.KeyedObjects) this.rows.get( row );     return rowData.getObject( columnKey ); } else {     return null; }
SDL_16:106:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); } if (columnKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" ); } int row = this.rowKeys.indexOf( rowKey ); if (row < 0) {     throw new org.jfree.data.UnknownKeyException( \"Row key (\" + rowKey + \") not recognised.\" ); } int column = this.columnKeys.indexOf( columnKey ); if (column < 0) {     throw new org.jfree.data.UnknownKeyException( \"Column key (\" + columnKey + \") not recognised.\" ); } if (row >= 0) {     org.jfree.data.KeyedObjects rowData = (org.jfree.data.KeyedObjects) this.rows.get( row );     return rowData.getObject( columnKey ); } else {     return null; }  =>   if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); } int row = this.rowKeys.indexOf( rowKey ); if (row < 0) {     throw new org.jfree.data.UnknownKeyException( \"Row key (\" + rowKey + \") not recognised.\" ); } int column = this.columnKeys.indexOf( columnKey ); if (column < 0) {     throw new org.jfree.data.UnknownKeyException( \"Column key (\" + columnKey + \") not recognised.\" ); } if (row >= 0) {     org.jfree.data.KeyedObjects rowData = (org.jfree.data.KeyedObjects) this.rows.get( row );     return rowData.getObject( columnKey ); } else {     return null; }
SDL_17:106:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); } if (columnKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" ); } int row = this.rowKeys.indexOf( rowKey ); if (row < 0) {     throw new org.jfree.data.UnknownKeyException( \"Row key (\" + rowKey + \") not recognised.\" ); } int column = this.columnKeys.indexOf( columnKey ); if (column < 0) {     throw new org.jfree.data.UnknownKeyException( \"Column key (\" + columnKey + \") not recognised.\" ); } if (row >= 0) {     org.jfree.data.KeyedObjects rowData = (org.jfree.data.KeyedObjects) this.rows.get( row );     return rowData.getObject( columnKey ); } else {     return null; }  =>   if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); } if (columnKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" ); } int row = this.rowKeys.indexOf( rowKey ); int column = this.columnKeys.indexOf( columnKey ); if (column < 0) {     throw new org.jfree.data.UnknownKeyException( \"Column key (\" + columnKey + \") not recognised.\" ); } if (row >= 0) {     org.jfree.data.KeyedObjects rowData = (org.jfree.data.KeyedObjects) this.rows.get( row );     return rowData.getObject( columnKey ); } else {     return null; }
SDL_18:106:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); } if (columnKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" ); } int row = this.rowKeys.indexOf( rowKey ); if (row < 0) {     throw new org.jfree.data.UnknownKeyException( \"Row key (\" + rowKey + \") not recognised.\" ); } int column = this.columnKeys.indexOf( columnKey ); if (column < 0) {     throw new org.jfree.data.UnknownKeyException( \"Column key (\" + columnKey + \") not recognised.\" ); } if (row >= 0) {     org.jfree.data.KeyedObjects rowData = (org.jfree.data.KeyedObjects) this.rows.get( row );     return rowData.getObject( columnKey ); } else {     return null; }  =>   if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); } if (columnKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" ); } int row = this.rowKeys.indexOf( rowKey ); if (row < 0) {     throw new org.jfree.data.UnknownKeyException( \"Row key (\" + rowKey + \") not recognised.\" ); } int column = this.columnKeys.indexOf( columnKey ); if (row >= 0) {     org.jfree.data.KeyedObjects rowData = (org.jfree.data.KeyedObjects) this.rows.get( row );     return rowData.getObject( columnKey ); } else {     return null; }
SDL_19:103:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); } if (columnKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" ); } int row = this.rowKeys.indexOf( rowKey ); if (row < 0) {     throw new org.jfree.data.UnknownKeyException( \"Row key (\" + rowKey + \") not recognised.\" ); } int column = this.columnKeys.indexOf( columnKey ); if (column < 0) {     throw new org.jfree.data.UnknownKeyException( \"Column key (\" + columnKey + \") not recognised.\" ); } if (row >= 0) {     org.jfree.data.KeyedObjects rowData = (org.jfree.data.KeyedObjects) this.rows.get( row );     return rowData.getObject( columnKey ); } else {     return null; }  =>   if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); } if (columnKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" ); } int row = this.rowKeys.indexOf( rowKey ); if (row < 0) {     throw new org.jfree.data.UnknownKeyException( \"Row key (\" + rowKey + \") not recognised.\" ); } int column = this.columnKeys.indexOf( columnKey ); if (column < 0) {     throw new org.jfree.data.UnknownKeyException( \"Column key (\" + columnKey + \") not recognised.\" ); }
SDL_20:90:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" );  =>  
SDL_21:92:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); }
SDL_22:93:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" );  =>  
SDL_23:95:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): if (columnKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" ); }
SDL_24:97:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): throw new org.jfree.data.UnknownKeyException( \"Row key (\" + rowKey + \") not recognised.\" );  =>  
SDL_25:99:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): if (row < 0) {     throw new org.jfree.data.UnknownKeyException( \"Row key (\" + rowKey + \") not recognised.\" ); }  =>   if (true) {     throw new org.jfree.data.UnknownKeyException( \"Row key (\" + rowKey + \") not recognised.\" ); }
SDL_26:101:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): throw new org.jfree.data.UnknownKeyException( \"Column key (\" + columnKey + \") not recognised.\" );  =>  
SDL_27:103:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): if (column < 0) {     throw new org.jfree.data.UnknownKeyException( \"Column key (\" + columnKey + \") not recognised.\" ); }  =>   if (true) {     throw new org.jfree.data.UnknownKeyException( \"Column key (\" + columnKey + \") not recognised.\" ); }
SDL_28:109:java.lang.Object_getObject(java.lang.Comparable,java.lang.Comparable): if (row >= 0) {     org.jfree.data.KeyedObjects rowData = (org.jfree.data.KeyedObjects) this.rows.get( row );     return rowData.getObject( columnKey ); } else {     return null; }  =>   if (true) {     org.jfree.data.KeyedObjects rowData = (org.jfree.data.KeyedObjects) this.rows.get( row );     return rowData.getObject( columnKey ); } else {     return null; }
SDL_29:113:void_addObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable): setObject( object, rowKey, columnKey );  =>  
SDL_30:135:void_setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable): if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); } if (columnKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" ); } org.jfree.data.KeyedObjects row; int rowIndex = this.rowKeys.indexOf( rowKey ); if (rowIndex >= 0) {     row = (org.jfree.data.KeyedObjects) this.rows.get( rowIndex ); } else {     this.rowKeys.add( rowKey );     row = new org.jfree.data.KeyedObjects();     this.rows.add( row ); } row.setObject( columnKey, object ); int columnIndex = this.columnKeys.indexOf( columnKey ); if (columnIndex < 0) {     this.columnKeys.add( columnKey ); }  =>   if (columnKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" ); } org.jfree.data.KeyedObjects row; int rowIndex = this.rowKeys.indexOf( rowKey ); if (rowIndex >= 0) {     row = (org.jfree.data.KeyedObjects) this.rows.get( rowIndex ); } else {     this.rowKeys.add( rowKey );     row = new org.jfree.data.KeyedObjects();     this.rows.add( row ); } row.setObject( columnKey, object ); int columnIndex = this.columnKeys.indexOf( columnKey ); if (columnIndex < 0) {     this.columnKeys.add( columnKey ); }
SDL_31:135:void_setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable): if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); } if (columnKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" ); } org.jfree.data.KeyedObjects row; int rowIndex = this.rowKeys.indexOf( rowKey ); if (rowIndex >= 0) {     row = (org.jfree.data.KeyedObjects) this.rows.get( rowIndex ); } else {     this.rowKeys.add( rowKey );     row = new org.jfree.data.KeyedObjects();     this.rows.add( row ); } row.setObject( columnKey, object ); int columnIndex = this.columnKeys.indexOf( columnKey ); if (columnIndex < 0) {     this.columnKeys.add( columnKey ); }  =>   if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); } org.jfree.data.KeyedObjects row; int rowIndex = this.rowKeys.indexOf( rowKey ); if (rowIndex >= 0) {     row = (org.jfree.data.KeyedObjects) this.rows.get( rowIndex ); } else {     this.rowKeys.add( rowKey );     row = new org.jfree.data.KeyedObjects();     this.rows.add( row ); } row.setObject( columnKey, object ); int columnIndex = this.columnKeys.indexOf( columnKey ); if (columnIndex < 0) {     this.columnKeys.add( columnKey ); }
SDL_32:131:void_setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable): if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); } if (columnKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" ); } org.jfree.data.KeyedObjects row; int rowIndex = this.rowKeys.indexOf( rowKey ); if (rowIndex >= 0) {     row = (org.jfree.data.KeyedObjects) this.rows.get( rowIndex ); } else {     this.rowKeys.add( rowKey );     row = new org.jfree.data.KeyedObjects();     this.rows.add( row ); } row.setObject( columnKey, object ); int columnIndex = this.columnKeys.indexOf( columnKey ); if (columnIndex < 0) {     this.columnKeys.add( columnKey ); }  =>   if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); } if (columnKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" ); } org.jfree.data.KeyedObjects row; int rowIndex = this.rowKeys.indexOf( rowKey ); row.setObject( columnKey, object ); int columnIndex = this.columnKeys.indexOf( columnKey ); if (columnIndex < 0) {     this.columnKeys.add( columnKey ); }
SDL_33:137:void_setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable): if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); } if (columnKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" ); } org.jfree.data.KeyedObjects row; int rowIndex = this.rowKeys.indexOf( rowKey ); if (rowIndex >= 0) {     row = (org.jfree.data.KeyedObjects) this.rows.get( rowIndex ); } else {     this.rowKeys.add( rowKey );     row = new org.jfree.data.KeyedObjects();     this.rows.add( row ); } row.setObject( columnKey, object ); int columnIndex = this.columnKeys.indexOf( columnKey ); if (columnIndex < 0) {     this.columnKeys.add( columnKey ); }  =>   if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); } if (columnKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" ); } org.jfree.data.KeyedObjects row; int rowIndex = this.rowKeys.indexOf( rowKey ); if (rowIndex >= 0) {     row = (org.jfree.data.KeyedObjects) this.rows.get( rowIndex ); } else {     this.rowKeys.add( rowKey );     row = new org.jfree.data.KeyedObjects();     this.rows.add( row ); } int columnIndex = this.columnKeys.indexOf( columnKey ); if (columnIndex < 0) {     this.columnKeys.add( columnKey ); }
SDL_34:135:void_setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable): if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); } if (columnKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" ); } org.jfree.data.KeyedObjects row; int rowIndex = this.rowKeys.indexOf( rowKey ); if (rowIndex >= 0) {     row = (org.jfree.data.KeyedObjects) this.rows.get( rowIndex ); } else {     this.rowKeys.add( rowKey );     row = new org.jfree.data.KeyedObjects();     this.rows.add( row ); } row.setObject( columnKey, object ); int columnIndex = this.columnKeys.indexOf( columnKey ); if (columnIndex < 0) {     this.columnKeys.add( columnKey ); }  =>   if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); } if (columnKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" ); } org.jfree.data.KeyedObjects row; int rowIndex = this.rowKeys.indexOf( rowKey ); if (rowIndex >= 0) {     row = (org.jfree.data.KeyedObjects) this.rows.get( rowIndex ); } else {     this.rowKeys.add( rowKey );     row = new org.jfree.data.KeyedObjects();     this.rows.add( row ); } row.setObject( columnKey, object ); int columnIndex = this.columnKeys.indexOf( columnKey );
SDL_35:119:void_setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable): throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" );  =>  
SDL_36:121:void_setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable): if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); }
SDL_37:122:void_setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable): throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" );  =>  
SDL_38:124:void_setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable): if (columnKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKey' argument.\" ); }
SDL_39:127:void_setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable): row = (org.jfree.data.KeyedObjects) this.rows.get( rowIndex );  =>  
SDL_40:133:void_setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable): if (rowIndex >= 0) {     row = (org.jfree.data.KeyedObjects) this.rows.get( rowIndex ); } else {     this.rowKeys.add( rowKey );     row = new org.jfree.data.KeyedObjects();     this.rows.add( row ); }  =>   if (true) {     row = (org.jfree.data.KeyedObjects) this.rows.get( rowIndex ); } else {     this.rowKeys.add( rowKey );     row = new org.jfree.data.KeyedObjects();     this.rows.add( row ); }
SDL_41:131:void_setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable): this.rowKeys.add( rowKey ); row = new org.jfree.data.KeyedObjects(); this.rows.add( row );  =>   row = new org.jfree.data.KeyedObjects(); this.rows.add( row );
SDL_42:131:void_setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable): this.rowKeys.add( rowKey ); row = new org.jfree.data.KeyedObjects(); this.rows.add( row );  =>   this.rowKeys.add( rowKey ); this.rows.add( row );
SDL_43:131:void_setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable): this.rowKeys.add( rowKey ); row = new org.jfree.data.KeyedObjects(); this.rows.add( row );  =>   this.rowKeys.add( rowKey ); row = new org.jfree.data.KeyedObjects();
SDL_44:136:void_setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable): this.columnKeys.add( columnKey );  =>  
SDL_45:138:void_setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable): if (columnIndex < 0) {     this.columnKeys.add( columnKey ); }  =>   if (true) {     this.columnKeys.add( columnKey ); }
SDL_46:155:void_removeObject(java.lang.Comparable,java.lang.Comparable): setObject( null, rowKey, columnKey ); boolean allNull = true; int rowIndex = getRowIndex( rowKey ); org.jfree.data.KeyedObjects row = (org.jfree.data.KeyedObjects) this.rows.get( rowIndex ); for (int item = 0, itemCount = row.getItemCount(); item < itemCount; item++) {     if (row.getObject( item ) != null) {         allNull = false;         break;     } } if (allNull) {     this.rowKeys.remove( rowIndex );     this.rows.remove( rowIndex ); }  =>   boolean allNull = true; int rowIndex = getRowIndex( rowKey ); org.jfree.data.KeyedObjects row = (org.jfree.data.KeyedObjects) this.rows.get( rowIndex ); for (int item = 0, itemCount = row.getItemCount(); item < itemCount; item++) {     if (row.getObject( item ) != null) {         allNull = false;         break;     } } if (allNull) {     this.rowKeys.remove( rowIndex );     this.rows.remove( rowIndex ); }
SDL_47:150:void_removeObject(java.lang.Comparable,java.lang.Comparable): setObject( null, rowKey, columnKey ); boolean allNull = true; int rowIndex = getRowIndex( rowKey ); org.jfree.data.KeyedObjects row = (org.jfree.data.KeyedObjects) this.rows.get( rowIndex ); for (int item = 0, itemCount = row.getItemCount(); item < itemCount; item++) {     if (row.getObject( item ) != null) {         allNull = false;         break;     } } if (allNull) {     this.rowKeys.remove( rowIndex );     this.rows.remove( rowIndex ); }  =>   setObject( null, rowKey, columnKey ); boolean allNull = true; int rowIndex = getRowIndex( rowKey ); org.jfree.data.KeyedObjects row = (org.jfree.data.KeyedObjects) this.rows.get( rowIndex ); if (allNull) {     this.rowKeys.remove( rowIndex );     this.rows.remove( rowIndex ); }
SDL_48:152:void_removeObject(java.lang.Comparable,java.lang.Comparable): setObject( null, rowKey, columnKey ); boolean allNull = true; int rowIndex = getRowIndex( rowKey ); org.jfree.data.KeyedObjects row = (org.jfree.data.KeyedObjects) this.rows.get( rowIndex ); for (int item = 0, itemCount = row.getItemCount(); item < itemCount; item++) {     if (row.getObject( item ) != null) {         allNull = false;         break;     } } if (allNull) {     this.rowKeys.remove( rowIndex );     this.rows.remove( rowIndex ); }  =>   setObject( null, rowKey, columnKey ); boolean allNull = true; int rowIndex = getRowIndex( rowKey ); org.jfree.data.KeyedObjects row = (org.jfree.data.KeyedObjects) this.rows.get( rowIndex ); for (int item = 0, itemCount = row.getItemCount(); item < itemCount; item++) {     if (row.getObject( item ) != null) {         allNull = false;         break;     } }
SDL_49:147:void_removeObject(java.lang.Comparable,java.lang.Comparable): if (row.getObject( item ) != null) {     allNull = false;     break; }  =>  
SDL_50:152:void_removeObject(java.lang.Comparable,java.lang.Comparable): for (int item = 0, itemCount = row.getItemCount(); item < itemCount; item++) {     if (row.getObject( item ) != null) {         allNull = false;         break;     } }  =>   for (int item = 0, itemCount = row.getItemCount();; item++) {     if (row.getObject( item ) != null) {         allNull = false;         break;     } }
SDL_51:152:void_removeObject(java.lang.Comparable,java.lang.Comparable): for (int item = 0, itemCount = row.getItemCount(); item < itemCount; item++) {     if (row.getObject( item ) != null) {         allNull = false;         break;     } }  =>   for (int item = 0, itemCount = row.getItemCount(); item < itemCount;) {     if (row.getObject( item ) != null) {         allNull = false;         break;     } }
SDL_52:149:void_removeObject(java.lang.Comparable,java.lang.Comparable): allNull = false; break;  =>   break;
SDL_53:149:void_removeObject(java.lang.Comparable,java.lang.Comparable): allNull = false; break;  =>   allNull = false;
SDL_54:151:void_removeObject(java.lang.Comparable,java.lang.Comparable): if (row.getObject( item ) != null) {     allNull = false;     break; }  =>   if (true) {     allNull = false;     break; }
SDL_55:154:void_removeObject(java.lang.Comparable,java.lang.Comparable): this.rowKeys.remove( rowIndex ); this.rows.remove( rowIndex );  =>   this.rows.remove( rowIndex );
SDL_56:154:void_removeObject(java.lang.Comparable,java.lang.Comparable): this.rowKeys.remove( rowIndex ); this.rows.remove( rowIndex );  =>   this.rowKeys.remove( rowIndex );
SDL_57:156:void_removeObject(java.lang.Comparable,java.lang.Comparable): if (allNull) {     this.rowKeys.remove( rowIndex );     this.rows.remove( rowIndex ); }  =>   if (true) {     this.rowKeys.remove( rowIndex );     this.rows.remove( rowIndex ); }
SDL_58:161:void_removeRow(int): this.rowKeys.remove( rowIndex ); this.rows.remove( rowIndex );  =>   this.rows.remove( rowIndex );
SDL_59:161:void_removeRow(int): this.rowKeys.remove( rowIndex ); this.rows.remove( rowIndex );  =>   this.rowKeys.remove( rowIndex );
SDL_60:167:void_removeRow(java.lang.Comparable): int index = getRowIndex( rowKey ); removeRow( index );  =>   int index = getRowIndex( rowKey );
SDL_61:173:void_removeColumn(int): java.lang.Comparable columnKey = getColumnKey( columnIndex ); removeColumn( columnKey );  =>   java.lang.Comparable columnKey = getColumnKey( columnIndex );
SDL_62:185:void_removeColumn(java.lang.Comparable): int index = getColumnIndex( columnKey ); if (index < 0) {     throw new org.jfree.data.UnknownKeyException( \"Column key (\" + columnKey + \") not recognised.\" ); } java.util.Iterator iterator = this.rows.iterator(); while (iterator.hasNext()) {     org.jfree.data.KeyedObjects rowData = (org.jfree.data.KeyedObjects) iterator.next();     rowData.removeValue( columnKey ); } this.columnKeys.remove( columnKey );  =>   int index = getColumnIndex( columnKey ); java.util.Iterator iterator = this.rows.iterator(); while (iterator.hasNext()) {     org.jfree.data.KeyedObjects rowData = (org.jfree.data.KeyedObjects) iterator.next();     rowData.removeValue( columnKey ); } this.columnKeys.remove( columnKey );
SDL_63:184:void_removeColumn(java.lang.Comparable): int index = getColumnIndex( columnKey ); if (index < 0) {     throw new org.jfree.data.UnknownKeyException( \"Column key (\" + columnKey + \") not recognised.\" ); } java.util.Iterator iterator = this.rows.iterator(); while (iterator.hasNext()) {     org.jfree.data.KeyedObjects rowData = (org.jfree.data.KeyedObjects) iterator.next();     rowData.removeValue( columnKey ); } this.columnKeys.remove( columnKey );  =>   int index = getColumnIndex( columnKey ); if (index < 0) {     throw new org.jfree.data.UnknownKeyException( \"Column key (\" + columnKey + \") not recognised.\" ); } java.util.Iterator iterator = this.rows.iterator(); this.columnKeys.remove( columnKey );
SDL_64:187:void_removeColumn(java.lang.Comparable): int index = getColumnIndex( columnKey ); if (index < 0) {     throw new org.jfree.data.UnknownKeyException( \"Column key (\" + columnKey + \") not recognised.\" ); } java.util.Iterator iterator = this.rows.iterator(); while (iterator.hasNext()) {     org.jfree.data.KeyedObjects rowData = (org.jfree.data.KeyedObjects) iterator.next();     rowData.removeValue( columnKey ); } this.columnKeys.remove( columnKey );  =>   int index = getColumnIndex( columnKey ); if (index < 0) {     throw new org.jfree.data.UnknownKeyException( \"Column key (\" + columnKey + \") not recognised.\" ); } java.util.Iterator iterator = this.rows.iterator(); while (iterator.hasNext()) {     org.jfree.data.KeyedObjects rowData = (org.jfree.data.KeyedObjects) iterator.next();     rowData.removeValue( columnKey ); }
SDL_65:180:void_removeColumn(java.lang.Comparable): throw new org.jfree.data.UnknownKeyException( \"Column key (\" + columnKey + \") not recognised.\" );  =>  
SDL_66:182:void_removeColumn(java.lang.Comparable): if (index < 0) {     throw new org.jfree.data.UnknownKeyException( \"Column key (\" + columnKey + \") not recognised.\" ); }  =>   if (true) {     throw new org.jfree.data.UnknownKeyException( \"Column key (\" + columnKey + \") not recognised.\" ); }
SDL_67:185:void_removeColumn(java.lang.Comparable): org.jfree.data.KeyedObjects rowData = (org.jfree.data.KeyedObjects) iterator.next(); rowData.removeValue( columnKey );  =>   org.jfree.data.KeyedObjects rowData = (org.jfree.data.KeyedObjects) iterator.next();
SDL_68:187:void_removeColumn(java.lang.Comparable): while (iterator.hasNext()) {     org.jfree.data.KeyedObjects rowData = (org.jfree.data.KeyedObjects) iterator.next();     rowData.removeValue( columnKey ); }  =>   while (true) {     org.jfree.data.KeyedObjects rowData = (org.jfree.data.KeyedObjects) iterator.next();     rowData.removeValue( columnKey ); }
SDL_69:226:boolean_equals(java.lang.Object): if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.KeyedObjects2D)) {     return false; } org.jfree.data.KeyedObjects2D that = (org.jfree.data.KeyedObjects2D) obj; if (!getRowKeys().equals( that.getRowKeys() )) {     return false; } if (!getColumnKeys().equals( that.getColumnKeys() )) {     return false; } int rowCount = getRowCount(); if (rowCount != that.getRowCount()) {     return false; } int colCount = getColumnCount(); if (colCount != that.getColumnCount()) {     return false; } for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < colCount; c++) {         java.lang.Object v1 = getObject( r, c );         java.lang.Object v2 = that.getObject( r, c );         if (v1 == null) {             if (v2 != null) {                 return false;             }         } else {             if (!v1.equals( v2 )) {                 return false;             }         }     } } return true;  =>   if (!(obj instanceof org.jfree.data.KeyedObjects2D)) {     return false; } org.jfree.data.KeyedObjects2D that = (org.jfree.data.KeyedObjects2D) obj; if (!getRowKeys().equals( that.getRowKeys() )) {     return false; } if (!getColumnKeys().equals( that.getColumnKeys() )) {     return false; } int rowCount = getRowCount(); if (rowCount != that.getRowCount()) {     return false; } int colCount = getColumnCount(); if (colCount != that.getColumnCount()) {     return false; } for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < colCount; c++) {         java.lang.Object v1 = getObject( r, c );         java.lang.Object v2 = that.getObject( r, c );         if (v1 == null) {             if (v2 != null) {                 return false;             }         } else {             if (!v1.equals( v2 )) {                 return false;             }         }     } } return true;
SDL_70:226:boolean_equals(java.lang.Object): if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.KeyedObjects2D)) {     return false; } org.jfree.data.KeyedObjects2D that = (org.jfree.data.KeyedObjects2D) obj; if (!getRowKeys().equals( that.getRowKeys() )) {     return false; } if (!getColumnKeys().equals( that.getColumnKeys() )) {     return false; } int rowCount = getRowCount(); if (rowCount != that.getRowCount()) {     return false; } int colCount = getColumnCount(); if (colCount != that.getColumnCount()) {     return false; } for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < colCount; c++) {         java.lang.Object v1 = getObject( r, c );         java.lang.Object v2 = that.getObject( r, c );         if (v1 == null) {             if (v2 != null) {                 return false;             }         } else {             if (!v1.equals( v2 )) {                 return false;             }         }     } } return true;  =>   if (obj == this) {     return true; } org.jfree.data.KeyedObjects2D that = (org.jfree.data.KeyedObjects2D) obj; if (!getRowKeys().equals( that.getRowKeys() )) {     return false; } if (!getColumnKeys().equals( that.getColumnKeys() )) {     return false; } int rowCount = getRowCount(); if (rowCount != that.getRowCount()) {     return false; } int colCount = getColumnCount(); if (colCount != that.getColumnCount()) {     return false; } for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < colCount; c++) {         java.lang.Object v1 = getObject( r, c );         java.lang.Object v2 = that.getObject( r, c );         if (v1 == null) {             if (v2 != null) {                 return false;             }         } else {             if (!v1.equals( v2 )) {                 return false;             }         }     } } return true;
SDL_71:226:boolean_equals(java.lang.Object): if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.KeyedObjects2D)) {     return false; } org.jfree.data.KeyedObjects2D that = (org.jfree.data.KeyedObjects2D) obj; if (!getRowKeys().equals( that.getRowKeys() )) {     return false; } if (!getColumnKeys().equals( that.getColumnKeys() )) {     return false; } int rowCount = getRowCount(); if (rowCount != that.getRowCount()) {     return false; } int colCount = getColumnCount(); if (colCount != that.getColumnCount()) {     return false; } for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < colCount; c++) {         java.lang.Object v1 = getObject( r, c );         java.lang.Object v2 = that.getObject( r, c );         if (v1 == null) {             if (v2 != null) {                 return false;             }         } else {             if (!v1.equals( v2 )) {                 return false;             }         }     } } return true;  =>   if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.KeyedObjects2D)) {     return false; } org.jfree.data.KeyedObjects2D that = (org.jfree.data.KeyedObjects2D) obj; if (!getColumnKeys().equals( that.getColumnKeys() )) {     return false; } int rowCount = getRowCount(); if (rowCount != that.getRowCount()) {     return false; } int colCount = getColumnCount(); if (colCount != that.getColumnCount()) {     return false; } for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < colCount; c++) {         java.lang.Object v1 = getObject( r, c );         java.lang.Object v2 = that.getObject( r, c );         if (v1 == null) {             if (v2 != null) {                 return false;             }         } else {             if (!v1.equals( v2 )) {                 return false;             }         }     } } return true;
SDL_72:226:boolean_equals(java.lang.Object): if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.KeyedObjects2D)) {     return false; } org.jfree.data.KeyedObjects2D that = (org.jfree.data.KeyedObjects2D) obj; if (!getRowKeys().equals( that.getRowKeys() )) {     return false; } if (!getColumnKeys().equals( that.getColumnKeys() )) {     return false; } int rowCount = getRowCount(); if (rowCount != that.getRowCount()) {     return false; } int colCount = getColumnCount(); if (colCount != that.getColumnCount()) {     return false; } for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < colCount; c++) {         java.lang.Object v1 = getObject( r, c );         java.lang.Object v2 = that.getObject( r, c );         if (v1 == null) {             if (v2 != null) {                 return false;             }         } else {             if (!v1.equals( v2 )) {                 return false;             }         }     } } return true;  =>   if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.KeyedObjects2D)) {     return false; } org.jfree.data.KeyedObjects2D that = (org.jfree.data.KeyedObjects2D) obj; if (!getRowKeys().equals( that.getRowKeys() )) {     return false; } int rowCount = getRowCount(); if (rowCount != that.getRowCount()) {     return false; } int colCount = getColumnCount(); if (colCount != that.getColumnCount()) {     return false; } for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < colCount; c++) {         java.lang.Object v1 = getObject( r, c );         java.lang.Object v2 = that.getObject( r, c );         if (v1 == null) {             if (v2 != null) {                 return false;             }         } else {             if (!v1.equals( v2 )) {                 return false;             }         }     } } return true;
SDL_73:226:boolean_equals(java.lang.Object): if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.KeyedObjects2D)) {     return false; } org.jfree.data.KeyedObjects2D that = (org.jfree.data.KeyedObjects2D) obj; if (!getRowKeys().equals( that.getRowKeys() )) {     return false; } if (!getColumnKeys().equals( that.getColumnKeys() )) {     return false; } int rowCount = getRowCount(); if (rowCount != that.getRowCount()) {     return false; } int colCount = getColumnCount(); if (colCount != that.getColumnCount()) {     return false; } for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < colCount; c++) {         java.lang.Object v1 = getObject( r, c );         java.lang.Object v2 = that.getObject( r, c );         if (v1 == null) {             if (v2 != null) {                 return false;             }         } else {             if (!v1.equals( v2 )) {                 return false;             }         }     } } return true;  =>   if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.KeyedObjects2D)) {     return false; } org.jfree.data.KeyedObjects2D that = (org.jfree.data.KeyedObjects2D) obj; if (!getRowKeys().equals( that.getRowKeys() )) {     return false; } if (!getColumnKeys().equals( that.getColumnKeys() )) {     return false; } int rowCount = getRowCount(); int colCount = getColumnCount(); if (colCount != that.getColumnCount()) {     return false; } for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < colCount; c++) {         java.lang.Object v1 = getObject( r, c );         java.lang.Object v2 = that.getObject( r, c );         if (v1 == null) {             if (v2 != null) {                 return false;             }         } else {             if (!v1.equals( v2 )) {                 return false;             }         }     } } return true;
SDL_74:226:boolean_equals(java.lang.Object): if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.KeyedObjects2D)) {     return false; } org.jfree.data.KeyedObjects2D that = (org.jfree.data.KeyedObjects2D) obj; if (!getRowKeys().equals( that.getRowKeys() )) {     return false; } if (!getColumnKeys().equals( that.getColumnKeys() )) {     return false; } int rowCount = getRowCount(); if (rowCount != that.getRowCount()) {     return false; } int colCount = getColumnCount(); if (colCount != that.getColumnCount()) {     return false; } for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < colCount; c++) {         java.lang.Object v1 = getObject( r, c );         java.lang.Object v2 = that.getObject( r, c );         if (v1 == null) {             if (v2 != null) {                 return false;             }         } else {             if (!v1.equals( v2 )) {                 return false;             }         }     } } return true;  =>   if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.KeyedObjects2D)) {     return false; } org.jfree.data.KeyedObjects2D that = (org.jfree.data.KeyedObjects2D) obj; if (!getRowKeys().equals( that.getRowKeys() )) {     return false; } if (!getColumnKeys().equals( that.getColumnKeys() )) {     return false; } int rowCount = getRowCount(); if (rowCount != that.getRowCount()) {     return false; } int colCount = getColumnCount(); for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < colCount; c++) {         java.lang.Object v1 = getObject( r, c );         java.lang.Object v2 = that.getObject( r, c );         if (v1 == null) {             if (v2 != null) {                 return false;             }         } else {             if (!v1.equals( v2 )) {                 return false;             }         }     } } return true;
SDL_75:214:boolean_equals(java.lang.Object): if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.KeyedObjects2D)) {     return false; } org.jfree.data.KeyedObjects2D that = (org.jfree.data.KeyedObjects2D) obj; if (!getRowKeys().equals( that.getRowKeys() )) {     return false; } if (!getColumnKeys().equals( that.getColumnKeys() )) {     return false; } int rowCount = getRowCount(); if (rowCount != that.getRowCount()) {     return false; } int colCount = getColumnCount(); if (colCount != that.getColumnCount()) {     return false; } for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < colCount; c++) {         java.lang.Object v1 = getObject( r, c );         java.lang.Object v2 = that.getObject( r, c );         if (v1 == null) {             if (v2 != null) {                 return false;             }         } else {             if (!v1.equals( v2 )) {                 return false;             }         }     } } return true;  =>   if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.KeyedObjects2D)) {     return false; } org.jfree.data.KeyedObjects2D that = (org.jfree.data.KeyedObjects2D) obj; if (!getRowKeys().equals( that.getRowKeys() )) {     return false; } if (!getColumnKeys().equals( that.getColumnKeys() )) {     return false; } int rowCount = getRowCount(); if (rowCount != that.getRowCount()) {     return false; } int colCount = getColumnCount(); if (colCount != that.getColumnCount()) {     return false; } return true;
SDL_76:195:boolean_equals(java.lang.Object): if (obj == this) {     return true; }  =>   if (true) {     return true; }
SDL_77:194:boolean_equals(java.lang.Object): return true;  =>   return false;
SDL_78:198:boolean_equals(java.lang.Object): if (!(obj instanceof org.jfree.data.KeyedObjects2D)) {     return false; }  =>   if (true) {     return false; }
SDL_79:197:boolean_equals(java.lang.Object): return false;  =>   return true;
SDL_80:202:boolean_equals(java.lang.Object): if (!getRowKeys().equals( that.getRowKeys() )) {     return false; }  =>   if (true) {     return false; }
SDL_81:201:boolean_equals(java.lang.Object): return false;  =>   return true;
SDL_82:205:boolean_equals(java.lang.Object): if (!getColumnKeys().equals( that.getColumnKeys() )) {     return false; }  =>   if (true) {     return false; }
SDL_83:204:boolean_equals(java.lang.Object): return false;  =>   return true;
SDL_84:209:boolean_equals(java.lang.Object): if (rowCount != that.getRowCount()) {     return false; }  =>   if (true) {     return false; }
SDL_85:208:boolean_equals(java.lang.Object): return false;  =>   return true;
SDL_86:213:boolean_equals(java.lang.Object): if (colCount != that.getColumnCount()) {     return false; }  =>   if (true) {     return false; }
SDL_87:212:boolean_equals(java.lang.Object): return false;  =>   return true;
SDL_88:214:boolean_equals(java.lang.Object): for (int c = 0; c < colCount; c++) {     java.lang.Object v1 = getObject( r, c );     java.lang.Object v2 = that.getObject( r, c );     if (v1 == null) {         if (v2 != null) {             return false;         }     } else {         if (!v1.equals( v2 )) {             return false;         }     } }  =>  
SDL_89:228:boolean_equals(java.lang.Object): for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < colCount; c++) {         java.lang.Object v1 = getObject( r, c );         java.lang.Object v2 = that.getObject( r, c );         if (v1 == null) {             if (v2 != null) {                 return false;             }         } else {             if (!v1.equals( v2 )) {                 return false;             }         }     } }  =>   for (int r = 0;; r++) {     for (int c = 0; c < colCount; c++) {         java.lang.Object v1 = getObject( r, c );         java.lang.Object v2 = that.getObject( r, c );         if (v1 == null) {             if (v2 != null) {                 return false;             }         } else {             if (!v1.equals( v2 )) {                 return false;             }         }     } }
SDL_90:228:boolean_equals(java.lang.Object): for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < colCount; c++) {         java.lang.Object v1 = getObject( r, c );         java.lang.Object v2 = that.getObject( r, c );         if (v1 == null) {             if (v2 != null) {                 return false;             }         } else {             if (!v1.equals( v2 )) {                 return false;             }         }     } }  =>   for (int r = 0; r < rowCount;) {     for (int c = 0; c < colCount; c++) {         java.lang.Object v1 = getObject( r, c );         java.lang.Object v2 = that.getObject( r, c );         if (v1 == null) {             if (v2 != null) {                 return false;             }         } else {             if (!v1.equals( v2 )) {                 return false;             }         }     } }
SDL_91:217:boolean_equals(java.lang.Object): java.lang.Object v1 = getObject( r, c ); java.lang.Object v2 = that.getObject( r, c ); if (v1 == null) {     if (v2 != null) {         return false;     } } else {     if (!v1.equals( v2 )) {         return false;     } }  =>   java.lang.Object v1 = getObject( r, c ); java.lang.Object v2 = that.getObject( r, c );
SDL_92:227:boolean_equals(java.lang.Object): for (int c = 0; c < colCount; c++) {     java.lang.Object v1 = getObject( r, c );     java.lang.Object v2 = that.getObject( r, c );     if (v1 == null) {         if (v2 != null) {             return false;         }     } else {         if (!v1.equals( v2 )) {             return false;         }     } }  =>   for (int c = 0;; c++) {     java.lang.Object v1 = getObject( r, c );     java.lang.Object v2 = that.getObject( r, c );     if (v1 == null) {         if (v2 != null) {             return false;         }     } else {         if (!v1.equals( v2 )) {             return false;         }     } }
SDL_93:227:boolean_equals(java.lang.Object): for (int c = 0; c < colCount; c++) {     java.lang.Object v1 = getObject( r, c );     java.lang.Object v2 = that.getObject( r, c );     if (v1 == null) {         if (v2 != null) {             return false;         }     } else {         if (!v1.equals( v2 )) {             return false;         }     } }  =>   for (int c = 0; c < colCount;) {     java.lang.Object v1 = getObject( r, c );     java.lang.Object v2 = that.getObject( r, c );     if (v1 == null) {         if (v2 != null) {             return false;         }     } else {         if (!v1.equals( v2 )) {             return false;         }     } }
SDL_94:218:boolean_equals(java.lang.Object): if (v2 != null) {     return false; }  =>  
SDL_95:226:boolean_equals(java.lang.Object): if (v1 == null) {     if (v2 != null) {         return false;     } } else {     if (!v1.equals( v2 )) {         return false;     } }  =>   if (true) {     if (v2 != null) {         return false;     } } else {     if (!v1.equals( v2 )) {         return false;     } }
SDL_96:222:boolean_equals(java.lang.Object): if (!v1.equals( v2 )) {     return false; }  =>  
SDL_97:221:boolean_equals(java.lang.Object): if (v2 != null) {     return false; }  =>   if (true) {     return false; }
SDL_98:220:boolean_equals(java.lang.Object): return false;  =>   return true;
SDL_99:225:boolean_equals(java.lang.Object): if (!v1.equals( v2 )) {     return false; }  =>   if (true) {     return false; }
SDL_100:224:boolean_equals(java.lang.Object): return false;  =>   return true;
SDL_101:229:boolean_equals(java.lang.Object): return true;  =>   return false;
SDL_102:237:int_hashCode(): int result; result = this.rowKeys.hashCode(); result = 29 * result + this.columnKeys.hashCode(); result = 29 * result + this.rows.hashCode(); return result;  =>   int result; result = 29 * result + this.columnKeys.hashCode(); result = 29 * result + this.rows.hashCode(); return result;
SDL_103:237:int_hashCode(): int result; result = this.rowKeys.hashCode(); result = 29 * result + this.columnKeys.hashCode(); result = 29 * result + this.rows.hashCode(); return result;  =>   int result; result = this.rowKeys.hashCode(); result = 29 * result + this.rows.hashCode(); return result;
SDL_104:237:int_hashCode(): int result; result = this.rowKeys.hashCode(); result = 29 * result + this.columnKeys.hashCode(); result = 29 * result + this.rows.hashCode(); return result;  =>   int result; result = this.rowKeys.hashCode(); result = 29 * result + this.columnKeys.hashCode(); return result;
SDL_105:238:int_hashCode(): return result;  =>   return 0;
SDL_106:252:java.lang.Object_clone(): org.jfree.data.KeyedObjects2D clone = (org.jfree.data.KeyedObjects2D) super.clone(); clone.columnKeys = new java.util.ArrayList( this.columnKeys ); clone.rowKeys = new java.util.ArrayList( this.rowKeys ); clone.rows = new java.util.ArrayList( this.rows.size() ); java.util.Iterator iterator = this.rows.iterator(); while (iterator.hasNext()) {     org.jfree.data.KeyedObjects row = (org.jfree.data.KeyedObjects) iterator.next();     clone.rows.add( row.clone() ); } return clone;  =>   org.jfree.data.KeyedObjects2D clone = (org.jfree.data.KeyedObjects2D) super.clone(); clone.rowKeys = new java.util.ArrayList( this.rowKeys ); clone.rows = new java.util.ArrayList( this.rows.size() ); java.util.Iterator iterator = this.rows.iterator(); while (iterator.hasNext()) {     org.jfree.data.KeyedObjects row = (org.jfree.data.KeyedObjects) iterator.next();     clone.rows.add( row.clone() ); } return clone;
SDL_107:252:java.lang.Object_clone(): org.jfree.data.KeyedObjects2D clone = (org.jfree.data.KeyedObjects2D) super.clone(); clone.columnKeys = new java.util.ArrayList( this.columnKeys ); clone.rowKeys = new java.util.ArrayList( this.rowKeys ); clone.rows = new java.util.ArrayList( this.rows.size() ); java.util.Iterator iterator = this.rows.iterator(); while (iterator.hasNext()) {     org.jfree.data.KeyedObjects row = (org.jfree.data.KeyedObjects) iterator.next();     clone.rows.add( row.clone() ); } return clone;  =>   org.jfree.data.KeyedObjects2D clone = (org.jfree.data.KeyedObjects2D) super.clone(); clone.columnKeys = new java.util.ArrayList( this.columnKeys ); clone.rows = new java.util.ArrayList( this.rows.size() ); java.util.Iterator iterator = this.rows.iterator(); while (iterator.hasNext()) {     org.jfree.data.KeyedObjects row = (org.jfree.data.KeyedObjects) iterator.next();     clone.rows.add( row.clone() ); } return clone;
SDL_108:252:java.lang.Object_clone(): org.jfree.data.KeyedObjects2D clone = (org.jfree.data.KeyedObjects2D) super.clone(); clone.columnKeys = new java.util.ArrayList( this.columnKeys ); clone.rowKeys = new java.util.ArrayList( this.rowKeys ); clone.rows = new java.util.ArrayList( this.rows.size() ); java.util.Iterator iterator = this.rows.iterator(); while (iterator.hasNext()) {     org.jfree.data.KeyedObjects row = (org.jfree.data.KeyedObjects) iterator.next();     clone.rows.add( row.clone() ); } return clone;  =>   org.jfree.data.KeyedObjects2D clone = (org.jfree.data.KeyedObjects2D) super.clone(); clone.columnKeys = new java.util.ArrayList( this.columnKeys ); clone.rowKeys = new java.util.ArrayList( this.rowKeys ); java.util.Iterator iterator = this.rows.iterator(); while (iterator.hasNext()) {     org.jfree.data.KeyedObjects row = (org.jfree.data.KeyedObjects) iterator.next();     clone.rows.add( row.clone() ); } return clone;
SDL_109:249:java.lang.Object_clone(): org.jfree.data.KeyedObjects2D clone = (org.jfree.data.KeyedObjects2D) super.clone(); clone.columnKeys = new java.util.ArrayList( this.columnKeys ); clone.rowKeys = new java.util.ArrayList( this.rowKeys ); clone.rows = new java.util.ArrayList( this.rows.size() ); java.util.Iterator iterator = this.rows.iterator(); while (iterator.hasNext()) {     org.jfree.data.KeyedObjects row = (org.jfree.data.KeyedObjects) iterator.next();     clone.rows.add( row.clone() ); } return clone;  =>   org.jfree.data.KeyedObjects2D clone = (org.jfree.data.KeyedObjects2D) super.clone(); clone.columnKeys = new java.util.ArrayList( this.columnKeys ); clone.rowKeys = new java.util.ArrayList( this.rowKeys ); clone.rows = new java.util.ArrayList( this.rows.size() ); java.util.Iterator iterator = this.rows.iterator(); return clone;
SDL_110:250:java.lang.Object_clone(): org.jfree.data.KeyedObjects row = (org.jfree.data.KeyedObjects) iterator.next(); clone.rows.add( row.clone() );  =>   org.jfree.data.KeyedObjects row = (org.jfree.data.KeyedObjects) iterator.next();
SDL_111:252:java.lang.Object_clone(): while (iterator.hasNext()) {     org.jfree.data.KeyedObjects row = (org.jfree.data.KeyedObjects) iterator.next();     clone.rows.add( row.clone() ); }  =>   while (true) {     org.jfree.data.KeyedObjects row = (org.jfree.data.KeyedObjects) iterator.next();     clone.rows.add( row.clone() ); }
