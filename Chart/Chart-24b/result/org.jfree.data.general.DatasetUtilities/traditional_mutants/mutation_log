AORB_1:52:double_calculatePieDatasetTotal(org.jfree.data.general.PieDataset):totalValue + v => totalValue * v
AORB_2:52:double_calculatePieDatasetTotal(org.jfree.data.general.PieDataset):totalValue + v => totalValue / v
AORB_3:52:double_calculatePieDatasetTotal(org.jfree.data.general.PieDataset):totalValue + v => totalValue % v
AORB_4:52:double_calculatePieDatasetTotal(org.jfree.data.general.PieDataset):totalValue + v => totalValue - v
AORB_5:110:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int):value / total => value * total
AORB_6:110:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int):value / total => value % total
AORB_7:110:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int):value / total => value + total
AORB_8:110:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int):value / total => value - total
AORB_9:138:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double):r + 1 => r * 1
AORB_10:138:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double):r + 1 => r / 1
AORB_11:138:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double):r + 1 => r % 1
AORB_12:138:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double):r + 1 => r - 1
AORB_13:140:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double):c + 1 => c * 1
AORB_14:140:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double):c + 1 => c / 1
AORB_15:140:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double):c + 1 => c % 1
AORB_16:140:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double):c + 1 => c - 1
AORB_17:151:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]):r + 1 => r * 1
AORB_18:151:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]):r + 1 => r / 1
AORB_19:151:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]):r + 1 => r % 1
AORB_20:151:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]):r + 1 => r - 1
AORB_21:153:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]):c + 1 => c * 1
AORB_22:153:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]):c + 1 => c / 1
AORB_23:153:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]):c + 1 => c % 1
AORB_24:153:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]):c + 1 => c - 1
AORB_25:225:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable):end - start => end * start
AORB_26:225:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable):end - start => end / start
AORB_27:225:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable):end - start => end % start
AORB_28:225:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable):end - start => end + start
AORB_29:225:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable):(end - start) / samples => (end - start) * samples
AORB_30:225:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable):(end - start) / samples => (end - start) % samples
AORB_31:225:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable):(end - start) / samples => end - start + samples
AORB_32:225:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable):(end - start) / samples => end - start - samples
AORB_33:227:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable):step * i => step / i
AORB_34:227:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable):step * i => step % i
AORB_35:227:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable):step * i => step + i
AORB_36:227:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable):step * i => step - i
AORB_37:227:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable):start + step * i => start * (step * i)
AORB_38:227:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable):start + step * i => start / (step * i)
AORB_39:227:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable):start + step * i => start % (step * i)
AORB_40:227:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable):start + step * i => start - step * i
AORB_41:705:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double):positive + value => positive * value
AORB_42:705:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double):positive + value => positive / value
AORB_43:705:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double):positive + value => positive % value
AORB_44:705:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double):positive + value => positive - value
AORB_45:708:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double):negative + value => negative * value
AORB_46:708:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double):negative + value => negative / value
AORB_47:708:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double):negative + value => negative % value
AORB_48:708:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double):negative + value => negative - value
AORB_49:742:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap):positive[groupIndex[series]] + value => positive[groupIndex[series]] * value
AORB_50:742:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap):positive[groupIndex[series]] + value => positive[groupIndex[series]] / value
AORB_51:742:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap):positive[groupIndex[series]] + value => positive[groupIndex[series]] % value
AORB_52:742:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap):positive[groupIndex[series]] + value => positive[groupIndex[series]] - value
AORB_53:745:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap):negative[groupIndex[series]] + value => negative[groupIndex[series]] * value
AORB_54:745:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap):negative[groupIndex[series]] + value => negative[groupIndex[series]] / value
AORB_55:745:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap):negative[groupIndex[series]] + value => negative[groupIndex[series]] % value
AORB_56:745:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap):negative[groupIndex[series]] + value => negative[groupIndex[series]] - value
AORB_57:775:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset):total + value => total * value
AORB_58:775:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset):total + value => total / value
AORB_59:775:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset):total + value => total % value
AORB_60:775:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset):total + value => total - value
AORB_61:800:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset):total + value => total * value
AORB_62:800:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset):total + value => total / value
AORB_63:800:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset):total + value => total % value
AORB_64:800:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset):total + value => total - value
AORB_65:858:double_calculateStackTotal(org.jfree.data.xy.TableXYDataset,int):total + value => total * value
AORB_66:858:double_calculateStackTotal(org.jfree.data.xy.TableXYDataset,int):total + value => total / value
AORB_67:858:double_calculateStackTotal(org.jfree.data.xy.TableXYDataset,int):total + value => total % value
AORB_68:858:double_calculateStackTotal(org.jfree.data.xy.TableXYDataset,int):total + value => total - value
AORB_69:874:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset):dataset.getColumnCount() - 1 => dataset.getColumnCount() * 1
AORB_70:874:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset):dataset.getColumnCount() - 1 => dataset.getColumnCount() / 1
AORB_71:874:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset):dataset.getColumnCount() - 1 => dataset.getColumnCount() % 1
AORB_72:874:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset):dataset.getColumnCount() - 1 => dataset.getColumnCount() + 1
AORB_73:879:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset):runningTotal + value => runningTotal * value
AORB_74:879:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset):runningTotal + value => runningTotal / value
AORB_75:879:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset):runningTotal + value => runningTotal % value
AORB_76:879:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset):runningTotal + value => runningTotal - value
ROR_1:37:double_calculatePieDatasetTotal(org.jfree.data.general.PieDataset): dataset == null  =>   dataset != null
ROR_2:45:double_calculatePieDatasetTotal(org.jfree.data.general.PieDataset): current != null  =>   current == null
ROR_3:48:double_calculatePieDatasetTotal(org.jfree.data.general.PieDataset): value != null  =>   value == null
ROR_4:51:double_calculatePieDatasetTotal(org.jfree.data.general.PieDataset): v > 0  =>   v >= 0
ROR_5:51:double_calculatePieDatasetTotal(org.jfree.data.general.PieDataset): v > 0  =>   v < 0
ROR_6:51:double_calculatePieDatasetTotal(org.jfree.data.general.PieDataset): v > 0  =>   v <= 0
ROR_7:51:double_calculatePieDatasetTotal(org.jfree.data.general.PieDataset): v > 0  =>   v == 0
ROR_8:51:double_calculatePieDatasetTotal(org.jfree.data.general.PieDataset): v > 0  =>   v != 0
ROR_9:51:double_calculatePieDatasetTotal(org.jfree.data.general.PieDataset): v > 0  =>   true
ROR_10:51:double_calculatePieDatasetTotal(org.jfree.data.general.PieDataset): v > 0  =>   false
ROR_11:69:org.jfree.data.general.PieDataset_createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int): current < columnCount  =>   current > columnCount
ROR_12:69:org.jfree.data.general.PieDataset_createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int): current < columnCount  =>   current >= columnCount
ROR_13:69:org.jfree.data.general.PieDataset_createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int): current < columnCount  =>   current <= columnCount
ROR_14:69:org.jfree.data.general.PieDataset_createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int): current < columnCount  =>   current == columnCount
ROR_15:69:org.jfree.data.general.PieDataset_createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int): current < columnCount  =>   current != columnCount
ROR_16:69:org.jfree.data.general.PieDataset_createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int): current < columnCount  =>   true
ROR_17:69:org.jfree.data.general.PieDataset_createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int): current < columnCount  =>   false
ROR_18:86:org.jfree.data.general.PieDataset_createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int): i < rowCount  =>   i > rowCount
ROR_19:86:org.jfree.data.general.PieDataset_createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int): i < rowCount  =>   i >= rowCount
ROR_20:86:org.jfree.data.general.PieDataset_createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int): i < rowCount  =>   i <= rowCount
ROR_21:86:org.jfree.data.general.PieDataset_createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int): i < rowCount  =>   i == rowCount
ROR_22:86:org.jfree.data.general.PieDataset_createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int): i < rowCount  =>   i != rowCount
ROR_23:86:org.jfree.data.general.PieDataset_createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int): i < rowCount  =>   true
ROR_24:86:org.jfree.data.general.PieDataset_createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int): i < rowCount  =>   false
ROR_25:108:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): dataValue != null  =>   dataValue == null
ROR_26:110:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): value / total < minimumPercent  =>   value / total > minimumPercent
ROR_27:110:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): value / total < minimumPercent  =>   value / total >= minimumPercent
ROR_28:110:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): value / total < minimumPercent  =>   value / total <= minimumPercent
ROR_29:110:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): value / total < minimumPercent  =>   value / total == minimumPercent
ROR_30:110:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): value / total < minimumPercent  =>   value / total != minimumPercent
ROR_31:110:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): value / total < minimumPercent  =>   true
ROR_32:110:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): value / total < minimumPercent  =>   false
ROR_33:120:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): dataValue != null  =>   dataValue == null
ROR_34:121:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): otherKeys.size() >= minItems  =>   otherKeys.size() > minItems
ROR_35:121:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): otherKeys.size() >= minItems  =>   otherKeys.size() < minItems
ROR_36:121:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): otherKeys.size() >= minItems  =>   otherKeys.size() <= minItems
ROR_37:121:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): otherKeys.size() >= minItems  =>   otherKeys.size() == minItems
ROR_38:121:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): otherKeys.size() >= minItems  =>   otherKeys.size() != minItems
ROR_39:121:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): otherKeys.size() >= minItems  =>   true
ROR_40:121:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): otherKeys.size() >= minItems  =>   false
ROR_41:128:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): otherKeys.size() >= minItems  =>   otherKeys.size() > minItems
ROR_42:128:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): otherKeys.size() >= minItems  =>   otherKeys.size() < minItems
ROR_43:128:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): otherKeys.size() >= minItems  =>   otherKeys.size() <= minItems
ROR_44:128:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): otherKeys.size() >= minItems  =>   otherKeys.size() == minItems
ROR_45:128:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): otherKeys.size() >= minItems  =>   otherKeys.size() != minItems
ROR_46:128:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): otherKeys.size() >= minItems  =>   true
ROR_47:128:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): otherKeys.size() >= minItems  =>   false
ROR_48:137:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): r < data.length  =>   r > data.length
ROR_49:137:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): r < data.length  =>   r >= data.length
ROR_50:137:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): r < data.length  =>   r <= data.length
ROR_51:137:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): r < data.length  =>   r == data.length
ROR_52:137:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): r < data.length  =>   r != data.length
ROR_53:137:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): r < data.length  =>   true
ROR_54:137:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): r < data.length  =>   false
ROR_55:139:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): c < data[r].length  =>   c > data[r].length
ROR_56:139:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): c < data[r].length  =>   c >= data[r].length
ROR_57:139:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): c < data[r].length  =>   c <= data[r].length
ROR_58:139:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): c < data[r].length  =>   c == data[r].length
ROR_59:139:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): c < data[r].length  =>   c != data[r].length
ROR_60:139:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): c < data[r].length  =>   true
ROR_61:139:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): c < data[r].length  =>   false
ROR_62:150:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): r < data.length  =>   r > data.length
ROR_63:150:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): r < data.length  =>   r >= data.length
ROR_64:150:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): r < data.length  =>   r <= data.length
ROR_65:150:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): r < data.length  =>   r == data.length
ROR_66:150:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): r < data.length  =>   r != data.length
ROR_67:150:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): r < data.length  =>   true
ROR_68:150:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): r < data.length  =>   false
ROR_69:152:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): c < data[r].length  =>   c > data[r].length
ROR_70:152:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): c < data[r].length  =>   c >= data[r].length
ROR_71:152:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): c < data[r].length  =>   c <= data[r].length
ROR_72:152:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): c < data[r].length  =>   c == data[r].length
ROR_73:152:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): c < data[r].length  =>   c != data[r].length
ROR_74:152:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): c < data[r].length  =>   true
ROR_75:152:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): c < data[r].length  =>   false
ROR_76:162:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): rowKeys == null  =>   rowKeys != null
ROR_77:165:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): columnKeys == null  =>   columnKeys != null
ROR_78:174:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): rowKeys.length != data.length  =>   rowKeys.length > data.length
ROR_79:174:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): rowKeys.length != data.length  =>   rowKeys.length >= data.length
ROR_80:174:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): rowKeys.length != data.length  =>   rowKeys.length < data.length
ROR_81:174:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): rowKeys.length != data.length  =>   rowKeys.length <= data.length
ROR_82:174:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): rowKeys.length != data.length  =>   rowKeys.length == data.length
ROR_83:174:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): rowKeys.length != data.length  =>   true
ROR_84:174:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): rowKeys.length != data.length  =>   false
ROR_85:178:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): r < data.length  =>   r > data.length
ROR_86:178:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): r < data.length  =>   r >= data.length
ROR_87:178:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): r < data.length  =>   r <= data.length
ROR_88:178:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): r < data.length  =>   r == data.length
ROR_89:178:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): r < data.length  =>   r != data.length
ROR_90:178:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): r < data.length  =>   true
ROR_91:178:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): r < data.length  =>   false
ROR_92:181:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): columnKeys.length != columnCount  =>   columnKeys.length > columnCount
ROR_93:181:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): columnKeys.length != columnCount  =>   columnKeys.length >= columnCount
ROR_94:181:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): columnKeys.length != columnCount  =>   columnKeys.length < columnCount
ROR_95:181:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): columnKeys.length != columnCount  =>   columnKeys.length <= columnCount
ROR_96:181:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): columnKeys.length != columnCount  =>   columnKeys.length == columnCount
ROR_97:181:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): columnKeys.length != columnCount  =>   true
ROR_98:181:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): columnKeys.length != columnCount  =>   false
ROR_99:185:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): r < data.length  =>   r > data.length
ROR_100:185:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): r < data.length  =>   r >= data.length
ROR_101:185:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): r < data.length  =>   r <= data.length
ROR_102:185:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): r < data.length  =>   r == data.length
ROR_103:185:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): r < data.length  =>   r != data.length
ROR_104:185:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): r < data.length  =>   true
ROR_105:185:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): r < data.length  =>   false
ROR_106:187:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): c < data[r].length  =>   c > data[r].length
ROR_107:187:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): c < data[r].length  =>   c >= data[r].length
ROR_108:187:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): c < data[r].length  =>   c <= data[r].length
ROR_109:187:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): c < data[r].length  =>   c == data[r].length
ROR_110:187:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): c < data[r].length  =>   c != data[r].length
ROR_111:187:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): c < data[r].length  =>   true
ROR_112:187:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): c < data[r].length  =>   false
ROR_113:197:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): rowKey == null  =>   rowKey != null
ROR_114:200:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): rowData == null  =>   rowData != null
ROR_115:204:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): i < rowData.getItemCount()  =>   i > rowData.getItemCount()
ROR_116:204:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): i < rowData.getItemCount()  =>   i >= rowData.getItemCount()
ROR_117:204:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): i < rowData.getItemCount()  =>   i <= rowData.getItemCount()
ROR_118:204:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): i < rowData.getItemCount()  =>   i == rowData.getItemCount()
ROR_119:204:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): i < rowData.getItemCount()  =>   i != rowData.getItemCount()
ROR_120:204:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): i < rowData.getItemCount()  =>   true
ROR_121:204:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): i < rowData.getItemCount()  =>   false
ROR_122:212:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): f == null  =>   f != null
ROR_123:215:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): seriesKey == null  =>   seriesKey != null
ROR_124:218:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): start >= end  =>   start > end
ROR_125:218:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): start >= end  =>   start < end
ROR_126:218:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): start >= end  =>   start <= end
ROR_127:218:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): start >= end  =>   start == end
ROR_128:218:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): start >= end  =>   start != end
ROR_129:218:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): start >= end  =>   true
ROR_130:218:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): start >= end  =>   false
ROR_131:221:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): samples < 2  =>   samples > 2
ROR_132:221:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): samples < 2  =>   samples >= 2
ROR_133:221:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): samples < 2  =>   samples <= 2
ROR_134:221:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): samples < 2  =>   samples == 2
ROR_135:221:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): samples < 2  =>   samples != 2
ROR_136:221:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): samples < 2  =>   true
ROR_137:221:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): samples < 2  =>   false
ROR_138:226:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): i <= samples  =>   i > samples
ROR_139:226:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): i <= samples  =>   i >= samples
ROR_140:226:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): i <= samples  =>   i < samples
ROR_141:226:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): i <= samples  =>   i == samples
ROR_142:226:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): i <= samples  =>   i != samples
ROR_143:226:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): i <= samples  =>   true
ROR_144:226:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): i <= samples  =>   false
ROR_145:236:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): dataset == null  =>   dataset != null
ROR_146:240:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): itemCount == 0  =>   itemCount > 0
ROR_147:240:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): itemCount == 0  =>   itemCount >= 0
ROR_148:240:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): itemCount == 0  =>   itemCount < 0
ROR_149:240:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): itemCount == 0  =>   itemCount <= 0
ROR_150:240:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): itemCount == 0  =>   itemCount != 0
ROR_151:240:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): itemCount == 0  =>   true
ROR_152:240:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): itemCount == 0  =>   false
ROR_153:243:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): item < itemCount  =>   item > itemCount
ROR_154:243:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): item < itemCount  =>   item >= itemCount
ROR_155:243:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): item < itemCount  =>   item <= itemCount
ROR_156:243:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): item < itemCount  =>   item == itemCount
ROR_157:243:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): item < itemCount  =>   item != itemCount
ROR_158:243:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): item < itemCount  =>   true
ROR_159:243:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): item < itemCount  =>   false
ROR_160:245:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): y != null  =>   y == null
ROR_161:247:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): yy > 0.0  =>   yy >= 0.0
ROR_162:247:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): yy > 0.0  =>   yy < 0.0
ROR_163:247:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): yy > 0.0  =>   yy <= 0.0
ROR_164:247:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): yy > 0.0  =>   yy == 0.0
ROR_165:247:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): yy > 0.0  =>   yy != 0.0
ROR_166:247:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): yy > 0.0  =>   true
ROR_167:247:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): yy > 0.0  =>   false
ROR_168:257:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): dataset == null  =>   dataset != null
ROR_169:262:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): rowCount == 0  =>   rowCount > 0
ROR_170:262:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): rowCount == 0  =>   rowCount >= 0
ROR_171:262:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): rowCount == 0  =>   rowCount < 0
ROR_172:262:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): rowCount == 0  =>   rowCount <= 0
ROR_173:262:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): rowCount == 0  =>   rowCount != 0
ROR_174:262:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): rowCount == 0  =>   true
ROR_175:262:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): rowCount == 0  =>   false
ROR_176:262:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): columnCount == 0  =>   columnCount > 0
ROR_177:262:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): columnCount == 0  =>   columnCount >= 0
ROR_178:262:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): columnCount == 0  =>   columnCount < 0
ROR_179:262:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): columnCount == 0  =>   columnCount <= 0
ROR_180:262:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): columnCount == 0  =>   columnCount != 0
ROR_181:262:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): columnCount == 0  =>   true
ROR_182:262:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): columnCount == 0  =>   false
ROR_183:265:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): r < rowCount  =>   r > rowCount
ROR_184:265:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): r < rowCount  =>   r >= rowCount
ROR_185:265:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): r < rowCount  =>   r <= rowCount
ROR_186:265:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): r < rowCount  =>   r == rowCount
ROR_187:265:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): r < rowCount  =>   r != rowCount
ROR_188:265:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): r < rowCount  =>   true
ROR_189:265:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): r < rowCount  =>   false
ROR_190:266:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): c < columnCount  =>   c > columnCount
ROR_191:266:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): c < columnCount  =>   c >= columnCount
ROR_192:266:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): c < columnCount  =>   c <= columnCount
ROR_193:266:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): c < columnCount  =>   c == columnCount
ROR_194:266:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): c < columnCount  =>   c != columnCount
ROR_195:266:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): c < columnCount  =>   true
ROR_196:266:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): c < columnCount  =>   false
ROR_197:267:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): dataset.getValue( r, c ) != null  =>   dataset.getValue( r, c ) == null
ROR_198:277:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): dataset != null  =>   dataset == null
ROR_199:278:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): s < dataset.getSeriesCount()  =>   s > dataset.getSeriesCount()
ROR_200:278:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): s < dataset.getSeriesCount()  =>   s >= dataset.getSeriesCount()
ROR_201:278:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): s < dataset.getSeriesCount()  =>   s <= dataset.getSeriesCount()
ROR_202:278:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): s < dataset.getSeriesCount()  =>   s == dataset.getSeriesCount()
ROR_203:278:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): s < dataset.getSeriesCount()  =>   s != dataset.getSeriesCount()
ROR_204:278:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): s < dataset.getSeriesCount()  =>   true
ROR_205:278:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): s < dataset.getSeriesCount()  =>   false
ROR_206:279:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): dataset.getItemCount( s ) > 0  =>   dataset.getItemCount( s ) >= 0
ROR_207:279:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): dataset.getItemCount( s ) > 0  =>   dataset.getItemCount( s ) < 0
ROR_208:279:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): dataset.getItemCount( s ) > 0  =>   dataset.getItemCount( s ) <= 0
ROR_209:279:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): dataset.getItemCount( s ) > 0  =>   dataset.getItemCount( s ) == 0
ROR_210:279:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): dataset.getItemCount( s ) > 0  =>   dataset.getItemCount( s ) != 0
ROR_211:279:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): dataset.getItemCount( s ) > 0  =>   true
ROR_212:279:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): dataset.getItemCount( s ) > 0  =>   false
ROR_213:294:org.jfree.data.Range_findDomainBounds(org.jfree.data.xy.XYDataset,boolean): dataset == null  =>   dataset != null
ROR_214:314:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): dataset == null  =>   dataset != null
ROR_215:324:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   series > seriesCount
ROR_216:324:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   series >= seriesCount
ROR_217:324:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   series <= seriesCount
ROR_218:324:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   series == seriesCount
ROR_219:324:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   series != seriesCount
ROR_220:324:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   true
ROR_221:324:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   false
ROR_222:326:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   item > itemCount
ROR_223:326:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   item >= itemCount
ROR_224:326:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   item <= itemCount
ROR_225:326:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   item == itemCount
ROR_226:326:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   item != itemCount
ROR_227:326:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   true
ROR_228:326:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   false
ROR_229:334:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   series > seriesCount
ROR_230:334:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   series >= seriesCount
ROR_231:334:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   series <= seriesCount
ROR_232:334:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   series == seriesCount
ROR_233:334:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   series != seriesCount
ROR_234:334:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   true
ROR_235:334:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   false
ROR_236:336:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   item > itemCount
ROR_237:336:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   item >= itemCount
ROR_238:336:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   item <= itemCount
ROR_239:336:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   item == itemCount
ROR_240:336:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   item != itemCount
ROR_241:336:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   true
ROR_242:336:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   false
ROR_243:344:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): minimum > maximum  =>   minimum >= maximum
ROR_244:344:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): minimum > maximum  =>   minimum < maximum
ROR_245:344:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): minimum > maximum  =>   minimum <= maximum
ROR_246:344:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): minimum > maximum  =>   minimum == maximum
ROR_247:344:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): minimum > maximum  =>   minimum != maximum
ROR_248:344:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): minimum > maximum  =>   true
ROR_249:344:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): minimum > maximum  =>   false
ROR_250:358:org.jfree.data.Range_findRangeBounds(org.jfree.data.category.CategoryDataset,boolean): dataset == null  =>   dataset != null
ROR_251:378:org.jfree.data.Range_findRangeBounds(org.jfree.data.xy.XYDataset,boolean): dataset == null  =>   dataset != null
ROR_252:398:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): row < rowCount  =>   row > rowCount
ROR_253:398:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): row < rowCount  =>   row >= rowCount
ROR_254:398:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): row < rowCount  =>   row <= rowCount
ROR_255:398:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): row < rowCount  =>   row == rowCount
ROR_256:398:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): row < rowCount  =>   row != rowCount
ROR_257:398:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): row < rowCount  =>   true
ROR_258:398:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): row < rowCount  =>   false
ROR_259:399:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): column < columnCount  =>   column > columnCount
ROR_260:399:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): column < columnCount  =>   column >= columnCount
ROR_261:399:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): column < columnCount  =>   column <= columnCount
ROR_262:399:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): column < columnCount  =>   column == columnCount
ROR_263:399:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): column < columnCount  =>   column != columnCount
ROR_264:399:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): column < columnCount  =>   true
ROR_265:399:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): column < columnCount  =>   false
ROR_266:410:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): lvalue != null  =>   lvalue == null
ROR_267:413:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): uvalue != null  =>   uvalue == null
ROR_268:418:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): minimum == Double.POSITIVE_INFINITY  =>   minimum > Double.POSITIVE_INFINITY
ROR_269:418:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): minimum == Double.POSITIVE_INFINITY  =>   minimum >= Double.POSITIVE_INFINITY
ROR_270:418:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): minimum == Double.POSITIVE_INFINITY  =>   minimum < Double.POSITIVE_INFINITY
ROR_271:418:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): minimum == Double.POSITIVE_INFINITY  =>   minimum <= Double.POSITIVE_INFINITY
ROR_272:418:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): minimum == Double.POSITIVE_INFINITY  =>   minimum != Double.POSITIVE_INFINITY
ROR_273:418:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): minimum == Double.POSITIVE_INFINITY  =>   true
ROR_274:418:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): minimum == Double.POSITIVE_INFINITY  =>   false
ROR_275:430:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series > seriesCount
ROR_276:430:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series >= seriesCount
ROR_277:430:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series <= seriesCount
ROR_278:430:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series == seriesCount
ROR_279:430:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series != seriesCount
ROR_280:430:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): series < seriesCount  =>   true
ROR_281:430:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): series < seriesCount  =>   false
ROR_282:432:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): item < itemCount  =>   item > itemCount
ROR_283:432:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): item < itemCount  =>   item >= itemCount
ROR_284:432:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): item < itemCount  =>   item <= itemCount
ROR_285:432:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): item < itemCount  =>   item == itemCount
ROR_286:432:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): item < itemCount  =>   item != itemCount
ROR_287:432:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): item < itemCount  =>   true
ROR_288:432:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): item < itemCount  =>   false
ROR_289:457:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): minimum == Double.POSITIVE_INFINITY  =>   minimum > Double.POSITIVE_INFINITY
ROR_290:457:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): minimum == Double.POSITIVE_INFINITY  =>   minimum >= Double.POSITIVE_INFINITY
ROR_291:457:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): minimum == Double.POSITIVE_INFINITY  =>   minimum < Double.POSITIVE_INFINITY
ROR_292:457:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): minimum == Double.POSITIVE_INFINITY  =>   minimum <= Double.POSITIVE_INFINITY
ROR_293:457:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): minimum == Double.POSITIVE_INFINITY  =>   minimum != Double.POSITIVE_INFINITY
ROR_294:457:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): minimum == Double.POSITIVE_INFINITY  =>   true
ROR_295:457:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): minimum == Double.POSITIVE_INFINITY  =>   false
ROR_296:466:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): dataset == null  =>   dataset != null
ROR_297:476:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series > seriesCount
ROR_298:476:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series >= seriesCount
ROR_299:476:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series <= seriesCount
ROR_300:476:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series == seriesCount
ROR_301:476:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series != seriesCount
ROR_302:476:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   true
ROR_303:476:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   false
ROR_304:478:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item > itemCount
ROR_305:478:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item >= itemCount
ROR_306:478:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item <= itemCount
ROR_307:478:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item == itemCount
ROR_308:478:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item != itemCount
ROR_309:478:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   true
ROR_310:478:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   false
ROR_311:491:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): minimum == Double.POSITIVE_INFINITY  =>   minimum > Double.POSITIVE_INFINITY
ROR_312:491:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): minimum == Double.POSITIVE_INFINITY  =>   minimum >= Double.POSITIVE_INFINITY
ROR_313:491:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): minimum == Double.POSITIVE_INFINITY  =>   minimum < Double.POSITIVE_INFINITY
ROR_314:491:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): minimum == Double.POSITIVE_INFINITY  =>   minimum <= Double.POSITIVE_INFINITY
ROR_315:491:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): minimum == Double.POSITIVE_INFINITY  =>   minimum != Double.POSITIVE_INFINITY
ROR_316:491:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): minimum == Double.POSITIVE_INFINITY  =>   true
ROR_317:491:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): minimum == Double.POSITIVE_INFINITY  =>   false
ROR_318:502:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): dataset == null  =>   dataset != null
ROR_319:512:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series > seriesCount
ROR_320:512:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series >= seriesCount
ROR_321:512:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series <= seriesCount
ROR_322:512:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series == seriesCount
ROR_323:512:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series != seriesCount
ROR_324:512:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   true
ROR_325:512:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   false
ROR_326:514:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item > itemCount
ROR_327:514:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item >= itemCount
ROR_328:514:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item <= itemCount
ROR_329:514:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item == itemCount
ROR_330:514:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item != itemCount
ROR_331:514:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   true
ROR_332:514:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   false
ROR_333:527:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): maximum == Double.NEGATIVE_INFINITY  =>   maximum > Double.NEGATIVE_INFINITY
ROR_334:527:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): maximum == Double.NEGATIVE_INFINITY  =>   maximum >= Double.NEGATIVE_INFINITY
ROR_335:527:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): maximum == Double.NEGATIVE_INFINITY  =>   maximum < Double.NEGATIVE_INFINITY
ROR_336:527:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): maximum == Double.NEGATIVE_INFINITY  =>   maximum <= Double.NEGATIVE_INFINITY
ROR_337:527:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): maximum == Double.NEGATIVE_INFINITY  =>   maximum != Double.NEGATIVE_INFINITY
ROR_338:527:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): maximum == Double.NEGATIVE_INFINITY  =>   true
ROR_339:527:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): maximum == Double.NEGATIVE_INFINITY  =>   false
ROR_340:538:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): dataset == null  =>   dataset != null
ROR_341:548:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series > seriesCount
ROR_342:548:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series >= seriesCount
ROR_343:548:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series <= seriesCount
ROR_344:548:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series == seriesCount
ROR_345:548:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series != seriesCount
ROR_346:548:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   true
ROR_347:548:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   false
ROR_348:549:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): item < itemCount  =>   item > itemCount
ROR_349:549:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): item < itemCount  =>   item >= itemCount
ROR_350:549:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): item < itemCount  =>   item <= itemCount
ROR_351:549:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): item < itemCount  =>   item == itemCount
ROR_352:549:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): item < itemCount  =>   item != itemCount
ROR_353:549:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): item < itemCount  =>   true
ROR_354:549:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): item < itemCount  =>   false
ROR_355:557:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): value != null  =>   value == null
ROR_356:562:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): minimum == Double.POSITIVE_INFINITY  =>   minimum > Double.POSITIVE_INFINITY
ROR_357:562:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): minimum == Double.POSITIVE_INFINITY  =>   minimum >= Double.POSITIVE_INFINITY
ROR_358:562:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): minimum == Double.POSITIVE_INFINITY  =>   minimum < Double.POSITIVE_INFINITY
ROR_359:562:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): minimum == Double.POSITIVE_INFINITY  =>   minimum <= Double.POSITIVE_INFINITY
ROR_360:562:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): minimum == Double.POSITIVE_INFINITY  =>   minimum != Double.POSITIVE_INFINITY
ROR_361:562:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): minimum == Double.POSITIVE_INFINITY  =>   true
ROR_362:562:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): minimum == Double.POSITIVE_INFINITY  =>   false
ROR_363:572:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): dataset == null  =>   dataset != null
ROR_364:581:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series > seriesCount
ROR_365:581:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series >= seriesCount
ROR_366:581:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series <= seriesCount
ROR_367:581:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series == seriesCount
ROR_368:581:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series != seriesCount
ROR_369:581:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   true
ROR_370:581:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   false
ROR_371:583:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item > itemCount
ROR_372:583:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item >= itemCount
ROR_373:583:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item <= itemCount
ROR_374:583:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item == itemCount
ROR_375:583:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item != itemCount
ROR_376:583:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   true
ROR_377:583:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   false
ROR_378:601:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): minimum == Double.POSITIVE_INFINITY  =>   minimum > Double.POSITIVE_INFINITY
ROR_379:601:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): minimum == Double.POSITIVE_INFINITY  =>   minimum >= Double.POSITIVE_INFINITY
ROR_380:601:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): minimum == Double.POSITIVE_INFINITY  =>   minimum < Double.POSITIVE_INFINITY
ROR_381:601:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): minimum == Double.POSITIVE_INFINITY  =>   minimum <= Double.POSITIVE_INFINITY
ROR_382:601:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): minimum == Double.POSITIVE_INFINITY  =>   minimum != Double.POSITIVE_INFINITY
ROR_383:601:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): minimum == Double.POSITIVE_INFINITY  =>   true
ROR_384:601:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): minimum == Double.POSITIVE_INFINITY  =>   false
ROR_385:611:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): dataset == null  =>   dataset != null
ROR_386:621:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series > seriesCount
ROR_387:621:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series >= seriesCount
ROR_388:621:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series <= seriesCount
ROR_389:621:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series == seriesCount
ROR_390:621:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series != seriesCount
ROR_391:621:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   true
ROR_392:621:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   false
ROR_393:622:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): item < itemCount  =>   item > itemCount
ROR_394:622:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): item < itemCount  =>   item >= itemCount
ROR_395:622:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): item < itemCount  =>   item <= itemCount
ROR_396:622:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): item < itemCount  =>   item == itemCount
ROR_397:622:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): item < itemCount  =>   item != itemCount
ROR_398:622:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): item < itemCount  =>   true
ROR_399:622:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): item < itemCount  =>   false
ROR_400:630:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): value != null  =>   value == null
ROR_401:635:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): maximum == Double.NEGATIVE_INFINITY  =>   maximum > Double.NEGATIVE_INFINITY
ROR_402:635:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): maximum == Double.NEGATIVE_INFINITY  =>   maximum >= Double.NEGATIVE_INFINITY
ROR_403:635:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): maximum == Double.NEGATIVE_INFINITY  =>   maximum < Double.NEGATIVE_INFINITY
ROR_404:635:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): maximum == Double.NEGATIVE_INFINITY  =>   maximum <= Double.NEGATIVE_INFINITY
ROR_405:635:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): maximum == Double.NEGATIVE_INFINITY  =>   maximum != Double.NEGATIVE_INFINITY
ROR_406:635:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): maximum == Double.NEGATIVE_INFINITY  =>   true
ROR_407:635:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): maximum == Double.NEGATIVE_INFINITY  =>   false
ROR_408:645:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): dataset == null  =>   dataset != null
ROR_409:654:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series > seriesCount
ROR_410:654:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series >= seriesCount
ROR_411:654:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series <= seriesCount
ROR_412:654:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series == seriesCount
ROR_413:654:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series != seriesCount
ROR_414:654:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   true
ROR_415:654:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   false
ROR_416:656:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item > itemCount
ROR_417:656:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item >= itemCount
ROR_418:656:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item <= itemCount
ROR_419:656:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item == itemCount
ROR_420:656:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item != itemCount
ROR_421:656:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   true
ROR_422:656:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   false
ROR_423:674:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): maximum == Double.NEGATIVE_INFINITY  =>   maximum > Double.NEGATIVE_INFINITY
ROR_424:674:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): maximum == Double.NEGATIVE_INFINITY  =>   maximum >= Double.NEGATIVE_INFINITY
ROR_425:674:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): maximum == Double.NEGATIVE_INFINITY  =>   maximum < Double.NEGATIVE_INFINITY
ROR_426:674:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): maximum == Double.NEGATIVE_INFINITY  =>   maximum <= Double.NEGATIVE_INFINITY
ROR_427:674:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): maximum == Double.NEGATIVE_INFINITY  =>   maximum != Double.NEGATIVE_INFINITY
ROR_428:674:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): maximum == Double.NEGATIVE_INFINITY  =>   true
ROR_429:674:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): maximum == Double.NEGATIVE_INFINITY  =>   false
ROR_430:689:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): dataset == null  =>   dataset != null
ROR_431:696:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): item < categoryCount  =>   item > categoryCount
ROR_432:696:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): item < categoryCount  =>   item >= categoryCount
ROR_433:696:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): item < categoryCount  =>   item <= categoryCount
ROR_434:696:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): item < categoryCount  =>   item == categoryCount
ROR_435:696:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): item < categoryCount  =>   item != categoryCount
ROR_436:696:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): item < categoryCount  =>   true
ROR_437:696:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): item < categoryCount  =>   false
ROR_438:700:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): series < seriesCount  =>   series > seriesCount
ROR_439:700:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): series < seriesCount  =>   series >= seriesCount
ROR_440:700:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): series < seriesCount  =>   series <= seriesCount
ROR_441:700:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): series < seriesCount  =>   series == seriesCount
ROR_442:700:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): series < seriesCount  =>   series != seriesCount
ROR_443:700:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): series < seriesCount  =>   true
ROR_444:700:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): series < seriesCount  =>   false
ROR_445:702:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): number != null  =>   number == null
ROR_446:704:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): value > 0.0  =>   value >= 0.0
ROR_447:704:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): value > 0.0  =>   value < 0.0
ROR_448:704:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): value > 0.0  =>   value <= 0.0
ROR_449:704:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): value > 0.0  =>   value == 0.0
ROR_450:704:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): value > 0.0  =>   value != 0.0
ROR_451:704:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): value > 0.0  =>   true
ROR_452:704:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): value > 0.0  =>   false
ROR_453:707:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): value < 0.0  =>   value > 0.0
ROR_454:707:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): value < 0.0  =>   value >= 0.0
ROR_455:707:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): value < 0.0  =>   value <= 0.0
ROR_456:707:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): value < 0.0  =>   value == 0.0
ROR_457:707:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): value < 0.0  =>   value != 0.0
ROR_458:707:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): value < 0.0  =>   true
ROR_459:707:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): value < 0.0  =>   false
ROR_460:715:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): minimum <= maximum  =>   minimum > maximum
ROR_461:715:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): minimum <= maximum  =>   minimum >= maximum
ROR_462:715:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): minimum <= maximum  =>   minimum < maximum
ROR_463:715:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): minimum <= maximum  =>   minimum == maximum
ROR_464:715:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): minimum <= maximum  =>   minimum != maximum
ROR_465:715:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): minimum <= maximum  =>   true
ROR_466:715:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): minimum <= maximum  =>   false
ROR_467:724:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): dataset != null  =>   dataset == null
ROR_468:726:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): i < dataset.getRowCount()  =>   i > dataset.getRowCount()
ROR_469:726:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): i < dataset.getRowCount()  =>   i >= dataset.getRowCount()
ROR_470:726:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): i < dataset.getRowCount()  =>   i <= dataset.getRowCount()
ROR_471:726:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): i < dataset.getRowCount()  =>   i == dataset.getRowCount()
ROR_472:726:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): i < dataset.getRowCount()  =>   i != dataset.getRowCount()
ROR_473:726:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): i < dataset.getRowCount()  =>   true
ROR_474:726:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): i < dataset.getRowCount()  =>   false
ROR_475:733:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): item < categoryCount  =>   item > categoryCount
ROR_476:733:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): item < categoryCount  =>   item >= categoryCount
ROR_477:733:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): item < categoryCount  =>   item <= categoryCount
ROR_478:733:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): item < categoryCount  =>   item == categoryCount
ROR_479:733:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): item < categoryCount  =>   item != categoryCount
ROR_480:733:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): item < categoryCount  =>   true
ROR_481:733:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): item < categoryCount  =>   false
ROR_482:737:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): series < seriesCount  =>   series > seriesCount
ROR_483:737:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): series < seriesCount  =>   series >= seriesCount
ROR_484:737:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): series < seriesCount  =>   series <= seriesCount
ROR_485:737:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): series < seriesCount  =>   series == seriesCount
ROR_486:737:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): series < seriesCount  =>   series != seriesCount
ROR_487:737:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): series < seriesCount  =>   true
ROR_488:737:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): series < seriesCount  =>   false
ROR_489:739:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): number != null  =>   number == null
ROR_490:741:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): value > 0.0  =>   value >= 0.0
ROR_491:741:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): value > 0.0  =>   value < 0.0
ROR_492:741:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): value > 0.0  =>   value <= 0.0
ROR_493:741:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): value > 0.0  =>   value == 0.0
ROR_494:741:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): value > 0.0  =>   value != 0.0
ROR_495:741:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): value > 0.0  =>   true
ROR_496:741:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): value > 0.0  =>   false
ROR_497:744:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): value < 0.0  =>   value > 0.0
ROR_498:744:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): value < 0.0  =>   value >= 0.0
ROR_499:744:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): value < 0.0  =>   value <= 0.0
ROR_500:744:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): value < 0.0  =>   value == 0.0
ROR_501:744:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): value < 0.0  =>   value != 0.0
ROR_502:744:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): value < 0.0  =>   true
ROR_503:744:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): value < 0.0  =>   false
ROR_504:749:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): g < groupCount  =>   g > groupCount
ROR_505:749:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): g < groupCount  =>   g >= groupCount
ROR_506:749:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): g < groupCount  =>   g <= groupCount
ROR_507:749:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): g < groupCount  =>   g == groupCount
ROR_508:749:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): g < groupCount  =>   g != groupCount
ROR_509:749:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): g < groupCount  =>   true
ROR_510:749:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): g < groupCount  =>   false
ROR_511:754:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): j < groupCount  =>   j > groupCount
ROR_512:754:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): j < groupCount  =>   j >= groupCount
ROR_513:754:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): j < groupCount  =>   j <= groupCount
ROR_514:754:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): j < groupCount  =>   j == groupCount
ROR_515:754:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): j < groupCount  =>   j != groupCount
ROR_516:754:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): j < groupCount  =>   true
ROR_517:754:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): j < groupCount  =>   false
ROR_518:764:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): dataset != null  =>   dataset == null
ROR_519:767:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): item < categoryCount  =>   item > categoryCount
ROR_520:767:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): item < categoryCount  =>   item >= categoryCount
ROR_521:767:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): item < categoryCount  =>   item <= categoryCount
ROR_522:767:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): item < categoryCount  =>   item == categoryCount
ROR_523:767:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): item < categoryCount  =>   item != categoryCount
ROR_524:767:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): item < categoryCount  =>   true
ROR_525:767:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): item < categoryCount  =>   false
ROR_526:770:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series > seriesCount
ROR_527:770:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series >= seriesCount
ROR_528:770:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series <= seriesCount
ROR_529:770:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series == seriesCount
ROR_530:770:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series != seriesCount
ROR_531:770:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   true
ROR_532:770:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   false
ROR_533:772:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): number != null  =>   number == null
ROR_534:774:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): value < 0.0  =>   value > 0.0
ROR_535:774:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): value < 0.0  =>   value >= 0.0
ROR_536:774:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): value < 0.0  =>   value <= 0.0
ROR_537:774:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): value < 0.0  =>   value == 0.0
ROR_538:774:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): value < 0.0  =>   value != 0.0
ROR_539:774:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): value < 0.0  =>   true
ROR_540:774:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): value < 0.0  =>   false
ROR_541:789:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): dataset != null  =>   dataset == null
ROR_542:792:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): item < categoryCount  =>   item > categoryCount
ROR_543:792:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): item < categoryCount  =>   item >= categoryCount
ROR_544:792:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): item < categoryCount  =>   item <= categoryCount
ROR_545:792:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): item < categoryCount  =>   item == categoryCount
ROR_546:792:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): item < categoryCount  =>   item != categoryCount
ROR_547:792:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): item < categoryCount  =>   true
ROR_548:792:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): item < categoryCount  =>   false
ROR_549:795:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series > seriesCount
ROR_550:795:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series >= seriesCount
ROR_551:795:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series <= seriesCount
ROR_552:795:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series == seriesCount
ROR_553:795:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series != seriesCount
ROR_554:795:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   true
ROR_555:795:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   false
ROR_556:797:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): number != null  =>   number == null
ROR_557:799:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): value > 0.0  =>   value >= 0.0
ROR_558:799:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): value > 0.0  =>   value < 0.0
ROR_559:799:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): value > 0.0  =>   value <= 0.0
ROR_560:799:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): value > 0.0  =>   value == 0.0
ROR_561:799:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): value > 0.0  =>   value != 0.0
ROR_562:799:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): value > 0.0  =>   true
ROR_563:799:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): value > 0.0  =>   false
ROR_564:818:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): dataset == null  =>   dataset != null
ROR_565:823:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): itemNo < dataset.getItemCount()  =>   itemNo > dataset.getItemCount()
ROR_566:823:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): itemNo < dataset.getItemCount()  =>   itemNo >= dataset.getItemCount()
ROR_567:823:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): itemNo < dataset.getItemCount()  =>   itemNo <= dataset.getItemCount()
ROR_568:823:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): itemNo < dataset.getItemCount()  =>   itemNo == dataset.getItemCount()
ROR_569:823:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): itemNo < dataset.getItemCount()  =>   itemNo != dataset.getItemCount()
ROR_570:823:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): itemNo < dataset.getItemCount()  =>   true
ROR_571:823:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): itemNo < dataset.getItemCount()  =>   false
ROR_572:827:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): seriesNo < seriesCount  =>   seriesNo > seriesCount
ROR_573:827:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): seriesNo < seriesCount  =>   seriesNo >= seriesCount
ROR_574:827:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): seriesNo < seriesCount  =>   seriesNo <= seriesCount
ROR_575:827:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): seriesNo < seriesCount  =>   seriesNo == seriesCount
ROR_576:827:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): seriesNo < seriesCount  =>   seriesNo != seriesCount
ROR_577:827:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): seriesNo < seriesCount  =>   true
ROR_578:827:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): seriesNo < seriesCount  =>   false
ROR_579:830:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): y > 0.0  =>   y >= 0.0
ROR_580:830:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): y > 0.0  =>   y < 0.0
ROR_581:830:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): y > 0.0  =>   y <= 0.0
ROR_582:830:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): y > 0.0  =>   y == 0.0
ROR_583:830:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): y > 0.0  =>   y != 0.0
ROR_584:830:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): y > 0.0  =>   true
ROR_585:830:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): y > 0.0  =>   false
ROR_586:837:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): positive > maximum  =>   positive >= maximum
ROR_587:837:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): positive > maximum  =>   positive < maximum
ROR_588:837:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): positive > maximum  =>   positive <= maximum
ROR_589:837:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): positive > maximum  =>   positive == maximum
ROR_590:837:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): positive > maximum  =>   positive != maximum
ROR_591:837:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): positive > maximum  =>   true
ROR_592:837:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): positive > maximum  =>   false
ROR_593:840:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): negative < minimum  =>   negative > minimum
ROR_594:840:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): negative < minimum  =>   negative >= minimum
ROR_595:840:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): negative < minimum  =>   negative <= minimum
ROR_596:840:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): negative < minimum  =>   negative == minimum
ROR_597:840:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): negative < minimum  =>   negative != minimum
ROR_598:840:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): negative < minimum  =>   true
ROR_599:840:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): negative < minimum  =>   false
ROR_600:844:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): minimum <= maximum  =>   minimum > maximum
ROR_601:844:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): minimum <= maximum  =>   minimum >= maximum
ROR_602:844:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): minimum <= maximum  =>   minimum < maximum
ROR_603:844:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): minimum <= maximum  =>   minimum == maximum
ROR_604:844:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): minimum <= maximum  =>   minimum != maximum
ROR_605:844:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): minimum <= maximum  =>   true
ROR_606:844:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): minimum <= maximum  =>   false
ROR_607:855:double_calculateStackTotal(org.jfree.data.xy.TableXYDataset,int): s < seriesCount  =>   s > seriesCount
ROR_608:855:double_calculateStackTotal(org.jfree.data.xy.TableXYDataset,int): s < seriesCount  =>   s >= seriesCount
ROR_609:855:double_calculateStackTotal(org.jfree.data.xy.TableXYDataset,int): s < seriesCount  =>   s <= seriesCount
ROR_610:855:double_calculateStackTotal(org.jfree.data.xy.TableXYDataset,int): s < seriesCount  =>   s == seriesCount
ROR_611:855:double_calculateStackTotal(org.jfree.data.xy.TableXYDataset,int): s < seriesCount  =>   s != seriesCount
ROR_612:855:double_calculateStackTotal(org.jfree.data.xy.TableXYDataset,int): s < seriesCount  =>   true
ROR_613:855:double_calculateStackTotal(org.jfree.data.xy.TableXYDataset,int): s < seriesCount  =>   false
ROR_614:866:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): dataset == null  =>   dataset != null
ROR_615:872:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): row < dataset.getRowCount()  =>   row > dataset.getRowCount()
ROR_616:872:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): row < dataset.getRowCount()  =>   row >= dataset.getRowCount()
ROR_617:872:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): row < dataset.getRowCount()  =>   row <= dataset.getRowCount()
ROR_618:872:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): row < dataset.getRowCount()  =>   row == dataset.getRowCount()
ROR_619:872:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): row < dataset.getRowCount()  =>   row != dataset.getRowCount()
ROR_620:872:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): row < dataset.getRowCount()  =>   true
ROR_621:872:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): row < dataset.getRowCount()  =>   false
ROR_622:874:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): column < dataset.getColumnCount() - 1  =>   column > dataset.getColumnCount() - 1
ROR_623:874:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): column < dataset.getColumnCount() - 1  =>   column >= dataset.getColumnCount() - 1
ROR_624:874:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): column < dataset.getColumnCount() - 1  =>   column <= dataset.getColumnCount() - 1
ROR_625:874:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): column < dataset.getColumnCount() - 1  =>   column == dataset.getColumnCount() - 1
ROR_626:874:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): column < dataset.getColumnCount() - 1  =>   column != dataset.getColumnCount() - 1
ROR_627:874:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): column < dataset.getColumnCount() - 1  =>   true
ROR_628:874:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): column < dataset.getColumnCount() - 1  =>   false
ROR_629:876:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): n != null  =>   n == null
COR_1:121:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): otherKeys.contains( currentKey ) && otherKeys.size() >= minItems  =>   otherKeys.contains( currentKey ) || otherKeys.size() >= minItems
COR_2:121:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): otherKeys.contains( currentKey ) && otherKeys.size() >= minItems  =>   otherKeys.contains( currentKey ) ^ otherKeys.size() >= minItems
COR_3:262:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): rowCount == 0 || columnCount == 0  =>   rowCount == 0 && columnCount == 0
COR_4:262:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): rowCount == 0 || columnCount == 0  =>   rowCount == 0 ^ columnCount == 0
COR_5:322:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset  =>   includeInterval || dataset instanceof org.jfree.data.xy.IntervalXYDataset
COR_6:322:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset  =>   includeInterval ^ dataset instanceof org.jfree.data.xy.IntervalXYDataset
COR_7:395:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): includeInterval && dataset instanceof org.jfree.data.category.IntervalCategoryDataset  =>   includeInterval || dataset instanceof org.jfree.data.category.IntervalCategoryDataset
COR_8:395:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): includeInterval && dataset instanceof org.jfree.data.category.IntervalCategoryDataset  =>   includeInterval ^ dataset instanceof org.jfree.data.category.IntervalCategoryDataset
SDL_1:54:double_calculatePieDatasetTotal(org.jfree.data.general.PieDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } java.util.List keys = dataset.getKeys(); double totalValue = 0; java.util.Iterator iterator = keys.iterator(); while (iterator.hasNext()) {     java.lang.Comparable current = (java.lang.Comparable) iterator.next();     if (current != null) {         java.lang.Number value = dataset.getValue( current );         double v = 0.0;         if (value != null) {             v = value.doubleValue();         }         if (v > 0) {             totalValue = totalValue + v;         }     } } return totalValue;  =>   java.util.List keys = dataset.getKeys(); double totalValue = 0; java.util.Iterator iterator = keys.iterator(); while (iterator.hasNext()) {     java.lang.Comparable current = (java.lang.Comparable) iterator.next();     if (current != null) {         java.lang.Number value = dataset.getValue( current );         double v = 0.0;         if (value != null) {             v = value.doubleValue();         }         if (v > 0) {             totalValue = totalValue + v;         }     } } return totalValue;
SDL_2:44:double_calculatePieDatasetTotal(org.jfree.data.general.PieDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } java.util.List keys = dataset.getKeys(); double totalValue = 0; java.util.Iterator iterator = keys.iterator(); while (iterator.hasNext()) {     java.lang.Comparable current = (java.lang.Comparable) iterator.next();     if (current != null) {         java.lang.Number value = dataset.getValue( current );         double v = 0.0;         if (value != null) {             v = value.doubleValue();         }         if (v > 0) {             totalValue = totalValue + v;         }     } } return totalValue;  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } java.util.List keys = dataset.getKeys(); double totalValue = 0; java.util.Iterator iterator = keys.iterator(); return totalValue;
SDL_3:38:double_calculatePieDatasetTotal(org.jfree.data.general.PieDataset): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_4:40:double_calculatePieDatasetTotal(org.jfree.data.general.PieDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_5:45:double_calculatePieDatasetTotal(org.jfree.data.general.PieDataset): java.lang.Comparable current = (java.lang.Comparable) iterator.next(); if (current != null) {     java.lang.Number value = dataset.getValue( current );     double v = 0.0;     if (value != null) {         v = value.doubleValue();     }     if (v > 0) {         totalValue = totalValue + v;     } }  =>   java.lang.Comparable current = (java.lang.Comparable) iterator.next();
SDL_6:56:double_calculatePieDatasetTotal(org.jfree.data.general.PieDataset): while (iterator.hasNext()) {     java.lang.Comparable current = (java.lang.Comparable) iterator.next();     if (current != null) {         java.lang.Number value = dataset.getValue( current );         double v = 0.0;         if (value != null) {             v = value.doubleValue();         }         if (v > 0) {             totalValue = totalValue + v;         }     } }  =>   while (true) {     java.lang.Comparable current = (java.lang.Comparable) iterator.next();     if (current != null) {         java.lang.Number value = dataset.getValue( current );         double v = 0.0;         if (value != null) {             v = value.doubleValue();         }         if (v > 0) {             totalValue = totalValue + v;         }     } }
SDL_7:51:double_calculatePieDatasetTotal(org.jfree.data.general.PieDataset): java.lang.Number value = dataset.getValue( current ); double v = 0.0; if (value != null) {     v = value.doubleValue(); } if (v > 0) {     totalValue = totalValue + v; }  =>   java.lang.Number value = dataset.getValue( current ); double v = 0.0; if (v > 0) {     totalValue = totalValue + v; }
SDL_8:51:double_calculatePieDatasetTotal(org.jfree.data.general.PieDataset): java.lang.Number value = dataset.getValue( current ); double v = 0.0; if (value != null) {     v = value.doubleValue(); } if (v > 0) {     totalValue = totalValue + v; }  =>   java.lang.Number value = dataset.getValue( current ); double v = 0.0; if (value != null) {     v = value.doubleValue(); }
SDL_9:55:double_calculatePieDatasetTotal(org.jfree.data.general.PieDataset): if (current != null) {     java.lang.Number value = dataset.getValue( current );     double v = 0.0;     if (value != null) {         v = value.doubleValue();     }     if (v > 0) {         totalValue = totalValue + v;     } }  =>   if (true) {     java.lang.Number value = dataset.getValue( current );     double v = 0.0;     if (value != null) {         v = value.doubleValue();     }     if (v > 0) {         totalValue = totalValue + v;     } }
SDL_10:49:double_calculatePieDatasetTotal(org.jfree.data.general.PieDataset): v = value.doubleValue();  =>  
SDL_11:51:double_calculatePieDatasetTotal(org.jfree.data.general.PieDataset): if (value != null) {     v = value.doubleValue(); }  =>   if (true) {     v = value.doubleValue(); }
SDL_12:52:double_calculatePieDatasetTotal(org.jfree.data.general.PieDataset): totalValue = totalValue + v;  =>  
SDL_13:54:double_calculatePieDatasetTotal(org.jfree.data.general.PieDataset): if (v > 0) {     totalValue = totalValue + v; }  =>   if (true) {     totalValue = totalValue + v; }
SDL_14:57:double_calculatePieDatasetTotal(org.jfree.data.general.PieDataset): return totalValue;  =>   return 0;
SDL_15:70:org.jfree.data.general.PieDataset_createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int): org.jfree.data.general.DefaultPieDataset result = new org.jfree.data.general.DefaultPieDataset(); int columnCount = dataset.getColumnCount(); for (int current = 0; current < columnCount; current++) {     java.lang.Comparable columnKey = dataset.getColumnKey( current );     result.setValue( columnKey, dataset.getValue( row, current ) ); } return result;  =>   org.jfree.data.general.DefaultPieDataset result = new org.jfree.data.general.DefaultPieDataset(); int columnCount = dataset.getColumnCount(); return result;
SDL_16:71:org.jfree.data.general.PieDataset_createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int): java.lang.Comparable columnKey = dataset.getColumnKey( current ); result.setValue( columnKey, dataset.getValue( row, current ) );  =>   java.lang.Comparable columnKey = dataset.getColumnKey( current );
SDL_17:73:org.jfree.data.general.PieDataset_createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int): for (int current = 0; current < columnCount; current++) {     java.lang.Comparable columnKey = dataset.getColumnKey( current );     result.setValue( columnKey, dataset.getValue( row, current ) ); }  =>   for (int current = 0;; current++) {     java.lang.Comparable columnKey = dataset.getColumnKey( current );     result.setValue( columnKey, dataset.getValue( row, current ) ); }
SDL_18:73:org.jfree.data.general.PieDataset_createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int): for (int current = 0; current < columnCount; current++) {     java.lang.Comparable columnKey = dataset.getColumnKey( current );     result.setValue( columnKey, dataset.getValue( row, current ) ); }  =>   for (int current = 0; current < columnCount;) {     java.lang.Comparable columnKey = dataset.getColumnKey( current );     result.setValue( columnKey, dataset.getValue( row, current ) ); }
SDL_19:87:org.jfree.data.general.PieDataset_createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int): org.jfree.data.general.DefaultPieDataset result = new org.jfree.data.general.DefaultPieDataset(); int rowCount = dataset.getRowCount(); for (int i = 0; i < rowCount; i++) {     java.lang.Comparable rowKey = dataset.getRowKey( i );     result.setValue( rowKey, dataset.getValue( i, column ) ); } return result;  =>   org.jfree.data.general.DefaultPieDataset result = new org.jfree.data.general.DefaultPieDataset(); int rowCount = dataset.getRowCount(); return result;
SDL_20:88:org.jfree.data.general.PieDataset_createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int): java.lang.Comparable rowKey = dataset.getRowKey( i ); result.setValue( rowKey, dataset.getValue( i, column ) );  =>   java.lang.Comparable rowKey = dataset.getRowKey( i );
SDL_21:90:org.jfree.data.general.PieDataset_createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int): for (int i = 0; i < rowCount; i++) {     java.lang.Comparable rowKey = dataset.getRowKey( i );     result.setValue( rowKey, dataset.getValue( i, column ) ); }  =>   for (int i = 0;; i++) {     java.lang.Comparable rowKey = dataset.getRowKey( i );     result.setValue( rowKey, dataset.getValue( i, column ) ); }
SDL_22:90:org.jfree.data.general.PieDataset_createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int): for (int i = 0; i < rowCount; i++) {     java.lang.Comparable rowKey = dataset.getRowKey( i );     result.setValue( rowKey, dataset.getValue( i, column ) ); }  =>   for (int i = 0; i < rowCount;) {     java.lang.Comparable rowKey = dataset.getRowKey( i );     result.setValue( rowKey, dataset.getValue( i, column ) ); }
SDL_23:122:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): org.jfree.data.general.DefaultPieDataset result = new org.jfree.data.general.DefaultPieDataset(); double total = DatasetUtilities.calculatePieDatasetTotal( source ); java.util.List keys = source.getKeys(); java.util.ArrayList otherKeys = new java.util.ArrayList(); java.util.Iterator iterator = keys.iterator(); while (iterator.hasNext()) {     java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next();     java.lang.Number dataValue = source.getValue( currentKey );     if (dataValue != null) {         double value = dataValue.doubleValue();         if (value / total < minimumPercent) {             otherKeys.add( currentKey );         }     } } iterator = keys.iterator(); double otherValue = 0; while (iterator.hasNext()) {     java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next();     java.lang.Number dataValue = source.getValue( currentKey );     if (dataValue != null) {         if (otherKeys.contains( currentKey ) && otherKeys.size() >= minItems) {             otherValue += dataValue.doubleValue();         } else {             result.setValue( currentKey, dataValue );         }     } } if (otherKeys.size() >= minItems) {     result.setValue( key, otherValue ); } return result;  =>   org.jfree.data.general.DefaultPieDataset result = new org.jfree.data.general.DefaultPieDataset(); double total = DatasetUtilities.calculatePieDatasetTotal( source ); java.util.List keys = source.getKeys(); java.util.ArrayList otherKeys = new java.util.ArrayList(); java.util.Iterator iterator = keys.iterator(); iterator = keys.iterator(); double otherValue = 0; while (iterator.hasNext()) {     java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next();     java.lang.Number dataValue = source.getValue( currentKey );     if (dataValue != null) {         if (otherKeys.contains( currentKey ) && otherKeys.size() >= minItems) {             otherValue += dataValue.doubleValue();         } else {             result.setValue( currentKey, dataValue );         }     } } if (otherKeys.size() >= minItems) {     result.setValue( key, otherValue ); } return result;
SDL_24:131:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): org.jfree.data.general.DefaultPieDataset result = new org.jfree.data.general.DefaultPieDataset(); double total = DatasetUtilities.calculatePieDatasetTotal( source ); java.util.List keys = source.getKeys(); java.util.ArrayList otherKeys = new java.util.ArrayList(); java.util.Iterator iterator = keys.iterator(); while (iterator.hasNext()) {     java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next();     java.lang.Number dataValue = source.getValue( currentKey );     if (dataValue != null) {         double value = dataValue.doubleValue();         if (value / total < minimumPercent) {             otherKeys.add( currentKey );         }     } } iterator = keys.iterator(); double otherValue = 0; while (iterator.hasNext()) {     java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next();     java.lang.Number dataValue = source.getValue( currentKey );     if (dataValue != null) {         if (otherKeys.contains( currentKey ) && otherKeys.size() >= minItems) {             otherValue += dataValue.doubleValue();         } else {             result.setValue( currentKey, dataValue );         }     } } if (otherKeys.size() >= minItems) {     result.setValue( key, otherValue ); } return result;  =>   org.jfree.data.general.DefaultPieDataset result = new org.jfree.data.general.DefaultPieDataset(); double total = DatasetUtilities.calculatePieDatasetTotal( source ); java.util.List keys = source.getKeys(); java.util.ArrayList otherKeys = new java.util.ArrayList(); java.util.Iterator iterator = keys.iterator(); while (iterator.hasNext()) {     java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next();     java.lang.Number dataValue = source.getValue( currentKey );     if (dataValue != null) {         double value = dataValue.doubleValue();         if (value / total < minimumPercent) {             otherKeys.add( currentKey );         }     } } double otherValue = 0; while (iterator.hasNext()) {     java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next();     java.lang.Number dataValue = source.getValue( currentKey );     if (dataValue != null) {         if (otherKeys.contains( currentKey ) && otherKeys.size() >= minItems) {             otherValue += dataValue.doubleValue();         } else {             result.setValue( currentKey, dataValue );         }     } } if (otherKeys.size() >= minItems) {     result.setValue( key, otherValue ); } return result;
SDL_25:121:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): org.jfree.data.general.DefaultPieDataset result = new org.jfree.data.general.DefaultPieDataset(); double total = DatasetUtilities.calculatePieDatasetTotal( source ); java.util.List keys = source.getKeys(); java.util.ArrayList otherKeys = new java.util.ArrayList(); java.util.Iterator iterator = keys.iterator(); while (iterator.hasNext()) {     java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next();     java.lang.Number dataValue = source.getValue( currentKey );     if (dataValue != null) {         double value = dataValue.doubleValue();         if (value / total < minimumPercent) {             otherKeys.add( currentKey );         }     } } iterator = keys.iterator(); double otherValue = 0; while (iterator.hasNext()) {     java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next();     java.lang.Number dataValue = source.getValue( currentKey );     if (dataValue != null) {         if (otherKeys.contains( currentKey ) && otherKeys.size() >= minItems) {             otherValue += dataValue.doubleValue();         } else {             result.setValue( currentKey, dataValue );         }     } } if (otherKeys.size() >= minItems) {     result.setValue( key, otherValue ); } return result;  =>   org.jfree.data.general.DefaultPieDataset result = new org.jfree.data.general.DefaultPieDataset(); double total = DatasetUtilities.calculatePieDatasetTotal( source ); java.util.List keys = source.getKeys(); java.util.ArrayList otherKeys = new java.util.ArrayList(); java.util.Iterator iterator = keys.iterator(); while (iterator.hasNext()) {     java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next();     java.lang.Number dataValue = source.getValue( currentKey );     if (dataValue != null) {         double value = dataValue.doubleValue();         if (value / total < minimumPercent) {             otherKeys.add( currentKey );         }     } } iterator = keys.iterator(); double otherValue = 0; if (otherKeys.size() >= minItems) {     result.setValue( key, otherValue ); } return result;
SDL_26:129:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): org.jfree.data.general.DefaultPieDataset result = new org.jfree.data.general.DefaultPieDataset(); double total = DatasetUtilities.calculatePieDatasetTotal( source ); java.util.List keys = source.getKeys(); java.util.ArrayList otherKeys = new java.util.ArrayList(); java.util.Iterator iterator = keys.iterator(); while (iterator.hasNext()) {     java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next();     java.lang.Number dataValue = source.getValue( currentKey );     if (dataValue != null) {         double value = dataValue.doubleValue();         if (value / total < minimumPercent) {             otherKeys.add( currentKey );         }     } } iterator = keys.iterator(); double otherValue = 0; while (iterator.hasNext()) {     java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next();     java.lang.Number dataValue = source.getValue( currentKey );     if (dataValue != null) {         if (otherKeys.contains( currentKey ) && otherKeys.size() >= minItems) {             otherValue += dataValue.doubleValue();         } else {             result.setValue( currentKey, dataValue );         }     } } if (otherKeys.size() >= minItems) {     result.setValue( key, otherValue ); } return result;  =>   org.jfree.data.general.DefaultPieDataset result = new org.jfree.data.general.DefaultPieDataset(); double total = DatasetUtilities.calculatePieDatasetTotal( source ); java.util.List keys = source.getKeys(); java.util.ArrayList otherKeys = new java.util.ArrayList(); java.util.Iterator iterator = keys.iterator(); while (iterator.hasNext()) {     java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next();     java.lang.Number dataValue = source.getValue( currentKey );     if (dataValue != null) {         double value = dataValue.doubleValue();         if (value / total < minimumPercent) {             otherKeys.add( currentKey );         }     } } iterator = keys.iterator(); double otherValue = 0; while (iterator.hasNext()) {     java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next();     java.lang.Number dataValue = source.getValue( currentKey );     if (dataValue != null) {         if (otherKeys.contains( currentKey ) && otherKeys.size() >= minItems) {             otherValue += dataValue.doubleValue();         } else {             result.setValue( currentKey, dataValue );         }     } } return result;
SDL_27:108:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next(); java.lang.Number dataValue = source.getValue( currentKey ); if (dataValue != null) {     double value = dataValue.doubleValue();     if (value / total < minimumPercent) {         otherKeys.add( currentKey );     } }  =>   java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next(); java.lang.Number dataValue = source.getValue( currentKey );
SDL_28:115:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): while (iterator.hasNext()) {     java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next();     java.lang.Number dataValue = source.getValue( currentKey );     if (dataValue != null) {         double value = dataValue.doubleValue();         if (value / total < minimumPercent) {             otherKeys.add( currentKey );         }     } }  =>   while (true) {     java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next();     java.lang.Number dataValue = source.getValue( currentKey );     if (dataValue != null) {         double value = dataValue.doubleValue();         if (value / total < minimumPercent) {             otherKeys.add( currentKey );         }     } }
SDL_29:110:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): double value = dataValue.doubleValue(); if (value / total < minimumPercent) {     otherKeys.add( currentKey ); }  =>   double value = dataValue.doubleValue();
SDL_30:114:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): if (dataValue != null) {     double value = dataValue.doubleValue();     if (value / total < minimumPercent) {         otherKeys.add( currentKey );     } }  =>   if (true) {     double value = dataValue.doubleValue();     if (value / total < minimumPercent) {         otherKeys.add( currentKey );     } }
SDL_31:111:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): otherKeys.add( currentKey );  =>  
SDL_32:113:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): if (value / total < minimumPercent) {     otherKeys.add( currentKey ); }  =>   if (true) {     otherKeys.add( currentKey ); }
SDL_33:120:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next(); java.lang.Number dataValue = source.getValue( currentKey ); if (dataValue != null) {     if (otherKeys.contains( currentKey ) && otherKeys.size() >= minItems) {         otherValue += dataValue.doubleValue();     } else {         result.setValue( currentKey, dataValue );     } }  =>   java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next(); java.lang.Number dataValue = source.getValue( currentKey );
SDL_34:128:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): while (iterator.hasNext()) {     java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next();     java.lang.Number dataValue = source.getValue( currentKey );     if (dataValue != null) {         if (otherKeys.contains( currentKey ) && otherKeys.size() >= minItems) {             otherValue += dataValue.doubleValue();         } else {             result.setValue( currentKey, dataValue );         }     } }  =>   while (true) {     java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next();     java.lang.Number dataValue = source.getValue( currentKey );     if (dataValue != null) {         if (otherKeys.contains( currentKey ) && otherKeys.size() >= minItems) {             otherValue += dataValue.doubleValue();         } else {             result.setValue( currentKey, dataValue );         }     } }
SDL_35:121:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): if (otherKeys.contains( currentKey ) && otherKeys.size() >= minItems) {     otherValue += dataValue.doubleValue(); } else {     result.setValue( currentKey, dataValue ); }  =>  
SDL_36:127:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): if (dataValue != null) {     if (otherKeys.contains( currentKey ) && otherKeys.size() >= minItems) {         otherValue += dataValue.doubleValue();     } else {         result.setValue( currentKey, dataValue );     } }  =>   if (true) {     if (otherKeys.contains( currentKey ) && otherKeys.size() >= minItems) {         otherValue += dataValue.doubleValue();     } else {         result.setValue( currentKey, dataValue );     } }
SDL_37:122:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): otherValue += dataValue.doubleValue();  =>  
SDL_38:126:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): if (otherKeys.contains( currentKey ) && otherKeys.size() >= minItems) {     otherValue += dataValue.doubleValue(); } else {     result.setValue( currentKey, dataValue ); }  =>   if (true) {     otherValue += dataValue.doubleValue(); } else {     result.setValue( currentKey, dataValue ); }
SDL_39:124:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): result.setValue( currentKey, dataValue );  =>  
SDL_40:129:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): result.setValue( key, otherValue );  =>  
SDL_41:131:org.jfree.data.general.PieDataset_createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int): if (otherKeys.size() >= minItems) {     result.setValue( key, otherValue ); }  =>   if (true) {     result.setValue( key, otherValue ); }
SDL_42:138:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int r = 0; r < data.length; r++) {     java.lang.String rowKey = rowKeyPrefix + (r + 1);     for (int c = 0; c < data[r].length; c++) {         java.lang.String columnKey = columnKeyPrefix + (c + 1);         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } } return result;  =>   org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); return result;
SDL_43:139:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): java.lang.String rowKey = rowKeyPrefix + (r + 1); for (int c = 0; c < data[r].length; c++) {     java.lang.String columnKey = columnKeyPrefix + (c + 1);     result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey ); }  =>   java.lang.String rowKey = rowKeyPrefix + (r + 1);
SDL_44:144:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): for (int r = 0; r < data.length; r++) {     java.lang.String rowKey = rowKeyPrefix + (r + 1);     for (int c = 0; c < data[r].length; c++) {         java.lang.String columnKey = columnKeyPrefix + (c + 1);         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } }  =>   for (int r = 0;; r++) {     java.lang.String rowKey = rowKeyPrefix + (r + 1);     for (int c = 0; c < data[r].length; c++) {         java.lang.String columnKey = columnKeyPrefix + (c + 1);         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } }
SDL_45:144:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): for (int r = 0; r < data.length; r++) {     java.lang.String rowKey = rowKeyPrefix + (r + 1);     for (int c = 0; c < data[r].length; c++) {         java.lang.String columnKey = columnKeyPrefix + (c + 1);         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } }  =>   for (int r = 0; r < data.length;) {     java.lang.String rowKey = rowKeyPrefix + (r + 1);     for (int c = 0; c < data[r].length; c++) {         java.lang.String columnKey = columnKeyPrefix + (c + 1);         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } }
SDL_46:141:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): java.lang.String columnKey = columnKeyPrefix + (c + 1); result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );  =>   java.lang.String columnKey = columnKeyPrefix + (c + 1);
SDL_47:143:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): for (int c = 0; c < data[r].length; c++) {     java.lang.String columnKey = columnKeyPrefix + (c + 1);     result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey ); }  =>   for (int c = 0;; c++) {     java.lang.String columnKey = columnKeyPrefix + (c + 1);     result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey ); }
SDL_48:143:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): for (int c = 0; c < data[r].length; c++) {     java.lang.String columnKey = columnKeyPrefix + (c + 1);     result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey ); }  =>   for (int c = 0; c < data[r].length;) {     java.lang.String columnKey = columnKeyPrefix + (c + 1);     result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey ); }
SDL_49:151:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int r = 0; r < data.length; r++) {     java.lang.String rowKey = rowKeyPrefix + (r + 1);     for (int c = 0; c < data[r].length; c++) {         java.lang.String columnKey = columnKeyPrefix + (c + 1);         result.addValue( data[r][c], rowKey, columnKey );     } } return result;  =>   org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); return result;
SDL_50:152:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): java.lang.String rowKey = rowKeyPrefix + (r + 1); for (int c = 0; c < data[r].length; c++) {     java.lang.String columnKey = columnKeyPrefix + (c + 1);     result.addValue( data[r][c], rowKey, columnKey ); }  =>   java.lang.String rowKey = rowKeyPrefix + (r + 1);
SDL_51:157:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): for (int r = 0; r < data.length; r++) {     java.lang.String rowKey = rowKeyPrefix + (r + 1);     for (int c = 0; c < data[r].length; c++) {         java.lang.String columnKey = columnKeyPrefix + (c + 1);         result.addValue( data[r][c], rowKey, columnKey );     } }  =>   for (int r = 0;; r++) {     java.lang.String rowKey = rowKeyPrefix + (r + 1);     for (int c = 0; c < data[r].length; c++) {         java.lang.String columnKey = columnKeyPrefix + (c + 1);         result.addValue( data[r][c], rowKey, columnKey );     } }
SDL_52:157:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): for (int r = 0; r < data.length; r++) {     java.lang.String rowKey = rowKeyPrefix + (r + 1);     for (int c = 0; c < data[r].length; c++) {         java.lang.String columnKey = columnKeyPrefix + (c + 1);         result.addValue( data[r][c], rowKey, columnKey );     } }  =>   for (int r = 0; r < data.length;) {     java.lang.String rowKey = rowKeyPrefix + (r + 1);     for (int c = 0; c < data[r].length; c++) {         java.lang.String columnKey = columnKeyPrefix + (c + 1);         result.addValue( data[r][c], rowKey, columnKey );     } }
SDL_53:154:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): java.lang.String columnKey = columnKeyPrefix + (c + 1); result.addValue( data[r][c], rowKey, columnKey );  =>   java.lang.String columnKey = columnKeyPrefix + (c + 1);
SDL_54:156:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): for (int c = 0; c < data[r].length; c++) {     java.lang.String columnKey = columnKeyPrefix + (c + 1);     result.addValue( data[r][c], rowKey, columnKey ); }  =>   for (int c = 0;; c++) {     java.lang.String columnKey = columnKeyPrefix + (c + 1);     result.addValue( data[r][c], rowKey, columnKey ); }
SDL_55:156:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): for (int c = 0; c < data[r].length; c++) {     java.lang.String columnKey = columnKeyPrefix + (c + 1);     result.addValue( data[r][c], rowKey, columnKey ); }  =>   for (int c = 0; c < data[r].length;) {     java.lang.String columnKey = columnKeyPrefix + (c + 1);     result.addValue( data[r][c], rowKey, columnKey ); }
SDL_56:190:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): if (rowKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKeys' argument.\" ); } if (columnKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKeys' argument.\" ); } if (ArrayUtilities.hasDuplicateItems( rowKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'rowKeys'.\" ); } if (ArrayUtilities.hasDuplicateItems( columnKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'columnKeys'.\" ); } if (rowKeys.length != data.length) {     throw new java.lang.IllegalArgumentException( \"The number of row keys does not match the number of rows in \" + \"the data array.\" ); } int columnCount = 0; for (int r = 0; r < data.length; r++) {     columnCount = Math.max( columnCount, data[r].length ); } if (columnKeys.length != columnCount) {     throw new java.lang.IllegalArgumentException( \"The number of column keys does not match the number of \" + \"columns in the data array.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int r = 0; r < data.length; r++) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } } return result;  =>   if (columnKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKeys' argument.\" ); } if (ArrayUtilities.hasDuplicateItems( rowKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'rowKeys'.\" ); } if (ArrayUtilities.hasDuplicateItems( columnKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'columnKeys'.\" ); } if (rowKeys.length != data.length) {     throw new java.lang.IllegalArgumentException( \"The number of row keys does not match the number of rows in \" + \"the data array.\" ); } int columnCount = 0; for (int r = 0; r < data.length; r++) {     columnCount = Math.max( columnCount, data[r].length ); } if (columnKeys.length != columnCount) {     throw new java.lang.IllegalArgumentException( \"The number of column keys does not match the number of \" + \"columns in the data array.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int r = 0; r < data.length; r++) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } } return result;
SDL_57:190:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): if (rowKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKeys' argument.\" ); } if (columnKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKeys' argument.\" ); } if (ArrayUtilities.hasDuplicateItems( rowKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'rowKeys'.\" ); } if (ArrayUtilities.hasDuplicateItems( columnKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'columnKeys'.\" ); } if (rowKeys.length != data.length) {     throw new java.lang.IllegalArgumentException( \"The number of row keys does not match the number of rows in \" + \"the data array.\" ); } int columnCount = 0; for (int r = 0; r < data.length; r++) {     columnCount = Math.max( columnCount, data[r].length ); } if (columnKeys.length != columnCount) {     throw new java.lang.IllegalArgumentException( \"The number of column keys does not match the number of \" + \"columns in the data array.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int r = 0; r < data.length; r++) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } } return result;  =>   if (rowKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKeys' argument.\" ); } if (ArrayUtilities.hasDuplicateItems( rowKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'rowKeys'.\" ); } if (ArrayUtilities.hasDuplicateItems( columnKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'columnKeys'.\" ); } if (rowKeys.length != data.length) {     throw new java.lang.IllegalArgumentException( \"The number of row keys does not match the number of rows in \" + \"the data array.\" ); } int columnCount = 0; for (int r = 0; r < data.length; r++) {     columnCount = Math.max( columnCount, data[r].length ); } if (columnKeys.length != columnCount) {     throw new java.lang.IllegalArgumentException( \"The number of column keys does not match the number of \" + \"columns in the data array.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int r = 0; r < data.length; r++) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } } return result;
SDL_58:190:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): if (rowKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKeys' argument.\" ); } if (columnKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKeys' argument.\" ); } if (ArrayUtilities.hasDuplicateItems( rowKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'rowKeys'.\" ); } if (ArrayUtilities.hasDuplicateItems( columnKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'columnKeys'.\" ); } if (rowKeys.length != data.length) {     throw new java.lang.IllegalArgumentException( \"The number of row keys does not match the number of rows in \" + \"the data array.\" ); } int columnCount = 0; for (int r = 0; r < data.length; r++) {     columnCount = Math.max( columnCount, data[r].length ); } if (columnKeys.length != columnCount) {     throw new java.lang.IllegalArgumentException( \"The number of column keys does not match the number of \" + \"columns in the data array.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int r = 0; r < data.length; r++) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } } return result;  =>   if (rowKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKeys' argument.\" ); } if (columnKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKeys' argument.\" ); } if (ArrayUtilities.hasDuplicateItems( columnKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'columnKeys'.\" ); } if (rowKeys.length != data.length) {     throw new java.lang.IllegalArgumentException( \"The number of row keys does not match the number of rows in \" + \"the data array.\" ); } int columnCount = 0; for (int r = 0; r < data.length; r++) {     columnCount = Math.max( columnCount, data[r].length ); } if (columnKeys.length != columnCount) {     throw new java.lang.IllegalArgumentException( \"The number of column keys does not match the number of \" + \"columns in the data array.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int r = 0; r < data.length; r++) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } } return result;
SDL_59:190:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): if (rowKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKeys' argument.\" ); } if (columnKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKeys' argument.\" ); } if (ArrayUtilities.hasDuplicateItems( rowKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'rowKeys'.\" ); } if (ArrayUtilities.hasDuplicateItems( columnKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'columnKeys'.\" ); } if (rowKeys.length != data.length) {     throw new java.lang.IllegalArgumentException( \"The number of row keys does not match the number of rows in \" + \"the data array.\" ); } int columnCount = 0; for (int r = 0; r < data.length; r++) {     columnCount = Math.max( columnCount, data[r].length ); } if (columnKeys.length != columnCount) {     throw new java.lang.IllegalArgumentException( \"The number of column keys does not match the number of \" + \"columns in the data array.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int r = 0; r < data.length; r++) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } } return result;  =>   if (rowKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKeys' argument.\" ); } if (columnKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKeys' argument.\" ); } if (ArrayUtilities.hasDuplicateItems( rowKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'rowKeys'.\" ); } if (rowKeys.length != data.length) {     throw new java.lang.IllegalArgumentException( \"The number of row keys does not match the number of rows in \" + \"the data array.\" ); } int columnCount = 0; for (int r = 0; r < data.length; r++) {     columnCount = Math.max( columnCount, data[r].length ); } if (columnKeys.length != columnCount) {     throw new java.lang.IllegalArgumentException( \"The number of column keys does not match the number of \" + \"columns in the data array.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int r = 0; r < data.length; r++) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } } return result;
SDL_60:190:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): if (rowKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKeys' argument.\" ); } if (columnKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKeys' argument.\" ); } if (ArrayUtilities.hasDuplicateItems( rowKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'rowKeys'.\" ); } if (ArrayUtilities.hasDuplicateItems( columnKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'columnKeys'.\" ); } if (rowKeys.length != data.length) {     throw new java.lang.IllegalArgumentException( \"The number of row keys does not match the number of rows in \" + \"the data array.\" ); } int columnCount = 0; for (int r = 0; r < data.length; r++) {     columnCount = Math.max( columnCount, data[r].length ); } if (columnKeys.length != columnCount) {     throw new java.lang.IllegalArgumentException( \"The number of column keys does not match the number of \" + \"columns in the data array.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int r = 0; r < data.length; r++) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } } return result;  =>   if (rowKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKeys' argument.\" ); } if (columnKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKeys' argument.\" ); } if (ArrayUtilities.hasDuplicateItems( rowKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'rowKeys'.\" ); } if (ArrayUtilities.hasDuplicateItems( columnKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'columnKeys'.\" ); } int columnCount = 0; for (int r = 0; r < data.length; r++) {     columnCount = Math.max( columnCount, data[r].length ); } if (columnKeys.length != columnCount) {     throw new java.lang.IllegalArgumentException( \"The number of column keys does not match the number of \" + \"columns in the data array.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int r = 0; r < data.length; r++) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } } return result;
SDL_61:190:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): if (rowKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKeys' argument.\" ); } if (columnKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKeys' argument.\" ); } if (ArrayUtilities.hasDuplicateItems( rowKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'rowKeys'.\" ); } if (ArrayUtilities.hasDuplicateItems( columnKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'columnKeys'.\" ); } if (rowKeys.length != data.length) {     throw new java.lang.IllegalArgumentException( \"The number of row keys does not match the number of rows in \" + \"the data array.\" ); } int columnCount = 0; for (int r = 0; r < data.length; r++) {     columnCount = Math.max( columnCount, data[r].length ); } if (columnKeys.length != columnCount) {     throw new java.lang.IllegalArgumentException( \"The number of column keys does not match the number of \" + \"columns in the data array.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int r = 0; r < data.length; r++) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } } return result;  =>   if (rowKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKeys' argument.\" ); } if (columnKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKeys' argument.\" ); } if (ArrayUtilities.hasDuplicateItems( rowKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'rowKeys'.\" ); } if (ArrayUtilities.hasDuplicateItems( columnKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'columnKeys'.\" ); } if (rowKeys.length != data.length) {     throw new java.lang.IllegalArgumentException( \"The number of row keys does not match the number of rows in \" + \"the data array.\" ); } int columnCount = 0; if (columnKeys.length != columnCount) {     throw new java.lang.IllegalArgumentException( \"The number of column keys does not match the number of \" + \"columns in the data array.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int r = 0; r < data.length; r++) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } } return result;
SDL_62:190:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): if (rowKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKeys' argument.\" ); } if (columnKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKeys' argument.\" ); } if (ArrayUtilities.hasDuplicateItems( rowKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'rowKeys'.\" ); } if (ArrayUtilities.hasDuplicateItems( columnKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'columnKeys'.\" ); } if (rowKeys.length != data.length) {     throw new java.lang.IllegalArgumentException( \"The number of row keys does not match the number of rows in \" + \"the data array.\" ); } int columnCount = 0; for (int r = 0; r < data.length; r++) {     columnCount = Math.max( columnCount, data[r].length ); } if (columnKeys.length != columnCount) {     throw new java.lang.IllegalArgumentException( \"The number of column keys does not match the number of \" + \"columns in the data array.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int r = 0; r < data.length; r++) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } } return result;  =>   if (rowKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKeys' argument.\" ); } if (columnKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKeys' argument.\" ); } if (ArrayUtilities.hasDuplicateItems( rowKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'rowKeys'.\" ); } if (ArrayUtilities.hasDuplicateItems( columnKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'columnKeys'.\" ); } if (rowKeys.length != data.length) {     throw new java.lang.IllegalArgumentException( \"The number of row keys does not match the number of rows in \" + \"the data array.\" ); } int columnCount = 0; for (int r = 0; r < data.length; r++) {     columnCount = Math.max( columnCount, data[r].length ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int r = 0; r < data.length; r++) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } } return result;
SDL_63:186:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): if (rowKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKeys' argument.\" ); } if (columnKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKeys' argument.\" ); } if (ArrayUtilities.hasDuplicateItems( rowKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'rowKeys'.\" ); } if (ArrayUtilities.hasDuplicateItems( columnKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'columnKeys'.\" ); } if (rowKeys.length != data.length) {     throw new java.lang.IllegalArgumentException( \"The number of row keys does not match the number of rows in \" + \"the data array.\" ); } int columnCount = 0; for (int r = 0; r < data.length; r++) {     columnCount = Math.max( columnCount, data[r].length ); } if (columnKeys.length != columnCount) {     throw new java.lang.IllegalArgumentException( \"The number of column keys does not match the number of \" + \"columns in the data array.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int r = 0; r < data.length; r++) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } } return result;  =>   if (rowKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKeys' argument.\" ); } if (columnKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKeys' argument.\" ); } if (ArrayUtilities.hasDuplicateItems( rowKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'rowKeys'.\" ); } if (ArrayUtilities.hasDuplicateItems( columnKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'columnKeys'.\" ); } if (rowKeys.length != data.length) {     throw new java.lang.IllegalArgumentException( \"The number of row keys does not match the number of rows in \" + \"the data array.\" ); } int columnCount = 0; for (int r = 0; r < data.length; r++) {     columnCount = Math.max( columnCount, data[r].length ); } if (columnKeys.length != columnCount) {     throw new java.lang.IllegalArgumentException( \"The number of column keys does not match the number of \" + \"columns in the data array.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); return result;
SDL_64:163:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): throw new java.lang.IllegalArgumentException( \"Null 'rowKeys' argument.\" );  =>  
SDL_65:165:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): if (rowKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKeys' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKeys' argument.\" ); }
SDL_66:166:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): throw new java.lang.IllegalArgumentException( \"Null 'columnKeys' argument.\" );  =>  
SDL_67:168:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): if (columnKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKeys' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKeys' argument.\" ); }
SDL_68:169:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): throw new java.lang.IllegalArgumentException( \"Duplicate items in 'rowKeys'.\" );  =>  
SDL_69:171:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): if (ArrayUtilities.hasDuplicateItems( rowKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'rowKeys'.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'rowKeys'.\" ); }
SDL_70:172:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): throw new java.lang.IllegalArgumentException( \"Duplicate items in 'columnKeys'.\" );  =>  
SDL_71:174:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): if (ArrayUtilities.hasDuplicateItems( columnKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'columnKeys'.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'columnKeys'.\" ); }
SDL_72:175:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): throw new java.lang.IllegalArgumentException( \"The number of row keys does not match the number of rows in \" + \"the data array.\" );  =>  
SDL_73:177:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): if (rowKeys.length != data.length) {     throw new java.lang.IllegalArgumentException( \"The number of row keys does not match the number of rows in \" + \"the data array.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The number of row keys does not match the number of rows in \" + \"the data array.\" ); }
SDL_74:179:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): columnCount = Math.max( columnCount, data[r].length );  =>  
SDL_75:181:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): for (int r = 0; r < data.length; r++) {     columnCount = Math.max( columnCount, data[r].length ); }  =>   for (int r = 0;; r++) {     columnCount = Math.max( columnCount, data[r].length ); }
SDL_76:181:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): for (int r = 0; r < data.length; r++) {     columnCount = Math.max( columnCount, data[r].length ); }  =>   for (int r = 0; r < data.length;) {     columnCount = Math.max( columnCount, data[r].length ); }
SDL_77:182:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): throw new java.lang.IllegalArgumentException( \"The number of column keys does not match the number of \" + \"columns in the data array.\" );  =>  
SDL_78:184:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): if (columnKeys.length != columnCount) {     throw new java.lang.IllegalArgumentException( \"The number of column keys does not match the number of \" + \"columns in the data array.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The number of column keys does not match the number of \" + \"columns in the data array.\" ); }
SDL_79:187:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): java.lang.Comparable rowKey = rowKeys[r]; for (int c = 0; c < data[r].length; c++) {     java.lang.Comparable columnKey = columnKeys[c];     result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey ); }  =>   java.lang.Comparable rowKey = rowKeys[r];
SDL_80:192:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): for (int r = 0; r < data.length; r++) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } }  =>   for (int r = 0;; r++) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } }
SDL_81:192:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): for (int r = 0; r < data.length; r++) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } }  =>   for (int r = 0; r < data.length;) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } }
SDL_82:189:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): java.lang.Comparable columnKey = columnKeys[c]; result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );  =>   java.lang.Comparable columnKey = columnKeys[c];
SDL_83:191:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): for (int c = 0; c < data[r].length; c++) {     java.lang.Comparable columnKey = columnKeys[c];     result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey ); }  =>   for (int c = 0;; c++) {     java.lang.Comparable columnKey = columnKeys[c];     result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey ); }
SDL_84:191:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): for (int c = 0; c < data[r].length; c++) {     java.lang.Comparable columnKey = columnKeys[c];     result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey ); }  =>   for (int c = 0; c < data[r].length;) {     java.lang.Comparable columnKey = columnKeys[c];     result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey ); }
SDL_85:205:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); } if (rowData == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowData' argument.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int i = 0; i < rowData.getItemCount(); i++) {     result.addValue( rowData.getValue( i ), rowKey, rowData.getKey( i ) ); } return result;  =>   if (rowData == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowData' argument.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int i = 0; i < rowData.getItemCount(); i++) {     result.addValue( rowData.getValue( i ), rowKey, rowData.getKey( i ) ); } return result;
SDL_86:205:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); } if (rowData == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowData' argument.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int i = 0; i < rowData.getItemCount(); i++) {     result.addValue( rowData.getValue( i ), rowKey, rowData.getKey( i ) ); } return result;  =>   if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int i = 0; i < rowData.getItemCount(); i++) {     result.addValue( rowData.getValue( i ), rowKey, rowData.getKey( i ) ); } return result;
SDL_87:205:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); } if (rowData == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowData' argument.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int i = 0; i < rowData.getItemCount(); i++) {     result.addValue( rowData.getValue( i ), rowKey, rowData.getKey( i ) ); } return result;  =>   if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); } if (rowData == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowData' argument.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); return result;
SDL_88:198:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" );  =>  
SDL_89:200:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); }
SDL_90:201:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): throw new java.lang.IllegalArgumentException( \"Null 'rowData' argument.\" );  =>  
SDL_91:203:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): if (rowData == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowData' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'rowData' argument.\" ); }
SDL_92:205:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): result.addValue( rowData.getValue( i ), rowKey, rowData.getKey( i ) );  =>  
SDL_93:207:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): for (int i = 0; i < rowData.getItemCount(); i++) {     result.addValue( rowData.getValue( i ), rowKey, rowData.getKey( i ) ); }  =>   for (int i = 0;; i++) {     result.addValue( rowData.getValue( i ), rowKey, rowData.getKey( i ) ); }
SDL_94:207:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): for (int i = 0; i < rowData.getItemCount(); i++) {     result.addValue( rowData.getValue( i ), rowKey, rowData.getKey( i ) ); }  =>   for (int i = 0; i < rowData.getItemCount();) {     result.addValue( rowData.getValue( i ), rowKey, rowData.getKey( i ) ); }
SDL_95:229:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): if (f == null) {     throw new java.lang.IllegalArgumentException( \"Null 'f' argument.\" ); } if (seriesKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'seriesKey' argument.\" ); } if (start >= end) {     throw new java.lang.IllegalArgumentException( \"Requires 'start' < 'end'.\" ); } if (samples < 2) {     throw new java.lang.IllegalArgumentException( \"Requires 'samples' > 1\" ); } org.jfree.data.xy.XYSeries series = new org.jfree.data.xy.XYSeries( seriesKey ); double step = (end - start) / samples; for (int i = 0; i <= samples; i++) {     double x = start + step * i;     series.add( x, f.getValue( x ) ); } org.jfree.data.xy.XYSeriesCollection collection = new org.jfree.data.xy.XYSeriesCollection( series ); return collection;  =>   if (seriesKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'seriesKey' argument.\" ); } if (start >= end) {     throw new java.lang.IllegalArgumentException( \"Requires 'start' < 'end'.\" ); } if (samples < 2) {     throw new java.lang.IllegalArgumentException( \"Requires 'samples' > 1\" ); } org.jfree.data.xy.XYSeries series = new org.jfree.data.xy.XYSeries( seriesKey ); double step = (end - start) / samples; for (int i = 0; i <= samples; i++) {     double x = start + step * i;     series.add( x, f.getValue( x ) ); } org.jfree.data.xy.XYSeriesCollection collection = new org.jfree.data.xy.XYSeriesCollection( series ); return collection;
SDL_96:229:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): if (f == null) {     throw new java.lang.IllegalArgumentException( \"Null 'f' argument.\" ); } if (seriesKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'seriesKey' argument.\" ); } if (start >= end) {     throw new java.lang.IllegalArgumentException( \"Requires 'start' < 'end'.\" ); } if (samples < 2) {     throw new java.lang.IllegalArgumentException( \"Requires 'samples' > 1\" ); } org.jfree.data.xy.XYSeries series = new org.jfree.data.xy.XYSeries( seriesKey ); double step = (end - start) / samples; for (int i = 0; i <= samples; i++) {     double x = start + step * i;     series.add( x, f.getValue( x ) ); } org.jfree.data.xy.XYSeriesCollection collection = new org.jfree.data.xy.XYSeriesCollection( series ); return collection;  =>   if (f == null) {     throw new java.lang.IllegalArgumentException( \"Null 'f' argument.\" ); } if (start >= end) {     throw new java.lang.IllegalArgumentException( \"Requires 'start' < 'end'.\" ); } if (samples < 2) {     throw new java.lang.IllegalArgumentException( \"Requires 'samples' > 1\" ); } org.jfree.data.xy.XYSeries series = new org.jfree.data.xy.XYSeries( seriesKey ); double step = (end - start) / samples; for (int i = 0; i <= samples; i++) {     double x = start + step * i;     series.add( x, f.getValue( x ) ); } org.jfree.data.xy.XYSeriesCollection collection = new org.jfree.data.xy.XYSeriesCollection( series ); return collection;
SDL_97:229:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): if (f == null) {     throw new java.lang.IllegalArgumentException( \"Null 'f' argument.\" ); } if (seriesKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'seriesKey' argument.\" ); } if (start >= end) {     throw new java.lang.IllegalArgumentException( \"Requires 'start' < 'end'.\" ); } if (samples < 2) {     throw new java.lang.IllegalArgumentException( \"Requires 'samples' > 1\" ); } org.jfree.data.xy.XYSeries series = new org.jfree.data.xy.XYSeries( seriesKey ); double step = (end - start) / samples; for (int i = 0; i <= samples; i++) {     double x = start + step * i;     series.add( x, f.getValue( x ) ); } org.jfree.data.xy.XYSeriesCollection collection = new org.jfree.data.xy.XYSeriesCollection( series ); return collection;  =>   if (f == null) {     throw new java.lang.IllegalArgumentException( \"Null 'f' argument.\" ); } if (seriesKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'seriesKey' argument.\" ); } if (samples < 2) {     throw new java.lang.IllegalArgumentException( \"Requires 'samples' > 1\" ); } org.jfree.data.xy.XYSeries series = new org.jfree.data.xy.XYSeries( seriesKey ); double step = (end - start) / samples; for (int i = 0; i <= samples; i++) {     double x = start + step * i;     series.add( x, f.getValue( x ) ); } org.jfree.data.xy.XYSeriesCollection collection = new org.jfree.data.xy.XYSeriesCollection( series ); return collection;
SDL_98:229:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): if (f == null) {     throw new java.lang.IllegalArgumentException( \"Null 'f' argument.\" ); } if (seriesKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'seriesKey' argument.\" ); } if (start >= end) {     throw new java.lang.IllegalArgumentException( \"Requires 'start' < 'end'.\" ); } if (samples < 2) {     throw new java.lang.IllegalArgumentException( \"Requires 'samples' > 1\" ); } org.jfree.data.xy.XYSeries series = new org.jfree.data.xy.XYSeries( seriesKey ); double step = (end - start) / samples; for (int i = 0; i <= samples; i++) {     double x = start + step * i;     series.add( x, f.getValue( x ) ); } org.jfree.data.xy.XYSeriesCollection collection = new org.jfree.data.xy.XYSeriesCollection( series ); return collection;  =>   if (f == null) {     throw new java.lang.IllegalArgumentException( \"Null 'f' argument.\" ); } if (seriesKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'seriesKey' argument.\" ); } if (start >= end) {     throw new java.lang.IllegalArgumentException( \"Requires 'start' < 'end'.\" ); } org.jfree.data.xy.XYSeries series = new org.jfree.data.xy.XYSeries( seriesKey ); double step = (end - start) / samples; for (int i = 0; i <= samples; i++) {     double x = start + step * i;     series.add( x, f.getValue( x ) ); } org.jfree.data.xy.XYSeriesCollection collection = new org.jfree.data.xy.XYSeriesCollection( series ); return collection;
SDL_99:228:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): if (f == null) {     throw new java.lang.IllegalArgumentException( \"Null 'f' argument.\" ); } if (seriesKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'seriesKey' argument.\" ); } if (start >= end) {     throw new java.lang.IllegalArgumentException( \"Requires 'start' < 'end'.\" ); } if (samples < 2) {     throw new java.lang.IllegalArgumentException( \"Requires 'samples' > 1\" ); } org.jfree.data.xy.XYSeries series = new org.jfree.data.xy.XYSeries( seriesKey ); double step = (end - start) / samples; for (int i = 0; i <= samples; i++) {     double x = start + step * i;     series.add( x, f.getValue( x ) ); } org.jfree.data.xy.XYSeriesCollection collection = new org.jfree.data.xy.XYSeriesCollection( series ); return collection;  =>   if (f == null) {     throw new java.lang.IllegalArgumentException( \"Null 'f' argument.\" ); } if (seriesKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'seriesKey' argument.\" ); } if (start >= end) {     throw new java.lang.IllegalArgumentException( \"Requires 'start' < 'end'.\" ); } if (samples < 2) {     throw new java.lang.IllegalArgumentException( \"Requires 'samples' > 1\" ); } org.jfree.data.xy.XYSeries series = new org.jfree.data.xy.XYSeries( seriesKey ); double step = (end - start) / samples; org.jfree.data.xy.XYSeriesCollection collection = new org.jfree.data.xy.XYSeriesCollection( series ); return collection;
SDL_100:213:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): throw new java.lang.IllegalArgumentException( \"Null 'f' argument.\" );  =>  
SDL_101:215:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): if (f == null) {     throw new java.lang.IllegalArgumentException( \"Null 'f' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'f' argument.\" ); }
SDL_102:216:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): throw new java.lang.IllegalArgumentException( \"Null 'seriesKey' argument.\" );  =>  
SDL_103:218:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): if (seriesKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'seriesKey' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'seriesKey' argument.\" ); }
SDL_104:219:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): throw new java.lang.IllegalArgumentException( \"Requires 'start' < 'end'.\" );  =>  
SDL_105:221:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): if (start >= end) {     throw new java.lang.IllegalArgumentException( \"Requires 'start' < 'end'.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Requires 'start' < 'end'.\" ); }
SDL_106:222:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): throw new java.lang.IllegalArgumentException( \"Requires 'samples' > 1\" );  =>  
SDL_107:224:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): if (samples < 2) {     throw new java.lang.IllegalArgumentException( \"Requires 'samples' > 1\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Requires 'samples' > 1\" ); }
SDL_108:228:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): double x = start + step * i; series.add( x, f.getValue( x ) );  =>   double x = start + step * i;
SDL_109:230:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): for (int i = 0; i <= samples; i++) {     double x = start + step * i;     series.add( x, f.getValue( x ) ); }  =>   for (int i = 0;; i++) {     double x = start + step * i;     series.add( x, f.getValue( x ) ); }
SDL_110:230:org.jfree.data.xy.XYDataset_sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): for (int i = 0; i <= samples; i++) {     double x = start + step * i;     series.add( x, f.getValue( x ) ); }  =>   for (int i = 0; i <= samples;) {     double x = start + step * i;     series.add( x, f.getValue( x ) ); }
SDL_111:250:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): if (dataset == null) {     return true; } int itemCount = dataset.getItemCount(); if (itemCount == 0) {     return true; } for (int item = 0; item < itemCount; item++) {     java.lang.Number y = dataset.getValue( item );     if (y != null) {         double yy = y.doubleValue();         if (yy > 0.0) {             return false;         }     } } return true;  =>   int itemCount = dataset.getItemCount(); if (itemCount == 0) {     return true; } for (int item = 0; item < itemCount; item++) {     java.lang.Number y = dataset.getValue( item );     if (y != null) {         double yy = y.doubleValue();         if (yy > 0.0) {             return false;         }     } } return true;
SDL_112:250:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): if (dataset == null) {     return true; } int itemCount = dataset.getItemCount(); if (itemCount == 0) {     return true; } for (int item = 0; item < itemCount; item++) {     java.lang.Number y = dataset.getValue( item );     if (y != null) {         double yy = y.doubleValue();         if (yy > 0.0) {             return false;         }     } } return true;  =>   if (dataset == null) {     return true; } int itemCount = dataset.getItemCount(); for (int item = 0; item < itemCount; item++) {     java.lang.Number y = dataset.getValue( item );     if (y != null) {         double yy = y.doubleValue();         if (yy > 0.0) {             return false;         }     } } return true;
SDL_113:244:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): if (dataset == null) {     return true; } int itemCount = dataset.getItemCount(); if (itemCount == 0) {     return true; } for (int item = 0; item < itemCount; item++) {     java.lang.Number y = dataset.getValue( item );     if (y != null) {         double yy = y.doubleValue();         if (yy > 0.0) {             return false;         }     } } return true;  =>   if (dataset == null) {     return true; } int itemCount = dataset.getItemCount(); if (itemCount == 0) {     return true; } return true;
SDL_114:239:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): if (dataset == null) {     return true; }  =>   if (true) {     return true; }
SDL_115:238:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): return true;  =>   return false;
SDL_116:243:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): if (itemCount == 0) {     return true; }  =>   if (true) {     return true; }
SDL_117:242:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): return true;  =>   return false;
SDL_118:245:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): java.lang.Number y = dataset.getValue( item ); if (y != null) {     double yy = y.doubleValue();     if (yy > 0.0) {         return false;     } }  =>   java.lang.Number y = dataset.getValue( item );
SDL_119:252:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): for (int item = 0; item < itemCount; item++) {     java.lang.Number y = dataset.getValue( item );     if (y != null) {         double yy = y.doubleValue();         if (yy > 0.0) {             return false;         }     } }  =>   for (int item = 0;; item++) {     java.lang.Number y = dataset.getValue( item );     if (y != null) {         double yy = y.doubleValue();         if (yy > 0.0) {             return false;         }     } }
SDL_120:252:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): for (int item = 0; item < itemCount; item++) {     java.lang.Number y = dataset.getValue( item );     if (y != null) {         double yy = y.doubleValue();         if (yy > 0.0) {             return false;         }     } }  =>   for (int item = 0; item < itemCount;) {     java.lang.Number y = dataset.getValue( item );     if (y != null) {         double yy = y.doubleValue();         if (yy > 0.0) {             return false;         }     } }
SDL_121:247:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): double yy = y.doubleValue(); if (yy > 0.0) {     return false; }  =>   double yy = y.doubleValue();
SDL_122:251:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): if (y != null) {     double yy = y.doubleValue();     if (yy > 0.0) {         return false;     } }  =>   if (true) {     double yy = y.doubleValue();     if (yy > 0.0) {         return false;     } }
SDL_123:250:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): if (yy > 0.0) {     return false; }  =>   if (true) {     return false; }
SDL_124:249:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): return false;  =>   return true;
SDL_125:253:boolean_isEmptyOrNull(org.jfree.data.general.PieDataset): return true;  =>   return false;
SDL_126:270:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): if (dataset == null) {     return true; } int rowCount = dataset.getRowCount(); int columnCount = dataset.getColumnCount(); if (rowCount == 0 || columnCount == 0) {     return true; } for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < columnCount; c++) {         if (dataset.getValue( r, c ) != null) {             return false;         }     } } return true;  =>   int rowCount = dataset.getRowCount(); int columnCount = dataset.getColumnCount(); if (rowCount == 0 || columnCount == 0) {     return true; } for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < columnCount; c++) {         if (dataset.getValue( r, c ) != null) {             return false;         }     } } return true;
SDL_127:270:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): if (dataset == null) {     return true; } int rowCount = dataset.getRowCount(); int columnCount = dataset.getColumnCount(); if (rowCount == 0 || columnCount == 0) {     return true; } for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < columnCount; c++) {         if (dataset.getValue( r, c ) != null) {             return false;         }     } } return true;  =>   if (dataset == null) {     return true; } int rowCount = dataset.getRowCount(); int columnCount = dataset.getColumnCount(); for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < columnCount; c++) {         if (dataset.getValue( r, c ) != null) {             return false;         }     } } return true;
SDL_128:266:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): if (dataset == null) {     return true; } int rowCount = dataset.getRowCount(); int columnCount = dataset.getColumnCount(); if (rowCount == 0 || columnCount == 0) {     return true; } for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < columnCount; c++) {         if (dataset.getValue( r, c ) != null) {             return false;         }     } } return true;  =>   if (dataset == null) {     return true; } int rowCount = dataset.getRowCount(); int columnCount = dataset.getColumnCount(); if (rowCount == 0 || columnCount == 0) {     return true; } return true;
SDL_129:260:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): if (dataset == null) {     return true; }  =>   if (true) {     return true; }
SDL_130:259:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): return true;  =>   return false;
SDL_131:265:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): if (rowCount == 0 || columnCount == 0) {     return true; }  =>   if (true) {     return true; }
SDL_132:264:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): return true;  =>   return false;
SDL_133:266:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): for (int c = 0; c < columnCount; c++) {     if (dataset.getValue( r, c ) != null) {         return false;     } }  =>  
SDL_134:272:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < columnCount; c++) {         if (dataset.getValue( r, c ) != null) {             return false;         }     } }  =>   for (int r = 0;; r++) {     for (int c = 0; c < columnCount; c++) {         if (dataset.getValue( r, c ) != null) {             return false;         }     } }
SDL_135:272:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < columnCount; c++) {         if (dataset.getValue( r, c ) != null) {             return false;         }     } }  =>   for (int r = 0; r < rowCount;) {     for (int c = 0; c < columnCount; c++) {         if (dataset.getValue( r, c ) != null) {             return false;         }     } }
SDL_136:267:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): if (dataset.getValue( r, c ) != null) {     return false; }  =>  
SDL_137:271:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): for (int c = 0; c < columnCount; c++) {     if (dataset.getValue( r, c ) != null) {         return false;     } }  =>   for (int c = 0;; c++) {     if (dataset.getValue( r, c ) != null) {         return false;     } }
SDL_138:271:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): for (int c = 0; c < columnCount; c++) {     if (dataset.getValue( r, c ) != null) {         return false;     } }  =>   for (int c = 0; c < columnCount;) {     if (dataset.getValue( r, c ) != null) {         return false;     } }
SDL_139:270:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): if (dataset.getValue( r, c ) != null) {     return false; }  =>   if (true) {     return false; }
SDL_140:269:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): return false;  =>   return true;
SDL_141:273:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): return true;  =>   return false;
SDL_142:278:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): if (dataset != null) {     for (int s = 0; s < dataset.getSeriesCount(); s++) {         if (dataset.getItemCount( s ) > 0) {             return false;         }     } } return true;  =>   return true;
SDL_143:278:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): for (int s = 0; s < dataset.getSeriesCount(); s++) {     if (dataset.getItemCount( s ) > 0) {         return false;     } }  =>  
SDL_144:284:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): if (dataset != null) {     for (int s = 0; s < dataset.getSeriesCount(); s++) {         if (dataset.getItemCount( s ) > 0) {             return false;         }     } }  =>   if (true) {     for (int s = 0; s < dataset.getSeriesCount(); s++) {         if (dataset.getItemCount( s ) > 0) {             return false;         }     } }
SDL_145:279:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): if (dataset.getItemCount( s ) > 0) {     return false; }  =>  
SDL_146:283:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): for (int s = 0; s < dataset.getSeriesCount(); s++) {     if (dataset.getItemCount( s ) > 0) {         return false;     } }  =>   for (int s = 0;; s++) {     if (dataset.getItemCount( s ) > 0) {         return false;     } }
SDL_147:283:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): for (int s = 0; s < dataset.getSeriesCount(); s++) {     if (dataset.getItemCount( s ) > 0) {         return false;     } }  =>   for (int s = 0; s < dataset.getSeriesCount();) {     if (dataset.getItemCount( s ) > 0) {         return false;     } }
SDL_148:282:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): if (dataset.getItemCount( s ) > 0) {     return false; }  =>   if (true) {     return false; }
SDL_149:281:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): return false;  =>   return true;
SDL_150:285:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): return true;  =>   return false;
SDL_151:302:org.jfree.data.Range_findDomainBounds(org.jfree.data.xy.XYDataset,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; if (dataset instanceof org.jfree.data.DomainInfo) {     org.jfree.data.DomainInfo info = (org.jfree.data.DomainInfo) dataset;     result = info.getDomainBounds( includeInterval ); } else {     result = iterateDomainBounds( dataset, includeInterval ); } return result;  =>   org.jfree.data.Range result = null; if (dataset instanceof org.jfree.data.DomainInfo) {     org.jfree.data.DomainInfo info = (org.jfree.data.DomainInfo) dataset;     result = info.getDomainBounds( includeInterval ); } else {     result = iterateDomainBounds( dataset, includeInterval ); } return result;
SDL_152:299:org.jfree.data.Range_findDomainBounds(org.jfree.data.xy.XYDataset,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; if (dataset instanceof org.jfree.data.DomainInfo) {     org.jfree.data.DomainInfo info = (org.jfree.data.DomainInfo) dataset;     result = info.getDomainBounds( includeInterval ); } else {     result = iterateDomainBounds( dataset, includeInterval ); } return result;  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; return result;
SDL_153:295:org.jfree.data.Range_findDomainBounds(org.jfree.data.xy.XYDataset,boolean): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_154:297:org.jfree.data.Range_findDomainBounds(org.jfree.data.xy.XYDataset,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_155:300:org.jfree.data.Range_findDomainBounds(org.jfree.data.xy.XYDataset,boolean): org.jfree.data.DomainInfo info = (org.jfree.data.DomainInfo) dataset; result = info.getDomainBounds( includeInterval );  =>   org.jfree.data.DomainInfo info = (org.jfree.data.DomainInfo) dataset;
SDL_156:304:org.jfree.data.Range_findDomainBounds(org.jfree.data.xy.XYDataset,boolean): if (dataset instanceof org.jfree.data.DomainInfo) {     org.jfree.data.DomainInfo info = (org.jfree.data.DomainInfo) dataset;     result = info.getDomainBounds( includeInterval ); } else {     result = iterateDomainBounds( dataset, includeInterval ); }  =>   if (true) {     org.jfree.data.DomainInfo info = (org.jfree.data.DomainInfo) dataset;     result = info.getDomainBounds( includeInterval ); } else {     result = iterateDomainBounds( dataset, includeInterval ); }
SDL_157:302:org.jfree.data.Range_findDomainBounds(org.jfree.data.xy.XYDataset,boolean): result = iterateDomainBounds( dataset, includeInterval );  =>  
SDL_158:346:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); double lvalue; double uvalue; if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             lvalue = intervalXYData.getStartXValue( series, item );             uvalue = intervalXYData.getEndXValue( series, item );             minimum = Math.min( minimum, lvalue );             maximum = Math.max( maximum, uvalue );         }     } } else {     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             lvalue = dataset.getXValue( series, item );             uvalue = lvalue;             minimum = Math.min( minimum, lvalue );             maximum = Math.max( maximum, uvalue );         }     } } if (minimum > maximum) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }  =>   double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); double lvalue; double uvalue; if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             lvalue = intervalXYData.getStartXValue( series, item );             uvalue = intervalXYData.getEndXValue( series, item );             minimum = Math.min( minimum, lvalue );             maximum = Math.max( maximum, uvalue );         }     } } else {     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             lvalue = dataset.getXValue( series, item );             uvalue = lvalue;             minimum = Math.min( minimum, lvalue );             maximum = Math.max( maximum, uvalue );         }     } } if (minimum > maximum) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }
SDL_159:327:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); double lvalue; double uvalue; if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             lvalue = intervalXYData.getStartXValue( series, item );             uvalue = intervalXYData.getEndXValue( series, item );             minimum = Math.min( minimum, lvalue );             maximum = Math.max( maximum, uvalue );         }     } } else {     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             lvalue = dataset.getXValue( series, item );             uvalue = lvalue;             minimum = Math.min( minimum, lvalue );             maximum = Math.max( maximum, uvalue );         }     } } if (minimum > maximum) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); double lvalue; double uvalue; if (minimum > maximum) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }
SDL_160:344:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); double lvalue; double uvalue; if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             lvalue = intervalXYData.getStartXValue( series, item );             uvalue = intervalXYData.getEndXValue( series, item );             minimum = Math.min( minimum, lvalue );             maximum = Math.max( maximum, uvalue );         }     } } else {     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             lvalue = dataset.getXValue( series, item );             uvalue = lvalue;             minimum = Math.min( minimum, lvalue );             maximum = Math.max( maximum, uvalue );         }     } } if (minimum > maximum) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); double lvalue; double uvalue; if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             lvalue = intervalXYData.getStartXValue( series, item );             uvalue = intervalXYData.getEndXValue( series, item );             minimum = Math.min( minimum, lvalue );             maximum = Math.max( maximum, uvalue );         }     } } else {     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             lvalue = dataset.getXValue( series, item );             uvalue = lvalue;             minimum = Math.min( minimum, lvalue );             maximum = Math.max( maximum, uvalue );         }     } }
SDL_161:315:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_162:317:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_163:324:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset; for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         lvalue = intervalXYData.getStartXValue( series, item );         uvalue = intervalXYData.getEndXValue( series, item );         minimum = Math.min( minimum, lvalue );         maximum = Math.max( maximum, uvalue );     } }  =>   org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;
SDL_164:344:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             lvalue = intervalXYData.getStartXValue( series, item );             uvalue = intervalXYData.getEndXValue( series, item );             minimum = Math.min( minimum, lvalue );             maximum = Math.max( maximum, uvalue );         }     } } else {     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             lvalue = dataset.getXValue( series, item );             uvalue = lvalue;             minimum = Math.min( minimum, lvalue );             maximum = Math.max( maximum, uvalue );         }     } }  =>   if (true) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             lvalue = intervalXYData.getStartXValue( series, item );             uvalue = intervalXYData.getEndXValue( series, item );             minimum = Math.min( minimum, lvalue );             maximum = Math.max( maximum, uvalue );         }     } } else {     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             lvalue = dataset.getXValue( series, item );             uvalue = lvalue;             minimum = Math.min( minimum, lvalue );             maximum = Math.max( maximum, uvalue );         }     } }
SDL_165:334:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         lvalue = dataset.getXValue( series, item );         uvalue = lvalue;         minimum = Math.min( minimum, lvalue );         maximum = Math.max( maximum, uvalue );     } }  =>  
SDL_166:326:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): int itemCount = dataset.getItemCount( series ); for (int item = 0; item < itemCount; item++) {     lvalue = intervalXYData.getStartXValue( series, item );     uvalue = intervalXYData.getEndXValue( series, item );     minimum = Math.min( minimum, lvalue );     maximum = Math.max( maximum, uvalue ); }  =>   int itemCount = dataset.getItemCount( series );
SDL_167:333:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         lvalue = intervalXYData.getStartXValue( series, item );         uvalue = intervalXYData.getEndXValue( series, item );         minimum = Math.min( minimum, lvalue );         maximum = Math.max( maximum, uvalue );     } }  =>   for (int series = 0;; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         lvalue = intervalXYData.getStartXValue( series, item );         uvalue = intervalXYData.getEndXValue( series, item );         minimum = Math.min( minimum, lvalue );         maximum = Math.max( maximum, uvalue );     } }
SDL_168:333:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         lvalue = intervalXYData.getStartXValue( series, item );         uvalue = intervalXYData.getEndXValue( series, item );         minimum = Math.min( minimum, lvalue );         maximum = Math.max( maximum, uvalue );     } }  =>   for (int series = 0; series < seriesCount;) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         lvalue = intervalXYData.getStartXValue( series, item );         uvalue = intervalXYData.getEndXValue( series, item );         minimum = Math.min( minimum, lvalue );         maximum = Math.max( maximum, uvalue );     } }
SDL_169:330:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): lvalue = intervalXYData.getStartXValue( series, item ); uvalue = intervalXYData.getEndXValue( series, item ); minimum = Math.min( minimum, lvalue ); maximum = Math.max( maximum, uvalue );  =>   uvalue = intervalXYData.getEndXValue( series, item ); minimum = Math.min( minimum, lvalue ); maximum = Math.max( maximum, uvalue );
SDL_170:330:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): lvalue = intervalXYData.getStartXValue( series, item ); uvalue = intervalXYData.getEndXValue( series, item ); minimum = Math.min( minimum, lvalue ); maximum = Math.max( maximum, uvalue );  =>   lvalue = intervalXYData.getStartXValue( series, item ); minimum = Math.min( minimum, lvalue ); maximum = Math.max( maximum, uvalue );
SDL_171:330:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): lvalue = intervalXYData.getStartXValue( series, item ); uvalue = intervalXYData.getEndXValue( series, item ); minimum = Math.min( minimum, lvalue ); maximum = Math.max( maximum, uvalue );  =>   lvalue = intervalXYData.getStartXValue( series, item ); uvalue = intervalXYData.getEndXValue( series, item ); maximum = Math.max( maximum, uvalue );
SDL_172:330:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): lvalue = intervalXYData.getStartXValue( series, item ); uvalue = intervalXYData.getEndXValue( series, item ); minimum = Math.min( minimum, lvalue ); maximum = Math.max( maximum, uvalue );  =>   lvalue = intervalXYData.getStartXValue( series, item ); uvalue = intervalXYData.getEndXValue( series, item ); minimum = Math.min( minimum, lvalue );
SDL_173:332:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): for (int item = 0; item < itemCount; item++) {     lvalue = intervalXYData.getStartXValue( series, item );     uvalue = intervalXYData.getEndXValue( series, item );     minimum = Math.min( minimum, lvalue );     maximum = Math.max( maximum, uvalue ); }  =>   for (int item = 0;; item++) {     lvalue = intervalXYData.getStartXValue( series, item );     uvalue = intervalXYData.getEndXValue( series, item );     minimum = Math.min( minimum, lvalue );     maximum = Math.max( maximum, uvalue ); }
SDL_174:332:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): for (int item = 0; item < itemCount; item++) {     lvalue = intervalXYData.getStartXValue( series, item );     uvalue = intervalXYData.getEndXValue( series, item );     minimum = Math.min( minimum, lvalue );     maximum = Math.max( maximum, uvalue ); }  =>   for (int item = 0; item < itemCount;) {     lvalue = intervalXYData.getStartXValue( series, item );     uvalue = intervalXYData.getEndXValue( series, item );     minimum = Math.min( minimum, lvalue );     maximum = Math.max( maximum, uvalue ); }
SDL_175:336:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): int itemCount = dataset.getItemCount( series ); for (int item = 0; item < itemCount; item++) {     lvalue = dataset.getXValue( series, item );     uvalue = lvalue;     minimum = Math.min( minimum, lvalue );     maximum = Math.max( maximum, uvalue ); }  =>   int itemCount = dataset.getItemCount( series );
SDL_176:343:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         lvalue = dataset.getXValue( series, item );         uvalue = lvalue;         minimum = Math.min( minimum, lvalue );         maximum = Math.max( maximum, uvalue );     } }  =>   for (int series = 0;; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         lvalue = dataset.getXValue( series, item );         uvalue = lvalue;         minimum = Math.min( minimum, lvalue );         maximum = Math.max( maximum, uvalue );     } }
SDL_177:343:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         lvalue = dataset.getXValue( series, item );         uvalue = lvalue;         minimum = Math.min( minimum, lvalue );         maximum = Math.max( maximum, uvalue );     } }  =>   for (int series = 0; series < seriesCount;) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         lvalue = dataset.getXValue( series, item );         uvalue = lvalue;         minimum = Math.min( minimum, lvalue );         maximum = Math.max( maximum, uvalue );     } }
SDL_178:340:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): lvalue = dataset.getXValue( series, item ); uvalue = lvalue; minimum = Math.min( minimum, lvalue ); maximum = Math.max( maximum, uvalue );  =>   uvalue = lvalue; minimum = Math.min( minimum, lvalue ); maximum = Math.max( maximum, uvalue );
SDL_179:340:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): lvalue = dataset.getXValue( series, item ); uvalue = lvalue; minimum = Math.min( minimum, lvalue ); maximum = Math.max( maximum, uvalue );  =>   lvalue = dataset.getXValue( series, item ); minimum = Math.min( minimum, lvalue ); maximum = Math.max( maximum, uvalue );
SDL_180:340:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): lvalue = dataset.getXValue( series, item ); uvalue = lvalue; minimum = Math.min( minimum, lvalue ); maximum = Math.max( maximum, uvalue );  =>   lvalue = dataset.getXValue( series, item ); uvalue = lvalue; maximum = Math.max( maximum, uvalue );
SDL_181:340:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): lvalue = dataset.getXValue( series, item ); uvalue = lvalue; minimum = Math.min( minimum, lvalue ); maximum = Math.max( maximum, uvalue );  =>   lvalue = dataset.getXValue( series, item ); uvalue = lvalue; minimum = Math.min( minimum, lvalue );
SDL_182:342:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): for (int item = 0; item < itemCount; item++) {     lvalue = dataset.getXValue( series, item );     uvalue = lvalue;     minimum = Math.min( minimum, lvalue );     maximum = Math.max( maximum, uvalue ); }  =>   for (int item = 0;; item++) {     lvalue = dataset.getXValue( series, item );     uvalue = lvalue;     minimum = Math.min( minimum, lvalue );     maximum = Math.max( maximum, uvalue ); }
SDL_183:342:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): for (int item = 0; item < itemCount; item++) {     lvalue = dataset.getXValue( series, item );     uvalue = lvalue;     minimum = Math.min( minimum, lvalue );     maximum = Math.max( maximum, uvalue ); }  =>   for (int item = 0; item < itemCount;) {     lvalue = dataset.getXValue( series, item );     uvalue = lvalue;     minimum = Math.min( minimum, lvalue );     maximum = Math.max( maximum, uvalue ); }
SDL_184:349:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): if (minimum > maximum) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }  =>   if (true) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }
SDL_185:366:org.jfree.data.Range_findRangeBounds(org.jfree.data.category.CategoryDataset,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     result = info.getRangeBounds( includeInterval ); } else {     result = iterateCategoryRangeBounds( dataset, includeInterval ); } return result;  =>   org.jfree.data.Range result = null; if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     result = info.getRangeBounds( includeInterval ); } else {     result = iterateCategoryRangeBounds( dataset, includeInterval ); } return result;
SDL_186:363:org.jfree.data.Range_findRangeBounds(org.jfree.data.category.CategoryDataset,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     result = info.getRangeBounds( includeInterval ); } else {     result = iterateCategoryRangeBounds( dataset, includeInterval ); } return result;  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; return result;
SDL_187:359:org.jfree.data.Range_findRangeBounds(org.jfree.data.category.CategoryDataset,boolean): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_188:361:org.jfree.data.Range_findRangeBounds(org.jfree.data.category.CategoryDataset,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_189:364:org.jfree.data.Range_findRangeBounds(org.jfree.data.category.CategoryDataset,boolean): org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset; result = info.getRangeBounds( includeInterval );  =>   org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;
SDL_190:368:org.jfree.data.Range_findRangeBounds(org.jfree.data.category.CategoryDataset,boolean): if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     result = info.getRangeBounds( includeInterval ); } else {     result = iterateCategoryRangeBounds( dataset, includeInterval ); }  =>   if (true) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     result = info.getRangeBounds( includeInterval ); } else {     result = iterateCategoryRangeBounds( dataset, includeInterval ); }
SDL_191:366:org.jfree.data.Range_findRangeBounds(org.jfree.data.category.CategoryDataset,boolean): result = iterateCategoryRangeBounds( dataset, includeInterval );  =>  
SDL_192:386:org.jfree.data.Range_findRangeBounds(org.jfree.data.xy.XYDataset,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     result = info.getRangeBounds( includeInterval ); } else {     result = iterateXYRangeBounds( dataset ); } return result;  =>   org.jfree.data.Range result = null; if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     result = info.getRangeBounds( includeInterval ); } else {     result = iterateXYRangeBounds( dataset ); } return result;
SDL_193:383:org.jfree.data.Range_findRangeBounds(org.jfree.data.xy.XYDataset,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     result = info.getRangeBounds( includeInterval ); } else {     result = iterateXYRangeBounds( dataset ); } return result;  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; return result;
SDL_194:379:org.jfree.data.Range_findRangeBounds(org.jfree.data.xy.XYDataset,boolean): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_195:381:org.jfree.data.Range_findRangeBounds(org.jfree.data.xy.XYDataset,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_196:384:org.jfree.data.Range_findRangeBounds(org.jfree.data.xy.XYDataset,boolean): org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset; result = info.getRangeBounds( includeInterval );  =>   org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;
SDL_197:388:org.jfree.data.Range_findRangeBounds(org.jfree.data.xy.XYDataset,boolean): if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     result = info.getRangeBounds( includeInterval ); } else {     result = iterateXYRangeBounds( dataset ); }  =>   if (true) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     result = info.getRangeBounds( includeInterval ); } else {     result = iterateXYRangeBounds( dataset ); }
SDL_198:386:org.jfree.data.Range_findRangeBounds(org.jfree.data.xy.XYDataset,boolean): result = iterateXYRangeBounds( dataset );  =>  
SDL_199:403:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; boolean interval = includeInterval && dataset instanceof org.jfree.data.category.IntervalCategoryDataset; int rowCount = dataset.getRowCount(); int columnCount = dataset.getColumnCount(); for (int row = 0; row < rowCount; row++) {     for (int column = 0; column < columnCount; column++) {         java.lang.Number lvalue;         java.lang.Number uvalue;         if (interval) {             org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;             lvalue = icd.getStartValue( row, column );             uvalue = icd.getEndValue( row, column );         } else {             lvalue = dataset.getValue( row, column );             uvalue = lvalue;         }         if (lvalue != null) {             minimum = Math.min( minimum, lvalue.doubleValue() );         }         if (uvalue != null) {             maximum = Math.max( maximum, uvalue.doubleValue() );         }     } } if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }  =>   double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; boolean interval = includeInterval && dataset instanceof org.jfree.data.category.IntervalCategoryDataset; int rowCount = dataset.getRowCount(); int columnCount = dataset.getColumnCount(); if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }
SDL_200:418:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; boolean interval = includeInterval && dataset instanceof org.jfree.data.category.IntervalCategoryDataset; int rowCount = dataset.getRowCount(); int columnCount = dataset.getColumnCount(); for (int row = 0; row < rowCount; row++) {     for (int column = 0; column < columnCount; column++) {         java.lang.Number lvalue;         java.lang.Number uvalue;         if (interval) {             org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;             lvalue = icd.getStartValue( row, column );             uvalue = icd.getEndValue( row, column );         } else {             lvalue = dataset.getValue( row, column );             uvalue = lvalue;         }         if (lvalue != null) {             minimum = Math.min( minimum, lvalue.doubleValue() );         }         if (uvalue != null) {             maximum = Math.max( maximum, uvalue.doubleValue() );         }     } } if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }  =>   double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; boolean interval = includeInterval && dataset instanceof org.jfree.data.category.IntervalCategoryDataset; int rowCount = dataset.getRowCount(); int columnCount = dataset.getColumnCount(); for (int row = 0; row < rowCount; row++) {     for (int column = 0; column < columnCount; column++) {         java.lang.Number lvalue;         java.lang.Number uvalue;         if (interval) {             org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;             lvalue = icd.getStartValue( row, column );             uvalue = icd.getEndValue( row, column );         } else {             lvalue = dataset.getValue( row, column );             uvalue = lvalue;         }         if (lvalue != null) {             minimum = Math.min( minimum, lvalue.doubleValue() );         }         if (uvalue != null) {             maximum = Math.max( maximum, uvalue.doubleValue() );         }     } }
SDL_201:399:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): for (int column = 0; column < columnCount; column++) {     java.lang.Number lvalue;     java.lang.Number uvalue;     if (interval) {         org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;         lvalue = icd.getStartValue( row, column );         uvalue = icd.getEndValue( row, column );     } else {         lvalue = dataset.getValue( row, column );         uvalue = lvalue;     }     if (lvalue != null) {         minimum = Math.min( minimum, lvalue.doubleValue() );     }     if (uvalue != null) {         maximum = Math.max( maximum, uvalue.doubleValue() );     } }  =>  
SDL_202:418:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): for (int row = 0; row < rowCount; row++) {     for (int column = 0; column < columnCount; column++) {         java.lang.Number lvalue;         java.lang.Number uvalue;         if (interval) {             org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;             lvalue = icd.getStartValue( row, column );             uvalue = icd.getEndValue( row, column );         } else {             lvalue = dataset.getValue( row, column );             uvalue = lvalue;         }         if (lvalue != null) {             minimum = Math.min( minimum, lvalue.doubleValue() );         }         if (uvalue != null) {             maximum = Math.max( maximum, uvalue.doubleValue() );         }     } }  =>   for (int row = 0;; row++) {     for (int column = 0; column < columnCount; column++) {         java.lang.Number lvalue;         java.lang.Number uvalue;         if (interval) {             org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;             lvalue = icd.getStartValue( row, column );             uvalue = icd.getEndValue( row, column );         } else {             lvalue = dataset.getValue( row, column );             uvalue = lvalue;         }         if (lvalue != null) {             minimum = Math.min( minimum, lvalue.doubleValue() );         }         if (uvalue != null) {             maximum = Math.max( maximum, uvalue.doubleValue() );         }     } }
SDL_203:418:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): for (int row = 0; row < rowCount; row++) {     for (int column = 0; column < columnCount; column++) {         java.lang.Number lvalue;         java.lang.Number uvalue;         if (interval) {             org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;             lvalue = icd.getStartValue( row, column );             uvalue = icd.getEndValue( row, column );         } else {             lvalue = dataset.getValue( row, column );             uvalue = lvalue;         }         if (lvalue != null) {             minimum = Math.min( minimum, lvalue.doubleValue() );         }         if (uvalue != null) {             maximum = Math.max( maximum, uvalue.doubleValue() );         }     } }  =>   for (int row = 0; row < rowCount;) {     for (int column = 0; column < columnCount; column++) {         java.lang.Number lvalue;         java.lang.Number uvalue;         if (interval) {             org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;             lvalue = icd.getStartValue( row, column );             uvalue = icd.getEndValue( row, column );         } else {             lvalue = dataset.getValue( row, column );             uvalue = lvalue;         }         if (lvalue != null) {             minimum = Math.min( minimum, lvalue.doubleValue() );         }         if (uvalue != null) {             maximum = Math.max( maximum, uvalue.doubleValue() );         }     } }
SDL_204:408:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): java.lang.Number lvalue; java.lang.Number uvalue; if (interval) {     org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;     lvalue = icd.getStartValue( row, column );     uvalue = icd.getEndValue( row, column ); } else {     lvalue = dataset.getValue( row, column );     uvalue = lvalue; } if (lvalue != null) {     minimum = Math.min( minimum, lvalue.doubleValue() ); } if (uvalue != null) {     maximum = Math.max( maximum, uvalue.doubleValue() ); }  =>   java.lang.Number lvalue; java.lang.Number uvalue; if (lvalue != null) {     minimum = Math.min( minimum, lvalue.doubleValue() ); } if (uvalue != null) {     maximum = Math.max( maximum, uvalue.doubleValue() ); }
SDL_205:413:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): java.lang.Number lvalue; java.lang.Number uvalue; if (interval) {     org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;     lvalue = icd.getStartValue( row, column );     uvalue = icd.getEndValue( row, column ); } else {     lvalue = dataset.getValue( row, column );     uvalue = lvalue; } if (lvalue != null) {     minimum = Math.min( minimum, lvalue.doubleValue() ); } if (uvalue != null) {     maximum = Math.max( maximum, uvalue.doubleValue() ); }  =>   java.lang.Number lvalue; java.lang.Number uvalue; if (interval) {     org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;     lvalue = icd.getStartValue( row, column );     uvalue = icd.getEndValue( row, column ); } else {     lvalue = dataset.getValue( row, column );     uvalue = lvalue; } if (uvalue != null) {     maximum = Math.max( maximum, uvalue.doubleValue() ); }
SDL_206:413:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): java.lang.Number lvalue; java.lang.Number uvalue; if (interval) {     org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;     lvalue = icd.getStartValue( row, column );     uvalue = icd.getEndValue( row, column ); } else {     lvalue = dataset.getValue( row, column );     uvalue = lvalue; } if (lvalue != null) {     minimum = Math.min( minimum, lvalue.doubleValue() ); } if (uvalue != null) {     maximum = Math.max( maximum, uvalue.doubleValue() ); }  =>   java.lang.Number lvalue; java.lang.Number uvalue; if (interval) {     org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;     lvalue = icd.getStartValue( row, column );     uvalue = icd.getEndValue( row, column ); } else {     lvalue = dataset.getValue( row, column );     uvalue = lvalue; } if (lvalue != null) {     minimum = Math.min( minimum, lvalue.doubleValue() ); }
SDL_207:417:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): for (int column = 0; column < columnCount; column++) {     java.lang.Number lvalue;     java.lang.Number uvalue;     if (interval) {         org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;         lvalue = icd.getStartValue( row, column );         uvalue = icd.getEndValue( row, column );     } else {         lvalue = dataset.getValue( row, column );         uvalue = lvalue;     }     if (lvalue != null) {         minimum = Math.min( minimum, lvalue.doubleValue() );     }     if (uvalue != null) {         maximum = Math.max( maximum, uvalue.doubleValue() );     } }  =>   for (int column = 0;; column++) {     java.lang.Number lvalue;     java.lang.Number uvalue;     if (interval) {         org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;         lvalue = icd.getStartValue( row, column );         uvalue = icd.getEndValue( row, column );     } else {         lvalue = dataset.getValue( row, column );         uvalue = lvalue;     }     if (lvalue != null) {         minimum = Math.min( minimum, lvalue.doubleValue() );     }     if (uvalue != null) {         maximum = Math.max( maximum, uvalue.doubleValue() );     } }
SDL_208:417:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): for (int column = 0; column < columnCount; column++) {     java.lang.Number lvalue;     java.lang.Number uvalue;     if (interval) {         org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;         lvalue = icd.getStartValue( row, column );         uvalue = icd.getEndValue( row, column );     } else {         lvalue = dataset.getValue( row, column );         uvalue = lvalue;     }     if (lvalue != null) {         minimum = Math.min( minimum, lvalue.doubleValue() );     }     if (uvalue != null) {         maximum = Math.max( maximum, uvalue.doubleValue() );     } }  =>   for (int column = 0; column < columnCount;) {     java.lang.Number lvalue;     java.lang.Number uvalue;     if (interval) {         org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;         lvalue = icd.getStartValue( row, column );         uvalue = icd.getEndValue( row, column );     } else {         lvalue = dataset.getValue( row, column );         uvalue = lvalue;     }     if (lvalue != null) {         minimum = Math.min( minimum, lvalue.doubleValue() );     }     if (uvalue != null) {         maximum = Math.max( maximum, uvalue.doubleValue() );     } }
SDL_209:405:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset; lvalue = icd.getStartValue( row, column ); uvalue = icd.getEndValue( row, column );  =>   org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset; uvalue = icd.getEndValue( row, column );
SDL_210:405:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset; lvalue = icd.getStartValue( row, column ); uvalue = icd.getEndValue( row, column );  =>   org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset; lvalue = icd.getStartValue( row, column );
SDL_211:410:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): if (interval) {     org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;     lvalue = icd.getStartValue( row, column );     uvalue = icd.getEndValue( row, column ); } else {     lvalue = dataset.getValue( row, column );     uvalue = lvalue; }  =>   if (true) {     org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;     lvalue = icd.getStartValue( row, column );     uvalue = icd.getEndValue( row, column ); } else {     lvalue = dataset.getValue( row, column );     uvalue = lvalue; }
SDL_212:408:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): lvalue = dataset.getValue( row, column ); uvalue = lvalue;  =>   uvalue = lvalue;
SDL_213:408:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): lvalue = dataset.getValue( row, column ); uvalue = lvalue;  =>   lvalue = dataset.getValue( row, column );
SDL_214:411:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): minimum = Math.min( minimum, lvalue.doubleValue() );  =>  
SDL_215:413:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): if (lvalue != null) {     minimum = Math.min( minimum, lvalue.doubleValue() ); }  =>   if (true) {     minimum = Math.min( minimum, lvalue.doubleValue() ); }
SDL_216:414:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): maximum = Math.max( maximum, uvalue.doubleValue() );  =>  
SDL_217:416:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): if (uvalue != null) {     maximum = Math.max( maximum, uvalue.doubleValue() ); }  =>   if (true) {     maximum = Math.max( maximum, uvalue.doubleValue() ); }
SDL_218:423:org.jfree.data.Range_iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean): if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }  =>   if (true) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }
SDL_219:435:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double lvalue;         double uvalue;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             lvalue = intervalXYData.getStartYValue( series, item );             uvalue = intervalXYData.getEndYValue( series, item );         } else {             if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                 org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                 lvalue = highLowData.getLowValue( series, item );                 uvalue = highLowData.getHighValue( series, item );             } else {                 lvalue = dataset.getYValue( series, item );                 uvalue = lvalue;             }         }         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );         }         if (!Double.isNaN( uvalue )) {             maximum = Math.max( maximum, uvalue );         }     } } if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }  =>   double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }
SDL_220:457:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double lvalue;         double uvalue;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             lvalue = intervalXYData.getStartYValue( series, item );             uvalue = intervalXYData.getEndYValue( series, item );         } else {             if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                 org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                 lvalue = highLowData.getLowValue( series, item );                 uvalue = highLowData.getHighValue( series, item );             } else {                 lvalue = dataset.getYValue( series, item );                 uvalue = lvalue;             }         }         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );         }         if (!Double.isNaN( uvalue )) {             maximum = Math.max( maximum, uvalue );         }     } } if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }  =>   double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double lvalue;         double uvalue;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             lvalue = intervalXYData.getStartYValue( series, item );             uvalue = intervalXYData.getEndYValue( series, item );         } else {             if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                 org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                 lvalue = highLowData.getLowValue( series, item );                 uvalue = highLowData.getHighValue( series, item );             } else {                 lvalue = dataset.getYValue( series, item );                 uvalue = lvalue;             }         }         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );         }         if (!Double.isNaN( uvalue )) {             maximum = Math.max( maximum, uvalue );         }     } }
SDL_221:432:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): int itemCount = dataset.getItemCount( series ); for (int item = 0; item < itemCount; item++) {     double lvalue;     double uvalue;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         lvalue = intervalXYData.getStartYValue( series, item );         uvalue = intervalXYData.getEndYValue( series, item );     } else {         if (dataset instanceof org.jfree.data.xy.OHLCDataset) {             org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;             lvalue = highLowData.getLowValue( series, item );             uvalue = highLowData.getHighValue( series, item );         } else {             lvalue = dataset.getYValue( series, item );             uvalue = lvalue;         }     }     if (!Double.isNaN( lvalue )) {         minimum = Math.min( minimum, lvalue );     }     if (!Double.isNaN( uvalue )) {         maximum = Math.max( maximum, uvalue );     } }  =>   int itemCount = dataset.getItemCount( series );
SDL_222:457:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double lvalue;         double uvalue;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             lvalue = intervalXYData.getStartYValue( series, item );             uvalue = intervalXYData.getEndYValue( series, item );         } else {             if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                 org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                 lvalue = highLowData.getLowValue( series, item );                 uvalue = highLowData.getHighValue( series, item );             } else {                 lvalue = dataset.getYValue( series, item );                 uvalue = lvalue;             }         }         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );         }         if (!Double.isNaN( uvalue )) {             maximum = Math.max( maximum, uvalue );         }     } }  =>   for (int series = 0;; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double lvalue;         double uvalue;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             lvalue = intervalXYData.getStartYValue( series, item );             uvalue = intervalXYData.getEndYValue( series, item );         } else {             if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                 org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                 lvalue = highLowData.getLowValue( series, item );                 uvalue = highLowData.getHighValue( series, item );             } else {                 lvalue = dataset.getYValue( series, item );                 uvalue = lvalue;             }         }         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );         }         if (!Double.isNaN( uvalue )) {             maximum = Math.max( maximum, uvalue );         }     } }
SDL_223:457:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double lvalue;         double uvalue;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             lvalue = intervalXYData.getStartYValue( series, item );             uvalue = intervalXYData.getEndYValue( series, item );         } else {             if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                 org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                 lvalue = highLowData.getLowValue( series, item );                 uvalue = highLowData.getHighValue( series, item );             } else {                 lvalue = dataset.getYValue( series, item );                 uvalue = lvalue;             }         }         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );         }         if (!Double.isNaN( uvalue )) {             maximum = Math.max( maximum, uvalue );         }     } }  =>   for (int series = 0; series < seriesCount;) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double lvalue;         double uvalue;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             lvalue = intervalXYData.getStartYValue( series, item );             uvalue = intervalXYData.getEndYValue( series, item );         } else {             if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                 org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                 lvalue = highLowData.getLowValue( series, item );                 uvalue = highLowData.getHighValue( series, item );             } else {                 lvalue = dataset.getYValue( series, item );                 uvalue = lvalue;             }         }         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );         }         if (!Double.isNaN( uvalue )) {             maximum = Math.max( maximum, uvalue );         }     } }
SDL_224:441:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): double lvalue; double uvalue; if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     lvalue = intervalXYData.getStartYValue( series, item );     uvalue = intervalXYData.getEndYValue( series, item ); } else {     if (dataset instanceof org.jfree.data.xy.OHLCDataset) {         org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;         lvalue = highLowData.getLowValue( series, item );         uvalue = highLowData.getHighValue( series, item );     } else {         lvalue = dataset.getYValue( series, item );         uvalue = lvalue;     } } if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue ); } if (!Double.isNaN( uvalue )) {     maximum = Math.max( maximum, uvalue ); }  =>   double lvalue; double uvalue; if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue ); } if (!Double.isNaN( uvalue )) {     maximum = Math.max( maximum, uvalue ); }
SDL_225:452:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): double lvalue; double uvalue; if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     lvalue = intervalXYData.getStartYValue( series, item );     uvalue = intervalXYData.getEndYValue( series, item ); } else {     if (dataset instanceof org.jfree.data.xy.OHLCDataset) {         org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;         lvalue = highLowData.getLowValue( series, item );         uvalue = highLowData.getHighValue( series, item );     } else {         lvalue = dataset.getYValue( series, item );         uvalue = lvalue;     } } if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue ); } if (!Double.isNaN( uvalue )) {     maximum = Math.max( maximum, uvalue ); }  =>   double lvalue; double uvalue; if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     lvalue = intervalXYData.getStartYValue( series, item );     uvalue = intervalXYData.getEndYValue( series, item ); } else {     if (dataset instanceof org.jfree.data.xy.OHLCDataset) {         org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;         lvalue = highLowData.getLowValue( series, item );         uvalue = highLowData.getHighValue( series, item );     } else {         lvalue = dataset.getYValue( series, item );         uvalue = lvalue;     } } if (!Double.isNaN( uvalue )) {     maximum = Math.max( maximum, uvalue ); }
SDL_226:452:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): double lvalue; double uvalue; if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     lvalue = intervalXYData.getStartYValue( series, item );     uvalue = intervalXYData.getEndYValue( series, item ); } else {     if (dataset instanceof org.jfree.data.xy.OHLCDataset) {         org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;         lvalue = highLowData.getLowValue( series, item );         uvalue = highLowData.getHighValue( series, item );     } else {         lvalue = dataset.getYValue( series, item );         uvalue = lvalue;     } } if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue ); } if (!Double.isNaN( uvalue )) {     maximum = Math.max( maximum, uvalue ); }  =>   double lvalue; double uvalue; if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     lvalue = intervalXYData.getStartYValue( series, item );     uvalue = intervalXYData.getEndYValue( series, item ); } else {     if (dataset instanceof org.jfree.data.xy.OHLCDataset) {         org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;         lvalue = highLowData.getLowValue( series, item );         uvalue = highLowData.getHighValue( series, item );     } else {         lvalue = dataset.getYValue( series, item );         uvalue = lvalue;     } } if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue ); }
SDL_227:456:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): for (int item = 0; item < itemCount; item++) {     double lvalue;     double uvalue;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         lvalue = intervalXYData.getStartYValue( series, item );         uvalue = intervalXYData.getEndYValue( series, item );     } else {         if (dataset instanceof org.jfree.data.xy.OHLCDataset) {             org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;             lvalue = highLowData.getLowValue( series, item );             uvalue = highLowData.getHighValue( series, item );         } else {             lvalue = dataset.getYValue( series, item );             uvalue = lvalue;         }     }     if (!Double.isNaN( lvalue )) {         minimum = Math.min( minimum, lvalue );     }     if (!Double.isNaN( uvalue )) {         maximum = Math.max( maximum, uvalue );     } }  =>   for (int item = 0;; item++) {     double lvalue;     double uvalue;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         lvalue = intervalXYData.getStartYValue( series, item );         uvalue = intervalXYData.getEndYValue( series, item );     } else {         if (dataset instanceof org.jfree.data.xy.OHLCDataset) {             org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;             lvalue = highLowData.getLowValue( series, item );             uvalue = highLowData.getHighValue( series, item );         } else {             lvalue = dataset.getYValue( series, item );             uvalue = lvalue;         }     }     if (!Double.isNaN( lvalue )) {         minimum = Math.min( minimum, lvalue );     }     if (!Double.isNaN( uvalue )) {         maximum = Math.max( maximum, uvalue );     } }
SDL_228:456:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): for (int item = 0; item < itemCount; item++) {     double lvalue;     double uvalue;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         lvalue = intervalXYData.getStartYValue( series, item );         uvalue = intervalXYData.getEndYValue( series, item );     } else {         if (dataset instanceof org.jfree.data.xy.OHLCDataset) {             org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;             lvalue = highLowData.getLowValue( series, item );             uvalue = highLowData.getHighValue( series, item );         } else {             lvalue = dataset.getYValue( series, item );             uvalue = lvalue;         }     }     if (!Double.isNaN( lvalue )) {         minimum = Math.min( minimum, lvalue );     }     if (!Double.isNaN( uvalue )) {         maximum = Math.max( maximum, uvalue );     } }  =>   for (int item = 0; item < itemCount;) {     double lvalue;     double uvalue;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         lvalue = intervalXYData.getStartYValue( series, item );         uvalue = intervalXYData.getEndYValue( series, item );     } else {         if (dataset instanceof org.jfree.data.xy.OHLCDataset) {             org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;             lvalue = highLowData.getLowValue( series, item );             uvalue = highLowData.getHighValue( series, item );         } else {             lvalue = dataset.getYValue( series, item );             uvalue = lvalue;         }     }     if (!Double.isNaN( lvalue )) {         minimum = Math.min( minimum, lvalue );     }     if (!Double.isNaN( uvalue )) {         maximum = Math.max( maximum, uvalue );     } }
SDL_229:438:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset; lvalue = intervalXYData.getStartYValue( series, item ); uvalue = intervalXYData.getEndYValue( series, item );  =>   org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset; uvalue = intervalXYData.getEndYValue( series, item );
SDL_230:438:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset; lvalue = intervalXYData.getStartYValue( series, item ); uvalue = intervalXYData.getEndYValue( series, item );  =>   org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset; lvalue = intervalXYData.getStartYValue( series, item );
SDL_231:449:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     lvalue = intervalXYData.getStartYValue( series, item );     uvalue = intervalXYData.getEndYValue( series, item ); } else {     if (dataset instanceof org.jfree.data.xy.OHLCDataset) {         org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;         lvalue = highLowData.getLowValue( series, item );         uvalue = highLowData.getHighValue( series, item );     } else {         lvalue = dataset.getYValue( series, item );         uvalue = lvalue;     } }  =>   if (true) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     lvalue = intervalXYData.getStartYValue( series, item );     uvalue = intervalXYData.getEndYValue( series, item ); } else {     if (dataset instanceof org.jfree.data.xy.OHLCDataset) {         org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;         lvalue = highLowData.getLowValue( series, item );         uvalue = highLowData.getHighValue( series, item );     } else {         lvalue = dataset.getYValue( series, item );         uvalue = lvalue;     } }
SDL_232:440:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): if (dataset instanceof org.jfree.data.xy.OHLCDataset) {     org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;     lvalue = highLowData.getLowValue( series, item );     uvalue = highLowData.getHighValue( series, item ); } else {     lvalue = dataset.getYValue( series, item );     uvalue = lvalue; }  =>  
SDL_233:443:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset; lvalue = highLowData.getLowValue( series, item ); uvalue = highLowData.getHighValue( series, item );  =>   org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset; uvalue = highLowData.getHighValue( series, item );
SDL_234:443:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset; lvalue = highLowData.getLowValue( series, item ); uvalue = highLowData.getHighValue( series, item );  =>   org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset; lvalue = highLowData.getLowValue( series, item );
SDL_235:448:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): if (dataset instanceof org.jfree.data.xy.OHLCDataset) {     org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;     lvalue = highLowData.getLowValue( series, item );     uvalue = highLowData.getHighValue( series, item ); } else {     lvalue = dataset.getYValue( series, item );     uvalue = lvalue; }  =>   if (true) {     org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;     lvalue = highLowData.getLowValue( series, item );     uvalue = highLowData.getHighValue( series, item ); } else {     lvalue = dataset.getYValue( series, item );     uvalue = lvalue; }
SDL_236:446:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): lvalue = dataset.getYValue( series, item ); uvalue = lvalue;  =>   uvalue = lvalue;
SDL_237:446:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): lvalue = dataset.getYValue( series, item ); uvalue = lvalue;  =>   lvalue = dataset.getYValue( series, item );
SDL_238:450:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): minimum = Math.min( minimum, lvalue );  =>  
SDL_239:452:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue ); }  =>   if (true) {     minimum = Math.min( minimum, lvalue ); }
SDL_240:453:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): maximum = Math.max( maximum, uvalue );  =>  
SDL_241:455:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): if (!Double.isNaN( uvalue )) {     maximum = Math.max( maximum, uvalue ); }  =>   if (true) {     maximum = Math.max( maximum, uvalue ); }
SDL_242:462:org.jfree.data.Range_iterateXYRangeBounds(org.jfree.data.xy.XYDataset): if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }  =>   if (true) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }
SDL_243:495:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } java.lang.Number result = null; if (dataset instanceof org.jfree.data.DomainInfo) {     org.jfree.data.DomainInfo info = (org.jfree.data.DomainInfo) dataset;     return new java.lang.Double( info.getDomainLowerBound( true ) ); } else {     double minimum = Double.POSITIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getStartXValue( series, item );             } else {                 value = dataset.getXValue( series, item );             }             if (!Double.isNaN( value )) {                 minimum = Math.min( minimum, value );             }         }     }     if (minimum == Double.POSITIVE_INFINITY) {         result = null;     } else {         result = new java.lang.Double( minimum );     } } return result;  =>   java.lang.Number result = null; if (dataset instanceof org.jfree.data.DomainInfo) {     org.jfree.data.DomainInfo info = (org.jfree.data.DomainInfo) dataset;     return new java.lang.Double( info.getDomainLowerBound( true ) ); } else {     double minimum = Double.POSITIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getStartXValue( series, item );             } else {                 value = dataset.getXValue( series, item );             }             if (!Double.isNaN( value )) {                 minimum = Math.min( minimum, value );             }         }     }     if (minimum == Double.POSITIVE_INFINITY) {         result = null;     } else {         result = new java.lang.Double( minimum );     } } return result;
SDL_244:471:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } java.lang.Number result = null; if (dataset instanceof org.jfree.data.DomainInfo) {     org.jfree.data.DomainInfo info = (org.jfree.data.DomainInfo) dataset;     return new java.lang.Double( info.getDomainLowerBound( true ) ); } else {     double minimum = Double.POSITIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getStartXValue( series, item );             } else {                 value = dataset.getXValue( series, item );             }             if (!Double.isNaN( value )) {                 minimum = Math.min( minimum, value );             }         }     }     if (minimum == Double.POSITIVE_INFINITY) {         result = null;     } else {         result = new java.lang.Double( minimum );     } } return result;  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } java.lang.Number result = null; return result;
SDL_245:467:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_246:469:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_247:497:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): if (dataset instanceof org.jfree.data.DomainInfo) {     org.jfree.data.DomainInfo info = (org.jfree.data.DomainInfo) dataset;     return new java.lang.Double( info.getDomainLowerBound( true ) ); } else {     double minimum = Double.POSITIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getStartXValue( series, item );             } else {                 value = dataset.getXValue( series, item );             }             if (!Double.isNaN( value )) {                 minimum = Math.min( minimum, value );             }         }     }     if (minimum == Double.POSITIVE_INFINITY) {         result = null;     } else {         result = new java.lang.Double( minimum );     } }  =>   if (true) {     org.jfree.data.DomainInfo info = (org.jfree.data.DomainInfo) dataset;     return new java.lang.Double( info.getDomainLowerBound( true ) ); } else {     double minimum = Double.POSITIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getStartXValue( series, item );             } else {                 value = dataset.getXValue( series, item );             }             if (!Double.isNaN( value )) {                 minimum = Math.min( minimum, value );             }         }     }     if (minimum == Double.POSITIVE_INFINITY) {         result = null;     } else {         result = new java.lang.Double( minimum );     } }
SDL_248:481:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): double minimum = Double.POSITIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getStartXValue( series, item );         } else {             value = dataset.getXValue( series, item );         }         if (!Double.isNaN( value )) {             minimum = Math.min( minimum, value );         }     } } if (minimum == Double.POSITIVE_INFINITY) {     result = null; } else {     result = new java.lang.Double( minimum ); }  =>   double minimum = Double.POSITIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); if (minimum == Double.POSITIVE_INFINITY) {     result = null; } else {     result = new java.lang.Double( minimum ); }
SDL_249:491:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): double minimum = Double.POSITIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getStartXValue( series, item );         } else {             value = dataset.getXValue( series, item );         }         if (!Double.isNaN( value )) {             minimum = Math.min( minimum, value );         }     } } if (minimum == Double.POSITIVE_INFINITY) {     result = null; } else {     result = new java.lang.Double( minimum ); }  =>   double minimum = Double.POSITIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getStartXValue( series, item );         } else {             value = dataset.getXValue( series, item );         }         if (!Double.isNaN( value )) {             minimum = Math.min( minimum, value );         }     } }
SDL_250:478:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): int itemCount = dataset.getItemCount( series ); for (int item = 0; item < itemCount; item++) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getStartXValue( series, item );     } else {         value = dataset.getXValue( series, item );     }     if (!Double.isNaN( value )) {         minimum = Math.min( minimum, value );     } }  =>   int itemCount = dataset.getItemCount( series );
SDL_251:491:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getStartXValue( series, item );         } else {             value = dataset.getXValue( series, item );         }         if (!Double.isNaN( value )) {             minimum = Math.min( minimum, value );         }     } }  =>   for (int series = 0;; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getStartXValue( series, item );         } else {             value = dataset.getXValue( series, item );         }         if (!Double.isNaN( value )) {             minimum = Math.min( minimum, value );         }     } }
SDL_252:491:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getStartXValue( series, item );         } else {             value = dataset.getXValue( series, item );         }         if (!Double.isNaN( value )) {             minimum = Math.min( minimum, value );         }     } }  =>   for (int series = 0; series < seriesCount;) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getStartXValue( series, item );         } else {             value = dataset.getXValue( series, item );         }         if (!Double.isNaN( value )) {             minimum = Math.min( minimum, value );         }     } }
SDL_253:483:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): double value; if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getStartXValue( series, item ); } else {     value = dataset.getXValue( series, item ); } if (!Double.isNaN( value )) {     minimum = Math.min( minimum, value ); }  =>   double value; if (!Double.isNaN( value )) {     minimum = Math.min( minimum, value ); }
SDL_254:486:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): double value; if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getStartXValue( series, item ); } else {     value = dataset.getXValue( series, item ); } if (!Double.isNaN( value )) {     minimum = Math.min( minimum, value ); }  =>   double value; if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getStartXValue( series, item ); } else {     value = dataset.getXValue( series, item ); }
SDL_255:490:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): for (int item = 0; item < itemCount; item++) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getStartXValue( series, item );     } else {         value = dataset.getXValue( series, item );     }     if (!Double.isNaN( value )) {         minimum = Math.min( minimum, value );     } }  =>   for (int item = 0;; item++) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getStartXValue( series, item );     } else {         value = dataset.getXValue( series, item );     }     if (!Double.isNaN( value )) {         minimum = Math.min( minimum, value );     } }
SDL_256:490:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): for (int item = 0; item < itemCount; item++) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getStartXValue( series, item );     } else {         value = dataset.getXValue( series, item );     }     if (!Double.isNaN( value )) {         minimum = Math.min( minimum, value );     } }  =>   for (int item = 0; item < itemCount;) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getStartXValue( series, item );     } else {         value = dataset.getXValue( series, item );     }     if (!Double.isNaN( value )) {         minimum = Math.min( minimum, value );     } }
SDL_257:482:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset; value = intervalXYData.getStartXValue( series, item );  =>   org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;
SDL_258:486:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getStartXValue( series, item ); } else {     value = dataset.getXValue( series, item ); }  =>   if (true) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getStartXValue( series, item ); } else {     value = dataset.getXValue( series, item ); }
SDL_259:484:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): value = dataset.getXValue( series, item );  =>  
SDL_260:487:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): minimum = Math.min( minimum, value );  =>  
SDL_261:489:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): if (!Double.isNaN( value )) {     minimum = Math.min( minimum, value ); }  =>   if (true) {     minimum = Math.min( minimum, value ); }
SDL_262:492:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): result = null;  =>  
SDL_263:496:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): if (minimum == Double.POSITIVE_INFINITY) {     result = null; } else {     result = new java.lang.Double( minimum ); }  =>   if (true) {     result = null; } else {     result = new java.lang.Double( minimum ); }
SDL_264:494:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): result = new java.lang.Double( minimum );  =>  
SDL_265:531:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } java.lang.Number result = null; if (dataset instanceof org.jfree.data.DomainInfo) {     org.jfree.data.DomainInfo info = (org.jfree.data.DomainInfo) dataset;     return new java.lang.Double( info.getDomainUpperBound( true ) ); } else {     double maximum = Double.NEGATIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getEndXValue( series, item );             } else {                 value = dataset.getXValue( series, item );             }             if (!Double.isNaN( value )) {                 maximum = Math.max( maximum, value );             }         }     }     if (maximum == Double.NEGATIVE_INFINITY) {         result = null;     } else {         result = new java.lang.Double( maximum );     } } return result;  =>   java.lang.Number result = null; if (dataset instanceof org.jfree.data.DomainInfo) {     org.jfree.data.DomainInfo info = (org.jfree.data.DomainInfo) dataset;     return new java.lang.Double( info.getDomainUpperBound( true ) ); } else {     double maximum = Double.NEGATIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getEndXValue( series, item );             } else {                 value = dataset.getXValue( series, item );             }             if (!Double.isNaN( value )) {                 maximum = Math.max( maximum, value );             }         }     }     if (maximum == Double.NEGATIVE_INFINITY) {         result = null;     } else {         result = new java.lang.Double( maximum );     } } return result;
SDL_266:507:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } java.lang.Number result = null; if (dataset instanceof org.jfree.data.DomainInfo) {     org.jfree.data.DomainInfo info = (org.jfree.data.DomainInfo) dataset;     return new java.lang.Double( info.getDomainUpperBound( true ) ); } else {     double maximum = Double.NEGATIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getEndXValue( series, item );             } else {                 value = dataset.getXValue( series, item );             }             if (!Double.isNaN( value )) {                 maximum = Math.max( maximum, value );             }         }     }     if (maximum == Double.NEGATIVE_INFINITY) {         result = null;     } else {         result = new java.lang.Double( maximum );     } } return result;  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } java.lang.Number result = null; return result;
SDL_267:503:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_268:505:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_269:533:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): if (dataset instanceof org.jfree.data.DomainInfo) {     org.jfree.data.DomainInfo info = (org.jfree.data.DomainInfo) dataset;     return new java.lang.Double( info.getDomainUpperBound( true ) ); } else {     double maximum = Double.NEGATIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getEndXValue( series, item );             } else {                 value = dataset.getXValue( series, item );             }             if (!Double.isNaN( value )) {                 maximum = Math.max( maximum, value );             }         }     }     if (maximum == Double.NEGATIVE_INFINITY) {         result = null;     } else {         result = new java.lang.Double( maximum );     } }  =>   if (true) {     org.jfree.data.DomainInfo info = (org.jfree.data.DomainInfo) dataset;     return new java.lang.Double( info.getDomainUpperBound( true ) ); } else {     double maximum = Double.NEGATIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getEndXValue( series, item );             } else {                 value = dataset.getXValue( series, item );             }             if (!Double.isNaN( value )) {                 maximum = Math.max( maximum, value );             }         }     }     if (maximum == Double.NEGATIVE_INFINITY) {         result = null;     } else {         result = new java.lang.Double( maximum );     } }
SDL_270:517:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getEndXValue( series, item );         } else {             value = dataset.getXValue( series, item );         }         if (!Double.isNaN( value )) {             maximum = Math.max( maximum, value );         }     } } if (maximum == Double.NEGATIVE_INFINITY) {     result = null; } else {     result = new java.lang.Double( maximum ); }  =>   double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); if (maximum == Double.NEGATIVE_INFINITY) {     result = null; } else {     result = new java.lang.Double( maximum ); }
SDL_271:527:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getEndXValue( series, item );         } else {             value = dataset.getXValue( series, item );         }         if (!Double.isNaN( value )) {             maximum = Math.max( maximum, value );         }     } } if (maximum == Double.NEGATIVE_INFINITY) {     result = null; } else {     result = new java.lang.Double( maximum ); }  =>   double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getEndXValue( series, item );         } else {             value = dataset.getXValue( series, item );         }         if (!Double.isNaN( value )) {             maximum = Math.max( maximum, value );         }     } }
SDL_272:514:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): int itemCount = dataset.getItemCount( series ); for (int item = 0; item < itemCount; item++) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getEndXValue( series, item );     } else {         value = dataset.getXValue( series, item );     }     if (!Double.isNaN( value )) {         maximum = Math.max( maximum, value );     } }  =>   int itemCount = dataset.getItemCount( series );
SDL_273:527:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getEndXValue( series, item );         } else {             value = dataset.getXValue( series, item );         }         if (!Double.isNaN( value )) {             maximum = Math.max( maximum, value );         }     } }  =>   for (int series = 0;; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getEndXValue( series, item );         } else {             value = dataset.getXValue( series, item );         }         if (!Double.isNaN( value )) {             maximum = Math.max( maximum, value );         }     } }
SDL_274:527:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getEndXValue( series, item );         } else {             value = dataset.getXValue( series, item );         }         if (!Double.isNaN( value )) {             maximum = Math.max( maximum, value );         }     } }  =>   for (int series = 0; series < seriesCount;) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getEndXValue( series, item );         } else {             value = dataset.getXValue( series, item );         }         if (!Double.isNaN( value )) {             maximum = Math.max( maximum, value );         }     } }
SDL_275:519:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): double value; if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getEndXValue( series, item ); } else {     value = dataset.getXValue( series, item ); } if (!Double.isNaN( value )) {     maximum = Math.max( maximum, value ); }  =>   double value; if (!Double.isNaN( value )) {     maximum = Math.max( maximum, value ); }
SDL_276:522:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): double value; if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getEndXValue( series, item ); } else {     value = dataset.getXValue( series, item ); } if (!Double.isNaN( value )) {     maximum = Math.max( maximum, value ); }  =>   double value; if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getEndXValue( series, item ); } else {     value = dataset.getXValue( series, item ); }
SDL_277:526:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): for (int item = 0; item < itemCount; item++) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getEndXValue( series, item );     } else {         value = dataset.getXValue( series, item );     }     if (!Double.isNaN( value )) {         maximum = Math.max( maximum, value );     } }  =>   for (int item = 0;; item++) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getEndXValue( series, item );     } else {         value = dataset.getXValue( series, item );     }     if (!Double.isNaN( value )) {         maximum = Math.max( maximum, value );     } }
SDL_278:526:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): for (int item = 0; item < itemCount; item++) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getEndXValue( series, item );     } else {         value = dataset.getXValue( series, item );     }     if (!Double.isNaN( value )) {         maximum = Math.max( maximum, value );     } }  =>   for (int item = 0; item < itemCount;) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getEndXValue( series, item );     } else {         value = dataset.getXValue( series, item );     }     if (!Double.isNaN( value )) {         maximum = Math.max( maximum, value );     } }
SDL_279:518:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset; value = intervalXYData.getEndXValue( series, item );  =>   org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;
SDL_280:522:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getEndXValue( series, item ); } else {     value = dataset.getXValue( series, item ); }  =>   if (true) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getEndXValue( series, item ); } else {     value = dataset.getXValue( series, item ); }
SDL_281:520:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): value = dataset.getXValue( series, item );  =>  
SDL_282:523:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): maximum = Math.max( maximum, value );  =>  
SDL_283:525:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): if (!Double.isNaN( value )) {     maximum = Math.max( maximum, value ); }  =>   if (true) {     maximum = Math.max( maximum, value ); }
SDL_284:528:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): result = null;  =>  
SDL_285:532:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): if (maximum == Double.NEGATIVE_INFINITY) {     result = null; } else {     result = new java.lang.Double( maximum ); }  =>   if (true) {     result = null; } else {     result = new java.lang.Double( maximum ); }
SDL_286:530:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): result = new java.lang.Double( maximum );  =>  
SDL_287:565:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeLowerBound( true ) ); } else {     double minimum = Double.POSITIVE_INFINITY;     int seriesCount = dataset.getRowCount();     int itemCount = dataset.getColumnCount();     for (int series = 0; series < seriesCount; series++) {         for (int item = 0; item < itemCount; item++) {             java.lang.Number value;             if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {                 org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;                 value = icd.getStartValue( series, item );             } else {                 value = dataset.getValue( series, item );             }             if (value != null) {                 minimum = Math.min( minimum, value.doubleValue() );             }         }     }     if (minimum == Double.POSITIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( minimum );     } }  =>   if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeLowerBound( true ) ); } else {     double minimum = Double.POSITIVE_INFINITY;     int seriesCount = dataset.getRowCount();     int itemCount = dataset.getColumnCount();     for (int series = 0; series < seriesCount; series++) {         for (int item = 0; item < itemCount; item++) {             java.lang.Number value;             if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {                 org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;                 value = icd.getStartValue( series, item );             } else {                 value = dataset.getValue( series, item );             }             if (value != null) {                 minimum = Math.min( minimum, value.doubleValue() );             }         }     }     if (minimum == Double.POSITIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( minimum );     } }
SDL_288:541:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeLowerBound( true ) ); } else {     double minimum = Double.POSITIVE_INFINITY;     int seriesCount = dataset.getRowCount();     int itemCount = dataset.getColumnCount();     for (int series = 0; series < seriesCount; series++) {         for (int item = 0; item < itemCount; item++) {             java.lang.Number value;             if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {                 org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;                 value = icd.getStartValue( series, item );             } else {                 value = dataset.getValue( series, item );             }             if (value != null) {                 minimum = Math.min( minimum, value.doubleValue() );             }         }     }     if (minimum == Double.POSITIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( minimum );     } }  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_289:539:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_290:541:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_291:568:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeLowerBound( true ) ); } else {     double minimum = Double.POSITIVE_INFINITY;     int seriesCount = dataset.getRowCount();     int itemCount = dataset.getColumnCount();     for (int series = 0; series < seriesCount; series++) {         for (int item = 0; item < itemCount; item++) {             java.lang.Number value;             if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {                 org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;                 value = icd.getStartValue( series, item );             } else {                 value = dataset.getValue( series, item );             }             if (value != null) {                 minimum = Math.min( minimum, value.doubleValue() );             }         }     }     if (minimum == Double.POSITIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( minimum );     } }  =>   if (true) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeLowerBound( true ) ); } else {     double minimum = Double.POSITIVE_INFINITY;     int seriesCount = dataset.getRowCount();     int itemCount = dataset.getColumnCount();     for (int series = 0; series < seriesCount; series++) {         for (int item = 0; item < itemCount; item++) {             java.lang.Number value;             if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {                 org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;                 value = icd.getStartValue( series, item );             } else {                 value = dataset.getValue( series, item );             }             if (value != null) {                 minimum = Math.min( minimum, value.doubleValue() );             }         }     }     if (minimum == Double.POSITIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( minimum );     } }
SDL_292:553:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): double minimum = Double.POSITIVE_INFINITY; int seriesCount = dataset.getRowCount(); int itemCount = dataset.getColumnCount(); for (int series = 0; series < seriesCount; series++) {     for (int item = 0; item < itemCount; item++) {         java.lang.Number value;         if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {             org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;             value = icd.getStartValue( series, item );         } else {             value = dataset.getValue( series, item );         }         if (value != null) {             minimum = Math.min( minimum, value.doubleValue() );         }     } } if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new java.lang.Double( minimum ); }  =>   double minimum = Double.POSITIVE_INFINITY; int seriesCount = dataset.getRowCount(); int itemCount = dataset.getColumnCount(); if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new java.lang.Double( minimum ); }
SDL_293:562:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): double minimum = Double.POSITIVE_INFINITY; int seriesCount = dataset.getRowCount(); int itemCount = dataset.getColumnCount(); for (int series = 0; series < seriesCount; series++) {     for (int item = 0; item < itemCount; item++) {         java.lang.Number value;         if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {             org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;             value = icd.getStartValue( series, item );         } else {             value = dataset.getValue( series, item );         }         if (value != null) {             minimum = Math.min( minimum, value.doubleValue() );         }     } } if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new java.lang.Double( minimum ); }  =>   double minimum = Double.POSITIVE_INFINITY; int seriesCount = dataset.getRowCount(); int itemCount = dataset.getColumnCount(); for (int series = 0; series < seriesCount; series++) {     for (int item = 0; item < itemCount; item++) {         java.lang.Number value;         if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {             org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;             value = icd.getStartValue( series, item );         } else {             value = dataset.getValue( series, item );         }         if (value != null) {             minimum = Math.min( minimum, value.doubleValue() );         }     } }
SDL_294:549:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): for (int item = 0; item < itemCount; item++) {     java.lang.Number value;     if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {         org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;         value = icd.getStartValue( series, item );     } else {         value = dataset.getValue( series, item );     }     if (value != null) {         minimum = Math.min( minimum, value.doubleValue() );     } }  =>  
SDL_295:562:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): for (int series = 0; series < seriesCount; series++) {     for (int item = 0; item < itemCount; item++) {         java.lang.Number value;         if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {             org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;             value = icd.getStartValue( series, item );         } else {             value = dataset.getValue( series, item );         }         if (value != null) {             minimum = Math.min( minimum, value.doubleValue() );         }     } }  =>   for (int series = 0;; series++) {     for (int item = 0; item < itemCount; item++) {         java.lang.Number value;         if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {             org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;             value = icd.getStartValue( series, item );         } else {             value = dataset.getValue( series, item );         }         if (value != null) {             minimum = Math.min( minimum, value.doubleValue() );         }     } }
SDL_296:562:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): for (int series = 0; series < seriesCount; series++) {     for (int item = 0; item < itemCount; item++) {         java.lang.Number value;         if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {             org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;             value = icd.getStartValue( series, item );         } else {             value = dataset.getValue( series, item );         }         if (value != null) {             minimum = Math.min( minimum, value.doubleValue() );         }     } }  =>   for (int series = 0; series < seriesCount;) {     for (int item = 0; item < itemCount; item++) {         java.lang.Number value;         if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {             org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;             value = icd.getStartValue( series, item );         } else {             value = dataset.getValue( series, item );         }         if (value != null) {             minimum = Math.min( minimum, value.doubleValue() );         }     } }
SDL_297:554:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): java.lang.Number value; if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {     org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;     value = icd.getStartValue( series, item ); } else {     value = dataset.getValue( series, item ); } if (value != null) {     minimum = Math.min( minimum, value.doubleValue() ); }  =>   java.lang.Number value; if (value != null) {     minimum = Math.min( minimum, value.doubleValue() ); }
SDL_298:557:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): java.lang.Number value; if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {     org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;     value = icd.getStartValue( series, item ); } else {     value = dataset.getValue( series, item ); } if (value != null) {     minimum = Math.min( minimum, value.doubleValue() ); }  =>   java.lang.Number value; if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {     org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;     value = icd.getStartValue( series, item ); } else {     value = dataset.getValue( series, item ); }
SDL_299:561:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): for (int item = 0; item < itemCount; item++) {     java.lang.Number value;     if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {         org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;         value = icd.getStartValue( series, item );     } else {         value = dataset.getValue( series, item );     }     if (value != null) {         minimum = Math.min( minimum, value.doubleValue() );     } }  =>   for (int item = 0;; item++) {     java.lang.Number value;     if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {         org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;         value = icd.getStartValue( series, item );     } else {         value = dataset.getValue( series, item );     }     if (value != null) {         minimum = Math.min( minimum, value.doubleValue() );     } }
SDL_300:561:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): for (int item = 0; item < itemCount; item++) {     java.lang.Number value;     if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {         org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;         value = icd.getStartValue( series, item );     } else {         value = dataset.getValue( series, item );     }     if (value != null) {         minimum = Math.min( minimum, value.doubleValue() );     } }  =>   for (int item = 0; item < itemCount;) {     java.lang.Number value;     if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {         org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;         value = icd.getStartValue( series, item );     } else {         value = dataset.getValue( series, item );     }     if (value != null) {         minimum = Math.min( minimum, value.doubleValue() );     } }
SDL_301:553:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset; value = icd.getStartValue( series, item );  =>   org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;
SDL_302:557:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {     org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;     value = icd.getStartValue( series, item ); } else {     value = dataset.getValue( series, item ); }  =>   if (true) {     org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;     value = icd.getStartValue( series, item ); } else {     value = dataset.getValue( series, item ); }
SDL_303:555:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): value = dataset.getValue( series, item );  =>  
SDL_304:558:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): minimum = Math.min( minimum, value.doubleValue() );  =>  
SDL_305:560:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): if (value != null) {     minimum = Math.min( minimum, value.doubleValue() ); }  =>   if (true) {     minimum = Math.min( minimum, value.doubleValue() ); }
SDL_306:567:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new java.lang.Double( minimum ); }  =>   if (true) {     return null; } else {     return new java.lang.Double( minimum ); }
SDL_307:604:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeLowerBound( true ) ); } else {     double minimum = Double.POSITIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getStartYValue( series, item );             } else {                 if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                     org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                     value = highLowData.getLowValue( series, item );                 } else {                     value = dataset.getYValue( series, item );                 }             }             if (!Double.isNaN( value )) {                 minimum = Math.min( minimum, value );             }         }     }     if (minimum == Double.POSITIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( minimum );     } }  =>   if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeLowerBound( true ) ); } else {     double minimum = Double.POSITIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getStartYValue( series, item );             } else {                 if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                     org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                     value = highLowData.getLowValue( series, item );                 } else {                     value = dataset.getYValue( series, item );                 }             }             if (!Double.isNaN( value )) {                 minimum = Math.min( minimum, value );             }         }     }     if (minimum == Double.POSITIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( minimum );     } }
SDL_308:575:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeLowerBound( true ) ); } else {     double minimum = Double.POSITIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getStartYValue( series, item );             } else {                 if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                     org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                     value = highLowData.getLowValue( series, item );                 } else {                     value = dataset.getYValue( series, item );                 }             }             if (!Double.isNaN( value )) {                 minimum = Math.min( minimum, value );             }         }     }     if (minimum == Double.POSITIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( minimum );     } }  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_309:573:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_310:575:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_311:607:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeLowerBound( true ) ); } else {     double minimum = Double.POSITIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getStartYValue( series, item );             } else {                 if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                     org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                     value = highLowData.getLowValue( series, item );                 } else {                     value = dataset.getYValue( series, item );                 }             }             if (!Double.isNaN( value )) {                 minimum = Math.min( minimum, value );             }         }     }     if (minimum == Double.POSITIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( minimum );     } }  =>   if (true) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeLowerBound( true ) ); } else {     double minimum = Double.POSITIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getStartYValue( series, item );             } else {                 if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                     org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                     value = highLowData.getLowValue( series, item );                 } else {                     value = dataset.getYValue( series, item );                 }             }             if (!Double.isNaN( value )) {                 minimum = Math.min( minimum, value );             }         }     }     if (minimum == Double.POSITIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( minimum );     } }
SDL_312:586:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): double minimum = Double.POSITIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getStartYValue( series, item );         } else {             if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                 org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                 value = highLowData.getLowValue( series, item );             } else {                 value = dataset.getYValue( series, item );             }         }         if (!Double.isNaN( value )) {             minimum = Math.min( minimum, value );         }     } } if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new java.lang.Double( minimum ); }  =>   double minimum = Double.POSITIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new java.lang.Double( minimum ); }
SDL_313:601:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): double minimum = Double.POSITIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getStartYValue( series, item );         } else {             if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                 org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                 value = highLowData.getLowValue( series, item );             } else {                 value = dataset.getYValue( series, item );             }         }         if (!Double.isNaN( value )) {             minimum = Math.min( minimum, value );         }     } } if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new java.lang.Double( minimum ); }  =>   double minimum = Double.POSITIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getStartYValue( series, item );         } else {             if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                 org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                 value = highLowData.getLowValue( series, item );             } else {                 value = dataset.getYValue( series, item );             }         }         if (!Double.isNaN( value )) {             minimum = Math.min( minimum, value );         }     } }
SDL_314:583:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): int itemCount = dataset.getItemCount( series ); for (int item = 0; item < itemCount; item++) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getStartYValue( series, item );     } else {         if (dataset instanceof org.jfree.data.xy.OHLCDataset) {             org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;             value = highLowData.getLowValue( series, item );         } else {             value = dataset.getYValue( series, item );         }     }     if (!Double.isNaN( value )) {         minimum = Math.min( minimum, value );     } }  =>   int itemCount = dataset.getItemCount( series );
SDL_315:601:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getStartYValue( series, item );         } else {             if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                 org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                 value = highLowData.getLowValue( series, item );             } else {                 value = dataset.getYValue( series, item );             }         }         if (!Double.isNaN( value )) {             minimum = Math.min( minimum, value );         }     } }  =>   for (int series = 0;; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getStartYValue( series, item );         } else {             if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                 org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                 value = highLowData.getLowValue( series, item );             } else {                 value = dataset.getYValue( series, item );             }         }         if (!Double.isNaN( value )) {             minimum = Math.min( minimum, value );         }     } }
SDL_316:601:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getStartYValue( series, item );         } else {             if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                 org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                 value = highLowData.getLowValue( series, item );             } else {                 value = dataset.getYValue( series, item );             }         }         if (!Double.isNaN( value )) {             minimum = Math.min( minimum, value );         }     } }  =>   for (int series = 0; series < seriesCount;) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getStartYValue( series, item );         } else {             if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                 org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                 value = highLowData.getLowValue( series, item );             } else {                 value = dataset.getYValue( series, item );             }         }         if (!Double.isNaN( value )) {             minimum = Math.min( minimum, value );         }     } }
SDL_317:588:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): double value; if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getStartYValue( series, item ); } else {     if (dataset instanceof org.jfree.data.xy.OHLCDataset) {         org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;         value = highLowData.getLowValue( series, item );     } else {         value = dataset.getYValue( series, item );     } } if (!Double.isNaN( value )) {     minimum = Math.min( minimum, value ); }  =>   double value; if (!Double.isNaN( value )) {     minimum = Math.min( minimum, value ); }
SDL_318:596:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): double value; if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getStartYValue( series, item ); } else {     if (dataset instanceof org.jfree.data.xy.OHLCDataset) {         org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;         value = highLowData.getLowValue( series, item );     } else {         value = dataset.getYValue( series, item );     } } if (!Double.isNaN( value )) {     minimum = Math.min( minimum, value ); }  =>   double value; if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getStartYValue( series, item ); } else {     if (dataset instanceof org.jfree.data.xy.OHLCDataset) {         org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;         value = highLowData.getLowValue( series, item );     } else {         value = dataset.getYValue( series, item );     } }
SDL_319:600:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): for (int item = 0; item < itemCount; item++) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getStartYValue( series, item );     } else {         if (dataset instanceof org.jfree.data.xy.OHLCDataset) {             org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;             value = highLowData.getLowValue( series, item );         } else {             value = dataset.getYValue( series, item );         }     }     if (!Double.isNaN( value )) {         minimum = Math.min( minimum, value );     } }  =>   for (int item = 0;; item++) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getStartYValue( series, item );     } else {         if (dataset instanceof org.jfree.data.xy.OHLCDataset) {             org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;             value = highLowData.getLowValue( series, item );         } else {             value = dataset.getYValue( series, item );         }     }     if (!Double.isNaN( value )) {         minimum = Math.min( minimum, value );     } }
SDL_320:600:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): for (int item = 0; item < itemCount; item++) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getStartYValue( series, item );     } else {         if (dataset instanceof org.jfree.data.xy.OHLCDataset) {             org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;             value = highLowData.getLowValue( series, item );         } else {             value = dataset.getYValue( series, item );         }     }     if (!Double.isNaN( value )) {         minimum = Math.min( minimum, value );     } }  =>   for (int item = 0; item < itemCount;) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getStartYValue( series, item );     } else {         if (dataset instanceof org.jfree.data.xy.OHLCDataset) {             org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;             value = highLowData.getLowValue( series, item );         } else {             value = dataset.getYValue( series, item );         }     }     if (!Double.isNaN( value )) {         minimum = Math.min( minimum, value );     } }
SDL_321:587:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset; value = intervalXYData.getStartYValue( series, item );  =>   org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;
SDL_322:596:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getStartYValue( series, item ); } else {     if (dataset instanceof org.jfree.data.xy.OHLCDataset) {         org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;         value = highLowData.getLowValue( series, item );     } else {         value = dataset.getYValue( series, item );     } }  =>   if (true) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getStartYValue( series, item ); } else {     if (dataset instanceof org.jfree.data.xy.OHLCDataset) {         org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;         value = highLowData.getLowValue( series, item );     } else {         value = dataset.getYValue( series, item );     } }
SDL_323:589:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): if (dataset instanceof org.jfree.data.xy.OHLCDataset) {     org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;     value = highLowData.getLowValue( series, item ); } else {     value = dataset.getYValue( series, item ); }  =>  
SDL_324:591:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset; value = highLowData.getLowValue( series, item );  =>   org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;
SDL_325:595:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): if (dataset instanceof org.jfree.data.xy.OHLCDataset) {     org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;     value = highLowData.getLowValue( series, item ); } else {     value = dataset.getYValue( series, item ); }  =>   if (true) {     org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;     value = highLowData.getLowValue( series, item ); } else {     value = dataset.getYValue( series, item ); }
SDL_326:593:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): value = dataset.getYValue( series, item );  =>  
SDL_327:597:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): minimum = Math.min( minimum, value );  =>  
SDL_328:599:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): if (!Double.isNaN( value )) {     minimum = Math.min( minimum, value ); }  =>   if (true) {     minimum = Math.min( minimum, value ); }
SDL_329:606:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new java.lang.Double( minimum ); }  =>   if (true) {     return null; } else {     return new java.lang.Double( minimum ); }
SDL_330:638:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeUpperBound( true ) ); } else {     double maximum = Double.NEGATIVE_INFINITY;     int seriesCount = dataset.getRowCount();     int itemCount = dataset.getColumnCount();     for (int series = 0; series < seriesCount; series++) {         for (int item = 0; item < itemCount; item++) {             java.lang.Number value;             if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {                 org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;                 value = icd.getEndValue( series, item );             } else {                 value = dataset.getValue( series, item );             }             if (value != null) {                 maximum = Math.max( maximum, value.doubleValue() );             }         }     }     if (maximum == Double.NEGATIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( maximum );     } }  =>   if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeUpperBound( true ) ); } else {     double maximum = Double.NEGATIVE_INFINITY;     int seriesCount = dataset.getRowCount();     int itemCount = dataset.getColumnCount();     for (int series = 0; series < seriesCount; series++) {         for (int item = 0; item < itemCount; item++) {             java.lang.Number value;             if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {                 org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;                 value = icd.getEndValue( series, item );             } else {                 value = dataset.getValue( series, item );             }             if (value != null) {                 maximum = Math.max( maximum, value.doubleValue() );             }         }     }     if (maximum == Double.NEGATIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( maximum );     } }
SDL_331:614:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeUpperBound( true ) ); } else {     double maximum = Double.NEGATIVE_INFINITY;     int seriesCount = dataset.getRowCount();     int itemCount = dataset.getColumnCount();     for (int series = 0; series < seriesCount; series++) {         for (int item = 0; item < itemCount; item++) {             java.lang.Number value;             if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {                 org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;                 value = icd.getEndValue( series, item );             } else {                 value = dataset.getValue( series, item );             }             if (value != null) {                 maximum = Math.max( maximum, value.doubleValue() );             }         }     }     if (maximum == Double.NEGATIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( maximum );     } }  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_332:612:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_333:614:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_334:641:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeUpperBound( true ) ); } else {     double maximum = Double.NEGATIVE_INFINITY;     int seriesCount = dataset.getRowCount();     int itemCount = dataset.getColumnCount();     for (int series = 0; series < seriesCount; series++) {         for (int item = 0; item < itemCount; item++) {             java.lang.Number value;             if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {                 org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;                 value = icd.getEndValue( series, item );             } else {                 value = dataset.getValue( series, item );             }             if (value != null) {                 maximum = Math.max( maximum, value.doubleValue() );             }         }     }     if (maximum == Double.NEGATIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( maximum );     } }  =>   if (true) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeUpperBound( true ) ); } else {     double maximum = Double.NEGATIVE_INFINITY;     int seriesCount = dataset.getRowCount();     int itemCount = dataset.getColumnCount();     for (int series = 0; series < seriesCount; series++) {         for (int item = 0; item < itemCount; item++) {             java.lang.Number value;             if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {                 org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;                 value = icd.getEndValue( series, item );             } else {                 value = dataset.getValue( series, item );             }             if (value != null) {                 maximum = Math.max( maximum, value.doubleValue() );             }         }     }     if (maximum == Double.NEGATIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( maximum );     } }
SDL_335:626:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getRowCount(); int itemCount = dataset.getColumnCount(); for (int series = 0; series < seriesCount; series++) {     for (int item = 0; item < itemCount; item++) {         java.lang.Number value;         if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {             org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;             value = icd.getEndValue( series, item );         } else {             value = dataset.getValue( series, item );         }         if (value != null) {             maximum = Math.max( maximum, value.doubleValue() );         }     } } if (maximum == Double.NEGATIVE_INFINITY) {     return null; } else {     return new java.lang.Double( maximum ); }  =>   double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getRowCount(); int itemCount = dataset.getColumnCount(); if (maximum == Double.NEGATIVE_INFINITY) {     return null; } else {     return new java.lang.Double( maximum ); }
SDL_336:635:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getRowCount(); int itemCount = dataset.getColumnCount(); for (int series = 0; series < seriesCount; series++) {     for (int item = 0; item < itemCount; item++) {         java.lang.Number value;         if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {             org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;             value = icd.getEndValue( series, item );         } else {             value = dataset.getValue( series, item );         }         if (value != null) {             maximum = Math.max( maximum, value.doubleValue() );         }     } } if (maximum == Double.NEGATIVE_INFINITY) {     return null; } else {     return new java.lang.Double( maximum ); }  =>   double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getRowCount(); int itemCount = dataset.getColumnCount(); for (int series = 0; series < seriesCount; series++) {     for (int item = 0; item < itemCount; item++) {         java.lang.Number value;         if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {             org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;             value = icd.getEndValue( series, item );         } else {             value = dataset.getValue( series, item );         }         if (value != null) {             maximum = Math.max( maximum, value.doubleValue() );         }     } }
SDL_337:622:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): for (int item = 0; item < itemCount; item++) {     java.lang.Number value;     if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {         org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;         value = icd.getEndValue( series, item );     } else {         value = dataset.getValue( series, item );     }     if (value != null) {         maximum = Math.max( maximum, value.doubleValue() );     } }  =>  
SDL_338:635:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): for (int series = 0; series < seriesCount; series++) {     for (int item = 0; item < itemCount; item++) {         java.lang.Number value;         if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {             org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;             value = icd.getEndValue( series, item );         } else {             value = dataset.getValue( series, item );         }         if (value != null) {             maximum = Math.max( maximum, value.doubleValue() );         }     } }  =>   for (int series = 0;; series++) {     for (int item = 0; item < itemCount; item++) {         java.lang.Number value;         if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {             org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;             value = icd.getEndValue( series, item );         } else {             value = dataset.getValue( series, item );         }         if (value != null) {             maximum = Math.max( maximum, value.doubleValue() );         }     } }
SDL_339:635:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): for (int series = 0; series < seriesCount; series++) {     for (int item = 0; item < itemCount; item++) {         java.lang.Number value;         if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {             org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;             value = icd.getEndValue( series, item );         } else {             value = dataset.getValue( series, item );         }         if (value != null) {             maximum = Math.max( maximum, value.doubleValue() );         }     } }  =>   for (int series = 0; series < seriesCount;) {     for (int item = 0; item < itemCount; item++) {         java.lang.Number value;         if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {             org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;             value = icd.getEndValue( series, item );         } else {             value = dataset.getValue( series, item );         }         if (value != null) {             maximum = Math.max( maximum, value.doubleValue() );         }     } }
SDL_340:627:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): java.lang.Number value; if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {     org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;     value = icd.getEndValue( series, item ); } else {     value = dataset.getValue( series, item ); } if (value != null) {     maximum = Math.max( maximum, value.doubleValue() ); }  =>   java.lang.Number value; if (value != null) {     maximum = Math.max( maximum, value.doubleValue() ); }
SDL_341:630:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): java.lang.Number value; if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {     org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;     value = icd.getEndValue( series, item ); } else {     value = dataset.getValue( series, item ); } if (value != null) {     maximum = Math.max( maximum, value.doubleValue() ); }  =>   java.lang.Number value; if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {     org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;     value = icd.getEndValue( series, item ); } else {     value = dataset.getValue( series, item ); }
SDL_342:634:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): for (int item = 0; item < itemCount; item++) {     java.lang.Number value;     if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {         org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;         value = icd.getEndValue( series, item );     } else {         value = dataset.getValue( series, item );     }     if (value != null) {         maximum = Math.max( maximum, value.doubleValue() );     } }  =>   for (int item = 0;; item++) {     java.lang.Number value;     if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {         org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;         value = icd.getEndValue( series, item );     } else {         value = dataset.getValue( series, item );     }     if (value != null) {         maximum = Math.max( maximum, value.doubleValue() );     } }
SDL_343:634:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): for (int item = 0; item < itemCount; item++) {     java.lang.Number value;     if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {         org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;         value = icd.getEndValue( series, item );     } else {         value = dataset.getValue( series, item );     }     if (value != null) {         maximum = Math.max( maximum, value.doubleValue() );     } }  =>   for (int item = 0; item < itemCount;) {     java.lang.Number value;     if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {         org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;         value = icd.getEndValue( series, item );     } else {         value = dataset.getValue( series, item );     }     if (value != null) {         maximum = Math.max( maximum, value.doubleValue() );     } }
SDL_344:626:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset; value = icd.getEndValue( series, item );  =>   org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;
SDL_345:630:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {     org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;     value = icd.getEndValue( series, item ); } else {     value = dataset.getValue( series, item ); }  =>   if (true) {     org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;     value = icd.getEndValue( series, item ); } else {     value = dataset.getValue( series, item ); }
SDL_346:628:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): value = dataset.getValue( series, item );  =>  
SDL_347:631:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): maximum = Math.max( maximum, value.doubleValue() );  =>  
SDL_348:633:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): if (value != null) {     maximum = Math.max( maximum, value.doubleValue() ); }  =>   if (true) {     maximum = Math.max( maximum, value.doubleValue() ); }
SDL_349:640:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): if (maximum == Double.NEGATIVE_INFINITY) {     return null; } else {     return new java.lang.Double( maximum ); }  =>   if (true) {     return null; } else {     return new java.lang.Double( maximum ); }
SDL_350:677:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeUpperBound( true ) ); } else {     double maximum = Double.NEGATIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getEndYValue( series, item );             } else {                 if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                     org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                     value = highLowData.getHighValue( series, item );                 } else {                     value = dataset.getYValue( series, item );                 }             }             if (!Double.isNaN( value )) {                 maximum = Math.max( maximum, value );             }         }     }     if (maximum == Double.NEGATIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( maximum );     } }  =>   if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeUpperBound( true ) ); } else {     double maximum = Double.NEGATIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getEndYValue( series, item );             } else {                 if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                     org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                     value = highLowData.getHighValue( series, item );                 } else {                     value = dataset.getYValue( series, item );                 }             }             if (!Double.isNaN( value )) {                 maximum = Math.max( maximum, value );             }         }     }     if (maximum == Double.NEGATIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( maximum );     } }
SDL_351:648:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeUpperBound( true ) ); } else {     double maximum = Double.NEGATIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getEndYValue( series, item );             } else {                 if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                     org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                     value = highLowData.getHighValue( series, item );                 } else {                     value = dataset.getYValue( series, item );                 }             }             if (!Double.isNaN( value )) {                 maximum = Math.max( maximum, value );             }         }     }     if (maximum == Double.NEGATIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( maximum );     } }  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_352:646:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_353:648:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_354:680:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeUpperBound( true ) ); } else {     double maximum = Double.NEGATIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getEndYValue( series, item );             } else {                 if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                     org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                     value = highLowData.getHighValue( series, item );                 } else {                     value = dataset.getYValue( series, item );                 }             }             if (!Double.isNaN( value )) {                 maximum = Math.max( maximum, value );             }         }     }     if (maximum == Double.NEGATIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( maximum );     } }  =>   if (true) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeUpperBound( true ) ); } else {     double maximum = Double.NEGATIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getEndYValue( series, item );             } else {                 if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                     org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                     value = highLowData.getHighValue( series, item );                 } else {                     value = dataset.getYValue( series, item );                 }             }             if (!Double.isNaN( value )) {                 maximum = Math.max( maximum, value );             }         }     }     if (maximum == Double.NEGATIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( maximum );     } }
SDL_355:659:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getEndYValue( series, item );         } else {             if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                 org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                 value = highLowData.getHighValue( series, item );             } else {                 value = dataset.getYValue( series, item );             }         }         if (!Double.isNaN( value )) {             maximum = Math.max( maximum, value );         }     } } if (maximum == Double.NEGATIVE_INFINITY) {     return null; } else {     return new java.lang.Double( maximum ); }  =>   double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); if (maximum == Double.NEGATIVE_INFINITY) {     return null; } else {     return new java.lang.Double( maximum ); }
SDL_356:674:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getEndYValue( series, item );         } else {             if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                 org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                 value = highLowData.getHighValue( series, item );             } else {                 value = dataset.getYValue( series, item );             }         }         if (!Double.isNaN( value )) {             maximum = Math.max( maximum, value );         }     } } if (maximum == Double.NEGATIVE_INFINITY) {     return null; } else {     return new java.lang.Double( maximum ); }  =>   double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getEndYValue( series, item );         } else {             if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                 org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                 value = highLowData.getHighValue( series, item );             } else {                 value = dataset.getYValue( series, item );             }         }         if (!Double.isNaN( value )) {             maximum = Math.max( maximum, value );         }     } }
SDL_357:656:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): int itemCount = dataset.getItemCount( series ); for (int item = 0; item < itemCount; item++) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getEndYValue( series, item );     } else {         if (dataset instanceof org.jfree.data.xy.OHLCDataset) {             org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;             value = highLowData.getHighValue( series, item );         } else {             value = dataset.getYValue( series, item );         }     }     if (!Double.isNaN( value )) {         maximum = Math.max( maximum, value );     } }  =>   int itemCount = dataset.getItemCount( series );
SDL_358:674:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getEndYValue( series, item );         } else {             if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                 org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                 value = highLowData.getHighValue( series, item );             } else {                 value = dataset.getYValue( series, item );             }         }         if (!Double.isNaN( value )) {             maximum = Math.max( maximum, value );         }     } }  =>   for (int series = 0;; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getEndYValue( series, item );         } else {             if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                 org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                 value = highLowData.getHighValue( series, item );             } else {                 value = dataset.getYValue( series, item );             }         }         if (!Double.isNaN( value )) {             maximum = Math.max( maximum, value );         }     } }
SDL_359:674:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getEndYValue( series, item );         } else {             if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                 org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                 value = highLowData.getHighValue( series, item );             } else {                 value = dataset.getYValue( series, item );             }         }         if (!Double.isNaN( value )) {             maximum = Math.max( maximum, value );         }     } }  =>   for (int series = 0; series < seriesCount;) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getEndYValue( series, item );         } else {             if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                 org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                 value = highLowData.getHighValue( series, item );             } else {                 value = dataset.getYValue( series, item );             }         }         if (!Double.isNaN( value )) {             maximum = Math.max( maximum, value );         }     } }
SDL_360:661:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): double value; if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getEndYValue( series, item ); } else {     if (dataset instanceof org.jfree.data.xy.OHLCDataset) {         org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;         value = highLowData.getHighValue( series, item );     } else {         value = dataset.getYValue( series, item );     } } if (!Double.isNaN( value )) {     maximum = Math.max( maximum, value ); }  =>   double value; if (!Double.isNaN( value )) {     maximum = Math.max( maximum, value ); }
SDL_361:669:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): double value; if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getEndYValue( series, item ); } else {     if (dataset instanceof org.jfree.data.xy.OHLCDataset) {         org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;         value = highLowData.getHighValue( series, item );     } else {         value = dataset.getYValue( series, item );     } } if (!Double.isNaN( value )) {     maximum = Math.max( maximum, value ); }  =>   double value; if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getEndYValue( series, item ); } else {     if (dataset instanceof org.jfree.data.xy.OHLCDataset) {         org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;         value = highLowData.getHighValue( series, item );     } else {         value = dataset.getYValue( series, item );     } }
SDL_362:673:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): for (int item = 0; item < itemCount; item++) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getEndYValue( series, item );     } else {         if (dataset instanceof org.jfree.data.xy.OHLCDataset) {             org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;             value = highLowData.getHighValue( series, item );         } else {             value = dataset.getYValue( series, item );         }     }     if (!Double.isNaN( value )) {         maximum = Math.max( maximum, value );     } }  =>   for (int item = 0;; item++) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getEndYValue( series, item );     } else {         if (dataset instanceof org.jfree.data.xy.OHLCDataset) {             org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;             value = highLowData.getHighValue( series, item );         } else {             value = dataset.getYValue( series, item );         }     }     if (!Double.isNaN( value )) {         maximum = Math.max( maximum, value );     } }
SDL_363:673:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): for (int item = 0; item < itemCount; item++) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getEndYValue( series, item );     } else {         if (dataset instanceof org.jfree.data.xy.OHLCDataset) {             org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;             value = highLowData.getHighValue( series, item );         } else {             value = dataset.getYValue( series, item );         }     }     if (!Double.isNaN( value )) {         maximum = Math.max( maximum, value );     } }  =>   for (int item = 0; item < itemCount;) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getEndYValue( series, item );     } else {         if (dataset instanceof org.jfree.data.xy.OHLCDataset) {             org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;             value = highLowData.getHighValue( series, item );         } else {             value = dataset.getYValue( series, item );         }     }     if (!Double.isNaN( value )) {         maximum = Math.max( maximum, value );     } }
SDL_364:660:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset; value = intervalXYData.getEndYValue( series, item );  =>   org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;
SDL_365:669:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getEndYValue( series, item ); } else {     if (dataset instanceof org.jfree.data.xy.OHLCDataset) {         org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;         value = highLowData.getHighValue( series, item );     } else {         value = dataset.getYValue( series, item );     } }  =>   if (true) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getEndYValue( series, item ); } else {     if (dataset instanceof org.jfree.data.xy.OHLCDataset) {         org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;         value = highLowData.getHighValue( series, item );     } else {         value = dataset.getYValue( series, item );     } }
SDL_366:662:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): if (dataset instanceof org.jfree.data.xy.OHLCDataset) {     org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;     value = highLowData.getHighValue( series, item ); } else {     value = dataset.getYValue( series, item ); }  =>  
SDL_367:664:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset; value = highLowData.getHighValue( series, item );  =>   org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;
SDL_368:668:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): if (dataset instanceof org.jfree.data.xy.OHLCDataset) {     org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;     value = highLowData.getHighValue( series, item ); } else {     value = dataset.getYValue( series, item ); }  =>   if (true) {     org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;     value = highLowData.getHighValue( series, item ); } else {     value = dataset.getYValue( series, item ); }
SDL_369:666:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): value = dataset.getYValue( series, item );  =>  
SDL_370:670:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): maximum = Math.max( maximum, value );  =>  
SDL_371:672:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): if (!Double.isNaN( value )) {     maximum = Math.max( maximum, value ); }  =>   if (true) {     maximum = Math.max( maximum, value ); }
SDL_372:679:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): if (maximum == Double.NEGATIVE_INFINITY) {     return null; } else {     return new java.lang.Double( maximum ); }  =>   if (true) {     return null; } else {     return new java.lang.Double( maximum ); }
SDL_373:716:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int categoryCount = dataset.getColumnCount(); for (int item = 0; item < categoryCount; item++) {     double positive = base;     double negative = base;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value > 0.0) {                 positive = positive + value;             }             if (value < 0.0) {                 negative = negative + value;             }         }     }     minimum = Math.min( minimum, negative );     maximum = Math.max( maximum, positive ); } if (minimum <= maximum) {     result = new org.jfree.data.Range( minimum, maximum ); } return result;  =>   org.jfree.data.Range result = null; double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int categoryCount = dataset.getColumnCount(); for (int item = 0; item < categoryCount; item++) {     double positive = base;     double negative = base;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value > 0.0) {                 positive = positive + value;             }             if (value < 0.0) {                 negative = negative + value;             }         }     }     minimum = Math.min( minimum, negative );     maximum = Math.max( maximum, positive ); } if (minimum <= maximum) {     result = new org.jfree.data.Range( minimum, maximum ); } return result;
SDL_374:700:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int categoryCount = dataset.getColumnCount(); for (int item = 0; item < categoryCount; item++) {     double positive = base;     double negative = base;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value > 0.0) {                 positive = positive + value;             }             if (value < 0.0) {                 negative = negative + value;             }         }     }     minimum = Math.min( minimum, negative );     maximum = Math.max( maximum, positive ); } if (minimum <= maximum) {     result = new org.jfree.data.Range( minimum, maximum ); } return result;  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int categoryCount = dataset.getColumnCount(); if (minimum <= maximum) {     result = new org.jfree.data.Range( minimum, maximum ); } return result;
SDL_375:716:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int categoryCount = dataset.getColumnCount(); for (int item = 0; item < categoryCount; item++) {     double positive = base;     double negative = base;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value > 0.0) {                 positive = positive + value;             }             if (value < 0.0) {                 negative = negative + value;             }         }     }     minimum = Math.min( minimum, negative );     maximum = Math.max( maximum, positive ); } if (minimum <= maximum) {     result = new org.jfree.data.Range( minimum, maximum ); } return result;  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int categoryCount = dataset.getColumnCount(); for (int item = 0; item < categoryCount; item++) {     double positive = base;     double negative = base;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value > 0.0) {                 positive = positive + value;             }             if (value < 0.0) {                 negative = negative + value;             }         }     }     minimum = Math.min( minimum, negative );     maximum = Math.max( maximum, positive ); } return result;
SDL_376:690:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_377:692:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_378:702:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): double positive = base; double negative = base; int seriesCount = dataset.getRowCount(); for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value > 0.0) {             positive = positive + value;         }         if (value < 0.0) {             negative = negative + value;         }     } } minimum = Math.min( minimum, negative ); maximum = Math.max( maximum, positive );  =>   double positive = base; double negative = base; int seriesCount = dataset.getRowCount(); minimum = Math.min( minimum, negative ); maximum = Math.max( maximum, positive );
SDL_379:713:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): double positive = base; double negative = base; int seriesCount = dataset.getRowCount(); for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value > 0.0) {             positive = positive + value;         }         if (value < 0.0) {             negative = negative + value;         }     } } minimum = Math.min( minimum, negative ); maximum = Math.max( maximum, positive );  =>   double positive = base; double negative = base; int seriesCount = dataset.getRowCount(); for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value > 0.0) {             positive = positive + value;         }         if (value < 0.0) {             negative = negative + value;         }     } } maximum = Math.max( maximum, positive );
SDL_380:713:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): double positive = base; double negative = base; int seriesCount = dataset.getRowCount(); for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value > 0.0) {             positive = positive + value;         }         if (value < 0.0) {             negative = negative + value;         }     } } minimum = Math.min( minimum, negative ); maximum = Math.max( maximum, positive );  =>   double positive = base; double negative = base; int seriesCount = dataset.getRowCount(); for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value > 0.0) {             positive = positive + value;         }         if (value < 0.0) {             negative = negative + value;         }     } } minimum = Math.min( minimum, negative );
SDL_381:715:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): for (int item = 0; item < categoryCount; item++) {     double positive = base;     double negative = base;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value > 0.0) {                 positive = positive + value;             }             if (value < 0.0) {                 negative = negative + value;             }         }     }     minimum = Math.min( minimum, negative );     maximum = Math.max( maximum, positive ); }  =>   for (int item = 0;; item++) {     double positive = base;     double negative = base;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value > 0.0) {                 positive = positive + value;             }             if (value < 0.0) {                 negative = negative + value;             }         }     }     minimum = Math.min( minimum, negative );     maximum = Math.max( maximum, positive ); }
SDL_382:715:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): for (int item = 0; item < categoryCount; item++) {     double positive = base;     double negative = base;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value > 0.0) {                 positive = positive + value;             }             if (value < 0.0) {                 negative = negative + value;             }         }     }     minimum = Math.min( minimum, negative );     maximum = Math.max( maximum, positive ); }  =>   for (int item = 0; item < categoryCount;) {     double positive = base;     double negative = base;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value > 0.0) {                 positive = positive + value;             }             if (value < 0.0) {                 negative = negative + value;             }         }     }     minimum = Math.min( minimum, negative );     maximum = Math.max( maximum, positive ); }
SDL_383:702:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): java.lang.Number number = dataset.getValue( series, item ); if (number != null) {     double value = number.doubleValue();     if (value > 0.0) {         positive = positive + value;     }     if (value < 0.0) {         negative = negative + value;     } }  =>   java.lang.Number number = dataset.getValue( series, item );
SDL_384:712:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value > 0.0) {             positive = positive + value;         }         if (value < 0.0) {             negative = negative + value;         }     } }  =>   for (int series = 0;; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value > 0.0) {             positive = positive + value;         }         if (value < 0.0) {             negative = negative + value;         }     } }
SDL_385:712:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value > 0.0) {             positive = positive + value;         }         if (value < 0.0) {             negative = negative + value;         }     } }  =>   for (int series = 0; series < seriesCount;) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value > 0.0) {             positive = positive + value;         }         if (value < 0.0) {             negative = negative + value;         }     } }
SDL_386:707:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): double value = number.doubleValue(); if (value > 0.0) {     positive = positive + value; } if (value < 0.0) {     negative = negative + value; }  =>   double value = number.doubleValue(); if (value < 0.0) {     negative = negative + value; }
SDL_387:707:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): double value = number.doubleValue(); if (value > 0.0) {     positive = positive + value; } if (value < 0.0) {     negative = negative + value; }  =>   double value = number.doubleValue(); if (value > 0.0) {     positive = positive + value; }
SDL_388:711:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): if (number != null) {     double value = number.doubleValue();     if (value > 0.0) {         positive = positive + value;     }     if (value < 0.0) {         negative = negative + value;     } }  =>   if (true) {     double value = number.doubleValue();     if (value > 0.0) {         positive = positive + value;     }     if (value < 0.0) {         negative = negative + value;     } }
SDL_389:705:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): positive = positive + value;  =>  
SDL_390:707:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): if (value > 0.0) {     positive = positive + value; }  =>   if (true) {     positive = positive + value; }
SDL_391:708:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): negative = negative + value;  =>  
SDL_392:710:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): if (value < 0.0) {     negative = negative + value; }  =>   if (true) {     negative = negative + value; }
SDL_393:716:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): result = new org.jfree.data.Range( minimum, maximum );  =>  
SDL_394:718:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): if (minimum <= maximum) {     result = new org.jfree.data.Range( minimum, maximum ); }  =>   if (true) {     result = new org.jfree.data.Range( minimum, maximum ); }
SDL_395:725:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): org.jfree.data.Range result = null; if (dataset != null) {     int[] groupIndex = new int[dataset.getRowCount()];     for (int i = 0; i < dataset.getRowCount(); i++) {         groupIndex[i] = map.getGroupIndex( map.getGroup( dataset.getRowKey( i ) ) );     }     int groupCount = map.getGroupCount();     double[] minimum = new double[groupCount];     double[] maximum = new double[groupCount];     int categoryCount = dataset.getColumnCount();     for (int item = 0; item < categoryCount; item++) {         double[] positive = new double[groupCount];         double[] negative = new double[groupCount];         int seriesCount = dataset.getRowCount();         for (int series = 0; series < seriesCount; series++) {             java.lang.Number number = dataset.getValue( series, item );             if (number != null) {                 double value = number.doubleValue();                 if (value > 0.0) {                     positive[groupIndex[series]] = positive[groupIndex[series]] + value;                 }                 if (value < 0.0) {                     negative[groupIndex[series]] = negative[groupIndex[series]] + value;                 }             }         }         for (int g = 0; g < groupCount; g++) {             minimum[g] = Math.min( minimum[g], negative[g] );             maximum[g] = Math.max( maximum[g], positive[g] );         }     }     for (int j = 0; j < groupCount; j++) {         result = Range.combine( result, new org.jfree.data.Range( minimum[j], maximum[j] ) );     } } return result;  =>   org.jfree.data.Range result = null; return result;
SDL_396:754:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): int[] groupIndex = new int[dataset.getRowCount()]; for (int i = 0; i < dataset.getRowCount(); i++) {     groupIndex[i] = map.getGroupIndex( map.getGroup( dataset.getRowKey( i ) ) ); } int groupCount = map.getGroupCount(); double[] minimum = new double[groupCount]; double[] maximum = new double[groupCount]; int categoryCount = dataset.getColumnCount(); for (int item = 0; item < categoryCount; item++) {     double[] positive = new double[groupCount];     double[] negative = new double[groupCount];     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value > 0.0) {                 positive[groupIndex[series]] = positive[groupIndex[series]] + value;             }             if (value < 0.0) {                 negative[groupIndex[series]] = negative[groupIndex[series]] + value;             }         }     }     for (int g = 0; g < groupCount; g++) {         minimum[g] = Math.min( minimum[g], negative[g] );         maximum[g] = Math.max( maximum[g], positive[g] );     } } for (int j = 0; j < groupCount; j++) {     result = Range.combine( result, new org.jfree.data.Range( minimum[j], maximum[j] ) ); }  =>   int[] groupIndex = new int[dataset.getRowCount()]; int groupCount = map.getGroupCount(); double[] minimum = new double[groupCount]; double[] maximum = new double[groupCount]; int categoryCount = dataset.getColumnCount(); for (int item = 0; item < categoryCount; item++) {     double[] positive = new double[groupCount];     double[] negative = new double[groupCount];     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value > 0.0) {                 positive[groupIndex[series]] = positive[groupIndex[series]] + value;             }             if (value < 0.0) {                 negative[groupIndex[series]] = negative[groupIndex[series]] + value;             }         }     }     for (int g = 0; g < groupCount; g++) {         minimum[g] = Math.min( minimum[g], negative[g] );         maximum[g] = Math.max( maximum[g], positive[g] );     } } for (int j = 0; j < groupCount; j++) {     result = Range.combine( result, new org.jfree.data.Range( minimum[j], maximum[j] ) ); }
SDL_397:736:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): int[] groupIndex = new int[dataset.getRowCount()]; for (int i = 0; i < dataset.getRowCount(); i++) {     groupIndex[i] = map.getGroupIndex( map.getGroup( dataset.getRowKey( i ) ) ); } int groupCount = map.getGroupCount(); double[] minimum = new double[groupCount]; double[] maximum = new double[groupCount]; int categoryCount = dataset.getColumnCount(); for (int item = 0; item < categoryCount; item++) {     double[] positive = new double[groupCount];     double[] negative = new double[groupCount];     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value > 0.0) {                 positive[groupIndex[series]] = positive[groupIndex[series]] + value;             }             if (value < 0.0) {                 negative[groupIndex[series]] = negative[groupIndex[series]] + value;             }         }     }     for (int g = 0; g < groupCount; g++) {         minimum[g] = Math.min( minimum[g], negative[g] );         maximum[g] = Math.max( maximum[g], positive[g] );     } } for (int j = 0; j < groupCount; j++) {     result = Range.combine( result, new org.jfree.data.Range( minimum[j], maximum[j] ) ); }  =>   int[] groupIndex = new int[dataset.getRowCount()]; for (int i = 0; i < dataset.getRowCount(); i++) {     groupIndex[i] = map.getGroupIndex( map.getGroup( dataset.getRowKey( i ) ) ); } int groupCount = map.getGroupCount(); double[] minimum = new double[groupCount]; double[] maximum = new double[groupCount]; int categoryCount = dataset.getColumnCount(); for (int j = 0; j < groupCount; j++) {     result = Range.combine( result, new org.jfree.data.Range( minimum[j], maximum[j] ) ); }
SDL_398:754:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): int[] groupIndex = new int[dataset.getRowCount()]; for (int i = 0; i < dataset.getRowCount(); i++) {     groupIndex[i] = map.getGroupIndex( map.getGroup( dataset.getRowKey( i ) ) ); } int groupCount = map.getGroupCount(); double[] minimum = new double[groupCount]; double[] maximum = new double[groupCount]; int categoryCount = dataset.getColumnCount(); for (int item = 0; item < categoryCount; item++) {     double[] positive = new double[groupCount];     double[] negative = new double[groupCount];     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value > 0.0) {                 positive[groupIndex[series]] = positive[groupIndex[series]] + value;             }             if (value < 0.0) {                 negative[groupIndex[series]] = negative[groupIndex[series]] + value;             }         }     }     for (int g = 0; g < groupCount; g++) {         minimum[g] = Math.min( minimum[g], negative[g] );         maximum[g] = Math.max( maximum[g], positive[g] );     } } for (int j = 0; j < groupCount; j++) {     result = Range.combine( result, new org.jfree.data.Range( minimum[j], maximum[j] ) ); }  =>   int[] groupIndex = new int[dataset.getRowCount()]; for (int i = 0; i < dataset.getRowCount(); i++) {     groupIndex[i] = map.getGroupIndex( map.getGroup( dataset.getRowKey( i ) ) ); } int groupCount = map.getGroupCount(); double[] minimum = new double[groupCount]; double[] maximum = new double[groupCount]; int categoryCount = dataset.getColumnCount(); for (int item = 0; item < categoryCount; item++) {     double[] positive = new double[groupCount];     double[] negative = new double[groupCount];     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value > 0.0) {                 positive[groupIndex[series]] = positive[groupIndex[series]] + value;             }             if (value < 0.0) {                 negative[groupIndex[series]] = negative[groupIndex[series]] + value;             }         }     }     for (int g = 0; g < groupCount; g++) {         minimum[g] = Math.min( minimum[g], negative[g] );         maximum[g] = Math.max( maximum[g], positive[g] );     } }
SDL_399:758:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): if (dataset != null) {     int[] groupIndex = new int[dataset.getRowCount()];     for (int i = 0; i < dataset.getRowCount(); i++) {         groupIndex[i] = map.getGroupIndex( map.getGroup( dataset.getRowKey( i ) ) );     }     int groupCount = map.getGroupCount();     double[] minimum = new double[groupCount];     double[] maximum = new double[groupCount];     int categoryCount = dataset.getColumnCount();     for (int item = 0; item < categoryCount; item++) {         double[] positive = new double[groupCount];         double[] negative = new double[groupCount];         int seriesCount = dataset.getRowCount();         for (int series = 0; series < seriesCount; series++) {             java.lang.Number number = dataset.getValue( series, item );             if (number != null) {                 double value = number.doubleValue();                 if (value > 0.0) {                     positive[groupIndex[series]] = positive[groupIndex[series]] + value;                 }                 if (value < 0.0) {                     negative[groupIndex[series]] = negative[groupIndex[series]] + value;                 }             }         }         for (int g = 0; g < groupCount; g++) {             minimum[g] = Math.min( minimum[g], negative[g] );             maximum[g] = Math.max( maximum[g], positive[g] );         }     }     for (int j = 0; j < groupCount; j++) {         result = Range.combine( result, new org.jfree.data.Range( minimum[j], maximum[j] ) );     } }  =>   if (true) {     int[] groupIndex = new int[dataset.getRowCount()];     for (int i = 0; i < dataset.getRowCount(); i++) {         groupIndex[i] = map.getGroupIndex( map.getGroup( dataset.getRowKey( i ) ) );     }     int groupCount = map.getGroupCount();     double[] minimum = new double[groupCount];     double[] maximum = new double[groupCount];     int categoryCount = dataset.getColumnCount();     for (int item = 0; item < categoryCount; item++) {         double[] positive = new double[groupCount];         double[] negative = new double[groupCount];         int seriesCount = dataset.getRowCount();         for (int series = 0; series < seriesCount; series++) {             java.lang.Number number = dataset.getValue( series, item );             if (number != null) {                 double value = number.doubleValue();                 if (value > 0.0) {                     positive[groupIndex[series]] = positive[groupIndex[series]] + value;                 }                 if (value < 0.0) {                     negative[groupIndex[series]] = negative[groupIndex[series]] + value;                 }             }         }         for (int g = 0; g < groupCount; g++) {             minimum[g] = Math.min( minimum[g], negative[g] );             maximum[g] = Math.max( maximum[g], positive[g] );         }     }     for (int j = 0; j < groupCount; j++) {         result = Range.combine( result, new org.jfree.data.Range( minimum[j], maximum[j] ) );     } }
SDL_400:727:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): groupIndex[i] = map.getGroupIndex( map.getGroup( dataset.getRowKey( i ) ) );  =>  
SDL_401:729:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): for (int i = 0; i < dataset.getRowCount(); i++) {     groupIndex[i] = map.getGroupIndex( map.getGroup( dataset.getRowKey( i ) ) ); }  =>   for (int i = 0;; i++) {     groupIndex[i] = map.getGroupIndex( map.getGroup( dataset.getRowKey( i ) ) ); }
SDL_402:729:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): for (int i = 0; i < dataset.getRowCount(); i++) {     groupIndex[i] = map.getGroupIndex( map.getGroup( dataset.getRowKey( i ) ) ); }  =>   for (int i = 0; i < dataset.getRowCount();) {     groupIndex[i] = map.getGroupIndex( map.getGroup( dataset.getRowKey( i ) ) ); }
SDL_403:741:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): double[] positive = new double[groupCount]; double[] negative = new double[groupCount]; int seriesCount = dataset.getRowCount(); for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value > 0.0) {             positive[groupIndex[series]] = positive[groupIndex[series]] + value;         }         if (value < 0.0) {             negative[groupIndex[series]] = negative[groupIndex[series]] + value;         }     } } for (int g = 0; g < groupCount; g++) {     minimum[g] = Math.min( minimum[g], negative[g] );     maximum[g] = Math.max( maximum[g], positive[g] ); }  =>   double[] positive = new double[groupCount]; double[] negative = new double[groupCount]; int seriesCount = dataset.getRowCount(); for (int g = 0; g < groupCount; g++) {     minimum[g] = Math.min( minimum[g], negative[g] );     maximum[g] = Math.max( maximum[g], positive[g] ); }
SDL_404:749:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): double[] positive = new double[groupCount]; double[] negative = new double[groupCount]; int seriesCount = dataset.getRowCount(); for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value > 0.0) {             positive[groupIndex[series]] = positive[groupIndex[series]] + value;         }         if (value < 0.0) {             negative[groupIndex[series]] = negative[groupIndex[series]] + value;         }     } } for (int g = 0; g < groupCount; g++) {     minimum[g] = Math.min( minimum[g], negative[g] );     maximum[g] = Math.max( maximum[g], positive[g] ); }  =>   double[] positive = new double[groupCount]; double[] negative = new double[groupCount]; int seriesCount = dataset.getRowCount(); for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value > 0.0) {             positive[groupIndex[series]] = positive[groupIndex[series]] + value;         }         if (value < 0.0) {             negative[groupIndex[series]] = negative[groupIndex[series]] + value;         }     } }
SDL_405:754:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): for (int item = 0; item < categoryCount; item++) {     double[] positive = new double[groupCount];     double[] negative = new double[groupCount];     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value > 0.0) {                 positive[groupIndex[series]] = positive[groupIndex[series]] + value;             }             if (value < 0.0) {                 negative[groupIndex[series]] = negative[groupIndex[series]] + value;             }         }     }     for (int g = 0; g < groupCount; g++) {         minimum[g] = Math.min( minimum[g], negative[g] );         maximum[g] = Math.max( maximum[g], positive[g] );     } }  =>   for (int item = 0;; item++) {     double[] positive = new double[groupCount];     double[] negative = new double[groupCount];     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value > 0.0) {                 positive[groupIndex[series]] = positive[groupIndex[series]] + value;             }             if (value < 0.0) {                 negative[groupIndex[series]] = negative[groupIndex[series]] + value;             }         }     }     for (int g = 0; g < groupCount; g++) {         minimum[g] = Math.min( minimum[g], negative[g] );         maximum[g] = Math.max( maximum[g], positive[g] );     } }
SDL_406:754:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): for (int item = 0; item < categoryCount; item++) {     double[] positive = new double[groupCount];     double[] negative = new double[groupCount];     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value > 0.0) {                 positive[groupIndex[series]] = positive[groupIndex[series]] + value;             }             if (value < 0.0) {                 negative[groupIndex[series]] = negative[groupIndex[series]] + value;             }         }     }     for (int g = 0; g < groupCount; g++) {         minimum[g] = Math.min( minimum[g], negative[g] );         maximum[g] = Math.max( maximum[g], positive[g] );     } }  =>   for (int item = 0; item < categoryCount;) {     double[] positive = new double[groupCount];     double[] negative = new double[groupCount];     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value > 0.0) {                 positive[groupIndex[series]] = positive[groupIndex[series]] + value;             }             if (value < 0.0) {                 negative[groupIndex[series]] = negative[groupIndex[series]] + value;             }         }     }     for (int g = 0; g < groupCount; g++) {         minimum[g] = Math.min( minimum[g], negative[g] );         maximum[g] = Math.max( maximum[g], positive[g] );     } }
SDL_407:739:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): java.lang.Number number = dataset.getValue( series, item ); if (number != null) {     double value = number.doubleValue();     if (value > 0.0) {         positive[groupIndex[series]] = positive[groupIndex[series]] + value;     }     if (value < 0.0) {         negative[groupIndex[series]] = negative[groupIndex[series]] + value;     } }  =>   java.lang.Number number = dataset.getValue( series, item );
SDL_408:749:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value > 0.0) {             positive[groupIndex[series]] = positive[groupIndex[series]] + value;         }         if (value < 0.0) {             negative[groupIndex[series]] = negative[groupIndex[series]] + value;         }     } }  =>   for (int series = 0;; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value > 0.0) {             positive[groupIndex[series]] = positive[groupIndex[series]] + value;         }         if (value < 0.0) {             negative[groupIndex[series]] = negative[groupIndex[series]] + value;         }     } }
SDL_409:749:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value > 0.0) {             positive[groupIndex[series]] = positive[groupIndex[series]] + value;         }         if (value < 0.0) {             negative[groupIndex[series]] = negative[groupIndex[series]] + value;         }     } }  =>   for (int series = 0; series < seriesCount;) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value > 0.0) {             positive[groupIndex[series]] = positive[groupIndex[series]] + value;         }         if (value < 0.0) {             negative[groupIndex[series]] = negative[groupIndex[series]] + value;         }     } }
SDL_410:744:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): double value = number.doubleValue(); if (value > 0.0) {     positive[groupIndex[series]] = positive[groupIndex[series]] + value; } if (value < 0.0) {     negative[groupIndex[series]] = negative[groupIndex[series]] + value; }  =>   double value = number.doubleValue(); if (value < 0.0) {     negative[groupIndex[series]] = negative[groupIndex[series]] + value; }
SDL_411:744:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): double value = number.doubleValue(); if (value > 0.0) {     positive[groupIndex[series]] = positive[groupIndex[series]] + value; } if (value < 0.0) {     negative[groupIndex[series]] = negative[groupIndex[series]] + value; }  =>   double value = number.doubleValue(); if (value > 0.0) {     positive[groupIndex[series]] = positive[groupIndex[series]] + value; }
SDL_412:748:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): if (number != null) {     double value = number.doubleValue();     if (value > 0.0) {         positive[groupIndex[series]] = positive[groupIndex[series]] + value;     }     if (value < 0.0) {         negative[groupIndex[series]] = negative[groupIndex[series]] + value;     } }  =>   if (true) {     double value = number.doubleValue();     if (value > 0.0) {         positive[groupIndex[series]] = positive[groupIndex[series]] + value;     }     if (value < 0.0) {         negative[groupIndex[series]] = negative[groupIndex[series]] + value;     } }
SDL_413:742:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): positive[groupIndex[series]] = positive[groupIndex[series]] + value;  =>  
SDL_414:744:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): if (value > 0.0) {     positive[groupIndex[series]] = positive[groupIndex[series]] + value; }  =>   if (true) {     positive[groupIndex[series]] = positive[groupIndex[series]] + value; }
SDL_415:745:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): negative[groupIndex[series]] = negative[groupIndex[series]] + value;  =>  
SDL_416:747:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): if (value < 0.0) {     negative[groupIndex[series]] = negative[groupIndex[series]] + value; }  =>   if (true) {     negative[groupIndex[series]] = negative[groupIndex[series]] + value; }
SDL_417:751:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): minimum[g] = Math.min( minimum[g], negative[g] ); maximum[g] = Math.max( maximum[g], positive[g] );  =>   maximum[g] = Math.max( maximum[g], positive[g] );
SDL_418:751:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): minimum[g] = Math.min( minimum[g], negative[g] ); maximum[g] = Math.max( maximum[g], positive[g] );  =>   minimum[g] = Math.min( minimum[g], negative[g] );
SDL_419:753:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): for (int g = 0; g < groupCount; g++) {     minimum[g] = Math.min( minimum[g], negative[g] );     maximum[g] = Math.max( maximum[g], positive[g] ); }  =>   for (int g = 0;; g++) {     minimum[g] = Math.min( minimum[g], negative[g] );     maximum[g] = Math.max( maximum[g], positive[g] ); }
SDL_420:753:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): for (int g = 0; g < groupCount; g++) {     minimum[g] = Math.min( minimum[g], negative[g] );     maximum[g] = Math.max( maximum[g], positive[g] ); }  =>   for (int g = 0; g < groupCount;) {     minimum[g] = Math.min( minimum[g], negative[g] );     maximum[g] = Math.max( maximum[g], positive[g] ); }
SDL_421:755:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): result = Range.combine( result, new org.jfree.data.Range( minimum[j], maximum[j] ) );  =>  
SDL_422:757:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): for (int j = 0; j < groupCount; j++) {     result = Range.combine( result, new org.jfree.data.Range( minimum[j], maximum[j] ) ); }  =>   for (int j = 0;; j++) {     result = Range.combine( result, new org.jfree.data.Range( minimum[j], maximum[j] ) ); }
SDL_423:757:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): for (int j = 0; j < groupCount; j++) {     result = Range.combine( result, new org.jfree.data.Range( minimum[j], maximum[j] ) ); }  =>   for (int j = 0; j < groupCount;) {     result = Range.combine( result, new org.jfree.data.Range( minimum[j], maximum[j] ) ); }
SDL_424:765:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): java.lang.Number result = null; if (dataset != null) {     double minimum = 0.0;     int categoryCount = dataset.getRowCount();     for (int item = 0; item < categoryCount; item++) {         double total = 0.0;         int seriesCount = dataset.getColumnCount();         for (int series = 0; series < seriesCount; series++) {             java.lang.Number number = dataset.getValue( series, item );             if (number != null) {                 double value = number.doubleValue();                 if (value < 0.0) {                     total = total + value;                 }             }         }         minimum = Math.min( minimum, total );     }     result = new java.lang.Double( minimum ); } return result;  =>   java.lang.Number result = null; return result;
SDL_425:768:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): double minimum = 0.0; int categoryCount = dataset.getRowCount(); for (int item = 0; item < categoryCount; item++) {     double total = 0.0;     int seriesCount = dataset.getColumnCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value < 0.0) {                 total = total + value;             }         }     }     minimum = Math.min( minimum, total ); } result = new java.lang.Double( minimum );  =>   double minimum = 0.0; int categoryCount = dataset.getRowCount(); result = new java.lang.Double( minimum );
SDL_426:781:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): double minimum = 0.0; int categoryCount = dataset.getRowCount(); for (int item = 0; item < categoryCount; item++) {     double total = 0.0;     int seriesCount = dataset.getColumnCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value < 0.0) {                 total = total + value;             }         }     }     minimum = Math.min( minimum, total ); } result = new java.lang.Double( minimum );  =>   double minimum = 0.0; int categoryCount = dataset.getRowCount(); for (int item = 0; item < categoryCount; item++) {     double total = 0.0;     int seriesCount = dataset.getColumnCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value < 0.0) {                 total = total + value;             }         }     }     minimum = Math.min( minimum, total ); }
SDL_427:783:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): if (dataset != null) {     double minimum = 0.0;     int categoryCount = dataset.getRowCount();     for (int item = 0; item < categoryCount; item++) {         double total = 0.0;         int seriesCount = dataset.getColumnCount();         for (int series = 0; series < seriesCount; series++) {             java.lang.Number number = dataset.getValue( series, item );             if (number != null) {                 double value = number.doubleValue();                 if (value < 0.0) {                     total = total + value;                 }             }         }         minimum = Math.min( minimum, total );     }     result = new java.lang.Double( minimum ); }  =>   if (true) {     double minimum = 0.0;     int categoryCount = dataset.getRowCount();     for (int item = 0; item < categoryCount; item++) {         double total = 0.0;         int seriesCount = dataset.getColumnCount();         for (int series = 0; series < seriesCount; series++) {             java.lang.Number number = dataset.getValue( series, item );             if (number != null) {                 double value = number.doubleValue();                 if (value < 0.0) {                     total = total + value;                 }             }         }         minimum = Math.min( minimum, total );     }     result = new java.lang.Double( minimum ); }
SDL_428:771:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): double total = 0.0; int seriesCount = dataset.getColumnCount(); for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value < 0.0) {             total = total + value;         }     } } minimum = Math.min( minimum, total );  =>   double total = 0.0; int seriesCount = dataset.getColumnCount(); minimum = Math.min( minimum, total );
SDL_429:779:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): double total = 0.0; int seriesCount = dataset.getColumnCount(); for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value < 0.0) {             total = total + value;         }     } } minimum = Math.min( minimum, total );  =>   double total = 0.0; int seriesCount = dataset.getColumnCount(); for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value < 0.0) {             total = total + value;         }     } }
SDL_430:781:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): for (int item = 0; item < categoryCount; item++) {     double total = 0.0;     int seriesCount = dataset.getColumnCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value < 0.0) {                 total = total + value;             }         }     }     minimum = Math.min( minimum, total ); }  =>   for (int item = 0;; item++) {     double total = 0.0;     int seriesCount = dataset.getColumnCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value < 0.0) {                 total = total + value;             }         }     }     minimum = Math.min( minimum, total ); }
SDL_431:781:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): for (int item = 0; item < categoryCount; item++) {     double total = 0.0;     int seriesCount = dataset.getColumnCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value < 0.0) {                 total = total + value;             }         }     }     minimum = Math.min( minimum, total ); }  =>   for (int item = 0; item < categoryCount;) {     double total = 0.0;     int seriesCount = dataset.getColumnCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value < 0.0) {                 total = total + value;             }         }     }     minimum = Math.min( minimum, total ); }
SDL_432:772:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): java.lang.Number number = dataset.getValue( series, item ); if (number != null) {     double value = number.doubleValue();     if (value < 0.0) {         total = total + value;     } }  =>   java.lang.Number number = dataset.getValue( series, item );
SDL_433:779:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value < 0.0) {             total = total + value;         }     } }  =>   for (int series = 0;; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value < 0.0) {             total = total + value;         }     } }
SDL_434:779:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value < 0.0) {             total = total + value;         }     } }  =>   for (int series = 0; series < seriesCount;) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value < 0.0) {             total = total + value;         }     } }
SDL_435:774:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): double value = number.doubleValue(); if (value < 0.0) {     total = total + value; }  =>   double value = number.doubleValue();
SDL_436:778:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): if (number != null) {     double value = number.doubleValue();     if (value < 0.0) {         total = total + value;     } }  =>   if (true) {     double value = number.doubleValue();     if (value < 0.0) {         total = total + value;     } }
SDL_437:775:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): total = total + value;  =>  
SDL_438:777:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): if (value < 0.0) {     total = total + value; }  =>   if (true) {     total = total + value; }
SDL_439:790:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): java.lang.Number result = null; if (dataset != null) {     double maximum = 0.0;     int categoryCount = dataset.getColumnCount();     for (int item = 0; item < categoryCount; item++) {         double total = 0.0;         int seriesCount = dataset.getRowCount();         for (int series = 0; series < seriesCount; series++) {             java.lang.Number number = dataset.getValue( series, item );             if (number != null) {                 double value = number.doubleValue();                 if (value > 0.0) {                     total = total + value;                 }             }         }         maximum = Math.max( maximum, total );     }     result = new java.lang.Double( maximum ); } return result;  =>   java.lang.Number result = null; return result;
SDL_440:793:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): double maximum = 0.0; int categoryCount = dataset.getColumnCount(); for (int item = 0; item < categoryCount; item++) {     double total = 0.0;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value > 0.0) {                 total = total + value;             }         }     }     maximum = Math.max( maximum, total ); } result = new java.lang.Double( maximum );  =>   double maximum = 0.0; int categoryCount = dataset.getColumnCount(); result = new java.lang.Double( maximum );
SDL_441:806:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): double maximum = 0.0; int categoryCount = dataset.getColumnCount(); for (int item = 0; item < categoryCount; item++) {     double total = 0.0;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value > 0.0) {                 total = total + value;             }         }     }     maximum = Math.max( maximum, total ); } result = new java.lang.Double( maximum );  =>   double maximum = 0.0; int categoryCount = dataset.getColumnCount(); for (int item = 0; item < categoryCount; item++) {     double total = 0.0;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value > 0.0) {                 total = total + value;             }         }     }     maximum = Math.max( maximum, total ); }
SDL_442:808:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): if (dataset != null) {     double maximum = 0.0;     int categoryCount = dataset.getColumnCount();     for (int item = 0; item < categoryCount; item++) {         double total = 0.0;         int seriesCount = dataset.getRowCount();         for (int series = 0; series < seriesCount; series++) {             java.lang.Number number = dataset.getValue( series, item );             if (number != null) {                 double value = number.doubleValue();                 if (value > 0.0) {                     total = total + value;                 }             }         }         maximum = Math.max( maximum, total );     }     result = new java.lang.Double( maximum ); }  =>   if (true) {     double maximum = 0.0;     int categoryCount = dataset.getColumnCount();     for (int item = 0; item < categoryCount; item++) {         double total = 0.0;         int seriesCount = dataset.getRowCount();         for (int series = 0; series < seriesCount; series++) {             java.lang.Number number = dataset.getValue( series, item );             if (number != null) {                 double value = number.doubleValue();                 if (value > 0.0) {                     total = total + value;                 }             }         }         maximum = Math.max( maximum, total );     }     result = new java.lang.Double( maximum ); }
SDL_443:796:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): double total = 0.0; int seriesCount = dataset.getRowCount(); for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value > 0.0) {             total = total + value;         }     } } maximum = Math.max( maximum, total );  =>   double total = 0.0; int seriesCount = dataset.getRowCount(); maximum = Math.max( maximum, total );
SDL_444:804:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): double total = 0.0; int seriesCount = dataset.getRowCount(); for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value > 0.0) {             total = total + value;         }     } } maximum = Math.max( maximum, total );  =>   double total = 0.0; int seriesCount = dataset.getRowCount(); for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value > 0.0) {             total = total + value;         }     } }
SDL_445:806:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): for (int item = 0; item < categoryCount; item++) {     double total = 0.0;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value > 0.0) {                 total = total + value;             }         }     }     maximum = Math.max( maximum, total ); }  =>   for (int item = 0;; item++) {     double total = 0.0;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value > 0.0) {                 total = total + value;             }         }     }     maximum = Math.max( maximum, total ); }
SDL_446:806:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): for (int item = 0; item < categoryCount; item++) {     double total = 0.0;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value > 0.0) {                 total = total + value;             }         }     }     maximum = Math.max( maximum, total ); }  =>   for (int item = 0; item < categoryCount;) {     double total = 0.0;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value > 0.0) {                 total = total + value;             }         }     }     maximum = Math.max( maximum, total ); }
SDL_447:797:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): java.lang.Number number = dataset.getValue( series, item ); if (number != null) {     double value = number.doubleValue();     if (value > 0.0) {         total = total + value;     } }  =>   java.lang.Number number = dataset.getValue( series, item );
SDL_448:804:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value > 0.0) {             total = total + value;         }     } }  =>   for (int series = 0;; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value > 0.0) {             total = total + value;         }     } }
SDL_449:804:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value > 0.0) {             total = total + value;         }     } }  =>   for (int series = 0; series < seriesCount;) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value > 0.0) {             total = total + value;         }     } }
SDL_450:799:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): double value = number.doubleValue(); if (value > 0.0) {     total = total + value; }  =>   double value = number.doubleValue();
SDL_451:803:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): if (number != null) {     double value = number.doubleValue();     if (value > 0.0) {         total = total + value;     } }  =>   if (true) {     double value = number.doubleValue();     if (value > 0.0) {         total = total + value;     } }
SDL_452:800:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): total = total + value;  =>  
SDL_453:802:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): if (value > 0.0) {     total = total + value; }  =>   if (true) {     total = total + value; }
SDL_454:846:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } double minimum = base; double maximum = base; for (int itemNo = 0; itemNo < dataset.getItemCount(); itemNo++) {     double positive = base;     double negative = base;     int seriesCount = dataset.getSeriesCount();     for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {         double y = dataset.getYValue( seriesNo, itemNo );         if (!Double.isNaN( y )) {             if (y > 0.0) {                 positive += y;             } else {                 negative += y;             }         }     }     if (positive > maximum) {         maximum = positive;     }     if (negative < minimum) {         minimum = negative;     } } if (minimum <= maximum) {     return new org.jfree.data.Range( minimum, maximum ); } else {     return null; }  =>   double minimum = base; double maximum = base; for (int itemNo = 0; itemNo < dataset.getItemCount(); itemNo++) {     double positive = base;     double negative = base;     int seriesCount = dataset.getSeriesCount();     for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {         double y = dataset.getYValue( seriesNo, itemNo );         if (!Double.isNaN( y )) {             if (y > 0.0) {                 positive += y;             } else {                 negative += y;             }         }     }     if (positive > maximum) {         maximum = positive;     }     if (negative < minimum) {         minimum = negative;     } } if (minimum <= maximum) {     return new org.jfree.data.Range( minimum, maximum ); } else {     return null; }
SDL_455:828:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } double minimum = base; double maximum = base; for (int itemNo = 0; itemNo < dataset.getItemCount(); itemNo++) {     double positive = base;     double negative = base;     int seriesCount = dataset.getSeriesCount();     for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {         double y = dataset.getYValue( seriesNo, itemNo );         if (!Double.isNaN( y )) {             if (y > 0.0) {                 positive += y;             } else {                 negative += y;             }         }     }     if (positive > maximum) {         maximum = positive;     }     if (negative < minimum) {         minimum = negative;     } } if (minimum <= maximum) {     return new org.jfree.data.Range( minimum, maximum ); } else {     return null; }  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } double minimum = base; double maximum = base; if (minimum <= maximum) {     return new org.jfree.data.Range( minimum, maximum ); } else {     return null; }
SDL_456:844:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } double minimum = base; double maximum = base; for (int itemNo = 0; itemNo < dataset.getItemCount(); itemNo++) {     double positive = base;     double negative = base;     int seriesCount = dataset.getSeriesCount();     for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {         double y = dataset.getYValue( seriesNo, itemNo );         if (!Double.isNaN( y )) {             if (y > 0.0) {                 positive += y;             } else {                 negative += y;             }         }     }     if (positive > maximum) {         maximum = positive;     }     if (negative < minimum) {         minimum = negative;     } } if (minimum <= maximum) {     return new org.jfree.data.Range( minimum, maximum ); } else {     return null; }  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } double minimum = base; double maximum = base; for (int itemNo = 0; itemNo < dataset.getItemCount(); itemNo++) {     double positive = base;     double negative = base;     int seriesCount = dataset.getSeriesCount();     for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {         double y = dataset.getYValue( seriesNo, itemNo );         if (!Double.isNaN( y )) {             if (y > 0.0) {                 positive += y;             } else {                 negative += y;             }         }     }     if (positive > maximum) {         maximum = positive;     }     if (negative < minimum) {         minimum = negative;     } }
SDL_457:819:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_458:821:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_459:833:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): double positive = base; double negative = base; int seriesCount = dataset.getSeriesCount(); for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {     double y = dataset.getYValue( seriesNo, itemNo );     if (!Double.isNaN( y )) {         if (y > 0.0) {             positive += y;         } else {             negative += y;         }     } } if (positive > maximum) {     maximum = positive; } if (negative < minimum) {     minimum = negative; }  =>   double positive = base; double negative = base; int seriesCount = dataset.getSeriesCount(); if (positive > maximum) {     maximum = positive; } if (negative < minimum) {     minimum = negative; }
SDL_460:840:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): double positive = base; double negative = base; int seriesCount = dataset.getSeriesCount(); for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {     double y = dataset.getYValue( seriesNo, itemNo );     if (!Double.isNaN( y )) {         if (y > 0.0) {             positive += y;         } else {             negative += y;         }     } } if (positive > maximum) {     maximum = positive; } if (negative < minimum) {     minimum = negative; }  =>   double positive = base; double negative = base; int seriesCount = dataset.getSeriesCount(); for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {     double y = dataset.getYValue( seriesNo, itemNo );     if (!Double.isNaN( y )) {         if (y > 0.0) {             positive += y;         } else {             negative += y;         }     } } if (negative < minimum) {     minimum = negative; }
SDL_461:840:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): double positive = base; double negative = base; int seriesCount = dataset.getSeriesCount(); for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {     double y = dataset.getYValue( seriesNo, itemNo );     if (!Double.isNaN( y )) {         if (y > 0.0) {             positive += y;         } else {             negative += y;         }     } } if (positive > maximum) {     maximum = positive; } if (negative < minimum) {     minimum = negative; }  =>   double positive = base; double negative = base; int seriesCount = dataset.getSeriesCount(); for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {     double y = dataset.getYValue( seriesNo, itemNo );     if (!Double.isNaN( y )) {         if (y > 0.0) {             positive += y;         } else {             negative += y;         }     } } if (positive > maximum) {     maximum = positive; }
SDL_462:844:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): for (int itemNo = 0; itemNo < dataset.getItemCount(); itemNo++) {     double positive = base;     double negative = base;     int seriesCount = dataset.getSeriesCount();     for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {         double y = dataset.getYValue( seriesNo, itemNo );         if (!Double.isNaN( y )) {             if (y > 0.0) {                 positive += y;             } else {                 negative += y;             }         }     }     if (positive > maximum) {         maximum = positive;     }     if (negative < minimum) {         minimum = negative;     } }  =>   for (int itemNo = 0;; itemNo++) {     double positive = base;     double negative = base;     int seriesCount = dataset.getSeriesCount();     for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {         double y = dataset.getYValue( seriesNo, itemNo );         if (!Double.isNaN( y )) {             if (y > 0.0) {                 positive += y;             } else {                 negative += y;             }         }     }     if (positive > maximum) {         maximum = positive;     }     if (negative < minimum) {         minimum = negative;     } }
SDL_463:844:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): for (int itemNo = 0; itemNo < dataset.getItemCount(); itemNo++) {     double positive = base;     double negative = base;     int seriesCount = dataset.getSeriesCount();     for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {         double y = dataset.getYValue( seriesNo, itemNo );         if (!Double.isNaN( y )) {             if (y > 0.0) {                 positive += y;             } else {                 negative += y;             }         }     }     if (positive > maximum) {         maximum = positive;     }     if (negative < minimum) {         minimum = negative;     } }  =>   for (int itemNo = 0; itemNo < dataset.getItemCount();) {     double positive = base;     double negative = base;     int seriesCount = dataset.getSeriesCount();     for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {         double y = dataset.getYValue( seriesNo, itemNo );         if (!Double.isNaN( y )) {             if (y > 0.0) {                 positive += y;             } else {                 negative += y;             }         }     }     if (positive > maximum) {         maximum = positive;     }     if (negative < minimum) {         minimum = negative;     } }
SDL_464:829:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): double y = dataset.getYValue( seriesNo, itemNo ); if (!Double.isNaN( y )) {     if (y > 0.0) {         positive += y;     } else {         negative += y;     } }  =>   double y = dataset.getYValue( seriesNo, itemNo );
SDL_465:837:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {     double y = dataset.getYValue( seriesNo, itemNo );     if (!Double.isNaN( y )) {         if (y > 0.0) {             positive += y;         } else {             negative += y;         }     } }  =>   for (int seriesNo = 0;; seriesNo++) {     double y = dataset.getYValue( seriesNo, itemNo );     if (!Double.isNaN( y )) {         if (y > 0.0) {             positive += y;         } else {             negative += y;         }     } }
SDL_466:837:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {     double y = dataset.getYValue( seriesNo, itemNo );     if (!Double.isNaN( y )) {         if (y > 0.0) {             positive += y;         } else {             negative += y;         }     } }  =>   for (int seriesNo = 0; seriesNo < seriesCount;) {     double y = dataset.getYValue( seriesNo, itemNo );     if (!Double.isNaN( y )) {         if (y > 0.0) {             positive += y;         } else {             negative += y;         }     } }
SDL_467:830:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): if (y > 0.0) {     positive += y; } else {     negative += y; }  =>  
SDL_468:836:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): if (!Double.isNaN( y )) {     if (y > 0.0) {         positive += y;     } else {         negative += y;     } }  =>   if (true) {     if (y > 0.0) {         positive += y;     } else {         negative += y;     } }
SDL_469:831:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): positive += y;  =>  
SDL_470:835:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): if (y > 0.0) {     positive += y; } else {     negative += y; }  =>   if (true) {     positive += y; } else {     negative += y; }
SDL_471:833:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): negative += y;  =>  
SDL_472:838:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): maximum = positive;  =>  
SDL_473:840:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): if (positive > maximum) {     maximum = positive; }  =>   if (true) {     maximum = positive; }
SDL_474:841:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): minimum = negative;  =>  
SDL_475:843:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): if (negative < minimum) {     minimum = negative; }  =>   if (true) {     minimum = negative; }
SDL_476:849:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): if (minimum <= maximum) {     return new org.jfree.data.Range( minimum, maximum ); } else {     return null; }  =>   if (true) {     return new org.jfree.data.Range( minimum, maximum ); } else {     return null; }
SDL_477:856:double_calculateStackTotal(org.jfree.data.xy.TableXYDataset,int): double total = 0.0; int seriesCount = dataset.getSeriesCount(); for (int s = 0; s < seriesCount; s++) {     double value = dataset.getYValue( s, item );     if (!Double.isNaN( value )) {         total = total + value;     } } return total;  =>   double total = 0.0; int seriesCount = dataset.getSeriesCount(); return total;
SDL_478:857:double_calculateStackTotal(org.jfree.data.xy.TableXYDataset,int): double value = dataset.getYValue( s, item ); if (!Double.isNaN( value )) {     total = total + value; }  =>   double value = dataset.getYValue( s, item );
SDL_479:861:double_calculateStackTotal(org.jfree.data.xy.TableXYDataset,int): for (int s = 0; s < seriesCount; s++) {     double value = dataset.getYValue( s, item );     if (!Double.isNaN( value )) {         total = total + value;     } }  =>   for (int s = 0;; s++) {     double value = dataset.getYValue( s, item );     if (!Double.isNaN( value )) {         total = total + value;     } }
SDL_480:861:double_calculateStackTotal(org.jfree.data.xy.TableXYDataset,int): for (int s = 0; s < seriesCount; s++) {     double value = dataset.getYValue( s, item );     if (!Double.isNaN( value )) {         total = total + value;     } }  =>   for (int s = 0; s < seriesCount;) {     double value = dataset.getYValue( s, item );     if (!Double.isNaN( value )) {         total = total + value;     } }
SDL_481:858:double_calculateStackTotal(org.jfree.data.xy.TableXYDataset,int): total = total + value;  =>  
SDL_482:860:double_calculateStackTotal(org.jfree.data.xy.TableXYDataset,int): if (!Double.isNaN( value )) {     total = total + value; }  =>   if (true) {     total = total + value; }
SDL_483:862:double_calculateStackTotal(org.jfree.data.xy.TableXYDataset,int): return total;  =>   return 0;
SDL_484:887:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } boolean allItemsNull = true; double minimum = 0.0; double maximum = 0.0; for (int row = 0; row < dataset.getRowCount(); row++) {     double runningTotal = 0.0;     for (int column = 0; column < dataset.getColumnCount() - 1; column++) {         java.lang.Number n = dataset.getValue( row, column );         if (n != null) {             allItemsNull = false;             double value = n.doubleValue();             runningTotal = runningTotal + value;             minimum = Math.min( minimum, runningTotal );             maximum = Math.max( maximum, runningTotal );         }     } } if (!allItemsNull) {     return new org.jfree.data.Range( minimum, maximum ); } else {     return null; }  =>   boolean allItemsNull = true; double minimum = 0.0; double maximum = 0.0; for (int row = 0; row < dataset.getRowCount(); row++) {     double runningTotal = 0.0;     for (int column = 0; column < dataset.getColumnCount() - 1; column++) {         java.lang.Number n = dataset.getValue( row, column );         if (n != null) {             allItemsNull = false;             double value = n.doubleValue();             runningTotal = runningTotal + value;             minimum = Math.min( minimum, runningTotal );             maximum = Math.max( maximum, runningTotal );         }     } } if (!allItemsNull) {     return new org.jfree.data.Range( minimum, maximum ); } else {     return null; }
SDL_485:877:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } boolean allItemsNull = true; double minimum = 0.0; double maximum = 0.0; for (int row = 0; row < dataset.getRowCount(); row++) {     double runningTotal = 0.0;     for (int column = 0; column < dataset.getColumnCount() - 1; column++) {         java.lang.Number n = dataset.getValue( row, column );         if (n != null) {             allItemsNull = false;             double value = n.doubleValue();             runningTotal = runningTotal + value;             minimum = Math.min( minimum, runningTotal );             maximum = Math.max( maximum, runningTotal );         }     } } if (!allItemsNull) {     return new org.jfree.data.Range( minimum, maximum ); } else {     return null; }  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } boolean allItemsNull = true; double minimum = 0.0; double maximum = 0.0; if (!allItemsNull) {     return new org.jfree.data.Range( minimum, maximum ); } else {     return null; }
SDL_486:885:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } boolean allItemsNull = true; double minimum = 0.0; double maximum = 0.0; for (int row = 0; row < dataset.getRowCount(); row++) {     double runningTotal = 0.0;     for (int column = 0; column < dataset.getColumnCount() - 1; column++) {         java.lang.Number n = dataset.getValue( row, column );         if (n != null) {             allItemsNull = false;             double value = n.doubleValue();             runningTotal = runningTotal + value;             minimum = Math.min( minimum, runningTotal );             maximum = Math.max( maximum, runningTotal );         }     } } if (!allItemsNull) {     return new org.jfree.data.Range( minimum, maximum ); } else {     return null; }  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } boolean allItemsNull = true; double minimum = 0.0; double maximum = 0.0; for (int row = 0; row < dataset.getRowCount(); row++) {     double runningTotal = 0.0;     for (int column = 0; column < dataset.getColumnCount() - 1; column++) {         java.lang.Number n = dataset.getValue( row, column );         if (n != null) {             allItemsNull = false;             double value = n.doubleValue();             runningTotal = runningTotal + value;             minimum = Math.min( minimum, runningTotal );             maximum = Math.max( maximum, runningTotal );         }     } }
SDL_487:867:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_488:869:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_489:874:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): double runningTotal = 0.0; for (int column = 0; column < dataset.getColumnCount() - 1; column++) {     java.lang.Number n = dataset.getValue( row, column );     if (n != null) {         allItemsNull = false;         double value = n.doubleValue();         runningTotal = runningTotal + value;         minimum = Math.min( minimum, runningTotal );         maximum = Math.max( maximum, runningTotal );     } }  =>   double runningTotal = 0.0;
SDL_490:885:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): for (int row = 0; row < dataset.getRowCount(); row++) {     double runningTotal = 0.0;     for (int column = 0; column < dataset.getColumnCount() - 1; column++) {         java.lang.Number n = dataset.getValue( row, column );         if (n != null) {             allItemsNull = false;             double value = n.doubleValue();             runningTotal = runningTotal + value;             minimum = Math.min( minimum, runningTotal );             maximum = Math.max( maximum, runningTotal );         }     } }  =>   for (int row = 0;; row++) {     double runningTotal = 0.0;     for (int column = 0; column < dataset.getColumnCount() - 1; column++) {         java.lang.Number n = dataset.getValue( row, column );         if (n != null) {             allItemsNull = false;             double value = n.doubleValue();             runningTotal = runningTotal + value;             minimum = Math.min( minimum, runningTotal );             maximum = Math.max( maximum, runningTotal );         }     } }
SDL_491:885:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): for (int row = 0; row < dataset.getRowCount(); row++) {     double runningTotal = 0.0;     for (int column = 0; column < dataset.getColumnCount() - 1; column++) {         java.lang.Number n = dataset.getValue( row, column );         if (n != null) {             allItemsNull = false;             double value = n.doubleValue();             runningTotal = runningTotal + value;             minimum = Math.min( minimum, runningTotal );             maximum = Math.max( maximum, runningTotal );         }     } }  =>   for (int row = 0; row < dataset.getRowCount();) {     double runningTotal = 0.0;     for (int column = 0; column < dataset.getColumnCount() - 1; column++) {         java.lang.Number n = dataset.getValue( row, column );         if (n != null) {             allItemsNull = false;             double value = n.doubleValue();             runningTotal = runningTotal + value;             minimum = Math.min( minimum, runningTotal );             maximum = Math.max( maximum, runningTotal );         }     } }
SDL_492:876:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): java.lang.Number n = dataset.getValue( row, column ); if (n != null) {     allItemsNull = false;     double value = n.doubleValue();     runningTotal = runningTotal + value;     minimum = Math.min( minimum, runningTotal );     maximum = Math.max( maximum, runningTotal ); }  =>   java.lang.Number n = dataset.getValue( row, column );
SDL_493:884:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): for (int column = 0; column < dataset.getColumnCount() - 1; column++) {     java.lang.Number n = dataset.getValue( row, column );     if (n != null) {         allItemsNull = false;         double value = n.doubleValue();         runningTotal = runningTotal + value;         minimum = Math.min( minimum, runningTotal );         maximum = Math.max( maximum, runningTotal );     } }  =>   for (int column = 0;; column++) {     java.lang.Number n = dataset.getValue( row, column );     if (n != null) {         allItemsNull = false;         double value = n.doubleValue();         runningTotal = runningTotal + value;         minimum = Math.min( minimum, runningTotal );         maximum = Math.max( maximum, runningTotal );     } }
SDL_494:884:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): for (int column = 0; column < dataset.getColumnCount() - 1; column++) {     java.lang.Number n = dataset.getValue( row, column );     if (n != null) {         allItemsNull = false;         double value = n.doubleValue();         runningTotal = runningTotal + value;         minimum = Math.min( minimum, runningTotal );         maximum = Math.max( maximum, runningTotal );     } }  =>   for (int column = 0; column < dataset.getColumnCount() - 1;) {     java.lang.Number n = dataset.getValue( row, column );     if (n != null) {         allItemsNull = false;         double value = n.doubleValue();         runningTotal = runningTotal + value;         minimum = Math.min( minimum, runningTotal );         maximum = Math.max( maximum, runningTotal );     } }
SDL_495:881:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): allItemsNull = false; double value = n.doubleValue(); runningTotal = runningTotal + value; minimum = Math.min( minimum, runningTotal ); maximum = Math.max( maximum, runningTotal );  =>   double value = n.doubleValue(); runningTotal = runningTotal + value; minimum = Math.min( minimum, runningTotal ); maximum = Math.max( maximum, runningTotal );
SDL_496:881:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): allItemsNull = false; double value = n.doubleValue(); runningTotal = runningTotal + value; minimum = Math.min( minimum, runningTotal ); maximum = Math.max( maximum, runningTotal );  =>   allItemsNull = false; double value = n.doubleValue(); minimum = Math.min( minimum, runningTotal ); maximum = Math.max( maximum, runningTotal );
SDL_497:881:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): allItemsNull = false; double value = n.doubleValue(); runningTotal = runningTotal + value; minimum = Math.min( minimum, runningTotal ); maximum = Math.max( maximum, runningTotal );  =>   allItemsNull = false; double value = n.doubleValue(); runningTotal = runningTotal + value; maximum = Math.max( maximum, runningTotal );
SDL_498:881:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): allItemsNull = false; double value = n.doubleValue(); runningTotal = runningTotal + value; minimum = Math.min( minimum, runningTotal ); maximum = Math.max( maximum, runningTotal );  =>   allItemsNull = false; double value = n.doubleValue(); runningTotal = runningTotal + value; minimum = Math.min( minimum, runningTotal );
SDL_499:883:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): if (n != null) {     allItemsNull = false;     double value = n.doubleValue();     runningTotal = runningTotal + value;     minimum = Math.min( minimum, runningTotal );     maximum = Math.max( maximum, runningTotal ); }  =>   if (true) {     allItemsNull = false;     double value = n.doubleValue();     runningTotal = runningTotal + value;     minimum = Math.min( minimum, runningTotal );     maximum = Math.max( maximum, runningTotal ); }
SDL_500:890:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): if (!allItemsNull) {     return new org.jfree.data.Range( minimum, maximum ); } else {     return null; }  =>   if (true) {     return new org.jfree.data.Range( minimum, maximum ); } else {     return null; }
