AORB_1:61:double_calculatePieDatasetTotal(org.jfree.data.pie.PieDataset):totalValue + v => totalValue * v
AORB_2:61:double_calculatePieDatasetTotal(org.jfree.data.pie.PieDataset):totalValue + v => totalValue / v
AORB_3:61:double_calculatePieDatasetTotal(org.jfree.data.pie.PieDataset):totalValue + v => totalValue % v
AORB_4:61:double_calculatePieDatasetTotal(org.jfree.data.pie.PieDataset):totalValue + v => totalValue - v
AORB_5:119:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int):value / total => value * total
AORB_6:119:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int):value / total => value % total
AORB_7:119:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int):value / total => value + total
AORB_8:119:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int):value / total => value - total
AORB_9:147:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double):r + 1 => r * 1
AORB_10:147:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double):r + 1 => r / 1
AORB_11:147:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double):r + 1 => r % 1
AORB_12:147:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double):r + 1 => r - 1
AORB_13:149:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double):c + 1 => c * 1
AORB_14:149:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double):c + 1 => c / 1
AORB_15:149:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double):c + 1 => c % 1
AORB_16:149:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double):c + 1 => c - 1
AORB_17:160:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]):r + 1 => r * 1
AORB_18:160:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]):r + 1 => r / 1
AORB_19:160:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]):r + 1 => r % 1
AORB_20:160:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]):r + 1 => r - 1
AORB_21:162:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]):c + 1 => c * 1
AORB_22:162:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]):c + 1 => c / 1
AORB_23:162:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]):c + 1 => c % 1
AORB_24:162:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]):c + 1 => c - 1
AORB_25:241:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable):end - start => end * start
AORB_26:241:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable):end - start => end / start
AORB_27:241:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable):end - start => end % start
AORB_28:241:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable):end - start => end + start
AORB_29:241:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable):samples - 1 => samples * 1
AORB_30:241:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable):samples - 1 => samples / 1
AORB_31:241:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable):samples - 1 => samples % 1
AORB_32:241:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable):samples - 1 => samples + 1
AORB_33:241:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable):(end - start) / (samples - 1) => (end - start) * (samples - 1)
AORB_34:241:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable):(end - start) / (samples - 1) => (end - start) % (samples - 1)
AORB_35:241:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable):(end - start) / (samples - 1) => end - start + (samples - 1)
AORB_36:241:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable):(end - start) / (samples - 1) => end - start - (samples - 1)
AORB_37:243:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable):step * i => step / i
AORB_38:243:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable):step * i => step % i
AORB_39:243:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable):step * i => step + i
AORB_40:243:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable):step * i => step - i
AORB_41:243:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable):start + step * i => start * (step * i)
AORB_42:243:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable):start + step * i => start / (step * i)
AORB_43:243:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable):start + step * i => start % (step * i)
AORB_44:243:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable):start + step * i => start - step * i
AORB_45:616:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean):mean - std => mean * std
AORB_46:616:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean):mean - std => mean / std
AORB_47:616:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean):mean - std => mean % std
AORB_48:616:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean):mean - std => mean + std
AORB_49:617:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean):mean + std => mean * std
AORB_50:617:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean):mean + std => mean / std
AORB_51:617:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean):mean + std => mean % std
AORB_52:617:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean):mean + std => mean - std
AORB_53:1111:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double):positive + value => positive * value
AORB_54:1111:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double):positive + value => positive / value
AORB_55:1111:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double):positive + value => positive % value
AORB_56:1111:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double):positive + value => positive - value
AORB_57:1114:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double):negative + value => negative * value
AORB_58:1114:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double):negative + value => negative / value
AORB_59:1114:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double):negative + value => negative % value
AORB_60:1114:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double):negative + value => negative - value
AORB_61:1152:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap):positive[groupIndex[series]] + value => positive[groupIndex[series]] * value
AORB_62:1152:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap):positive[groupIndex[series]] + value => positive[groupIndex[series]] / value
AORB_63:1152:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap):positive[groupIndex[series]] + value => positive[groupIndex[series]] % value
AORB_64:1152:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap):positive[groupIndex[series]] + value => positive[groupIndex[series]] - value
AORB_65:1155:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap):negative[groupIndex[series]] + value => negative[groupIndex[series]] * value
AORB_66:1155:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap):negative[groupIndex[series]] + value => negative[groupIndex[series]] / value
AORB_67:1155:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap):negative[groupIndex[series]] + value => negative[groupIndex[series]] % value
AORB_68:1155:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap):negative[groupIndex[series]] + value => negative[groupIndex[series]] - value
AORB_69:1190:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset):total + value => total * value
AORB_70:1190:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset):total + value => total / value
AORB_71:1190:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset):total + value => total % value
AORB_72:1190:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset):total + value => total - value
AORB_73:1220:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset):total + value => total * value
AORB_74:1220:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset):total + value => total / value
AORB_75:1220:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset):total + value => total % value
AORB_76:1220:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset):total + value => total - value
AORB_77:1279:double_calculateStackTotal(org.jfree.data.xy.TableXYDataset,int):total + value => total * value
AORB_78:1279:double_calculateStackTotal(org.jfree.data.xy.TableXYDataset,int):total + value => total / value
AORB_79:1279:double_calculateStackTotal(org.jfree.data.xy.TableXYDataset,int):total + value => total % value
AORB_80:1279:double_calculateStackTotal(org.jfree.data.xy.TableXYDataset,int):total + value => total - value
AORB_81:1295:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset):dataset.getColumnCount() - 1 => dataset.getColumnCount() * 1
AORB_82:1295:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset):dataset.getColumnCount() - 1 => dataset.getColumnCount() / 1
AORB_83:1295:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset):dataset.getColumnCount() - 1 => dataset.getColumnCount() % 1
AORB_84:1295:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset):dataset.getColumnCount() - 1 => dataset.getColumnCount() + 1
AORB_85:1301:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset):runningTotal + value => runningTotal * value
AORB_86:1301:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset):runningTotal + value => runningTotal / value
AORB_87:1301:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset):runningTotal + value => runningTotal % value
AORB_88:1301:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset):runningTotal + value => runningTotal - value
ROR_1:46:double_calculatePieDatasetTotal(org.jfree.data.pie.PieDataset): dataset == null  =>   dataset != null
ROR_2:54:double_calculatePieDatasetTotal(org.jfree.data.pie.PieDataset): current != null  =>   current == null
ROR_3:57:double_calculatePieDatasetTotal(org.jfree.data.pie.PieDataset): value != null  =>   value == null
ROR_4:60:double_calculatePieDatasetTotal(org.jfree.data.pie.PieDataset): v > 0  =>   v >= 0
ROR_5:60:double_calculatePieDatasetTotal(org.jfree.data.pie.PieDataset): v > 0  =>   v < 0
ROR_6:60:double_calculatePieDatasetTotal(org.jfree.data.pie.PieDataset): v > 0  =>   v <= 0
ROR_7:60:double_calculatePieDatasetTotal(org.jfree.data.pie.PieDataset): v > 0  =>   v == 0
ROR_8:60:double_calculatePieDatasetTotal(org.jfree.data.pie.PieDataset): v > 0  =>   v != 0
ROR_9:60:double_calculatePieDatasetTotal(org.jfree.data.pie.PieDataset): v > 0  =>   true
ROR_10:60:double_calculatePieDatasetTotal(org.jfree.data.pie.PieDataset): v > 0  =>   false
ROR_11:78:org.jfree.data.pie.PieDataset_createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int): current < columnCount  =>   current > columnCount
ROR_12:78:org.jfree.data.pie.PieDataset_createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int): current < columnCount  =>   current >= columnCount
ROR_13:78:org.jfree.data.pie.PieDataset_createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int): current < columnCount  =>   current <= columnCount
ROR_14:78:org.jfree.data.pie.PieDataset_createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int): current < columnCount  =>   current == columnCount
ROR_15:78:org.jfree.data.pie.PieDataset_createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int): current < columnCount  =>   current != columnCount
ROR_16:78:org.jfree.data.pie.PieDataset_createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int): current < columnCount  =>   true
ROR_17:78:org.jfree.data.pie.PieDataset_createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int): current < columnCount  =>   false
ROR_18:95:org.jfree.data.pie.PieDataset_createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int): i < rowCount  =>   i > rowCount
ROR_19:95:org.jfree.data.pie.PieDataset_createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int): i < rowCount  =>   i >= rowCount
ROR_20:95:org.jfree.data.pie.PieDataset_createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int): i < rowCount  =>   i <= rowCount
ROR_21:95:org.jfree.data.pie.PieDataset_createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int): i < rowCount  =>   i == rowCount
ROR_22:95:org.jfree.data.pie.PieDataset_createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int): i < rowCount  =>   i != rowCount
ROR_23:95:org.jfree.data.pie.PieDataset_createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int): i < rowCount  =>   true
ROR_24:95:org.jfree.data.pie.PieDataset_createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int): i < rowCount  =>   false
ROR_25:117:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): dataValue != null  =>   dataValue == null
ROR_26:119:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): value / total < minimumPercent  =>   value / total > minimumPercent
ROR_27:119:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): value / total < minimumPercent  =>   value / total >= minimumPercent
ROR_28:119:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): value / total < minimumPercent  =>   value / total <= minimumPercent
ROR_29:119:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): value / total < minimumPercent  =>   value / total == minimumPercent
ROR_30:119:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): value / total < minimumPercent  =>   value / total != minimumPercent
ROR_31:119:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): value / total < minimumPercent  =>   true
ROR_32:119:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): value / total < minimumPercent  =>   false
ROR_33:129:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): dataValue != null  =>   dataValue == null
ROR_34:130:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): otherKeys.size() >= minItems  =>   otherKeys.size() > minItems
ROR_35:130:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): otherKeys.size() >= minItems  =>   otherKeys.size() < minItems
ROR_36:130:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): otherKeys.size() >= minItems  =>   otherKeys.size() <= minItems
ROR_37:130:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): otherKeys.size() >= minItems  =>   otherKeys.size() == minItems
ROR_38:130:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): otherKeys.size() >= minItems  =>   otherKeys.size() != minItems
ROR_39:130:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): otherKeys.size() >= minItems  =>   true
ROR_40:130:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): otherKeys.size() >= minItems  =>   false
ROR_41:137:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): otherKeys.size() >= minItems  =>   otherKeys.size() > minItems
ROR_42:137:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): otherKeys.size() >= minItems  =>   otherKeys.size() < minItems
ROR_43:137:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): otherKeys.size() >= minItems  =>   otherKeys.size() <= minItems
ROR_44:137:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): otherKeys.size() >= minItems  =>   otherKeys.size() == minItems
ROR_45:137:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): otherKeys.size() >= minItems  =>   otherKeys.size() != minItems
ROR_46:137:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): otherKeys.size() >= minItems  =>   true
ROR_47:137:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): otherKeys.size() >= minItems  =>   false
ROR_48:146:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): r < data.length  =>   r > data.length
ROR_49:146:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): r < data.length  =>   r >= data.length
ROR_50:146:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): r < data.length  =>   r <= data.length
ROR_51:146:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): r < data.length  =>   r == data.length
ROR_52:146:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): r < data.length  =>   r != data.length
ROR_53:146:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): r < data.length  =>   true
ROR_54:146:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): r < data.length  =>   false
ROR_55:148:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): c < data[r].length  =>   c > data[r].length
ROR_56:148:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): c < data[r].length  =>   c >= data[r].length
ROR_57:148:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): c < data[r].length  =>   c <= data[r].length
ROR_58:148:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): c < data[r].length  =>   c == data[r].length
ROR_59:148:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): c < data[r].length  =>   c != data[r].length
ROR_60:148:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): c < data[r].length  =>   true
ROR_61:148:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): c < data[r].length  =>   false
ROR_62:159:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): r < data.length  =>   r > data.length
ROR_63:159:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): r < data.length  =>   r >= data.length
ROR_64:159:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): r < data.length  =>   r <= data.length
ROR_65:159:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): r < data.length  =>   r == data.length
ROR_66:159:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): r < data.length  =>   r != data.length
ROR_67:159:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): r < data.length  =>   true
ROR_68:159:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): r < data.length  =>   false
ROR_69:161:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): c < data[r].length  =>   c > data[r].length
ROR_70:161:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): c < data[r].length  =>   c >= data[r].length
ROR_71:161:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): c < data[r].length  =>   c <= data[r].length
ROR_72:161:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): c < data[r].length  =>   c == data[r].length
ROR_73:161:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): c < data[r].length  =>   c != data[r].length
ROR_74:161:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): c < data[r].length  =>   true
ROR_75:161:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): c < data[r].length  =>   false
ROR_76:171:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): rowKeys == null  =>   rowKeys != null
ROR_77:174:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): columnKeys == null  =>   columnKeys != null
ROR_78:183:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): rowKeys.length != data.length  =>   rowKeys.length > data.length
ROR_79:183:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): rowKeys.length != data.length  =>   rowKeys.length >= data.length
ROR_80:183:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): rowKeys.length != data.length  =>   rowKeys.length < data.length
ROR_81:183:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): rowKeys.length != data.length  =>   rowKeys.length <= data.length
ROR_82:183:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): rowKeys.length != data.length  =>   rowKeys.length == data.length
ROR_83:183:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): rowKeys.length != data.length  =>   true
ROR_84:183:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): rowKeys.length != data.length  =>   false
ROR_85:187:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): r < data.length  =>   r > data.length
ROR_86:187:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): r < data.length  =>   r >= data.length
ROR_87:187:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): r < data.length  =>   r <= data.length
ROR_88:187:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): r < data.length  =>   r == data.length
ROR_89:187:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): r < data.length  =>   r != data.length
ROR_90:187:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): r < data.length  =>   true
ROR_91:187:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): r < data.length  =>   false
ROR_92:190:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): columnKeys.length != columnCount  =>   columnKeys.length > columnCount
ROR_93:190:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): columnKeys.length != columnCount  =>   columnKeys.length >= columnCount
ROR_94:190:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): columnKeys.length != columnCount  =>   columnKeys.length < columnCount
ROR_95:190:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): columnKeys.length != columnCount  =>   columnKeys.length <= columnCount
ROR_96:190:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): columnKeys.length != columnCount  =>   columnKeys.length == columnCount
ROR_97:190:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): columnKeys.length != columnCount  =>   true
ROR_98:190:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): columnKeys.length != columnCount  =>   false
ROR_99:194:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): r < data.length  =>   r > data.length
ROR_100:194:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): r < data.length  =>   r >= data.length
ROR_101:194:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): r < data.length  =>   r <= data.length
ROR_102:194:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): r < data.length  =>   r == data.length
ROR_103:194:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): r < data.length  =>   r != data.length
ROR_104:194:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): r < data.length  =>   true
ROR_105:194:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): r < data.length  =>   false
ROR_106:196:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): c < data[r].length  =>   c > data[r].length
ROR_107:196:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): c < data[r].length  =>   c >= data[r].length
ROR_108:196:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): c < data[r].length  =>   c <= data[r].length
ROR_109:196:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): c < data[r].length  =>   c == data[r].length
ROR_110:196:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): c < data[r].length  =>   c != data[r].length
ROR_111:196:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): c < data[r].length  =>   true
ROR_112:196:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): c < data[r].length  =>   false
ROR_113:206:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): rowKey == null  =>   rowKey != null
ROR_114:209:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): rowData == null  =>   rowData != null
ROR_115:213:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): i < rowData.getItemCount()  =>   i > rowData.getItemCount()
ROR_116:213:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): i < rowData.getItemCount()  =>   i >= rowData.getItemCount()
ROR_117:213:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): i < rowData.getItemCount()  =>   i <= rowData.getItemCount()
ROR_118:213:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): i < rowData.getItemCount()  =>   i == rowData.getItemCount()
ROR_119:213:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): i < rowData.getItemCount()  =>   i != rowData.getItemCount()
ROR_120:213:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): i < rowData.getItemCount()  =>   true
ROR_121:213:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): i < rowData.getItemCount()  =>   false
ROR_122:228:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): f == null  =>   f != null
ROR_123:231:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): seriesKey == null  =>   seriesKey != null
ROR_124:234:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): start >= end  =>   start > end
ROR_125:234:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): start >= end  =>   start < end
ROR_126:234:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): start >= end  =>   start <= end
ROR_127:234:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): start >= end  =>   start == end
ROR_128:234:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): start >= end  =>   start != end
ROR_129:234:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): start >= end  =>   true
ROR_130:234:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): start >= end  =>   false
ROR_131:237:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): samples < 2  =>   samples > 2
ROR_132:237:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): samples < 2  =>   samples >= 2
ROR_133:237:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): samples < 2  =>   samples <= 2
ROR_134:237:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): samples < 2  =>   samples == 2
ROR_135:237:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): samples < 2  =>   samples != 2
ROR_136:237:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): samples < 2  =>   true
ROR_137:237:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): samples < 2  =>   false
ROR_138:242:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): i < samples  =>   i > samples
ROR_139:242:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): i < samples  =>   i >= samples
ROR_140:242:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): i < samples  =>   i <= samples
ROR_141:242:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): i < samples  =>   i == samples
ROR_142:242:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): i < samples  =>   i != samples
ROR_143:242:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): i < samples  =>   true
ROR_144:242:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): i < samples  =>   false
ROR_145:251:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): dataset == null  =>   dataset != null
ROR_146:255:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): itemCount == 0  =>   itemCount > 0
ROR_147:255:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): itemCount == 0  =>   itemCount >= 0
ROR_148:255:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): itemCount == 0  =>   itemCount < 0
ROR_149:255:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): itemCount == 0  =>   itemCount <= 0
ROR_150:255:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): itemCount == 0  =>   itemCount != 0
ROR_151:255:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): itemCount == 0  =>   true
ROR_152:255:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): itemCount == 0  =>   false
ROR_153:258:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): item < itemCount  =>   item > itemCount
ROR_154:258:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): item < itemCount  =>   item >= itemCount
ROR_155:258:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): item < itemCount  =>   item <= itemCount
ROR_156:258:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): item < itemCount  =>   item == itemCount
ROR_157:258:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): item < itemCount  =>   item != itemCount
ROR_158:258:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): item < itemCount  =>   true
ROR_159:258:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): item < itemCount  =>   false
ROR_160:260:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): y != null  =>   y == null
ROR_161:262:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): yy > 0.0  =>   yy >= 0.0
ROR_162:262:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): yy > 0.0  =>   yy < 0.0
ROR_163:262:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): yy > 0.0  =>   yy <= 0.0
ROR_164:262:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): yy > 0.0  =>   yy == 0.0
ROR_165:262:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): yy > 0.0  =>   yy != 0.0
ROR_166:262:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): yy > 0.0  =>   true
ROR_167:262:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): yy > 0.0  =>   false
ROR_168:272:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): dataset == null  =>   dataset != null
ROR_169:277:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): rowCount == 0  =>   rowCount > 0
ROR_170:277:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): rowCount == 0  =>   rowCount >= 0
ROR_171:277:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): rowCount == 0  =>   rowCount < 0
ROR_172:277:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): rowCount == 0  =>   rowCount <= 0
ROR_173:277:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): rowCount == 0  =>   rowCount != 0
ROR_174:277:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): rowCount == 0  =>   true
ROR_175:277:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): rowCount == 0  =>   false
ROR_176:277:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): columnCount == 0  =>   columnCount > 0
ROR_177:277:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): columnCount == 0  =>   columnCount >= 0
ROR_178:277:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): columnCount == 0  =>   columnCount < 0
ROR_179:277:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): columnCount == 0  =>   columnCount <= 0
ROR_180:277:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): columnCount == 0  =>   columnCount != 0
ROR_181:277:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): columnCount == 0  =>   true
ROR_182:277:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): columnCount == 0  =>   false
ROR_183:280:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): r < rowCount  =>   r > rowCount
ROR_184:280:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): r < rowCount  =>   r >= rowCount
ROR_185:280:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): r < rowCount  =>   r <= rowCount
ROR_186:280:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): r < rowCount  =>   r == rowCount
ROR_187:280:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): r < rowCount  =>   r != rowCount
ROR_188:280:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): r < rowCount  =>   true
ROR_189:280:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): r < rowCount  =>   false
ROR_190:281:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): c < columnCount  =>   c > columnCount
ROR_191:281:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): c < columnCount  =>   c >= columnCount
ROR_192:281:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): c < columnCount  =>   c <= columnCount
ROR_193:281:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): c < columnCount  =>   c == columnCount
ROR_194:281:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): c < columnCount  =>   c != columnCount
ROR_195:281:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): c < columnCount  =>   true
ROR_196:281:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): c < columnCount  =>   false
ROR_197:282:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): dataset.getValue( r, c ) != null  =>   dataset.getValue( r, c ) == null
ROR_198:292:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): dataset != null  =>   dataset == null
ROR_199:293:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): s < dataset.getSeriesCount()  =>   s > dataset.getSeriesCount()
ROR_200:293:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): s < dataset.getSeriesCount()  =>   s >= dataset.getSeriesCount()
ROR_201:293:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): s < dataset.getSeriesCount()  =>   s <= dataset.getSeriesCount()
ROR_202:293:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): s < dataset.getSeriesCount()  =>   s == dataset.getSeriesCount()
ROR_203:293:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): s < dataset.getSeriesCount()  =>   s != dataset.getSeriesCount()
ROR_204:293:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): s < dataset.getSeriesCount()  =>   true
ROR_205:293:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): s < dataset.getSeriesCount()  =>   false
ROR_206:294:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): dataset.getItemCount( s ) > 0  =>   dataset.getItemCount( s ) >= 0
ROR_207:294:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): dataset.getItemCount( s ) > 0  =>   dataset.getItemCount( s ) < 0
ROR_208:294:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): dataset.getItemCount( s ) > 0  =>   dataset.getItemCount( s ) <= 0
ROR_209:294:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): dataset.getItemCount( s ) > 0  =>   dataset.getItemCount( s ) == 0
ROR_210:294:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): dataset.getItemCount( s ) > 0  =>   dataset.getItemCount( s ) != 0
ROR_211:294:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): dataset.getItemCount( s ) > 0  =>   true
ROR_212:294:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): dataset.getItemCount( s ) > 0  =>   false
ROR_213:309:org.jfree.data.Range_findDomainBounds(org.jfree.data.xy.XYDataset,boolean): dataset == null  =>   dataset != null
ROR_214:324:org.jfree.data.Range_findDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): dataset == null  =>   dataset != null
ROR_215:344:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): dataset == null  =>   dataset != null
ROR_216:354:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   series > seriesCount
ROR_217:354:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   series >= seriesCount
ROR_218:354:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   series <= seriesCount
ROR_219:354:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   series == seriesCount
ROR_220:354:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   series != seriesCount
ROR_221:354:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   true
ROR_222:354:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   false
ROR_223:356:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   item > itemCount
ROR_224:356:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   item >= itemCount
ROR_225:356:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   item <= itemCount
ROR_226:356:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   item == itemCount
ROR_227:356:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   item != itemCount
ROR_228:356:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   true
ROR_229:356:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   false
ROR_230:368:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   series > seriesCount
ROR_231:368:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   series >= seriesCount
ROR_232:368:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   series <= seriesCount
ROR_233:368:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   series == seriesCount
ROR_234:368:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   series != seriesCount
ROR_235:368:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   true
ROR_236:368:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   false
ROR_237:370:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   item > itemCount
ROR_238:370:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   item >= itemCount
ROR_239:370:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   item <= itemCount
ROR_240:370:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   item == itemCount
ROR_241:370:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   item != itemCount
ROR_242:370:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   true
ROR_243:370:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   false
ROR_244:380:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): minimum > maximum  =>   minimum >= maximum
ROR_245:380:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): minimum > maximum  =>   minimum < maximum
ROR_246:380:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): minimum > maximum  =>   minimum <= maximum
ROR_247:380:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): minimum > maximum  =>   minimum == maximum
ROR_248:380:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): minimum > maximum  =>   minimum != maximum
ROR_249:380:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): minimum > maximum  =>   true
ROR_250:380:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): minimum > maximum  =>   false
ROR_251:394:org.jfree.data.Range_findRangeBounds(org.jfree.data.category.CategoryDataset,boolean): dataset == null  =>   dataset != null
ROR_252:409:org.jfree.data.Range_findRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): dataset == null  =>   dataset != null
ROR_253:429:org.jfree.data.Range_findRangeBounds(org.jfree.data.xy.XYDataset,boolean): dataset == null  =>   dataset != null
ROR_254:444:org.jfree.data.Range_findRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): dataset == null  =>   dataset != null
ROR_255:478:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): row < rowCount  =>   row > rowCount
ROR_256:478:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): row < rowCount  =>   row >= rowCount
ROR_257:478:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): row < rowCount  =>   row <= rowCount
ROR_258:478:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): row < rowCount  =>   row == rowCount
ROR_259:478:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): row < rowCount  =>   row != rowCount
ROR_260:478:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): row < rowCount  =>   true
ROR_261:478:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): row < rowCount  =>   false
ROR_262:479:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): column < columnCount  =>   column > columnCount
ROR_263:479:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): column < columnCount  =>   column >= columnCount
ROR_264:479:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): column < columnCount  =>   column <= columnCount
ROR_265:479:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): column < columnCount  =>   column == columnCount
ROR_266:479:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): column < columnCount  =>   column != columnCount
ROR_267:479:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): column < columnCount  =>   true
ROR_268:479:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): column < columnCount  =>   false
ROR_269:482:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): value != null  =>   value == null
ROR_270:487:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): lvalue != null  =>   lvalue == null
ROR_271:492:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): uvalue != null  =>   uvalue == null
ROR_272:499:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): row < rowCount  =>   row > rowCount
ROR_273:499:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): row < rowCount  =>   row >= rowCount
ROR_274:499:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): row < rowCount  =>   row <= rowCount
ROR_275:499:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): row < rowCount  =>   row == rowCount
ROR_276:499:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): row < rowCount  =>   row != rowCount
ROR_277:499:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): row < rowCount  =>   true
ROR_278:499:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): row < rowCount  =>   false
ROR_279:500:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): column < columnCount  =>   column > columnCount
ROR_280:500:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): column < columnCount  =>   column >= columnCount
ROR_281:500:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): column < columnCount  =>   column <= columnCount
ROR_282:500:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): column < columnCount  =>   column == columnCount
ROR_283:500:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): column < columnCount  =>   column != columnCount
ROR_284:500:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): column < columnCount  =>   true
ROR_285:500:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): column < columnCount  =>   false
ROR_286:502:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): value != null  =>   value == null
ROR_287:512:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): minimum == Double.POSITIVE_INFINITY  =>   minimum > Double.POSITIVE_INFINITY
ROR_288:512:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): minimum == Double.POSITIVE_INFINITY  =>   minimum >= Double.POSITIVE_INFINITY
ROR_289:512:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): minimum == Double.POSITIVE_INFINITY  =>   minimum < Double.POSITIVE_INFINITY
ROR_290:512:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): minimum == Double.POSITIVE_INFINITY  =>   minimum <= Double.POSITIVE_INFINITY
ROR_291:512:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): minimum == Double.POSITIVE_INFINITY  =>   minimum != Double.POSITIVE_INFINITY
ROR_292:512:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): minimum == Double.POSITIVE_INFINITY  =>   true
ROR_293:512:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): minimum == Double.POSITIVE_INFINITY  =>   false
ROR_294:521:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): dataset == null  =>   dataset != null
ROR_295:524:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): visibleSeriesKeys == null  =>   visibleSeriesKeys != null
ROR_296:537:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): item < itemCount  =>   item > itemCount
ROR_297:537:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): item < itemCount  =>   item >= itemCount
ROR_298:537:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): item < itemCount  =>   item <= itemCount
ROR_299:537:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): item < itemCount  =>   item == itemCount
ROR_300:537:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): item < itemCount  =>   item != itemCount
ROR_301:537:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): item < itemCount  =>   true
ROR_302:537:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): item < itemCount  =>   false
ROR_303:539:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): lvalue == null  =>   lvalue != null
ROR_304:543:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): uvalue == null  =>   uvalue != null
ROR_305:546:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): lvalue != null  =>   lvalue == null
ROR_306:549:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): uvalue != null  =>   uvalue == null
ROR_307:563:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): column < columnCount  =>   column > columnCount
ROR_308:563:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): column < columnCount  =>   column >= columnCount
ROR_309:563:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): column < columnCount  =>   column <= columnCount
ROR_310:563:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): column < columnCount  =>   column == columnCount
ROR_311:563:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): column < columnCount  =>   column != columnCount
ROR_312:563:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): column < columnCount  =>   true
ROR_313:563:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): column < columnCount  =>   false
ROR_314:566:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): lvalue != null  =>   lvalue == null
ROR_315:569:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): uvalue != null  =>   uvalue == null
ROR_316:581:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): column < columnCount  =>   column > columnCount
ROR_317:581:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): column < columnCount  =>   column >= columnCount
ROR_318:581:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): column < columnCount  =>   column <= columnCount
ROR_319:581:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): column < columnCount  =>   column == columnCount
ROR_320:581:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): column < columnCount  =>   column != columnCount
ROR_321:581:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): column < columnCount  =>   true
ROR_322:581:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): column < columnCount  =>   false
ROR_323:603:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): column < columnCount  =>   column > columnCount
ROR_324:603:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): column < columnCount  =>   column >= columnCount
ROR_325:603:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): column < columnCount  =>   column <= columnCount
ROR_326:603:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): column < columnCount  =>   column == columnCount
ROR_327:603:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): column < columnCount  =>   column != columnCount
ROR_328:603:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): column < columnCount  =>   true
ROR_329:603:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): column < columnCount  =>   false
ROR_330:605:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): meanN != null  =>   meanN == null
ROR_331:608:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): stdN != null  =>   stdN == null
ROR_332:627:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): column < columnCount  =>   column > columnCount
ROR_333:627:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): column < columnCount  =>   column >= columnCount
ROR_334:627:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): column < columnCount  =>   column <= columnCount
ROR_335:627:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): column < columnCount  =>   column == columnCount
ROR_336:627:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): column < columnCount  =>   column != columnCount
ROR_337:627:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): column < columnCount  =>   true
ROR_338:627:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): column < columnCount  =>   false
ROR_339:629:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): value != null  =>   value == null
ROR_340:642:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): minimum == Double.POSITIVE_INFINITY  =>   minimum > Double.POSITIVE_INFINITY
ROR_341:642:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): minimum == Double.POSITIVE_INFINITY  =>   minimum >= Double.POSITIVE_INFINITY
ROR_342:642:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): minimum == Double.POSITIVE_INFINITY  =>   minimum < Double.POSITIVE_INFINITY
ROR_343:642:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): minimum == Double.POSITIVE_INFINITY  =>   minimum <= Double.POSITIVE_INFINITY
ROR_344:642:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): minimum == Double.POSITIVE_INFINITY  =>   minimum != Double.POSITIVE_INFINITY
ROR_345:642:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): minimum == Double.POSITIVE_INFINITY  =>   true
ROR_346:642:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): minimum == Double.POSITIVE_INFINITY  =>   false
ROR_347:666:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   series > seriesCount
ROR_348:666:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   series >= seriesCount
ROR_349:666:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   series <= seriesCount
ROR_350:666:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   series == seriesCount
ROR_351:666:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   series != seriesCount
ROR_352:666:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   true
ROR_353:666:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   false
ROR_354:668:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   item > itemCount
ROR_355:668:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   item >= itemCount
ROR_356:668:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   item <= itemCount
ROR_357:668:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   item == itemCount
ROR_358:668:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   item != itemCount
ROR_359:668:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   true
ROR_360:668:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   false
ROR_361:682:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   series > seriesCount
ROR_362:682:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   series >= seriesCount
ROR_363:682:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   series <= seriesCount
ROR_364:682:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   series == seriesCount
ROR_365:682:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   series != seriesCount
ROR_366:682:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   true
ROR_367:682:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   false
ROR_368:684:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   item > itemCount
ROR_369:684:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   item >= itemCount
ROR_370:684:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   item <= itemCount
ROR_371:684:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   item == itemCount
ROR_372:684:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   item != itemCount
ROR_373:684:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   true
ROR_374:684:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   false
ROR_375:696:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   series > seriesCount
ROR_376:696:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   series >= seriesCount
ROR_377:696:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   series <= seriesCount
ROR_378:696:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   series == seriesCount
ROR_379:696:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   series != seriesCount
ROR_380:696:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   true
ROR_381:696:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): series < seriesCount  =>   false
ROR_382:698:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   item > itemCount
ROR_383:698:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   item >= itemCount
ROR_384:698:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   item <= itemCount
ROR_385:698:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   item == itemCount
ROR_386:698:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   item != itemCount
ROR_387:698:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   true
ROR_388:698:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): item < itemCount  =>   false
ROR_389:708:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): minimum == Double.POSITIVE_INFINITY  =>   minimum > Double.POSITIVE_INFINITY
ROR_390:708:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): minimum == Double.POSITIVE_INFINITY  =>   minimum >= Double.POSITIVE_INFINITY
ROR_391:708:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): minimum == Double.POSITIVE_INFINITY  =>   minimum < Double.POSITIVE_INFINITY
ROR_392:708:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): minimum == Double.POSITIVE_INFINITY  =>   minimum <= Double.POSITIVE_INFINITY
ROR_393:708:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): minimum == Double.POSITIVE_INFINITY  =>   minimum != Double.POSITIVE_INFINITY
ROR_394:708:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): minimum == Double.POSITIVE_INFINITY  =>   true
ROR_395:708:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): minimum == Double.POSITIVE_INFINITY  =>   false
ROR_396:717:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): dataset == null  =>   dataset != null
ROR_397:720:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): visibleSeriesKeys == null  =>   visibleSeriesKeys != null
ROR_398:732:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): item < itemCount  =>   item > itemCount
ROR_399:732:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): item < itemCount  =>   item >= itemCount
ROR_400:732:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): item < itemCount  =>   item <= itemCount
ROR_401:732:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): item < itemCount  =>   item == itemCount
ROR_402:732:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): item < itemCount  =>   item != itemCount
ROR_403:732:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): item < itemCount  =>   true
ROR_404:732:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): item < itemCount  =>   false
ROR_405:749:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): item < itemCount  =>   item > itemCount
ROR_406:749:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): item < itemCount  =>   item >= itemCount
ROR_407:749:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): item < itemCount  =>   item <= itemCount
ROR_408:749:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): item < itemCount  =>   item == itemCount
ROR_409:749:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): item < itemCount  =>   item != itemCount
ROR_410:749:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): item < itemCount  =>   true
ROR_411:749:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): item < itemCount  =>   false
ROR_412:758:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): minimum == Double.POSITIVE_INFINITY  =>   minimum > Double.POSITIVE_INFINITY
ROR_413:758:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): minimum == Double.POSITIVE_INFINITY  =>   minimum >= Double.POSITIVE_INFINITY
ROR_414:758:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): minimum == Double.POSITIVE_INFINITY  =>   minimum < Double.POSITIVE_INFINITY
ROR_415:758:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): minimum == Double.POSITIVE_INFINITY  =>   minimum <= Double.POSITIVE_INFINITY
ROR_416:758:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): minimum == Double.POSITIVE_INFINITY  =>   minimum != Double.POSITIVE_INFINITY
ROR_417:758:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): minimum == Double.POSITIVE_INFINITY  =>   true
ROR_418:758:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): minimum == Double.POSITIVE_INFINITY  =>   false
ROR_419:767:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): dataset == null  =>   dataset != null
ROR_420:770:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): visibleSeriesKeys == null  =>   visibleSeriesKeys != null
ROR_421:773:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): xRange == null  =>   xRange != null
ROR_422:785:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): item < itemCount  =>   item > itemCount
ROR_423:785:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): item < itemCount  =>   item >= itemCount
ROR_424:785:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): item < itemCount  =>   item <= itemCount
ROR_425:785:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): item < itemCount  =>   item == itemCount
ROR_426:785:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): item < itemCount  =>   item != itemCount
ROR_427:785:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): item < itemCount  =>   true
ROR_428:785:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): item < itemCount  =>   false
ROR_429:807:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): item < itemCount  =>   item > itemCount
ROR_430:807:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): item < itemCount  =>   item >= itemCount
ROR_431:807:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): item < itemCount  =>   item <= itemCount
ROR_432:807:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): item < itemCount  =>   item == itemCount
ROR_433:807:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): item < itemCount  =>   item != itemCount
ROR_434:807:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): item < itemCount  =>   true
ROR_435:807:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): item < itemCount  =>   false
ROR_436:812:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): lvalue != null  =>   lvalue == null
ROR_437:815:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): uvalue != null  =>   uvalue == null
ROR_438:829:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): item < itemCount  =>   item > itemCount
ROR_439:829:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): item < itemCount  =>   item >= itemCount
ROR_440:829:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): item < itemCount  =>   item <= itemCount
ROR_441:829:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): item < itemCount  =>   item == itemCount
ROR_442:829:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): item < itemCount  =>   item != itemCount
ROR_443:829:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): item < itemCount  =>   true
ROR_444:829:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): item < itemCount  =>   false
ROR_445:849:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): item < itemCount  =>   item > itemCount
ROR_446:849:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): item < itemCount  =>   item >= itemCount
ROR_447:849:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): item < itemCount  =>   item <= itemCount
ROR_448:849:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): item < itemCount  =>   item == itemCount
ROR_449:849:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): item < itemCount  =>   item != itemCount
ROR_450:849:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): item < itemCount  =>   true
ROR_451:849:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): item < itemCount  =>   false
ROR_452:863:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): minimum == Double.POSITIVE_INFINITY  =>   minimum > Double.POSITIVE_INFINITY
ROR_453:863:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): minimum == Double.POSITIVE_INFINITY  =>   minimum >= Double.POSITIVE_INFINITY
ROR_454:863:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): minimum == Double.POSITIVE_INFINITY  =>   minimum < Double.POSITIVE_INFINITY
ROR_455:863:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): minimum == Double.POSITIVE_INFINITY  =>   minimum <= Double.POSITIVE_INFINITY
ROR_456:863:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): minimum == Double.POSITIVE_INFINITY  =>   minimum != Double.POSITIVE_INFINITY
ROR_457:863:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): minimum == Double.POSITIVE_INFINITY  =>   true
ROR_458:863:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): minimum == Double.POSITIVE_INFINITY  =>   false
ROR_459:872:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): dataset == null  =>   dataset != null
ROR_460:882:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series > seriesCount
ROR_461:882:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series >= seriesCount
ROR_462:882:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series <= seriesCount
ROR_463:882:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series == seriesCount
ROR_464:882:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series != seriesCount
ROR_465:882:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   true
ROR_466:882:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   false
ROR_467:884:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item > itemCount
ROR_468:884:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item >= itemCount
ROR_469:884:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item <= itemCount
ROR_470:884:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item == itemCount
ROR_471:884:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item != itemCount
ROR_472:884:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   true
ROR_473:884:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   false
ROR_474:897:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): minimum == Double.POSITIVE_INFINITY  =>   minimum > Double.POSITIVE_INFINITY
ROR_475:897:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): minimum == Double.POSITIVE_INFINITY  =>   minimum >= Double.POSITIVE_INFINITY
ROR_476:897:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): minimum == Double.POSITIVE_INFINITY  =>   minimum < Double.POSITIVE_INFINITY
ROR_477:897:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): minimum == Double.POSITIVE_INFINITY  =>   minimum <= Double.POSITIVE_INFINITY
ROR_478:897:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): minimum == Double.POSITIVE_INFINITY  =>   minimum != Double.POSITIVE_INFINITY
ROR_479:897:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): minimum == Double.POSITIVE_INFINITY  =>   true
ROR_480:897:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): minimum == Double.POSITIVE_INFINITY  =>   false
ROR_481:908:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): dataset == null  =>   dataset != null
ROR_482:918:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series > seriesCount
ROR_483:918:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series >= seriesCount
ROR_484:918:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series <= seriesCount
ROR_485:918:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series == seriesCount
ROR_486:918:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series != seriesCount
ROR_487:918:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   true
ROR_488:918:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   false
ROR_489:920:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item > itemCount
ROR_490:920:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item >= itemCount
ROR_491:920:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item <= itemCount
ROR_492:920:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item == itemCount
ROR_493:920:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item != itemCount
ROR_494:920:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   true
ROR_495:920:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   false
ROR_496:933:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): maximum == Double.NEGATIVE_INFINITY  =>   maximum > Double.NEGATIVE_INFINITY
ROR_497:933:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): maximum == Double.NEGATIVE_INFINITY  =>   maximum >= Double.NEGATIVE_INFINITY
ROR_498:933:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): maximum == Double.NEGATIVE_INFINITY  =>   maximum < Double.NEGATIVE_INFINITY
ROR_499:933:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): maximum == Double.NEGATIVE_INFINITY  =>   maximum <= Double.NEGATIVE_INFINITY
ROR_500:933:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): maximum == Double.NEGATIVE_INFINITY  =>   maximum != Double.NEGATIVE_INFINITY
ROR_501:933:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): maximum == Double.NEGATIVE_INFINITY  =>   true
ROR_502:933:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): maximum == Double.NEGATIVE_INFINITY  =>   false
ROR_503:944:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): dataset == null  =>   dataset != null
ROR_504:954:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series > seriesCount
ROR_505:954:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series >= seriesCount
ROR_506:954:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series <= seriesCount
ROR_507:954:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series == seriesCount
ROR_508:954:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series != seriesCount
ROR_509:954:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   true
ROR_510:954:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   false
ROR_511:955:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): item < itemCount  =>   item > itemCount
ROR_512:955:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): item < itemCount  =>   item >= itemCount
ROR_513:955:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): item < itemCount  =>   item <= itemCount
ROR_514:955:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): item < itemCount  =>   item == itemCount
ROR_515:955:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): item < itemCount  =>   item != itemCount
ROR_516:955:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): item < itemCount  =>   true
ROR_517:955:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): item < itemCount  =>   false
ROR_518:963:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): value != null  =>   value == null
ROR_519:968:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): minimum == Double.POSITIVE_INFINITY  =>   minimum > Double.POSITIVE_INFINITY
ROR_520:968:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): minimum == Double.POSITIVE_INFINITY  =>   minimum >= Double.POSITIVE_INFINITY
ROR_521:968:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): minimum == Double.POSITIVE_INFINITY  =>   minimum < Double.POSITIVE_INFINITY
ROR_522:968:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): minimum == Double.POSITIVE_INFINITY  =>   minimum <= Double.POSITIVE_INFINITY
ROR_523:968:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): minimum == Double.POSITIVE_INFINITY  =>   minimum != Double.POSITIVE_INFINITY
ROR_524:968:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): minimum == Double.POSITIVE_INFINITY  =>   true
ROR_525:968:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): minimum == Double.POSITIVE_INFINITY  =>   false
ROR_526:978:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): dataset == null  =>   dataset != null
ROR_527:987:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series > seriesCount
ROR_528:987:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series >= seriesCount
ROR_529:987:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series <= seriesCount
ROR_530:987:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series == seriesCount
ROR_531:987:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series != seriesCount
ROR_532:987:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   true
ROR_533:987:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   false
ROR_534:989:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item > itemCount
ROR_535:989:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item >= itemCount
ROR_536:989:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item <= itemCount
ROR_537:989:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item == itemCount
ROR_538:989:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item != itemCount
ROR_539:989:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   true
ROR_540:989:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   false
ROR_541:1007:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): minimum == Double.POSITIVE_INFINITY  =>   minimum > Double.POSITIVE_INFINITY
ROR_542:1007:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): minimum == Double.POSITIVE_INFINITY  =>   minimum >= Double.POSITIVE_INFINITY
ROR_543:1007:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): minimum == Double.POSITIVE_INFINITY  =>   minimum < Double.POSITIVE_INFINITY
ROR_544:1007:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): minimum == Double.POSITIVE_INFINITY  =>   minimum <= Double.POSITIVE_INFINITY
ROR_545:1007:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): minimum == Double.POSITIVE_INFINITY  =>   minimum != Double.POSITIVE_INFINITY
ROR_546:1007:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): minimum == Double.POSITIVE_INFINITY  =>   true
ROR_547:1007:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): minimum == Double.POSITIVE_INFINITY  =>   false
ROR_548:1017:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): dataset == null  =>   dataset != null
ROR_549:1027:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series > seriesCount
ROR_550:1027:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series >= seriesCount
ROR_551:1027:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series <= seriesCount
ROR_552:1027:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series == seriesCount
ROR_553:1027:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series != seriesCount
ROR_554:1027:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   true
ROR_555:1027:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   false
ROR_556:1028:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): item < itemCount  =>   item > itemCount
ROR_557:1028:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): item < itemCount  =>   item >= itemCount
ROR_558:1028:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): item < itemCount  =>   item <= itemCount
ROR_559:1028:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): item < itemCount  =>   item == itemCount
ROR_560:1028:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): item < itemCount  =>   item != itemCount
ROR_561:1028:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): item < itemCount  =>   true
ROR_562:1028:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): item < itemCount  =>   false
ROR_563:1036:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): value != null  =>   value == null
ROR_564:1041:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): maximum == Double.NEGATIVE_INFINITY  =>   maximum > Double.NEGATIVE_INFINITY
ROR_565:1041:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): maximum == Double.NEGATIVE_INFINITY  =>   maximum >= Double.NEGATIVE_INFINITY
ROR_566:1041:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): maximum == Double.NEGATIVE_INFINITY  =>   maximum < Double.NEGATIVE_INFINITY
ROR_567:1041:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): maximum == Double.NEGATIVE_INFINITY  =>   maximum <= Double.NEGATIVE_INFINITY
ROR_568:1041:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): maximum == Double.NEGATIVE_INFINITY  =>   maximum != Double.NEGATIVE_INFINITY
ROR_569:1041:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): maximum == Double.NEGATIVE_INFINITY  =>   true
ROR_570:1041:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): maximum == Double.NEGATIVE_INFINITY  =>   false
ROR_571:1051:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): dataset == null  =>   dataset != null
ROR_572:1060:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series > seriesCount
ROR_573:1060:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series >= seriesCount
ROR_574:1060:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series <= seriesCount
ROR_575:1060:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series == seriesCount
ROR_576:1060:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   series != seriesCount
ROR_577:1060:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   true
ROR_578:1060:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): series < seriesCount  =>   false
ROR_579:1062:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item > itemCount
ROR_580:1062:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item >= itemCount
ROR_581:1062:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item <= itemCount
ROR_582:1062:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item == itemCount
ROR_583:1062:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   item != itemCount
ROR_584:1062:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   true
ROR_585:1062:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): item < itemCount  =>   false
ROR_586:1080:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): maximum == Double.NEGATIVE_INFINITY  =>   maximum > Double.NEGATIVE_INFINITY
ROR_587:1080:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): maximum == Double.NEGATIVE_INFINITY  =>   maximum >= Double.NEGATIVE_INFINITY
ROR_588:1080:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): maximum == Double.NEGATIVE_INFINITY  =>   maximum < Double.NEGATIVE_INFINITY
ROR_589:1080:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): maximum == Double.NEGATIVE_INFINITY  =>   maximum <= Double.NEGATIVE_INFINITY
ROR_590:1080:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): maximum == Double.NEGATIVE_INFINITY  =>   maximum != Double.NEGATIVE_INFINITY
ROR_591:1080:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): maximum == Double.NEGATIVE_INFINITY  =>   true
ROR_592:1080:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): maximum == Double.NEGATIVE_INFINITY  =>   false
ROR_593:1095:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): dataset == null  =>   dataset != null
ROR_594:1102:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): item < categoryCount  =>   item > categoryCount
ROR_595:1102:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): item < categoryCount  =>   item >= categoryCount
ROR_596:1102:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): item < categoryCount  =>   item <= categoryCount
ROR_597:1102:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): item < categoryCount  =>   item == categoryCount
ROR_598:1102:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): item < categoryCount  =>   item != categoryCount
ROR_599:1102:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): item < categoryCount  =>   true
ROR_600:1102:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): item < categoryCount  =>   false
ROR_601:1106:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): series < seriesCount  =>   series > seriesCount
ROR_602:1106:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): series < seriesCount  =>   series >= seriesCount
ROR_603:1106:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): series < seriesCount  =>   series <= seriesCount
ROR_604:1106:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): series < seriesCount  =>   series == seriesCount
ROR_605:1106:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): series < seriesCount  =>   series != seriesCount
ROR_606:1106:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): series < seriesCount  =>   true
ROR_607:1106:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): series < seriesCount  =>   false
ROR_608:1108:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): number != null  =>   number == null
ROR_609:1110:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): value > 0.0  =>   value >= 0.0
ROR_610:1110:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): value > 0.0  =>   value < 0.0
ROR_611:1110:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): value > 0.0  =>   value <= 0.0
ROR_612:1110:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): value > 0.0  =>   value == 0.0
ROR_613:1110:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): value > 0.0  =>   value != 0.0
ROR_614:1110:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): value > 0.0  =>   true
ROR_615:1110:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): value > 0.0  =>   false
ROR_616:1113:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): value < 0.0  =>   value > 0.0
ROR_617:1113:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): value < 0.0  =>   value >= 0.0
ROR_618:1113:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): value < 0.0  =>   value <= 0.0
ROR_619:1113:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): value < 0.0  =>   value == 0.0
ROR_620:1113:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): value < 0.0  =>   value != 0.0
ROR_621:1113:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): value < 0.0  =>   true
ROR_622:1113:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): value < 0.0  =>   false
ROR_623:1121:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): minimum <= maximum  =>   minimum > maximum
ROR_624:1121:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): minimum <= maximum  =>   minimum >= maximum
ROR_625:1121:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): minimum <= maximum  =>   minimum < maximum
ROR_626:1121:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): minimum <= maximum  =>   minimum == maximum
ROR_627:1121:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): minimum <= maximum  =>   minimum != maximum
ROR_628:1121:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): minimum <= maximum  =>   true
ROR_629:1121:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): minimum <= maximum  =>   false
ROR_630:1129:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): dataset == null  =>   dataset != null
ROR_631:1135:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): i < dataset.getRowCount()  =>   i > dataset.getRowCount()
ROR_632:1135:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): i < dataset.getRowCount()  =>   i >= dataset.getRowCount()
ROR_633:1135:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): i < dataset.getRowCount()  =>   i <= dataset.getRowCount()
ROR_634:1135:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): i < dataset.getRowCount()  =>   i == dataset.getRowCount()
ROR_635:1135:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): i < dataset.getRowCount()  =>   i != dataset.getRowCount()
ROR_636:1135:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): i < dataset.getRowCount()  =>   true
ROR_637:1135:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): i < dataset.getRowCount()  =>   false
ROR_638:1142:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): item < categoryCount  =>   item > categoryCount
ROR_639:1142:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): item < categoryCount  =>   item >= categoryCount
ROR_640:1142:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): item < categoryCount  =>   item <= categoryCount
ROR_641:1142:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): item < categoryCount  =>   item == categoryCount
ROR_642:1142:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): item < categoryCount  =>   item != categoryCount
ROR_643:1142:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): item < categoryCount  =>   true
ROR_644:1142:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): item < categoryCount  =>   false
ROR_645:1146:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): series < seriesCount  =>   series > seriesCount
ROR_646:1146:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): series < seriesCount  =>   series >= seriesCount
ROR_647:1146:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): series < seriesCount  =>   series <= seriesCount
ROR_648:1146:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): series < seriesCount  =>   series == seriesCount
ROR_649:1146:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): series < seriesCount  =>   series != seriesCount
ROR_650:1146:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): series < seriesCount  =>   true
ROR_651:1146:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): series < seriesCount  =>   false
ROR_652:1148:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): number != null  =>   number == null
ROR_653:1151:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): value > 0.0  =>   value >= 0.0
ROR_654:1151:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): value > 0.0  =>   value < 0.0
ROR_655:1151:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): value > 0.0  =>   value <= 0.0
ROR_656:1151:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): value > 0.0  =>   value == 0.0
ROR_657:1151:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): value > 0.0  =>   value != 0.0
ROR_658:1151:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): value > 0.0  =>   true
ROR_659:1151:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): value > 0.0  =>   false
ROR_660:1154:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): value < 0.0  =>   value > 0.0
ROR_661:1154:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): value < 0.0  =>   value >= 0.0
ROR_662:1154:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): value < 0.0  =>   value <= 0.0
ROR_663:1154:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): value < 0.0  =>   value == 0.0
ROR_664:1154:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): value < 0.0  =>   value != 0.0
ROR_665:1154:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): value < 0.0  =>   true
ROR_666:1154:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): value < 0.0  =>   false
ROR_667:1159:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): g < groupCount  =>   g > groupCount
ROR_668:1159:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): g < groupCount  =>   g >= groupCount
ROR_669:1159:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): g < groupCount  =>   g <= groupCount
ROR_670:1159:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): g < groupCount  =>   g == groupCount
ROR_671:1159:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): g < groupCount  =>   g != groupCount
ROR_672:1159:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): g < groupCount  =>   true
ROR_673:1159:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): g < groupCount  =>   false
ROR_674:1165:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): j < groupCount  =>   j > groupCount
ROR_675:1165:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): j < groupCount  =>   j >= groupCount
ROR_676:1165:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): j < groupCount  =>   j <= groupCount
ROR_677:1165:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): j < groupCount  =>   j == groupCount
ROR_678:1165:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): j < groupCount  =>   j != groupCount
ROR_679:1165:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): j < groupCount  =>   true
ROR_680:1165:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): j < groupCount  =>   false
ROR_681:1174:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): dataset == null  =>   dataset != null
ROR_682:1181:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): item < categoryCount  =>   item > categoryCount
ROR_683:1181:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): item < categoryCount  =>   item >= categoryCount
ROR_684:1181:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): item < categoryCount  =>   item <= categoryCount
ROR_685:1181:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): item < categoryCount  =>   item == categoryCount
ROR_686:1181:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): item < categoryCount  =>   item != categoryCount
ROR_687:1181:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): item < categoryCount  =>   true
ROR_688:1181:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): item < categoryCount  =>   false
ROR_689:1184:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series > seriesCount
ROR_690:1184:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series >= seriesCount
ROR_691:1184:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series <= seriesCount
ROR_692:1184:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series == seriesCount
ROR_693:1184:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series != seriesCount
ROR_694:1184:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   true
ROR_695:1184:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   false
ROR_696:1186:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): number != null  =>   number == null
ROR_697:1189:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): value < 0.0  =>   value > 0.0
ROR_698:1189:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): value < 0.0  =>   value >= 0.0
ROR_699:1189:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): value < 0.0  =>   value <= 0.0
ROR_700:1189:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): value < 0.0  =>   value == 0.0
ROR_701:1189:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): value < 0.0  =>   value != 0.0
ROR_702:1189:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): value < 0.0  =>   true
ROR_703:1189:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): value < 0.0  =>   false
ROR_704:1204:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): dataset == null  =>   dataset != null
ROR_705:1211:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): item < categoryCount  =>   item > categoryCount
ROR_706:1211:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): item < categoryCount  =>   item >= categoryCount
ROR_707:1211:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): item < categoryCount  =>   item <= categoryCount
ROR_708:1211:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): item < categoryCount  =>   item == categoryCount
ROR_709:1211:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): item < categoryCount  =>   item != categoryCount
ROR_710:1211:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): item < categoryCount  =>   true
ROR_711:1211:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): item < categoryCount  =>   false
ROR_712:1214:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series > seriesCount
ROR_713:1214:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series >= seriesCount
ROR_714:1214:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series <= seriesCount
ROR_715:1214:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series == seriesCount
ROR_716:1214:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   series != seriesCount
ROR_717:1214:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   true
ROR_718:1214:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): series < seriesCount  =>   false
ROR_719:1216:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): number != null  =>   number == null
ROR_720:1219:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): value > 0.0  =>   value >= 0.0
ROR_721:1219:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): value > 0.0  =>   value < 0.0
ROR_722:1219:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): value > 0.0  =>   value <= 0.0
ROR_723:1219:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): value > 0.0  =>   value == 0.0
ROR_724:1219:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): value > 0.0  =>   value != 0.0
ROR_725:1219:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): value > 0.0  =>   true
ROR_726:1219:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): value > 0.0  =>   false
ROR_727:1239:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): dataset == null  =>   dataset != null
ROR_728:1244:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): itemNo < dataset.getItemCount()  =>   itemNo > dataset.getItemCount()
ROR_729:1244:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): itemNo < dataset.getItemCount()  =>   itemNo >= dataset.getItemCount()
ROR_730:1244:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): itemNo < dataset.getItemCount()  =>   itemNo <= dataset.getItemCount()
ROR_731:1244:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): itemNo < dataset.getItemCount()  =>   itemNo == dataset.getItemCount()
ROR_732:1244:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): itemNo < dataset.getItemCount()  =>   itemNo != dataset.getItemCount()
ROR_733:1244:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): itemNo < dataset.getItemCount()  =>   true
ROR_734:1244:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): itemNo < dataset.getItemCount()  =>   false
ROR_735:1248:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): seriesNo < seriesCount  =>   seriesNo > seriesCount
ROR_736:1248:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): seriesNo < seriesCount  =>   seriesNo >= seriesCount
ROR_737:1248:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): seriesNo < seriesCount  =>   seriesNo <= seriesCount
ROR_738:1248:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): seriesNo < seriesCount  =>   seriesNo == seriesCount
ROR_739:1248:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): seriesNo < seriesCount  =>   seriesNo != seriesCount
ROR_740:1248:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): seriesNo < seriesCount  =>   true
ROR_741:1248:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): seriesNo < seriesCount  =>   false
ROR_742:1251:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): y > 0.0  =>   y >= 0.0
ROR_743:1251:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): y > 0.0  =>   y < 0.0
ROR_744:1251:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): y > 0.0  =>   y <= 0.0
ROR_745:1251:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): y > 0.0  =>   y == 0.0
ROR_746:1251:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): y > 0.0  =>   y != 0.0
ROR_747:1251:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): y > 0.0  =>   true
ROR_748:1251:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): y > 0.0  =>   false
ROR_749:1258:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): positive > maximum  =>   positive >= maximum
ROR_750:1258:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): positive > maximum  =>   positive < maximum
ROR_751:1258:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): positive > maximum  =>   positive <= maximum
ROR_752:1258:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): positive > maximum  =>   positive == maximum
ROR_753:1258:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): positive > maximum  =>   positive != maximum
ROR_754:1258:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): positive > maximum  =>   true
ROR_755:1258:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): positive > maximum  =>   false
ROR_756:1261:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): negative < minimum  =>   negative > minimum
ROR_757:1261:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): negative < minimum  =>   negative >= minimum
ROR_758:1261:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): negative < minimum  =>   negative <= minimum
ROR_759:1261:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): negative < minimum  =>   negative == minimum
ROR_760:1261:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): negative < minimum  =>   negative != minimum
ROR_761:1261:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): negative < minimum  =>   true
ROR_762:1261:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): negative < minimum  =>   false
ROR_763:1265:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): minimum <= maximum  =>   minimum > maximum
ROR_764:1265:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): minimum <= maximum  =>   minimum >= maximum
ROR_765:1265:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): minimum <= maximum  =>   minimum < maximum
ROR_766:1265:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): minimum <= maximum  =>   minimum == maximum
ROR_767:1265:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): minimum <= maximum  =>   minimum != maximum
ROR_768:1265:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): minimum <= maximum  =>   true
ROR_769:1265:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): minimum <= maximum  =>   false
ROR_770:1276:double_calculateStackTotal(org.jfree.data.xy.TableXYDataset,int): s < seriesCount  =>   s > seriesCount
ROR_771:1276:double_calculateStackTotal(org.jfree.data.xy.TableXYDataset,int): s < seriesCount  =>   s >= seriesCount
ROR_772:1276:double_calculateStackTotal(org.jfree.data.xy.TableXYDataset,int): s < seriesCount  =>   s <= seriesCount
ROR_773:1276:double_calculateStackTotal(org.jfree.data.xy.TableXYDataset,int): s < seriesCount  =>   s == seriesCount
ROR_774:1276:double_calculateStackTotal(org.jfree.data.xy.TableXYDataset,int): s < seriesCount  =>   s != seriesCount
ROR_775:1276:double_calculateStackTotal(org.jfree.data.xy.TableXYDataset,int): s < seriesCount  =>   true
ROR_776:1276:double_calculateStackTotal(org.jfree.data.xy.TableXYDataset,int): s < seriesCount  =>   false
ROR_777:1287:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): dataset == null  =>   dataset != null
ROR_778:1293:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): row < dataset.getRowCount()  =>   row > dataset.getRowCount()
ROR_779:1293:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): row < dataset.getRowCount()  =>   row >= dataset.getRowCount()
ROR_780:1293:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): row < dataset.getRowCount()  =>   row <= dataset.getRowCount()
ROR_781:1293:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): row < dataset.getRowCount()  =>   row == dataset.getRowCount()
ROR_782:1293:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): row < dataset.getRowCount()  =>   row != dataset.getRowCount()
ROR_783:1293:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): row < dataset.getRowCount()  =>   true
ROR_784:1293:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): row < dataset.getRowCount()  =>   false
ROR_785:1295:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): column <= dataset.getColumnCount() - 1  =>   column > dataset.getColumnCount() - 1
ROR_786:1295:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): column <= dataset.getColumnCount() - 1  =>   column >= dataset.getColumnCount() - 1
ROR_787:1295:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): column <= dataset.getColumnCount() - 1  =>   column < dataset.getColumnCount() - 1
ROR_788:1295:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): column <= dataset.getColumnCount() - 1  =>   column == dataset.getColumnCount() - 1
ROR_789:1295:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): column <= dataset.getColumnCount() - 1  =>   column != dataset.getColumnCount() - 1
ROR_790:1295:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): column <= dataset.getColumnCount() - 1  =>   true
ROR_791:1295:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): column <= dataset.getColumnCount() - 1  =>   false
ROR_792:1297:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): n != null  =>   n == null
COR_1:130:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): otherKeys.contains( currentKey ) && otherKeys.size() >= minItems  =>   otherKeys.contains( currentKey ) || otherKeys.size() >= minItems
COR_2:130:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): otherKeys.contains( currentKey ) && otherKeys.size() >= minItems  =>   otherKeys.contains( currentKey ) ^ otherKeys.size() >= minItems
COR_3:277:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): rowCount == 0 || columnCount == 0  =>   rowCount == 0 && columnCount == 0
COR_4:277:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): rowCount == 0 || columnCount == 0  =>   rowCount == 0 ^ columnCount == 0
COR_5:352:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset  =>   includeInterval || dataset instanceof org.jfree.data.xy.IntervalXYDataset
COR_6:352:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset  =>   includeInterval ^ dataset instanceof org.jfree.data.xy.IntervalXYDataset
COR_7:473:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): includeInterval && dataset instanceof org.jfree.data.category.IntervalCategoryDataset  =>   includeInterval || dataset instanceof org.jfree.data.category.IntervalCategoryDataset
COR_8:473:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): includeInterval && dataset instanceof org.jfree.data.category.IntervalCategoryDataset  =>   includeInterval ^ dataset instanceof org.jfree.data.category.IntervalCategoryDataset
COR_9:482:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): value != null && !Double.isNaN( v = value.doubleValue() )  =>   value != null || !Double.isNaN( v = value.doubleValue() )
COR_10:482:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): value != null && !Double.isNaN( v = value.doubleValue() )  =>   value != null ^ !Double.isNaN( v = value.doubleValue() )
COR_11:487:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): lvalue != null && !Double.isNaN( v = lvalue.doubleValue() )  =>   lvalue != null || !Double.isNaN( v = lvalue.doubleValue() )
COR_12:487:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): lvalue != null && !Double.isNaN( v = lvalue.doubleValue() )  =>   lvalue != null ^ !Double.isNaN( v = lvalue.doubleValue() )
COR_13:492:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): uvalue != null && !Double.isNaN( v = uvalue.doubleValue() )  =>   uvalue != null || !Double.isNaN( v = uvalue.doubleValue() )
COR_14:492:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): uvalue != null && !Double.isNaN( v = uvalue.doubleValue() )  =>   uvalue != null ^ !Double.isNaN( v = uvalue.doubleValue() )
COR_15:530:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): includeInterval && dataset instanceof org.jfree.data.statistics.BoxAndWhiskerCategoryDataset  =>   includeInterval || dataset instanceof org.jfree.data.statistics.BoxAndWhiskerCategoryDataset
COR_16:530:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): includeInterval && dataset instanceof org.jfree.data.statistics.BoxAndWhiskerCategoryDataset  =>   includeInterval ^ dataset instanceof org.jfree.data.statistics.BoxAndWhiskerCategoryDataset
COR_17:555:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): includeInterval && dataset instanceof org.jfree.data.category.IntervalCategoryDataset  =>   includeInterval || dataset instanceof org.jfree.data.category.IntervalCategoryDataset
COR_18:555:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): includeInterval && dataset instanceof org.jfree.data.category.IntervalCategoryDataset  =>   includeInterval ^ dataset instanceof org.jfree.data.category.IntervalCategoryDataset
COR_19:566:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): lvalue != null && !Double.isNaN( lvalue.doubleValue() )  =>   lvalue != null || !Double.isNaN( lvalue.doubleValue() )
COR_20:566:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): lvalue != null && !Double.isNaN( lvalue.doubleValue() )  =>   lvalue != null ^ !Double.isNaN( lvalue.doubleValue() )
COR_21:569:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): uvalue != null && !Double.isNaN( uvalue.doubleValue() )  =>   uvalue != null || !Double.isNaN( uvalue.doubleValue() )
COR_22:569:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): uvalue != null && !Double.isNaN( uvalue.doubleValue() )  =>   uvalue != null ^ !Double.isNaN( uvalue.doubleValue() )
COR_23:575:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): includeInterval && dataset instanceof org.jfree.data.statistics.MultiValueCategoryDataset  =>   includeInterval || dataset instanceof org.jfree.data.statistics.MultiValueCategoryDataset
COR_24:575:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): includeInterval && dataset instanceof org.jfree.data.statistics.MultiValueCategoryDataset  =>   includeInterval ^ dataset instanceof org.jfree.data.statistics.MultiValueCategoryDataset
COR_25:597:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): includeInterval && dataset instanceof org.jfree.data.statistics.StatisticalCategoryDataset  =>   includeInterval || dataset instanceof org.jfree.data.statistics.StatisticalCategoryDataset
COR_26:597:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): includeInterval && dataset instanceof org.jfree.data.statistics.StatisticalCategoryDataset  =>   includeInterval ^ dataset instanceof org.jfree.data.statistics.StatisticalCategoryDataset
COR_27:664:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset  =>   includeInterval || dataset instanceof org.jfree.data.xy.IntervalXYDataset
COR_28:664:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset  =>   includeInterval ^ dataset instanceof org.jfree.data.xy.IntervalXYDataset
COR_29:680:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): includeInterval && dataset instanceof org.jfree.data.xy.OHLCDataset  =>   includeInterval || dataset instanceof org.jfree.data.xy.OHLCDataset
COR_30:680:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): includeInterval && dataset instanceof org.jfree.data.xy.OHLCDataset  =>   includeInterval ^ dataset instanceof org.jfree.data.xy.OHLCDataset
COR_31:725:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset  =>   includeInterval || dataset instanceof org.jfree.data.xy.IntervalXYDataset
COR_32:725:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset  =>   includeInterval ^ dataset instanceof org.jfree.data.xy.IntervalXYDataset
COR_33:778:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): includeInterval && dataset instanceof org.jfree.data.xy.OHLCDataset  =>   includeInterval || dataset instanceof org.jfree.data.xy.OHLCDataset
COR_34:778:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): includeInterval && dataset instanceof org.jfree.data.xy.OHLCDataset  =>   includeInterval ^ dataset instanceof org.jfree.data.xy.OHLCDataset
COR_35:800:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): includeInterval && dataset instanceof org.jfree.data.statistics.BoxAndWhiskerXYDataset  =>   includeInterval || dataset instanceof org.jfree.data.statistics.BoxAndWhiskerXYDataset
COR_36:800:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): includeInterval && dataset instanceof org.jfree.data.statistics.BoxAndWhiskerXYDataset  =>   includeInterval ^ dataset instanceof org.jfree.data.statistics.BoxAndWhiskerXYDataset
COR_37:822:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset  =>   includeInterval || dataset instanceof org.jfree.data.xy.IntervalXYDataset
COR_38:822:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset  =>   includeInterval ^ dataset instanceof org.jfree.data.xy.IntervalXYDataset
SDL_1:63:double_calculatePieDatasetTotal(org.jfree.data.pie.PieDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } java.util.List keys = dataset.getKeys(); double totalValue = 0; java.util.Iterator iterator = keys.iterator(); while (iterator.hasNext()) {     java.lang.Comparable current = (java.lang.Comparable) iterator.next();     if (current != null) {         java.lang.Number value = dataset.getValue( current );         double v = 0.0;         if (value != null) {             v = value.doubleValue();         }         if (v > 0) {             totalValue = totalValue + v;         }     } } return totalValue;  =>   java.util.List keys = dataset.getKeys(); double totalValue = 0; java.util.Iterator iterator = keys.iterator(); while (iterator.hasNext()) {     java.lang.Comparable current = (java.lang.Comparable) iterator.next();     if (current != null) {         java.lang.Number value = dataset.getValue( current );         double v = 0.0;         if (value != null) {             v = value.doubleValue();         }         if (v > 0) {             totalValue = totalValue + v;         }     } } return totalValue;
SDL_2:53:double_calculatePieDatasetTotal(org.jfree.data.pie.PieDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } java.util.List keys = dataset.getKeys(); double totalValue = 0; java.util.Iterator iterator = keys.iterator(); while (iterator.hasNext()) {     java.lang.Comparable current = (java.lang.Comparable) iterator.next();     if (current != null) {         java.lang.Number value = dataset.getValue( current );         double v = 0.0;         if (value != null) {             v = value.doubleValue();         }         if (v > 0) {             totalValue = totalValue + v;         }     } } return totalValue;  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } java.util.List keys = dataset.getKeys(); double totalValue = 0; java.util.Iterator iterator = keys.iterator(); return totalValue;
SDL_3:47:double_calculatePieDatasetTotal(org.jfree.data.pie.PieDataset): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_4:49:double_calculatePieDatasetTotal(org.jfree.data.pie.PieDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_5:54:double_calculatePieDatasetTotal(org.jfree.data.pie.PieDataset): java.lang.Comparable current = (java.lang.Comparable) iterator.next(); if (current != null) {     java.lang.Number value = dataset.getValue( current );     double v = 0.0;     if (value != null) {         v = value.doubleValue();     }     if (v > 0) {         totalValue = totalValue + v;     } }  =>   java.lang.Comparable current = (java.lang.Comparable) iterator.next();
SDL_6:65:double_calculatePieDatasetTotal(org.jfree.data.pie.PieDataset): while (iterator.hasNext()) {     java.lang.Comparable current = (java.lang.Comparable) iterator.next();     if (current != null) {         java.lang.Number value = dataset.getValue( current );         double v = 0.0;         if (value != null) {             v = value.doubleValue();         }         if (v > 0) {             totalValue = totalValue + v;         }     } }  =>   while (true) {     java.lang.Comparable current = (java.lang.Comparable) iterator.next();     if (current != null) {         java.lang.Number value = dataset.getValue( current );         double v = 0.0;         if (value != null) {             v = value.doubleValue();         }         if (v > 0) {             totalValue = totalValue + v;         }     } }
SDL_7:60:double_calculatePieDatasetTotal(org.jfree.data.pie.PieDataset): java.lang.Number value = dataset.getValue( current ); double v = 0.0; if (value != null) {     v = value.doubleValue(); } if (v > 0) {     totalValue = totalValue + v; }  =>   java.lang.Number value = dataset.getValue( current ); double v = 0.0; if (v > 0) {     totalValue = totalValue + v; }
SDL_8:60:double_calculatePieDatasetTotal(org.jfree.data.pie.PieDataset): java.lang.Number value = dataset.getValue( current ); double v = 0.0; if (value != null) {     v = value.doubleValue(); } if (v > 0) {     totalValue = totalValue + v; }  =>   java.lang.Number value = dataset.getValue( current ); double v = 0.0; if (value != null) {     v = value.doubleValue(); }
SDL_9:64:double_calculatePieDatasetTotal(org.jfree.data.pie.PieDataset): if (current != null) {     java.lang.Number value = dataset.getValue( current );     double v = 0.0;     if (value != null) {         v = value.doubleValue();     }     if (v > 0) {         totalValue = totalValue + v;     } }  =>   if (true) {     java.lang.Number value = dataset.getValue( current );     double v = 0.0;     if (value != null) {         v = value.doubleValue();     }     if (v > 0) {         totalValue = totalValue + v;     } }
SDL_10:58:double_calculatePieDatasetTotal(org.jfree.data.pie.PieDataset): v = value.doubleValue();  =>  
SDL_11:60:double_calculatePieDatasetTotal(org.jfree.data.pie.PieDataset): if (value != null) {     v = value.doubleValue(); }  =>   if (true) {     v = value.doubleValue(); }
SDL_12:61:double_calculatePieDatasetTotal(org.jfree.data.pie.PieDataset): totalValue = totalValue + v;  =>  
SDL_13:63:double_calculatePieDatasetTotal(org.jfree.data.pie.PieDataset): if (v > 0) {     totalValue = totalValue + v; }  =>   if (true) {     totalValue = totalValue + v; }
SDL_14:66:double_calculatePieDatasetTotal(org.jfree.data.pie.PieDataset): return totalValue;  =>   return 0;
SDL_15:79:org.jfree.data.pie.PieDataset_createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int): org.jfree.data.pie.DefaultPieDataset result = new org.jfree.data.pie.DefaultPieDataset(); int columnCount = dataset.getColumnCount(); for (int current = 0; current < columnCount; current++) {     java.lang.Comparable columnKey = dataset.getColumnKey( current );     result.setValue( columnKey, dataset.getValue( row, current ) ); } return result;  =>   org.jfree.data.pie.DefaultPieDataset result = new org.jfree.data.pie.DefaultPieDataset(); int columnCount = dataset.getColumnCount(); return result;
SDL_16:80:org.jfree.data.pie.PieDataset_createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int): java.lang.Comparable columnKey = dataset.getColumnKey( current ); result.setValue( columnKey, dataset.getValue( row, current ) );  =>   java.lang.Comparable columnKey = dataset.getColumnKey( current );
SDL_17:82:org.jfree.data.pie.PieDataset_createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int): for (int current = 0; current < columnCount; current++) {     java.lang.Comparable columnKey = dataset.getColumnKey( current );     result.setValue( columnKey, dataset.getValue( row, current ) ); }  =>   for (int current = 0;; current++) {     java.lang.Comparable columnKey = dataset.getColumnKey( current );     result.setValue( columnKey, dataset.getValue( row, current ) ); }
SDL_18:82:org.jfree.data.pie.PieDataset_createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int): for (int current = 0; current < columnCount; current++) {     java.lang.Comparable columnKey = dataset.getColumnKey( current );     result.setValue( columnKey, dataset.getValue( row, current ) ); }  =>   for (int current = 0; current < columnCount;) {     java.lang.Comparable columnKey = dataset.getColumnKey( current );     result.setValue( columnKey, dataset.getValue( row, current ) ); }
SDL_19:96:org.jfree.data.pie.PieDataset_createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int): org.jfree.data.pie.DefaultPieDataset result = new org.jfree.data.pie.DefaultPieDataset(); int rowCount = dataset.getRowCount(); for (int i = 0; i < rowCount; i++) {     java.lang.Comparable rowKey = dataset.getRowKey( i );     result.setValue( rowKey, dataset.getValue( i, column ) ); } return result;  =>   org.jfree.data.pie.DefaultPieDataset result = new org.jfree.data.pie.DefaultPieDataset(); int rowCount = dataset.getRowCount(); return result;
SDL_20:97:org.jfree.data.pie.PieDataset_createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int): java.lang.Comparable rowKey = dataset.getRowKey( i ); result.setValue( rowKey, dataset.getValue( i, column ) );  =>   java.lang.Comparable rowKey = dataset.getRowKey( i );
SDL_21:99:org.jfree.data.pie.PieDataset_createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int): for (int i = 0; i < rowCount; i++) {     java.lang.Comparable rowKey = dataset.getRowKey( i );     result.setValue( rowKey, dataset.getValue( i, column ) ); }  =>   for (int i = 0;; i++) {     java.lang.Comparable rowKey = dataset.getRowKey( i );     result.setValue( rowKey, dataset.getValue( i, column ) ); }
SDL_22:99:org.jfree.data.pie.PieDataset_createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int): for (int i = 0; i < rowCount; i++) {     java.lang.Comparable rowKey = dataset.getRowKey( i );     result.setValue( rowKey, dataset.getValue( i, column ) ); }  =>   for (int i = 0; i < rowCount;) {     java.lang.Comparable rowKey = dataset.getRowKey( i );     result.setValue( rowKey, dataset.getValue( i, column ) ); }
SDL_23:131:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): org.jfree.data.pie.DefaultPieDataset result = new org.jfree.data.pie.DefaultPieDataset(); double total = DatasetUtilities.calculatePieDatasetTotal( source ); java.util.List keys = source.getKeys(); java.util.ArrayList otherKeys = new java.util.ArrayList(); java.util.Iterator iterator = keys.iterator(); while (iterator.hasNext()) {     java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next();     java.lang.Number dataValue = source.getValue( currentKey );     if (dataValue != null) {         double value = dataValue.doubleValue();         if (value / total < minimumPercent) {             otherKeys.add( currentKey );         }     } } iterator = keys.iterator(); double otherValue = 0; while (iterator.hasNext()) {     java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next();     java.lang.Number dataValue = source.getValue( currentKey );     if (dataValue != null) {         if (otherKeys.contains( currentKey ) && otherKeys.size() >= minItems) {             otherValue += dataValue.doubleValue();         } else {             result.setValue( currentKey, dataValue );         }     } } if (otherKeys.size() >= minItems) {     result.setValue( key, otherValue ); } return result;  =>   org.jfree.data.pie.DefaultPieDataset result = new org.jfree.data.pie.DefaultPieDataset(); double total = DatasetUtilities.calculatePieDatasetTotal( source ); java.util.List keys = source.getKeys(); java.util.ArrayList otherKeys = new java.util.ArrayList(); java.util.Iterator iterator = keys.iterator(); iterator = keys.iterator(); double otherValue = 0; while (iterator.hasNext()) {     java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next();     java.lang.Number dataValue = source.getValue( currentKey );     if (dataValue != null) {         if (otherKeys.contains( currentKey ) && otherKeys.size() >= minItems) {             otherValue += dataValue.doubleValue();         } else {             result.setValue( currentKey, dataValue );         }     } } if (otherKeys.size() >= minItems) {     result.setValue( key, otherValue ); } return result;
SDL_24:140:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): org.jfree.data.pie.DefaultPieDataset result = new org.jfree.data.pie.DefaultPieDataset(); double total = DatasetUtilities.calculatePieDatasetTotal( source ); java.util.List keys = source.getKeys(); java.util.ArrayList otherKeys = new java.util.ArrayList(); java.util.Iterator iterator = keys.iterator(); while (iterator.hasNext()) {     java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next();     java.lang.Number dataValue = source.getValue( currentKey );     if (dataValue != null) {         double value = dataValue.doubleValue();         if (value / total < minimumPercent) {             otherKeys.add( currentKey );         }     } } iterator = keys.iterator(); double otherValue = 0; while (iterator.hasNext()) {     java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next();     java.lang.Number dataValue = source.getValue( currentKey );     if (dataValue != null) {         if (otherKeys.contains( currentKey ) && otherKeys.size() >= minItems) {             otherValue += dataValue.doubleValue();         } else {             result.setValue( currentKey, dataValue );         }     } } if (otherKeys.size() >= minItems) {     result.setValue( key, otherValue ); } return result;  =>   org.jfree.data.pie.DefaultPieDataset result = new org.jfree.data.pie.DefaultPieDataset(); double total = DatasetUtilities.calculatePieDatasetTotal( source ); java.util.List keys = source.getKeys(); java.util.ArrayList otherKeys = new java.util.ArrayList(); java.util.Iterator iterator = keys.iterator(); while (iterator.hasNext()) {     java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next();     java.lang.Number dataValue = source.getValue( currentKey );     if (dataValue != null) {         double value = dataValue.doubleValue();         if (value / total < minimumPercent) {             otherKeys.add( currentKey );         }     } } double otherValue = 0; while (iterator.hasNext()) {     java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next();     java.lang.Number dataValue = source.getValue( currentKey );     if (dataValue != null) {         if (otherKeys.contains( currentKey ) && otherKeys.size() >= minItems) {             otherValue += dataValue.doubleValue();         } else {             result.setValue( currentKey, dataValue );         }     } } if (otherKeys.size() >= minItems) {     result.setValue( key, otherValue ); } return result;
SDL_25:130:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): org.jfree.data.pie.DefaultPieDataset result = new org.jfree.data.pie.DefaultPieDataset(); double total = DatasetUtilities.calculatePieDatasetTotal( source ); java.util.List keys = source.getKeys(); java.util.ArrayList otherKeys = new java.util.ArrayList(); java.util.Iterator iterator = keys.iterator(); while (iterator.hasNext()) {     java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next();     java.lang.Number dataValue = source.getValue( currentKey );     if (dataValue != null) {         double value = dataValue.doubleValue();         if (value / total < minimumPercent) {             otherKeys.add( currentKey );         }     } } iterator = keys.iterator(); double otherValue = 0; while (iterator.hasNext()) {     java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next();     java.lang.Number dataValue = source.getValue( currentKey );     if (dataValue != null) {         if (otherKeys.contains( currentKey ) && otherKeys.size() >= minItems) {             otherValue += dataValue.doubleValue();         } else {             result.setValue( currentKey, dataValue );         }     } } if (otherKeys.size() >= minItems) {     result.setValue( key, otherValue ); } return result;  =>   org.jfree.data.pie.DefaultPieDataset result = new org.jfree.data.pie.DefaultPieDataset(); double total = DatasetUtilities.calculatePieDatasetTotal( source ); java.util.List keys = source.getKeys(); java.util.ArrayList otherKeys = new java.util.ArrayList(); java.util.Iterator iterator = keys.iterator(); while (iterator.hasNext()) {     java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next();     java.lang.Number dataValue = source.getValue( currentKey );     if (dataValue != null) {         double value = dataValue.doubleValue();         if (value / total < minimumPercent) {             otherKeys.add( currentKey );         }     } } iterator = keys.iterator(); double otherValue = 0; if (otherKeys.size() >= minItems) {     result.setValue( key, otherValue ); } return result;
SDL_26:138:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): org.jfree.data.pie.DefaultPieDataset result = new org.jfree.data.pie.DefaultPieDataset(); double total = DatasetUtilities.calculatePieDatasetTotal( source ); java.util.List keys = source.getKeys(); java.util.ArrayList otherKeys = new java.util.ArrayList(); java.util.Iterator iterator = keys.iterator(); while (iterator.hasNext()) {     java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next();     java.lang.Number dataValue = source.getValue( currentKey );     if (dataValue != null) {         double value = dataValue.doubleValue();         if (value / total < minimumPercent) {             otherKeys.add( currentKey );         }     } } iterator = keys.iterator(); double otherValue = 0; while (iterator.hasNext()) {     java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next();     java.lang.Number dataValue = source.getValue( currentKey );     if (dataValue != null) {         if (otherKeys.contains( currentKey ) && otherKeys.size() >= minItems) {             otherValue += dataValue.doubleValue();         } else {             result.setValue( currentKey, dataValue );         }     } } if (otherKeys.size() >= minItems) {     result.setValue( key, otherValue ); } return result;  =>   org.jfree.data.pie.DefaultPieDataset result = new org.jfree.data.pie.DefaultPieDataset(); double total = DatasetUtilities.calculatePieDatasetTotal( source ); java.util.List keys = source.getKeys(); java.util.ArrayList otherKeys = new java.util.ArrayList(); java.util.Iterator iterator = keys.iterator(); while (iterator.hasNext()) {     java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next();     java.lang.Number dataValue = source.getValue( currentKey );     if (dataValue != null) {         double value = dataValue.doubleValue();         if (value / total < minimumPercent) {             otherKeys.add( currentKey );         }     } } iterator = keys.iterator(); double otherValue = 0; while (iterator.hasNext()) {     java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next();     java.lang.Number dataValue = source.getValue( currentKey );     if (dataValue != null) {         if (otherKeys.contains( currentKey ) && otherKeys.size() >= minItems) {             otherValue += dataValue.doubleValue();         } else {             result.setValue( currentKey, dataValue );         }     } } return result;
SDL_27:117:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next(); java.lang.Number dataValue = source.getValue( currentKey ); if (dataValue != null) {     double value = dataValue.doubleValue();     if (value / total < minimumPercent) {         otherKeys.add( currentKey );     } }  =>   java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next(); java.lang.Number dataValue = source.getValue( currentKey );
SDL_28:124:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): while (iterator.hasNext()) {     java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next();     java.lang.Number dataValue = source.getValue( currentKey );     if (dataValue != null) {         double value = dataValue.doubleValue();         if (value / total < minimumPercent) {             otherKeys.add( currentKey );         }     } }  =>   while (true) {     java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next();     java.lang.Number dataValue = source.getValue( currentKey );     if (dataValue != null) {         double value = dataValue.doubleValue();         if (value / total < minimumPercent) {             otherKeys.add( currentKey );         }     } }
SDL_29:119:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): double value = dataValue.doubleValue(); if (value / total < minimumPercent) {     otherKeys.add( currentKey ); }  =>   double value = dataValue.doubleValue();
SDL_30:123:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): if (dataValue != null) {     double value = dataValue.doubleValue();     if (value / total < minimumPercent) {         otherKeys.add( currentKey );     } }  =>   if (true) {     double value = dataValue.doubleValue();     if (value / total < minimumPercent) {         otherKeys.add( currentKey );     } }
SDL_31:120:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): otherKeys.add( currentKey );  =>  
SDL_32:122:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): if (value / total < minimumPercent) {     otherKeys.add( currentKey ); }  =>   if (true) {     otherKeys.add( currentKey ); }
SDL_33:129:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next(); java.lang.Number dataValue = source.getValue( currentKey ); if (dataValue != null) {     if (otherKeys.contains( currentKey ) && otherKeys.size() >= minItems) {         otherValue += dataValue.doubleValue();     } else {         result.setValue( currentKey, dataValue );     } }  =>   java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next(); java.lang.Number dataValue = source.getValue( currentKey );
SDL_34:137:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): while (iterator.hasNext()) {     java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next();     java.lang.Number dataValue = source.getValue( currentKey );     if (dataValue != null) {         if (otherKeys.contains( currentKey ) && otherKeys.size() >= minItems) {             otherValue += dataValue.doubleValue();         } else {             result.setValue( currentKey, dataValue );         }     } }  =>   while (true) {     java.lang.Comparable currentKey = (java.lang.Comparable) iterator.next();     java.lang.Number dataValue = source.getValue( currentKey );     if (dataValue != null) {         if (otherKeys.contains( currentKey ) && otherKeys.size() >= minItems) {             otherValue += dataValue.doubleValue();         } else {             result.setValue( currentKey, dataValue );         }     } }
SDL_35:130:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): if (otherKeys.contains( currentKey ) && otherKeys.size() >= minItems) {     otherValue += dataValue.doubleValue(); } else {     result.setValue( currentKey, dataValue ); }  =>  
SDL_36:136:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): if (dataValue != null) {     if (otherKeys.contains( currentKey ) && otherKeys.size() >= minItems) {         otherValue += dataValue.doubleValue();     } else {         result.setValue( currentKey, dataValue );     } }  =>   if (true) {     if (otherKeys.contains( currentKey ) && otherKeys.size() >= minItems) {         otherValue += dataValue.doubleValue();     } else {         result.setValue( currentKey, dataValue );     } }
SDL_37:131:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): otherValue += dataValue.doubleValue();  =>  
SDL_38:135:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): if (otherKeys.contains( currentKey ) && otherKeys.size() >= minItems) {     otherValue += dataValue.doubleValue(); } else {     result.setValue( currentKey, dataValue ); }  =>   if (true) {     otherValue += dataValue.doubleValue(); } else {     result.setValue( currentKey, dataValue ); }
SDL_39:133:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): result.setValue( currentKey, dataValue );  =>  
SDL_40:138:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): result.setValue( key, otherValue );  =>  
SDL_41:140:org.jfree.data.pie.PieDataset_createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int): if (otherKeys.size() >= minItems) {     result.setValue( key, otherValue ); }  =>   if (true) {     result.setValue( key, otherValue ); }
SDL_42:147:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int r = 0; r < data.length; r++) {     java.lang.String rowKey = rowKeyPrefix + (r + 1);     for (int c = 0; c < data[r].length; c++) {         java.lang.String columnKey = columnKeyPrefix + (c + 1);         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } } return result;  =>   org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); return result;
SDL_43:148:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): java.lang.String rowKey = rowKeyPrefix + (r + 1); for (int c = 0; c < data[r].length; c++) {     java.lang.String columnKey = columnKeyPrefix + (c + 1);     result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey ); }  =>   java.lang.String rowKey = rowKeyPrefix + (r + 1);
SDL_44:153:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): for (int r = 0; r < data.length; r++) {     java.lang.String rowKey = rowKeyPrefix + (r + 1);     for (int c = 0; c < data[r].length; c++) {         java.lang.String columnKey = columnKeyPrefix + (c + 1);         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } }  =>   for (int r = 0;; r++) {     java.lang.String rowKey = rowKeyPrefix + (r + 1);     for (int c = 0; c < data[r].length; c++) {         java.lang.String columnKey = columnKeyPrefix + (c + 1);         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } }
SDL_45:153:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): for (int r = 0; r < data.length; r++) {     java.lang.String rowKey = rowKeyPrefix + (r + 1);     for (int c = 0; c < data[r].length; c++) {         java.lang.String columnKey = columnKeyPrefix + (c + 1);         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } }  =>   for (int r = 0; r < data.length;) {     java.lang.String rowKey = rowKeyPrefix + (r + 1);     for (int c = 0; c < data[r].length; c++) {         java.lang.String columnKey = columnKeyPrefix + (c + 1);         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } }
SDL_46:150:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): java.lang.String columnKey = columnKeyPrefix + (c + 1); result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );  =>   java.lang.String columnKey = columnKeyPrefix + (c + 1);
SDL_47:152:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): for (int c = 0; c < data[r].length; c++) {     java.lang.String columnKey = columnKeyPrefix + (c + 1);     result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey ); }  =>   for (int c = 0;; c++) {     java.lang.String columnKey = columnKeyPrefix + (c + 1);     result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey ); }
SDL_48:152:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,double): for (int c = 0; c < data[r].length; c++) {     java.lang.String columnKey = columnKeyPrefix + (c + 1);     result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey ); }  =>   for (int c = 0; c < data[r].length;) {     java.lang.String columnKey = columnKeyPrefix + (c + 1);     result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey ); }
SDL_49:160:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int r = 0; r < data.length; r++) {     java.lang.String rowKey = rowKeyPrefix + (r + 1);     for (int c = 0; c < data[r].length; c++) {         java.lang.String columnKey = columnKeyPrefix + (c + 1);         result.addValue( data[r][c], rowKey, columnKey );     } } return result;  =>   org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); return result;
SDL_50:161:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): java.lang.String rowKey = rowKeyPrefix + (r + 1); for (int c = 0; c < data[r].length; c++) {     java.lang.String columnKey = columnKeyPrefix + (c + 1);     result.addValue( data[r][c], rowKey, columnKey ); }  =>   java.lang.String rowKey = rowKeyPrefix + (r + 1);
SDL_51:166:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): for (int r = 0; r < data.length; r++) {     java.lang.String rowKey = rowKeyPrefix + (r + 1);     for (int c = 0; c < data[r].length; c++) {         java.lang.String columnKey = columnKeyPrefix + (c + 1);         result.addValue( data[r][c], rowKey, columnKey );     } }  =>   for (int r = 0;; r++) {     java.lang.String rowKey = rowKeyPrefix + (r + 1);     for (int c = 0; c < data[r].length; c++) {         java.lang.String columnKey = columnKeyPrefix + (c + 1);         result.addValue( data[r][c], rowKey, columnKey );     } }
SDL_52:166:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): for (int r = 0; r < data.length; r++) {     java.lang.String rowKey = rowKeyPrefix + (r + 1);     for (int c = 0; c < data[r].length; c++) {         java.lang.String columnKey = columnKeyPrefix + (c + 1);         result.addValue( data[r][c], rowKey, columnKey );     } }  =>   for (int r = 0; r < data.length;) {     java.lang.String rowKey = rowKeyPrefix + (r + 1);     for (int c = 0; c < data[r].length; c++) {         java.lang.String columnKey = columnKeyPrefix + (c + 1);         result.addValue( data[r][c], rowKey, columnKey );     } }
SDL_53:163:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): java.lang.String columnKey = columnKeyPrefix + (c + 1); result.addValue( data[r][c], rowKey, columnKey );  =>   java.lang.String columnKey = columnKeyPrefix + (c + 1);
SDL_54:165:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): for (int c = 0; c < data[r].length; c++) {     java.lang.String columnKey = columnKeyPrefix + (c + 1);     result.addValue( data[r][c], rowKey, columnKey ); }  =>   for (int c = 0;; c++) {     java.lang.String columnKey = columnKeyPrefix + (c + 1);     result.addValue( data[r][c], rowKey, columnKey ); }
SDL_55:165:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][]): for (int c = 0; c < data[r].length; c++) {     java.lang.String columnKey = columnKeyPrefix + (c + 1);     result.addValue( data[r][c], rowKey, columnKey ); }  =>   for (int c = 0; c < data[r].length;) {     java.lang.String columnKey = columnKeyPrefix + (c + 1);     result.addValue( data[r][c], rowKey, columnKey ); }
SDL_56:199:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): if (rowKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKeys' argument.\" ); } if (columnKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKeys' argument.\" ); } if (ArrayUtilities.hasDuplicateItems( rowKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'rowKeys'.\" ); } if (ArrayUtilities.hasDuplicateItems( columnKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'columnKeys'.\" ); } if (rowKeys.length != data.length) {     throw new java.lang.IllegalArgumentException( \"The number of row keys does not match the number of rows in \" + \"the data array.\" ); } int columnCount = 0; for (int r = 0; r < data.length; r++) {     columnCount = Math.max( columnCount, data[r].length ); } if (columnKeys.length != columnCount) {     throw new java.lang.IllegalArgumentException( \"The number of column keys does not match the number of \" + \"columns in the data array.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int r = 0; r < data.length; r++) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } } return result;  =>   if (columnKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKeys' argument.\" ); } if (ArrayUtilities.hasDuplicateItems( rowKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'rowKeys'.\" ); } if (ArrayUtilities.hasDuplicateItems( columnKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'columnKeys'.\" ); } if (rowKeys.length != data.length) {     throw new java.lang.IllegalArgumentException( \"The number of row keys does not match the number of rows in \" + \"the data array.\" ); } int columnCount = 0; for (int r = 0; r < data.length; r++) {     columnCount = Math.max( columnCount, data[r].length ); } if (columnKeys.length != columnCount) {     throw new java.lang.IllegalArgumentException( \"The number of column keys does not match the number of \" + \"columns in the data array.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int r = 0; r < data.length; r++) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } } return result;
SDL_57:199:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): if (rowKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKeys' argument.\" ); } if (columnKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKeys' argument.\" ); } if (ArrayUtilities.hasDuplicateItems( rowKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'rowKeys'.\" ); } if (ArrayUtilities.hasDuplicateItems( columnKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'columnKeys'.\" ); } if (rowKeys.length != data.length) {     throw new java.lang.IllegalArgumentException( \"The number of row keys does not match the number of rows in \" + \"the data array.\" ); } int columnCount = 0; for (int r = 0; r < data.length; r++) {     columnCount = Math.max( columnCount, data[r].length ); } if (columnKeys.length != columnCount) {     throw new java.lang.IllegalArgumentException( \"The number of column keys does not match the number of \" + \"columns in the data array.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int r = 0; r < data.length; r++) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } } return result;  =>   if (rowKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKeys' argument.\" ); } if (ArrayUtilities.hasDuplicateItems( rowKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'rowKeys'.\" ); } if (ArrayUtilities.hasDuplicateItems( columnKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'columnKeys'.\" ); } if (rowKeys.length != data.length) {     throw new java.lang.IllegalArgumentException( \"The number of row keys does not match the number of rows in \" + \"the data array.\" ); } int columnCount = 0; for (int r = 0; r < data.length; r++) {     columnCount = Math.max( columnCount, data[r].length ); } if (columnKeys.length != columnCount) {     throw new java.lang.IllegalArgumentException( \"The number of column keys does not match the number of \" + \"columns in the data array.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int r = 0; r < data.length; r++) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } } return result;
SDL_58:199:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): if (rowKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKeys' argument.\" ); } if (columnKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKeys' argument.\" ); } if (ArrayUtilities.hasDuplicateItems( rowKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'rowKeys'.\" ); } if (ArrayUtilities.hasDuplicateItems( columnKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'columnKeys'.\" ); } if (rowKeys.length != data.length) {     throw new java.lang.IllegalArgumentException( \"The number of row keys does not match the number of rows in \" + \"the data array.\" ); } int columnCount = 0; for (int r = 0; r < data.length; r++) {     columnCount = Math.max( columnCount, data[r].length ); } if (columnKeys.length != columnCount) {     throw new java.lang.IllegalArgumentException( \"The number of column keys does not match the number of \" + \"columns in the data array.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int r = 0; r < data.length; r++) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } } return result;  =>   if (rowKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKeys' argument.\" ); } if (columnKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKeys' argument.\" ); } if (ArrayUtilities.hasDuplicateItems( columnKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'columnKeys'.\" ); } if (rowKeys.length != data.length) {     throw new java.lang.IllegalArgumentException( \"The number of row keys does not match the number of rows in \" + \"the data array.\" ); } int columnCount = 0; for (int r = 0; r < data.length; r++) {     columnCount = Math.max( columnCount, data[r].length ); } if (columnKeys.length != columnCount) {     throw new java.lang.IllegalArgumentException( \"The number of column keys does not match the number of \" + \"columns in the data array.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int r = 0; r < data.length; r++) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } } return result;
SDL_59:199:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): if (rowKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKeys' argument.\" ); } if (columnKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKeys' argument.\" ); } if (ArrayUtilities.hasDuplicateItems( rowKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'rowKeys'.\" ); } if (ArrayUtilities.hasDuplicateItems( columnKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'columnKeys'.\" ); } if (rowKeys.length != data.length) {     throw new java.lang.IllegalArgumentException( \"The number of row keys does not match the number of rows in \" + \"the data array.\" ); } int columnCount = 0; for (int r = 0; r < data.length; r++) {     columnCount = Math.max( columnCount, data[r].length ); } if (columnKeys.length != columnCount) {     throw new java.lang.IllegalArgumentException( \"The number of column keys does not match the number of \" + \"columns in the data array.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int r = 0; r < data.length; r++) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } } return result;  =>   if (rowKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKeys' argument.\" ); } if (columnKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKeys' argument.\" ); } if (ArrayUtilities.hasDuplicateItems( rowKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'rowKeys'.\" ); } if (rowKeys.length != data.length) {     throw new java.lang.IllegalArgumentException( \"The number of row keys does not match the number of rows in \" + \"the data array.\" ); } int columnCount = 0; for (int r = 0; r < data.length; r++) {     columnCount = Math.max( columnCount, data[r].length ); } if (columnKeys.length != columnCount) {     throw new java.lang.IllegalArgumentException( \"The number of column keys does not match the number of \" + \"columns in the data array.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int r = 0; r < data.length; r++) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } } return result;
SDL_60:199:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): if (rowKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKeys' argument.\" ); } if (columnKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKeys' argument.\" ); } if (ArrayUtilities.hasDuplicateItems( rowKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'rowKeys'.\" ); } if (ArrayUtilities.hasDuplicateItems( columnKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'columnKeys'.\" ); } if (rowKeys.length != data.length) {     throw new java.lang.IllegalArgumentException( \"The number of row keys does not match the number of rows in \" + \"the data array.\" ); } int columnCount = 0; for (int r = 0; r < data.length; r++) {     columnCount = Math.max( columnCount, data[r].length ); } if (columnKeys.length != columnCount) {     throw new java.lang.IllegalArgumentException( \"The number of column keys does not match the number of \" + \"columns in the data array.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int r = 0; r < data.length; r++) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } } return result;  =>   if (rowKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKeys' argument.\" ); } if (columnKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKeys' argument.\" ); } if (ArrayUtilities.hasDuplicateItems( rowKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'rowKeys'.\" ); } if (ArrayUtilities.hasDuplicateItems( columnKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'columnKeys'.\" ); } int columnCount = 0; for (int r = 0; r < data.length; r++) {     columnCount = Math.max( columnCount, data[r].length ); } if (columnKeys.length != columnCount) {     throw new java.lang.IllegalArgumentException( \"The number of column keys does not match the number of \" + \"columns in the data array.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int r = 0; r < data.length; r++) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } } return result;
SDL_61:199:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): if (rowKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKeys' argument.\" ); } if (columnKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKeys' argument.\" ); } if (ArrayUtilities.hasDuplicateItems( rowKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'rowKeys'.\" ); } if (ArrayUtilities.hasDuplicateItems( columnKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'columnKeys'.\" ); } if (rowKeys.length != data.length) {     throw new java.lang.IllegalArgumentException( \"The number of row keys does not match the number of rows in \" + \"the data array.\" ); } int columnCount = 0; for (int r = 0; r < data.length; r++) {     columnCount = Math.max( columnCount, data[r].length ); } if (columnKeys.length != columnCount) {     throw new java.lang.IllegalArgumentException( \"The number of column keys does not match the number of \" + \"columns in the data array.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int r = 0; r < data.length; r++) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } } return result;  =>   if (rowKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKeys' argument.\" ); } if (columnKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKeys' argument.\" ); } if (ArrayUtilities.hasDuplicateItems( rowKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'rowKeys'.\" ); } if (ArrayUtilities.hasDuplicateItems( columnKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'columnKeys'.\" ); } if (rowKeys.length != data.length) {     throw new java.lang.IllegalArgumentException( \"The number of row keys does not match the number of rows in \" + \"the data array.\" ); } int columnCount = 0; if (columnKeys.length != columnCount) {     throw new java.lang.IllegalArgumentException( \"The number of column keys does not match the number of \" + \"columns in the data array.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int r = 0; r < data.length; r++) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } } return result;
SDL_62:199:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): if (rowKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKeys' argument.\" ); } if (columnKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKeys' argument.\" ); } if (ArrayUtilities.hasDuplicateItems( rowKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'rowKeys'.\" ); } if (ArrayUtilities.hasDuplicateItems( columnKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'columnKeys'.\" ); } if (rowKeys.length != data.length) {     throw new java.lang.IllegalArgumentException( \"The number of row keys does not match the number of rows in \" + \"the data array.\" ); } int columnCount = 0; for (int r = 0; r < data.length; r++) {     columnCount = Math.max( columnCount, data[r].length ); } if (columnKeys.length != columnCount) {     throw new java.lang.IllegalArgumentException( \"The number of column keys does not match the number of \" + \"columns in the data array.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int r = 0; r < data.length; r++) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } } return result;  =>   if (rowKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKeys' argument.\" ); } if (columnKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKeys' argument.\" ); } if (ArrayUtilities.hasDuplicateItems( rowKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'rowKeys'.\" ); } if (ArrayUtilities.hasDuplicateItems( columnKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'columnKeys'.\" ); } if (rowKeys.length != data.length) {     throw new java.lang.IllegalArgumentException( \"The number of row keys does not match the number of rows in \" + \"the data array.\" ); } int columnCount = 0; for (int r = 0; r < data.length; r++) {     columnCount = Math.max( columnCount, data[r].length ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int r = 0; r < data.length; r++) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } } return result;
SDL_63:195:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): if (rowKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKeys' argument.\" ); } if (columnKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKeys' argument.\" ); } if (ArrayUtilities.hasDuplicateItems( rowKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'rowKeys'.\" ); } if (ArrayUtilities.hasDuplicateItems( columnKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'columnKeys'.\" ); } if (rowKeys.length != data.length) {     throw new java.lang.IllegalArgumentException( \"The number of row keys does not match the number of rows in \" + \"the data array.\" ); } int columnCount = 0; for (int r = 0; r < data.length; r++) {     columnCount = Math.max( columnCount, data[r].length ); } if (columnKeys.length != columnCount) {     throw new java.lang.IllegalArgumentException( \"The number of column keys does not match the number of \" + \"columns in the data array.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int r = 0; r < data.length; r++) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } } return result;  =>   if (rowKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKeys' argument.\" ); } if (columnKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKeys' argument.\" ); } if (ArrayUtilities.hasDuplicateItems( rowKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'rowKeys'.\" ); } if (ArrayUtilities.hasDuplicateItems( columnKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'columnKeys'.\" ); } if (rowKeys.length != data.length) {     throw new java.lang.IllegalArgumentException( \"The number of row keys does not match the number of rows in \" + \"the data array.\" ); } int columnCount = 0; for (int r = 0; r < data.length; r++) {     columnCount = Math.max( columnCount, data[r].length ); } if (columnKeys.length != columnCount) {     throw new java.lang.IllegalArgumentException( \"The number of column keys does not match the number of \" + \"columns in the data array.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); return result;
SDL_64:172:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): throw new java.lang.IllegalArgumentException( \"Null 'rowKeys' argument.\" );  =>  
SDL_65:174:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): if (rowKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKeys' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKeys' argument.\" ); }
SDL_66:175:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): throw new java.lang.IllegalArgumentException( \"Null 'columnKeys' argument.\" );  =>  
SDL_67:177:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): if (columnKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKeys' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'columnKeys' argument.\" ); }
SDL_68:178:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): throw new java.lang.IllegalArgumentException( \"Duplicate items in 'rowKeys'.\" );  =>  
SDL_69:180:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): if (ArrayUtilities.hasDuplicateItems( rowKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'rowKeys'.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'rowKeys'.\" ); }
SDL_70:181:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): throw new java.lang.IllegalArgumentException( \"Duplicate items in 'columnKeys'.\" );  =>  
SDL_71:183:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): if (ArrayUtilities.hasDuplicateItems( columnKeys )) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'columnKeys'.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Duplicate items in 'columnKeys'.\" ); }
SDL_72:184:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): throw new java.lang.IllegalArgumentException( \"The number of row keys does not match the number of rows in \" + \"the data array.\" );  =>  
SDL_73:186:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): if (rowKeys.length != data.length) {     throw new java.lang.IllegalArgumentException( \"The number of row keys does not match the number of rows in \" + \"the data array.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The number of row keys does not match the number of rows in \" + \"the data array.\" ); }
SDL_74:188:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): columnCount = Math.max( columnCount, data[r].length );  =>  
SDL_75:190:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): for (int r = 0; r < data.length; r++) {     columnCount = Math.max( columnCount, data[r].length ); }  =>   for (int r = 0;; r++) {     columnCount = Math.max( columnCount, data[r].length ); }
SDL_76:190:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): for (int r = 0; r < data.length; r++) {     columnCount = Math.max( columnCount, data[r].length ); }  =>   for (int r = 0; r < data.length;) {     columnCount = Math.max( columnCount, data[r].length ); }
SDL_77:191:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): throw new java.lang.IllegalArgumentException( \"The number of column keys does not match the number of \" + \"columns in the data array.\" );  =>  
SDL_78:193:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): if (columnKeys.length != columnCount) {     throw new java.lang.IllegalArgumentException( \"The number of column keys does not match the number of \" + \"columns in the data array.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The number of column keys does not match the number of \" + \"columns in the data array.\" ); }
SDL_79:196:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): java.lang.Comparable rowKey = rowKeys[r]; for (int c = 0; c < data[r].length; c++) {     java.lang.Comparable columnKey = columnKeys[c];     result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey ); }  =>   java.lang.Comparable rowKey = rowKeys[r];
SDL_80:201:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): for (int r = 0; r < data.length; r++) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } }  =>   for (int r = 0;; r++) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } }
SDL_81:201:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): for (int r = 0; r < data.length; r++) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } }  =>   for (int r = 0; r < data.length;) {     java.lang.Comparable rowKey = rowKeys[r];     for (int c = 0; c < data[r].length; c++) {         java.lang.Comparable columnKey = columnKeys[c];         result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );     } }
SDL_82:198:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): java.lang.Comparable columnKey = columnKeys[c]; result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey );  =>   java.lang.Comparable columnKey = columnKeys[c];
SDL_83:200:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): for (int c = 0; c < data[r].length; c++) {     java.lang.Comparable columnKey = columnKeys[c];     result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey ); }  =>   for (int c = 0;; c++) {     java.lang.Comparable columnKey = columnKeys[c];     result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey ); }
SDL_84:200:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double): for (int c = 0; c < data[r].length; c++) {     java.lang.Comparable columnKey = columnKeys[c];     result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey ); }  =>   for (int c = 0; c < data[r].length;) {     java.lang.Comparable columnKey = columnKeys[c];     result.addValue( new java.lang.Double( data[r][c] ), rowKey, columnKey ); }
SDL_85:214:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); } if (rowData == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowData' argument.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int i = 0; i < rowData.getItemCount(); i++) {     result.addValue( rowData.getValue( i ), rowKey, rowData.getKey( i ) ); } return result;  =>   if (rowData == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowData' argument.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int i = 0; i < rowData.getItemCount(); i++) {     result.addValue( rowData.getValue( i ), rowKey, rowData.getKey( i ) ); } return result;
SDL_86:214:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); } if (rowData == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowData' argument.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int i = 0; i < rowData.getItemCount(); i++) {     result.addValue( rowData.getValue( i ), rowKey, rowData.getKey( i ) ); } return result;  =>   if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int i = 0; i < rowData.getItemCount(); i++) {     result.addValue( rowData.getValue( i ), rowKey, rowData.getKey( i ) ); } return result;
SDL_87:214:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); } if (rowData == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowData' argument.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); for (int i = 0; i < rowData.getItemCount(); i++) {     result.addValue( rowData.getValue( i ), rowKey, rowData.getKey( i ) ); } return result;  =>   if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); } if (rowData == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowData' argument.\" ); } org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset(); return result;
SDL_88:207:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" );  =>  
SDL_89:209:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): if (rowKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'rowKey' argument.\" ); }
SDL_90:210:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): throw new java.lang.IllegalArgumentException( \"Null 'rowData' argument.\" );  =>  
SDL_91:212:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): if (rowData == null) {     throw new java.lang.IllegalArgumentException( \"Null 'rowData' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'rowData' argument.\" ); }
SDL_92:214:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): result.addValue( rowData.getValue( i ), rowKey, rowData.getKey( i ) );  =>  
SDL_93:216:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): for (int i = 0; i < rowData.getItemCount(); i++) {     result.addValue( rowData.getValue( i ), rowKey, rowData.getKey( i ) ); }  =>   for (int i = 0;; i++) {     result.addValue( rowData.getValue( i ), rowKey, rowData.getKey( i ) ); }
SDL_94:216:org.jfree.data.category.CategoryDataset_createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues): for (int i = 0; i < rowData.getItemCount(); i++) {     result.addValue( rowData.getValue( i ), rowKey, rowData.getKey( i ) ); }  =>   for (int i = 0; i < rowData.getItemCount();) {     result.addValue( rowData.getValue( i ), rowKey, rowData.getKey( i ) ); }
SDL_95:244:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): if (f == null) {     throw new java.lang.IllegalArgumentException( \"Null 'f' argument.\" ); } if (seriesKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'seriesKey' argument.\" ); } if (start >= end) {     throw new java.lang.IllegalArgumentException( \"Requires 'start' < 'end'.\" ); } if (samples < 2) {     throw new java.lang.IllegalArgumentException( \"Requires 'samples' > 1\" ); } org.jfree.data.xy.XYSeries series = new org.jfree.data.xy.XYSeries( seriesKey ); double step = (end - start) / (samples - 1); for (int i = 0; i < samples; i++) {     double x = start + step * i;     series.add( x, f.getValue( x ) ); } return series;  =>   if (seriesKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'seriesKey' argument.\" ); } if (start >= end) {     throw new java.lang.IllegalArgumentException( \"Requires 'start' < 'end'.\" ); } if (samples < 2) {     throw new java.lang.IllegalArgumentException( \"Requires 'samples' > 1\" ); } org.jfree.data.xy.XYSeries series = new org.jfree.data.xy.XYSeries( seriesKey ); double step = (end - start) / (samples - 1); for (int i = 0; i < samples; i++) {     double x = start + step * i;     series.add( x, f.getValue( x ) ); } return series;
SDL_96:244:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): if (f == null) {     throw new java.lang.IllegalArgumentException( \"Null 'f' argument.\" ); } if (seriesKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'seriesKey' argument.\" ); } if (start >= end) {     throw new java.lang.IllegalArgumentException( \"Requires 'start' < 'end'.\" ); } if (samples < 2) {     throw new java.lang.IllegalArgumentException( \"Requires 'samples' > 1\" ); } org.jfree.data.xy.XYSeries series = new org.jfree.data.xy.XYSeries( seriesKey ); double step = (end - start) / (samples - 1); for (int i = 0; i < samples; i++) {     double x = start + step * i;     series.add( x, f.getValue( x ) ); } return series;  =>   if (f == null) {     throw new java.lang.IllegalArgumentException( \"Null 'f' argument.\" ); } if (start >= end) {     throw new java.lang.IllegalArgumentException( \"Requires 'start' < 'end'.\" ); } if (samples < 2) {     throw new java.lang.IllegalArgumentException( \"Requires 'samples' > 1\" ); } org.jfree.data.xy.XYSeries series = new org.jfree.data.xy.XYSeries( seriesKey ); double step = (end - start) / (samples - 1); for (int i = 0; i < samples; i++) {     double x = start + step * i;     series.add( x, f.getValue( x ) ); } return series;
SDL_97:244:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): if (f == null) {     throw new java.lang.IllegalArgumentException( \"Null 'f' argument.\" ); } if (seriesKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'seriesKey' argument.\" ); } if (start >= end) {     throw new java.lang.IllegalArgumentException( \"Requires 'start' < 'end'.\" ); } if (samples < 2) {     throw new java.lang.IllegalArgumentException( \"Requires 'samples' > 1\" ); } org.jfree.data.xy.XYSeries series = new org.jfree.data.xy.XYSeries( seriesKey ); double step = (end - start) / (samples - 1); for (int i = 0; i < samples; i++) {     double x = start + step * i;     series.add( x, f.getValue( x ) ); } return series;  =>   if (f == null) {     throw new java.lang.IllegalArgumentException( \"Null 'f' argument.\" ); } if (seriesKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'seriesKey' argument.\" ); } if (samples < 2) {     throw new java.lang.IllegalArgumentException( \"Requires 'samples' > 1\" ); } org.jfree.data.xy.XYSeries series = new org.jfree.data.xy.XYSeries( seriesKey ); double step = (end - start) / (samples - 1); for (int i = 0; i < samples; i++) {     double x = start + step * i;     series.add( x, f.getValue( x ) ); } return series;
SDL_98:244:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): if (f == null) {     throw new java.lang.IllegalArgumentException( \"Null 'f' argument.\" ); } if (seriesKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'seriesKey' argument.\" ); } if (start >= end) {     throw new java.lang.IllegalArgumentException( \"Requires 'start' < 'end'.\" ); } if (samples < 2) {     throw new java.lang.IllegalArgumentException( \"Requires 'samples' > 1\" ); } org.jfree.data.xy.XYSeries series = new org.jfree.data.xy.XYSeries( seriesKey ); double step = (end - start) / (samples - 1); for (int i = 0; i < samples; i++) {     double x = start + step * i;     series.add( x, f.getValue( x ) ); } return series;  =>   if (f == null) {     throw new java.lang.IllegalArgumentException( \"Null 'f' argument.\" ); } if (seriesKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'seriesKey' argument.\" ); } if (start >= end) {     throw new java.lang.IllegalArgumentException( \"Requires 'start' < 'end'.\" ); } org.jfree.data.xy.XYSeries series = new org.jfree.data.xy.XYSeries( seriesKey ); double step = (end - start) / (samples - 1); for (int i = 0; i < samples; i++) {     double x = start + step * i;     series.add( x, f.getValue( x ) ); } return series;
SDL_99:243:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): if (f == null) {     throw new java.lang.IllegalArgumentException( \"Null 'f' argument.\" ); } if (seriesKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'seriesKey' argument.\" ); } if (start >= end) {     throw new java.lang.IllegalArgumentException( \"Requires 'start' < 'end'.\" ); } if (samples < 2) {     throw new java.lang.IllegalArgumentException( \"Requires 'samples' > 1\" ); } org.jfree.data.xy.XYSeries series = new org.jfree.data.xy.XYSeries( seriesKey ); double step = (end - start) / (samples - 1); for (int i = 0; i < samples; i++) {     double x = start + step * i;     series.add( x, f.getValue( x ) ); } return series;  =>   if (f == null) {     throw new java.lang.IllegalArgumentException( \"Null 'f' argument.\" ); } if (seriesKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'seriesKey' argument.\" ); } if (start >= end) {     throw new java.lang.IllegalArgumentException( \"Requires 'start' < 'end'.\" ); } if (samples < 2) {     throw new java.lang.IllegalArgumentException( \"Requires 'samples' > 1\" ); } org.jfree.data.xy.XYSeries series = new org.jfree.data.xy.XYSeries( seriesKey ); double step = (end - start) / (samples - 1); return series;
SDL_100:229:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): throw new java.lang.IllegalArgumentException( \"Null 'f' argument.\" );  =>  
SDL_101:231:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): if (f == null) {     throw new java.lang.IllegalArgumentException( \"Null 'f' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'f' argument.\" ); }
SDL_102:232:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): throw new java.lang.IllegalArgumentException( \"Null 'seriesKey' argument.\" );  =>  
SDL_103:234:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): if (seriesKey == null) {     throw new java.lang.IllegalArgumentException( \"Null 'seriesKey' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'seriesKey' argument.\" ); }
SDL_104:235:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): throw new java.lang.IllegalArgumentException( \"Requires 'start' < 'end'.\" );  =>  
SDL_105:237:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): if (start >= end) {     throw new java.lang.IllegalArgumentException( \"Requires 'start' < 'end'.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Requires 'start' < 'end'.\" ); }
SDL_106:238:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): throw new java.lang.IllegalArgumentException( \"Requires 'samples' > 1\" );  =>  
SDL_107:240:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): if (samples < 2) {     throw new java.lang.IllegalArgumentException( \"Requires 'samples' > 1\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Requires 'samples' > 1\" ); }
SDL_108:244:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): double x = start + step * i; series.add( x, f.getValue( x ) );  =>   double x = start + step * i;
SDL_109:246:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): for (int i = 0; i < samples; i++) {     double x = start + step * i;     series.add( x, f.getValue( x ) ); }  =>   for (int i = 0;; i++) {     double x = start + step * i;     series.add( x, f.getValue( x ) ); }
SDL_110:246:org.jfree.data.xy.XYSeries_sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable): for (int i = 0; i < samples; i++) {     double x = start + step * i;     series.add( x, f.getValue( x ) ); }  =>   for (int i = 0; i < samples;) {     double x = start + step * i;     series.add( x, f.getValue( x ) ); }
SDL_111:265:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): if (dataset == null) {     return true; } int itemCount = dataset.getItemCount(); if (itemCount == 0) {     return true; } for (int item = 0; item < itemCount; item++) {     java.lang.Number y = dataset.getValue( item );     if (y != null) {         double yy = y.doubleValue();         if (yy > 0.0) {             return false;         }     } } return true;  =>   int itemCount = dataset.getItemCount(); if (itemCount == 0) {     return true; } for (int item = 0; item < itemCount; item++) {     java.lang.Number y = dataset.getValue( item );     if (y != null) {         double yy = y.doubleValue();         if (yy > 0.0) {             return false;         }     } } return true;
SDL_112:265:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): if (dataset == null) {     return true; } int itemCount = dataset.getItemCount(); if (itemCount == 0) {     return true; } for (int item = 0; item < itemCount; item++) {     java.lang.Number y = dataset.getValue( item );     if (y != null) {         double yy = y.doubleValue();         if (yy > 0.0) {             return false;         }     } } return true;  =>   if (dataset == null) {     return true; } int itemCount = dataset.getItemCount(); for (int item = 0; item < itemCount; item++) {     java.lang.Number y = dataset.getValue( item );     if (y != null) {         double yy = y.doubleValue();         if (yy > 0.0) {             return false;         }     } } return true;
SDL_113:259:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): if (dataset == null) {     return true; } int itemCount = dataset.getItemCount(); if (itemCount == 0) {     return true; } for (int item = 0; item < itemCount; item++) {     java.lang.Number y = dataset.getValue( item );     if (y != null) {         double yy = y.doubleValue();         if (yy > 0.0) {             return false;         }     } } return true;  =>   if (dataset == null) {     return true; } int itemCount = dataset.getItemCount(); if (itemCount == 0) {     return true; } return true;
SDL_114:254:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): if (dataset == null) {     return true; }  =>   if (true) {     return true; }
SDL_115:253:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): return true;  =>   return false;
SDL_116:258:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): if (itemCount == 0) {     return true; }  =>   if (true) {     return true; }
SDL_117:257:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): return true;  =>   return false;
SDL_118:260:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): java.lang.Number y = dataset.getValue( item ); if (y != null) {     double yy = y.doubleValue();     if (yy > 0.0) {         return false;     } }  =>   java.lang.Number y = dataset.getValue( item );
SDL_119:267:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): for (int item = 0; item < itemCount; item++) {     java.lang.Number y = dataset.getValue( item );     if (y != null) {         double yy = y.doubleValue();         if (yy > 0.0) {             return false;         }     } }  =>   for (int item = 0;; item++) {     java.lang.Number y = dataset.getValue( item );     if (y != null) {         double yy = y.doubleValue();         if (yy > 0.0) {             return false;         }     } }
SDL_120:267:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): for (int item = 0; item < itemCount; item++) {     java.lang.Number y = dataset.getValue( item );     if (y != null) {         double yy = y.doubleValue();         if (yy > 0.0) {             return false;         }     } }  =>   for (int item = 0; item < itemCount;) {     java.lang.Number y = dataset.getValue( item );     if (y != null) {         double yy = y.doubleValue();         if (yy > 0.0) {             return false;         }     } }
SDL_121:262:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): double yy = y.doubleValue(); if (yy > 0.0) {     return false; }  =>   double yy = y.doubleValue();
SDL_122:266:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): if (y != null) {     double yy = y.doubleValue();     if (yy > 0.0) {         return false;     } }  =>   if (true) {     double yy = y.doubleValue();     if (yy > 0.0) {         return false;     } }
SDL_123:265:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): if (yy > 0.0) {     return false; }  =>   if (true) {     return false; }
SDL_124:264:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): return false;  =>   return true;
SDL_125:268:boolean_isEmptyOrNull(org.jfree.data.pie.PieDataset): return true;  =>   return false;
SDL_126:285:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): if (dataset == null) {     return true; } int rowCount = dataset.getRowCount(); int columnCount = dataset.getColumnCount(); if (rowCount == 0 || columnCount == 0) {     return true; } for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < columnCount; c++) {         if (dataset.getValue( r, c ) != null) {             return false;         }     } } return true;  =>   int rowCount = dataset.getRowCount(); int columnCount = dataset.getColumnCount(); if (rowCount == 0 || columnCount == 0) {     return true; } for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < columnCount; c++) {         if (dataset.getValue( r, c ) != null) {             return false;         }     } } return true;
SDL_127:285:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): if (dataset == null) {     return true; } int rowCount = dataset.getRowCount(); int columnCount = dataset.getColumnCount(); if (rowCount == 0 || columnCount == 0) {     return true; } for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < columnCount; c++) {         if (dataset.getValue( r, c ) != null) {             return false;         }     } } return true;  =>   if (dataset == null) {     return true; } int rowCount = dataset.getRowCount(); int columnCount = dataset.getColumnCount(); for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < columnCount; c++) {         if (dataset.getValue( r, c ) != null) {             return false;         }     } } return true;
SDL_128:281:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): if (dataset == null) {     return true; } int rowCount = dataset.getRowCount(); int columnCount = dataset.getColumnCount(); if (rowCount == 0 || columnCount == 0) {     return true; } for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < columnCount; c++) {         if (dataset.getValue( r, c ) != null) {             return false;         }     } } return true;  =>   if (dataset == null) {     return true; } int rowCount = dataset.getRowCount(); int columnCount = dataset.getColumnCount(); if (rowCount == 0 || columnCount == 0) {     return true; } return true;
SDL_129:275:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): if (dataset == null) {     return true; }  =>   if (true) {     return true; }
SDL_130:274:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): return true;  =>   return false;
SDL_131:280:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): if (rowCount == 0 || columnCount == 0) {     return true; }  =>   if (true) {     return true; }
SDL_132:279:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): return true;  =>   return false;
SDL_133:281:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): for (int c = 0; c < columnCount; c++) {     if (dataset.getValue( r, c ) != null) {         return false;     } }  =>  
SDL_134:287:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < columnCount; c++) {         if (dataset.getValue( r, c ) != null) {             return false;         }     } }  =>   for (int r = 0;; r++) {     for (int c = 0; c < columnCount; c++) {         if (dataset.getValue( r, c ) != null) {             return false;         }     } }
SDL_135:287:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): for (int r = 0; r < rowCount; r++) {     for (int c = 0; c < columnCount; c++) {         if (dataset.getValue( r, c ) != null) {             return false;         }     } }  =>   for (int r = 0; r < rowCount;) {     for (int c = 0; c < columnCount; c++) {         if (dataset.getValue( r, c ) != null) {             return false;         }     } }
SDL_136:282:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): if (dataset.getValue( r, c ) != null) {     return false; }  =>  
SDL_137:286:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): for (int c = 0; c < columnCount; c++) {     if (dataset.getValue( r, c ) != null) {         return false;     } }  =>   for (int c = 0;; c++) {     if (dataset.getValue( r, c ) != null) {         return false;     } }
SDL_138:286:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): for (int c = 0; c < columnCount; c++) {     if (dataset.getValue( r, c ) != null) {         return false;     } }  =>   for (int c = 0; c < columnCount;) {     if (dataset.getValue( r, c ) != null) {         return false;     } }
SDL_139:285:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): if (dataset.getValue( r, c ) != null) {     return false; }  =>   if (true) {     return false; }
SDL_140:284:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): return false;  =>   return true;
SDL_141:288:boolean_isEmptyOrNull(org.jfree.data.category.CategoryDataset): return true;  =>   return false;
SDL_142:293:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): if (dataset != null) {     for (int s = 0; s < dataset.getSeriesCount(); s++) {         if (dataset.getItemCount( s ) > 0) {             return false;         }     } } return true;  =>   return true;
SDL_143:293:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): for (int s = 0; s < dataset.getSeriesCount(); s++) {     if (dataset.getItemCount( s ) > 0) {         return false;     } }  =>  
SDL_144:299:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): if (dataset != null) {     for (int s = 0; s < dataset.getSeriesCount(); s++) {         if (dataset.getItemCount( s ) > 0) {             return false;         }     } }  =>   if (true) {     for (int s = 0; s < dataset.getSeriesCount(); s++) {         if (dataset.getItemCount( s ) > 0) {             return false;         }     } }
SDL_145:294:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): if (dataset.getItemCount( s ) > 0) {     return false; }  =>  
SDL_146:298:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): for (int s = 0; s < dataset.getSeriesCount(); s++) {     if (dataset.getItemCount( s ) > 0) {         return false;     } }  =>   for (int s = 0;; s++) {     if (dataset.getItemCount( s ) > 0) {         return false;     } }
SDL_147:298:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): for (int s = 0; s < dataset.getSeriesCount(); s++) {     if (dataset.getItemCount( s ) > 0) {         return false;     } }  =>   for (int s = 0; s < dataset.getSeriesCount();) {     if (dataset.getItemCount( s ) > 0) {         return false;     } }
SDL_148:297:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): if (dataset.getItemCount( s ) > 0) {     return false; }  =>   if (true) {     return false; }
SDL_149:296:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): return false;  =>   return true;
SDL_150:300:boolean_isEmptyOrNull(org.jfree.data.xy.XYDataset): return true;  =>   return false;
SDL_151:317:org.jfree.data.Range_findDomainBounds(org.jfree.data.xy.XYDataset,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; if (dataset instanceof org.jfree.data.DomainInfo) {     org.jfree.data.DomainInfo info = (org.jfree.data.DomainInfo) dataset;     result = info.getDomainBounds( includeInterval ); } else {     result = iterateDomainBounds( dataset, includeInterval ); } return result;  =>   org.jfree.data.Range result = null; if (dataset instanceof org.jfree.data.DomainInfo) {     org.jfree.data.DomainInfo info = (org.jfree.data.DomainInfo) dataset;     result = info.getDomainBounds( includeInterval ); } else {     result = iterateDomainBounds( dataset, includeInterval ); } return result;
SDL_152:314:org.jfree.data.Range_findDomainBounds(org.jfree.data.xy.XYDataset,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; if (dataset instanceof org.jfree.data.DomainInfo) {     org.jfree.data.DomainInfo info = (org.jfree.data.DomainInfo) dataset;     result = info.getDomainBounds( includeInterval ); } else {     result = iterateDomainBounds( dataset, includeInterval ); } return result;  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; return result;
SDL_153:310:org.jfree.data.Range_findDomainBounds(org.jfree.data.xy.XYDataset,boolean): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_154:312:org.jfree.data.Range_findDomainBounds(org.jfree.data.xy.XYDataset,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_155:315:org.jfree.data.Range_findDomainBounds(org.jfree.data.xy.XYDataset,boolean): org.jfree.data.DomainInfo info = (org.jfree.data.DomainInfo) dataset; result = info.getDomainBounds( includeInterval );  =>   org.jfree.data.DomainInfo info = (org.jfree.data.DomainInfo) dataset;
SDL_156:319:org.jfree.data.Range_findDomainBounds(org.jfree.data.xy.XYDataset,boolean): if (dataset instanceof org.jfree.data.DomainInfo) {     org.jfree.data.DomainInfo info = (org.jfree.data.DomainInfo) dataset;     result = info.getDomainBounds( includeInterval ); } else {     result = iterateDomainBounds( dataset, includeInterval ); }  =>   if (true) {     org.jfree.data.DomainInfo info = (org.jfree.data.DomainInfo) dataset;     result = info.getDomainBounds( includeInterval ); } else {     result = iterateDomainBounds( dataset, includeInterval ); }
SDL_157:317:org.jfree.data.Range_findDomainBounds(org.jfree.data.xy.XYDataset,boolean): result = iterateDomainBounds( dataset, includeInterval );  =>  
SDL_158:332:org.jfree.data.Range_findDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; if (dataset instanceof org.jfree.data.xy.XYDomainInfo) {     org.jfree.data.xy.XYDomainInfo info = (org.jfree.data.xy.XYDomainInfo) dataset;     result = info.getDomainBounds( visibleSeriesKeys, includeInterval ); } else {     result = iterateToFindDomainBounds( dataset, visibleSeriesKeys, includeInterval ); } return result;  =>   org.jfree.data.Range result = null; if (dataset instanceof org.jfree.data.xy.XYDomainInfo) {     org.jfree.data.xy.XYDomainInfo info = (org.jfree.data.xy.XYDomainInfo) dataset;     result = info.getDomainBounds( visibleSeriesKeys, includeInterval ); } else {     result = iterateToFindDomainBounds( dataset, visibleSeriesKeys, includeInterval ); } return result;
SDL_159:329:org.jfree.data.Range_findDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; if (dataset instanceof org.jfree.data.xy.XYDomainInfo) {     org.jfree.data.xy.XYDomainInfo info = (org.jfree.data.xy.XYDomainInfo) dataset;     result = info.getDomainBounds( visibleSeriesKeys, includeInterval ); } else {     result = iterateToFindDomainBounds( dataset, visibleSeriesKeys, includeInterval ); } return result;  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; return result;
SDL_160:325:org.jfree.data.Range_findDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_161:327:org.jfree.data.Range_findDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_162:330:org.jfree.data.Range_findDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): org.jfree.data.xy.XYDomainInfo info = (org.jfree.data.xy.XYDomainInfo) dataset; result = info.getDomainBounds( visibleSeriesKeys, includeInterval );  =>   org.jfree.data.xy.XYDomainInfo info = (org.jfree.data.xy.XYDomainInfo) dataset;
SDL_163:334:org.jfree.data.Range_findDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): if (dataset instanceof org.jfree.data.xy.XYDomainInfo) {     org.jfree.data.xy.XYDomainInfo info = (org.jfree.data.xy.XYDomainInfo) dataset;     result = info.getDomainBounds( visibleSeriesKeys, includeInterval ); } else {     result = iterateToFindDomainBounds( dataset, visibleSeriesKeys, includeInterval ); }  =>   if (true) {     org.jfree.data.xy.XYDomainInfo info = (org.jfree.data.xy.XYDomainInfo) dataset;     result = info.getDomainBounds( visibleSeriesKeys, includeInterval ); } else {     result = iterateToFindDomainBounds( dataset, visibleSeriesKeys, includeInterval ); }
SDL_164:332:org.jfree.data.Range_findDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): result = iterateToFindDomainBounds( dataset, visibleSeriesKeys, includeInterval );  =>  
SDL_165:382:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); double lvalue; double uvalue; if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             lvalue = intervalXYData.getStartXValue( series, item );             uvalue = intervalXYData.getEndXValue( series, item );             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );             }             if (!Double.isNaN( uvalue )) {                 maximum = Math.max( maximum, uvalue );             }         }     } } else {     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             lvalue = dataset.getXValue( series, item );             uvalue = lvalue;             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );                 maximum = Math.max( maximum, uvalue );             }         }     } } if (minimum > maximum) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }  =>   double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); double lvalue; double uvalue; if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             lvalue = intervalXYData.getStartXValue( series, item );             uvalue = intervalXYData.getEndXValue( series, item );             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );             }             if (!Double.isNaN( uvalue )) {                 maximum = Math.max( maximum, uvalue );             }         }     } } else {     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             lvalue = dataset.getXValue( series, item );             uvalue = lvalue;             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );                 maximum = Math.max( maximum, uvalue );             }         }     } } if (minimum > maximum) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }
SDL_166:357:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); double lvalue; double uvalue; if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             lvalue = intervalXYData.getStartXValue( series, item );             uvalue = intervalXYData.getEndXValue( series, item );             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );             }             if (!Double.isNaN( uvalue )) {                 maximum = Math.max( maximum, uvalue );             }         }     } } else {     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             lvalue = dataset.getXValue( series, item );             uvalue = lvalue;             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );                 maximum = Math.max( maximum, uvalue );             }         }     } } if (minimum > maximum) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); double lvalue; double uvalue; if (minimum > maximum) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }
SDL_167:380:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); double lvalue; double uvalue; if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             lvalue = intervalXYData.getStartXValue( series, item );             uvalue = intervalXYData.getEndXValue( series, item );             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );             }             if (!Double.isNaN( uvalue )) {                 maximum = Math.max( maximum, uvalue );             }         }     } } else {     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             lvalue = dataset.getXValue( series, item );             uvalue = lvalue;             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );                 maximum = Math.max( maximum, uvalue );             }         }     } } if (minimum > maximum) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); double lvalue; double uvalue; if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             lvalue = intervalXYData.getStartXValue( series, item );             uvalue = intervalXYData.getEndXValue( series, item );             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );             }             if (!Double.isNaN( uvalue )) {                 maximum = Math.max( maximum, uvalue );             }         }     } } else {     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             lvalue = dataset.getXValue( series, item );             uvalue = lvalue;             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );                 maximum = Math.max( maximum, uvalue );             }         }     } }
SDL_168:345:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_169:347:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_170:354:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset; for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         lvalue = intervalXYData.getStartXValue( series, item );         uvalue = intervalXYData.getEndXValue( series, item );         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );         }         if (!Double.isNaN( uvalue )) {             maximum = Math.max( maximum, uvalue );         }     } }  =>   org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;
SDL_171:380:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             lvalue = intervalXYData.getStartXValue( series, item );             uvalue = intervalXYData.getEndXValue( series, item );             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );             }             if (!Double.isNaN( uvalue )) {                 maximum = Math.max( maximum, uvalue );             }         }     } } else {     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             lvalue = dataset.getXValue( series, item );             uvalue = lvalue;             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );                 maximum = Math.max( maximum, uvalue );             }         }     } }  =>   if (true) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             lvalue = intervalXYData.getStartXValue( series, item );             uvalue = intervalXYData.getEndXValue( series, item );             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );             }             if (!Double.isNaN( uvalue )) {                 maximum = Math.max( maximum, uvalue );             }         }     } } else {     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             lvalue = dataset.getXValue( series, item );             uvalue = lvalue;             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );                 maximum = Math.max( maximum, uvalue );             }         }     } }
SDL_172:368:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         lvalue = dataset.getXValue( series, item );         uvalue = lvalue;         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );             maximum = Math.max( maximum, uvalue );         }     } }  =>  
SDL_173:356:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): int itemCount = dataset.getItemCount( series ); for (int item = 0; item < itemCount; item++) {     lvalue = intervalXYData.getStartXValue( series, item );     uvalue = intervalXYData.getEndXValue( series, item );     if (!Double.isNaN( lvalue )) {         minimum = Math.min( minimum, lvalue );     }     if (!Double.isNaN( uvalue )) {         maximum = Math.max( maximum, uvalue );     } }  =>   int itemCount = dataset.getItemCount( series );
SDL_174:367:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         lvalue = intervalXYData.getStartXValue( series, item );         uvalue = intervalXYData.getEndXValue( series, item );         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );         }         if (!Double.isNaN( uvalue )) {             maximum = Math.max( maximum, uvalue );         }     } }  =>   for (int series = 0;; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         lvalue = intervalXYData.getStartXValue( series, item );         uvalue = intervalXYData.getEndXValue( series, item );         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );         }         if (!Double.isNaN( uvalue )) {             maximum = Math.max( maximum, uvalue );         }     } }
SDL_175:367:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         lvalue = intervalXYData.getStartXValue( series, item );         uvalue = intervalXYData.getEndXValue( series, item );         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );         }         if (!Double.isNaN( uvalue )) {             maximum = Math.max( maximum, uvalue );         }     } }  =>   for (int series = 0; series < seriesCount;) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         lvalue = intervalXYData.getStartXValue( series, item );         uvalue = intervalXYData.getEndXValue( series, item );         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );         }         if (!Double.isNaN( uvalue )) {             maximum = Math.max( maximum, uvalue );         }     } }
SDL_176:364:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): lvalue = intervalXYData.getStartXValue( series, item ); uvalue = intervalXYData.getEndXValue( series, item ); if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue ); } if (!Double.isNaN( uvalue )) {     maximum = Math.max( maximum, uvalue ); }  =>   uvalue = intervalXYData.getEndXValue( series, item ); if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue ); } if (!Double.isNaN( uvalue )) {     maximum = Math.max( maximum, uvalue ); }
SDL_177:364:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): lvalue = intervalXYData.getStartXValue( series, item ); uvalue = intervalXYData.getEndXValue( series, item ); if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue ); } if (!Double.isNaN( uvalue )) {     maximum = Math.max( maximum, uvalue ); }  =>   lvalue = intervalXYData.getStartXValue( series, item ); if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue ); } if (!Double.isNaN( uvalue )) {     maximum = Math.max( maximum, uvalue ); }
SDL_178:362:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): lvalue = intervalXYData.getStartXValue( series, item ); uvalue = intervalXYData.getEndXValue( series, item ); if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue ); } if (!Double.isNaN( uvalue )) {     maximum = Math.max( maximum, uvalue ); }  =>   lvalue = intervalXYData.getStartXValue( series, item ); uvalue = intervalXYData.getEndXValue( series, item ); if (!Double.isNaN( uvalue )) {     maximum = Math.max( maximum, uvalue ); }
SDL_179:362:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): lvalue = intervalXYData.getStartXValue( series, item ); uvalue = intervalXYData.getEndXValue( series, item ); if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue ); } if (!Double.isNaN( uvalue )) {     maximum = Math.max( maximum, uvalue ); }  =>   lvalue = intervalXYData.getStartXValue( series, item ); uvalue = intervalXYData.getEndXValue( series, item ); if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue ); }
SDL_180:366:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): for (int item = 0; item < itemCount; item++) {     lvalue = intervalXYData.getStartXValue( series, item );     uvalue = intervalXYData.getEndXValue( series, item );     if (!Double.isNaN( lvalue )) {         minimum = Math.min( minimum, lvalue );     }     if (!Double.isNaN( uvalue )) {         maximum = Math.max( maximum, uvalue );     } }  =>   for (int item = 0;; item++) {     lvalue = intervalXYData.getStartXValue( series, item );     uvalue = intervalXYData.getEndXValue( series, item );     if (!Double.isNaN( lvalue )) {         minimum = Math.min( minimum, lvalue );     }     if (!Double.isNaN( uvalue )) {         maximum = Math.max( maximum, uvalue );     } }
SDL_181:366:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): for (int item = 0; item < itemCount; item++) {     lvalue = intervalXYData.getStartXValue( series, item );     uvalue = intervalXYData.getEndXValue( series, item );     if (!Double.isNaN( lvalue )) {         minimum = Math.min( minimum, lvalue );     }     if (!Double.isNaN( uvalue )) {         maximum = Math.max( maximum, uvalue );     } }  =>   for (int item = 0; item < itemCount;) {     lvalue = intervalXYData.getStartXValue( series, item );     uvalue = intervalXYData.getEndXValue( series, item );     if (!Double.isNaN( lvalue )) {         minimum = Math.min( minimum, lvalue );     }     if (!Double.isNaN( uvalue )) {         maximum = Math.max( maximum, uvalue );     } }
SDL_182:360:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): minimum = Math.min( minimum, lvalue );  =>  
SDL_183:362:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue ); }  =>   if (true) {     minimum = Math.min( minimum, lvalue ); }
SDL_184:363:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): maximum = Math.max( maximum, uvalue );  =>  
SDL_185:365:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): if (!Double.isNaN( uvalue )) {     maximum = Math.max( maximum, uvalue ); }  =>   if (true) {     maximum = Math.max( maximum, uvalue ); }
SDL_186:370:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): int itemCount = dataset.getItemCount( series ); for (int item = 0; item < itemCount; item++) {     lvalue = dataset.getXValue( series, item );     uvalue = lvalue;     if (!Double.isNaN( lvalue )) {         minimum = Math.min( minimum, lvalue );         maximum = Math.max( maximum, uvalue );     } }  =>   int itemCount = dataset.getItemCount( series );
SDL_187:379:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         lvalue = dataset.getXValue( series, item );         uvalue = lvalue;         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );             maximum = Math.max( maximum, uvalue );         }     } }  =>   for (int series = 0;; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         lvalue = dataset.getXValue( series, item );         uvalue = lvalue;         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );             maximum = Math.max( maximum, uvalue );         }     } }
SDL_188:379:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         lvalue = dataset.getXValue( series, item );         uvalue = lvalue;         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );             maximum = Math.max( maximum, uvalue );         }     } }  =>   for (int series = 0; series < seriesCount;) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         lvalue = dataset.getXValue( series, item );         uvalue = lvalue;         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );             maximum = Math.max( maximum, uvalue );         }     } }
SDL_189:376:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): lvalue = dataset.getXValue( series, item ); uvalue = lvalue; if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue );     maximum = Math.max( maximum, uvalue ); }  =>   uvalue = lvalue; if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue );     maximum = Math.max( maximum, uvalue ); }
SDL_190:376:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): lvalue = dataset.getXValue( series, item ); uvalue = lvalue; if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue );     maximum = Math.max( maximum, uvalue ); }  =>   lvalue = dataset.getXValue( series, item ); if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue );     maximum = Math.max( maximum, uvalue ); }
SDL_191:373:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): lvalue = dataset.getXValue( series, item ); uvalue = lvalue; if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue );     maximum = Math.max( maximum, uvalue ); }  =>   lvalue = dataset.getXValue( series, item ); uvalue = lvalue;
SDL_192:378:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): for (int item = 0; item < itemCount; item++) {     lvalue = dataset.getXValue( series, item );     uvalue = lvalue;     if (!Double.isNaN( lvalue )) {         minimum = Math.min( minimum, lvalue );         maximum = Math.max( maximum, uvalue );     } }  =>   for (int item = 0;; item++) {     lvalue = dataset.getXValue( series, item );     uvalue = lvalue;     if (!Double.isNaN( lvalue )) {         minimum = Math.min( minimum, lvalue );         maximum = Math.max( maximum, uvalue );     } }
SDL_193:378:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): for (int item = 0; item < itemCount; item++) {     lvalue = dataset.getXValue( series, item );     uvalue = lvalue;     if (!Double.isNaN( lvalue )) {         minimum = Math.min( minimum, lvalue );         maximum = Math.max( maximum, uvalue );     } }  =>   for (int item = 0; item < itemCount;) {     lvalue = dataset.getXValue( series, item );     uvalue = lvalue;     if (!Double.isNaN( lvalue )) {         minimum = Math.min( minimum, lvalue );         maximum = Math.max( maximum, uvalue );     } }
SDL_194:375:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): minimum = Math.min( minimum, lvalue ); maximum = Math.max( maximum, uvalue );  =>   maximum = Math.max( maximum, uvalue );
SDL_195:375:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): minimum = Math.min( minimum, lvalue ); maximum = Math.max( maximum, uvalue );  =>   minimum = Math.min( minimum, lvalue );
SDL_196:377:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue );     maximum = Math.max( maximum, uvalue ); }  =>   if (true) {     minimum = Math.min( minimum, lvalue );     maximum = Math.max( maximum, uvalue ); }
SDL_197:385:org.jfree.data.Range_iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean): if (minimum > maximum) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }  =>   if (true) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }
SDL_198:402:org.jfree.data.Range_findRangeBounds(org.jfree.data.category.CategoryDataset,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     result = info.getRangeBounds( includeInterval ); } else {     result = iterateRangeBounds( dataset, includeInterval ); } return result;  =>   org.jfree.data.Range result = null; if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     result = info.getRangeBounds( includeInterval ); } else {     result = iterateRangeBounds( dataset, includeInterval ); } return result;
SDL_199:399:org.jfree.data.Range_findRangeBounds(org.jfree.data.category.CategoryDataset,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     result = info.getRangeBounds( includeInterval ); } else {     result = iterateRangeBounds( dataset, includeInterval ); } return result;  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; return result;
SDL_200:395:org.jfree.data.Range_findRangeBounds(org.jfree.data.category.CategoryDataset,boolean): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_201:397:org.jfree.data.Range_findRangeBounds(org.jfree.data.category.CategoryDataset,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_202:400:org.jfree.data.Range_findRangeBounds(org.jfree.data.category.CategoryDataset,boolean): org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset; result = info.getRangeBounds( includeInterval );  =>   org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;
SDL_203:404:org.jfree.data.Range_findRangeBounds(org.jfree.data.category.CategoryDataset,boolean): if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     result = info.getRangeBounds( includeInterval ); } else {     result = iterateRangeBounds( dataset, includeInterval ); }  =>   if (true) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     result = info.getRangeBounds( includeInterval ); } else {     result = iterateRangeBounds( dataset, includeInterval ); }
SDL_204:402:org.jfree.data.Range_findRangeBounds(org.jfree.data.category.CategoryDataset,boolean): result = iterateRangeBounds( dataset, includeInterval );  =>  
SDL_205:417:org.jfree.data.Range_findRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; if (dataset instanceof org.jfree.data.category.CategoryRangeInfo) {     org.jfree.data.category.CategoryRangeInfo info = (org.jfree.data.category.CategoryRangeInfo) dataset;     result = info.getRangeBounds( visibleSeriesKeys, includeInterval ); } else {     result = iterateToFindRangeBounds( dataset, visibleSeriesKeys, includeInterval ); } return result;  =>   org.jfree.data.Range result = null; if (dataset instanceof org.jfree.data.category.CategoryRangeInfo) {     org.jfree.data.category.CategoryRangeInfo info = (org.jfree.data.category.CategoryRangeInfo) dataset;     result = info.getRangeBounds( visibleSeriesKeys, includeInterval ); } else {     result = iterateToFindRangeBounds( dataset, visibleSeriesKeys, includeInterval ); } return result;
SDL_206:414:org.jfree.data.Range_findRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; if (dataset instanceof org.jfree.data.category.CategoryRangeInfo) {     org.jfree.data.category.CategoryRangeInfo info = (org.jfree.data.category.CategoryRangeInfo) dataset;     result = info.getRangeBounds( visibleSeriesKeys, includeInterval ); } else {     result = iterateToFindRangeBounds( dataset, visibleSeriesKeys, includeInterval ); } return result;  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; return result;
SDL_207:410:org.jfree.data.Range_findRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_208:412:org.jfree.data.Range_findRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_209:415:org.jfree.data.Range_findRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): org.jfree.data.category.CategoryRangeInfo info = (org.jfree.data.category.CategoryRangeInfo) dataset; result = info.getRangeBounds( visibleSeriesKeys, includeInterval );  =>   org.jfree.data.category.CategoryRangeInfo info = (org.jfree.data.category.CategoryRangeInfo) dataset;
SDL_210:419:org.jfree.data.Range_findRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): if (dataset instanceof org.jfree.data.category.CategoryRangeInfo) {     org.jfree.data.category.CategoryRangeInfo info = (org.jfree.data.category.CategoryRangeInfo) dataset;     result = info.getRangeBounds( visibleSeriesKeys, includeInterval ); } else {     result = iterateToFindRangeBounds( dataset, visibleSeriesKeys, includeInterval ); }  =>   if (true) {     org.jfree.data.category.CategoryRangeInfo info = (org.jfree.data.category.CategoryRangeInfo) dataset;     result = info.getRangeBounds( visibleSeriesKeys, includeInterval ); } else {     result = iterateToFindRangeBounds( dataset, visibleSeriesKeys, includeInterval ); }
SDL_211:417:org.jfree.data.Range_findRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): result = iterateToFindRangeBounds( dataset, visibleSeriesKeys, includeInterval );  =>  
SDL_212:437:org.jfree.data.Range_findRangeBounds(org.jfree.data.xy.XYDataset,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     result = info.getRangeBounds( includeInterval ); } else {     result = iterateRangeBounds( dataset, includeInterval ); } return result;  =>   org.jfree.data.Range result = null; if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     result = info.getRangeBounds( includeInterval ); } else {     result = iterateRangeBounds( dataset, includeInterval ); } return result;
SDL_213:434:org.jfree.data.Range_findRangeBounds(org.jfree.data.xy.XYDataset,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     result = info.getRangeBounds( includeInterval ); } else {     result = iterateRangeBounds( dataset, includeInterval ); } return result;  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; return result;
SDL_214:430:org.jfree.data.Range_findRangeBounds(org.jfree.data.xy.XYDataset,boolean): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_215:432:org.jfree.data.Range_findRangeBounds(org.jfree.data.xy.XYDataset,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_216:435:org.jfree.data.Range_findRangeBounds(org.jfree.data.xy.XYDataset,boolean): org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset; result = info.getRangeBounds( includeInterval );  =>   org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;
SDL_217:439:org.jfree.data.Range_findRangeBounds(org.jfree.data.xy.XYDataset,boolean): if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     result = info.getRangeBounds( includeInterval ); } else {     result = iterateRangeBounds( dataset, includeInterval ); }  =>   if (true) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     result = info.getRangeBounds( includeInterval ); } else {     result = iterateRangeBounds( dataset, includeInterval ); }
SDL_218:437:org.jfree.data.Range_findRangeBounds(org.jfree.data.xy.XYDataset,boolean): result = iterateRangeBounds( dataset, includeInterval );  =>  
SDL_219:452:org.jfree.data.Range_findRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; if (dataset instanceof org.jfree.data.xy.XYRangeInfo) {     org.jfree.data.xy.XYRangeInfo info = (org.jfree.data.xy.XYRangeInfo) dataset;     result = info.getRangeBounds( visibleSeriesKeys, xRange, includeInterval ); } else {     result = iterateToFindRangeBounds( dataset, visibleSeriesKeys, xRange, includeInterval ); } return result;  =>   org.jfree.data.Range result = null; if (dataset instanceof org.jfree.data.xy.XYRangeInfo) {     org.jfree.data.xy.XYRangeInfo info = (org.jfree.data.xy.XYRangeInfo) dataset;     result = info.getRangeBounds( visibleSeriesKeys, xRange, includeInterval ); } else {     result = iterateToFindRangeBounds( dataset, visibleSeriesKeys, xRange, includeInterval ); } return result;
SDL_220:449:org.jfree.data.Range_findRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; if (dataset instanceof org.jfree.data.xy.XYRangeInfo) {     org.jfree.data.xy.XYRangeInfo info = (org.jfree.data.xy.XYRangeInfo) dataset;     result = info.getRangeBounds( visibleSeriesKeys, xRange, includeInterval ); } else {     result = iterateToFindRangeBounds( dataset, visibleSeriesKeys, xRange, includeInterval ); } return result;  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; return result;
SDL_221:445:org.jfree.data.Range_findRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_222:447:org.jfree.data.Range_findRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_223:450:org.jfree.data.Range_findRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): org.jfree.data.xy.XYRangeInfo info = (org.jfree.data.xy.XYRangeInfo) dataset; result = info.getRangeBounds( visibleSeriesKeys, xRange, includeInterval );  =>   org.jfree.data.xy.XYRangeInfo info = (org.jfree.data.xy.XYRangeInfo) dataset;
SDL_224:454:org.jfree.data.Range_findRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): if (dataset instanceof org.jfree.data.xy.XYRangeInfo) {     org.jfree.data.xy.XYRangeInfo info = (org.jfree.data.xy.XYRangeInfo) dataset;     result = info.getRangeBounds( visibleSeriesKeys, xRange, includeInterval ); } else {     result = iterateToFindRangeBounds( dataset, visibleSeriesKeys, xRange, includeInterval ); }  =>   if (true) {     org.jfree.data.xy.XYRangeInfo info = (org.jfree.data.xy.XYRangeInfo) dataset;     result = info.getRangeBounds( visibleSeriesKeys, xRange, includeInterval ); } else {     result = iterateToFindRangeBounds( dataset, visibleSeriesKeys, xRange, includeInterval ); }
SDL_225:452:org.jfree.data.Range_findRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): result = iterateToFindRangeBounds( dataset, visibleSeriesKeys, xRange, includeInterval );  =>  
SDL_226:478:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int rowCount = dataset.getRowCount(); int columnCount = dataset.getColumnCount(); if (includeInterval && dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {     org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;     java.lang.Number value;     java.lang.Number lvalue;     java.lang.Number uvalue;     for (int row = 0; row < rowCount; row++) {         for (int column = 0; column < columnCount; column++) {             value = icd.getValue( row, column );             double v;             if (value != null && !Double.isNaN( v = value.doubleValue() )) {                 minimum = Math.min( v, minimum );                 maximum = Math.max( v, maximum );             }             lvalue = icd.getStartValue( row, column );             if (lvalue != null && !Double.isNaN( v = lvalue.doubleValue() )) {                 minimum = Math.min( v, minimum );                 maximum = Math.max( v, maximum );             }             uvalue = icd.getEndValue( row, column );             if (uvalue != null && !Double.isNaN( v = uvalue.doubleValue() )) {                 minimum = Math.min( v, minimum );                 maximum = Math.max( v, maximum );             }         }     } } else {     for (int row = 0; row < rowCount; row++) {         for (int column = 0; column < columnCount; column++) {             java.lang.Number value = dataset.getValue( row, column );             if (value != null) {                 double v = value.doubleValue();                 if (!Double.isNaN( v )) {                     minimum = Math.min( minimum, v );                     maximum = Math.max( maximum, v );                 }             }         }     } } if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }  =>   double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int rowCount = dataset.getRowCount(); int columnCount = dataset.getColumnCount(); if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }
SDL_227:512:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int rowCount = dataset.getRowCount(); int columnCount = dataset.getColumnCount(); if (includeInterval && dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {     org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;     java.lang.Number value;     java.lang.Number lvalue;     java.lang.Number uvalue;     for (int row = 0; row < rowCount; row++) {         for (int column = 0; column < columnCount; column++) {             value = icd.getValue( row, column );             double v;             if (value != null && !Double.isNaN( v = value.doubleValue() )) {                 minimum = Math.min( v, minimum );                 maximum = Math.max( v, maximum );             }             lvalue = icd.getStartValue( row, column );             if (lvalue != null && !Double.isNaN( v = lvalue.doubleValue() )) {                 minimum = Math.min( v, minimum );                 maximum = Math.max( v, maximum );             }             uvalue = icd.getEndValue( row, column );             if (uvalue != null && !Double.isNaN( v = uvalue.doubleValue() )) {                 minimum = Math.min( v, minimum );                 maximum = Math.max( v, maximum );             }         }     } } else {     for (int row = 0; row < rowCount; row++) {         for (int column = 0; column < columnCount; column++) {             java.lang.Number value = dataset.getValue( row, column );             if (value != null) {                 double v = value.doubleValue();                 if (!Double.isNaN( v )) {                     minimum = Math.min( minimum, v );                     maximum = Math.max( maximum, v );                 }             }         }     } } if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }  =>   double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int rowCount = dataset.getRowCount(); int columnCount = dataset.getColumnCount(); if (includeInterval && dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {     org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;     java.lang.Number value;     java.lang.Number lvalue;     java.lang.Number uvalue;     for (int row = 0; row < rowCount; row++) {         for (int column = 0; column < columnCount; column++) {             value = icd.getValue( row, column );             double v;             if (value != null && !Double.isNaN( v = value.doubleValue() )) {                 minimum = Math.min( v, minimum );                 maximum = Math.max( v, maximum );             }             lvalue = icd.getStartValue( row, column );             if (lvalue != null && !Double.isNaN( v = lvalue.doubleValue() )) {                 minimum = Math.min( v, minimum );                 maximum = Math.max( v, maximum );             }             uvalue = icd.getEndValue( row, column );             if (uvalue != null && !Double.isNaN( v = uvalue.doubleValue() )) {                 minimum = Math.min( v, minimum );                 maximum = Math.max( v, maximum );             }         }     } } else {     for (int row = 0; row < rowCount; row++) {         for (int column = 0; column < columnCount; column++) {             java.lang.Number value = dataset.getValue( row, column );             if (value != null) {                 double v = value.doubleValue();                 if (!Double.isNaN( v )) {                     minimum = Math.min( minimum, v );                     maximum = Math.max( maximum, v );                 }             }         }     } }
SDL_228:478:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset; java.lang.Number value; java.lang.Number lvalue; java.lang.Number uvalue; for (int row = 0; row < rowCount; row++) {     for (int column = 0; column < columnCount; column++) {         value = icd.getValue( row, column );         double v;         if (value != null && !Double.isNaN( v = value.doubleValue() )) {             minimum = Math.min( v, minimum );             maximum = Math.max( v, maximum );         }         lvalue = icd.getStartValue( row, column );         if (lvalue != null && !Double.isNaN( v = lvalue.doubleValue() )) {             minimum = Math.min( v, minimum );             maximum = Math.max( v, maximum );         }         uvalue = icd.getEndValue( row, column );         if (uvalue != null && !Double.isNaN( v = uvalue.doubleValue() )) {             minimum = Math.min( v, minimum );             maximum = Math.max( v, maximum );         }     } }  =>   org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset; java.lang.Number value; java.lang.Number lvalue; java.lang.Number uvalue;
SDL_229:512:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): if (includeInterval && dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {     org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;     java.lang.Number value;     java.lang.Number lvalue;     java.lang.Number uvalue;     for (int row = 0; row < rowCount; row++) {         for (int column = 0; column < columnCount; column++) {             value = icd.getValue( row, column );             double v;             if (value != null && !Double.isNaN( v = value.doubleValue() )) {                 minimum = Math.min( v, minimum );                 maximum = Math.max( v, maximum );             }             lvalue = icd.getStartValue( row, column );             if (lvalue != null && !Double.isNaN( v = lvalue.doubleValue() )) {                 minimum = Math.min( v, minimum );                 maximum = Math.max( v, maximum );             }             uvalue = icd.getEndValue( row, column );             if (uvalue != null && !Double.isNaN( v = uvalue.doubleValue() )) {                 minimum = Math.min( v, minimum );                 maximum = Math.max( v, maximum );             }         }     } } else {     for (int row = 0; row < rowCount; row++) {         for (int column = 0; column < columnCount; column++) {             java.lang.Number value = dataset.getValue( row, column );             if (value != null) {                 double v = value.doubleValue();                 if (!Double.isNaN( v )) {                     minimum = Math.min( minimum, v );                     maximum = Math.max( maximum, v );                 }             }         }     } }  =>   if (true) {     org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;     java.lang.Number value;     java.lang.Number lvalue;     java.lang.Number uvalue;     for (int row = 0; row < rowCount; row++) {         for (int column = 0; column < columnCount; column++) {             value = icd.getValue( row, column );             double v;             if (value != null && !Double.isNaN( v = value.doubleValue() )) {                 minimum = Math.min( v, minimum );                 maximum = Math.max( v, maximum );             }             lvalue = icd.getStartValue( row, column );             if (lvalue != null && !Double.isNaN( v = lvalue.doubleValue() )) {                 minimum = Math.min( v, minimum );                 maximum = Math.max( v, maximum );             }             uvalue = icd.getEndValue( row, column );             if (uvalue != null && !Double.isNaN( v = uvalue.doubleValue() )) {                 minimum = Math.min( v, minimum );                 maximum = Math.max( v, maximum );             }         }     } } else {     for (int row = 0; row < rowCount; row++) {         for (int column = 0; column < columnCount; column++) {             java.lang.Number value = dataset.getValue( row, column );             if (value != null) {                 double v = value.doubleValue();                 if (!Double.isNaN( v )) {                     minimum = Math.min( minimum, v );                     maximum = Math.max( maximum, v );                 }             }         }     } }
SDL_230:499:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): for (int row = 0; row < rowCount; row++) {     for (int column = 0; column < columnCount; column++) {         java.lang.Number value = dataset.getValue( row, column );         if (value != null) {             double v = value.doubleValue();             if (!Double.isNaN( v )) {                 minimum = Math.min( minimum, v );                 maximum = Math.max( maximum, v );             }         }     } }  =>  
SDL_231:479:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): for (int column = 0; column < columnCount; column++) {     value = icd.getValue( row, column );     double v;     if (value != null && !Double.isNaN( v = value.doubleValue() )) {         minimum = Math.min( v, minimum );         maximum = Math.max( v, maximum );     }     lvalue = icd.getStartValue( row, column );     if (lvalue != null && !Double.isNaN( v = lvalue.doubleValue() )) {         minimum = Math.min( v, minimum );         maximum = Math.max( v, maximum );     }     uvalue = icd.getEndValue( row, column );     if (uvalue != null && !Double.isNaN( v = uvalue.doubleValue() )) {         minimum = Math.min( v, minimum );         maximum = Math.max( v, maximum );     } }  =>  
SDL_232:498:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): for (int row = 0; row < rowCount; row++) {     for (int column = 0; column < columnCount; column++) {         value = icd.getValue( row, column );         double v;         if (value != null && !Double.isNaN( v = value.doubleValue() )) {             minimum = Math.min( v, minimum );             maximum = Math.max( v, maximum );         }         lvalue = icd.getStartValue( row, column );         if (lvalue != null && !Double.isNaN( v = lvalue.doubleValue() )) {             minimum = Math.min( v, minimum );             maximum = Math.max( v, maximum );         }         uvalue = icd.getEndValue( row, column );         if (uvalue != null && !Double.isNaN( v = uvalue.doubleValue() )) {             minimum = Math.min( v, minimum );             maximum = Math.max( v, maximum );         }     } }  =>   for (int row = 0;; row++) {     for (int column = 0; column < columnCount; column++) {         value = icd.getValue( row, column );         double v;         if (value != null && !Double.isNaN( v = value.doubleValue() )) {             minimum = Math.min( v, minimum );             maximum = Math.max( v, maximum );         }         lvalue = icd.getStartValue( row, column );         if (lvalue != null && !Double.isNaN( v = lvalue.doubleValue() )) {             minimum = Math.min( v, minimum );             maximum = Math.max( v, maximum );         }         uvalue = icd.getEndValue( row, column );         if (uvalue != null && !Double.isNaN( v = uvalue.doubleValue() )) {             minimum = Math.min( v, minimum );             maximum = Math.max( v, maximum );         }     } }
SDL_233:498:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): for (int row = 0; row < rowCount; row++) {     for (int column = 0; column < columnCount; column++) {         value = icd.getValue( row, column );         double v;         if (value != null && !Double.isNaN( v = value.doubleValue() )) {             minimum = Math.min( v, minimum );             maximum = Math.max( v, maximum );         }         lvalue = icd.getStartValue( row, column );         if (lvalue != null && !Double.isNaN( v = lvalue.doubleValue() )) {             minimum = Math.min( v, minimum );             maximum = Math.max( v, maximum );         }         uvalue = icd.getEndValue( row, column );         if (uvalue != null && !Double.isNaN( v = uvalue.doubleValue() )) {             minimum = Math.min( v, minimum );             maximum = Math.max( v, maximum );         }     } }  =>   for (int row = 0; row < rowCount;) {     for (int column = 0; column < columnCount; column++) {         value = icd.getValue( row, column );         double v;         if (value != null && !Double.isNaN( v = value.doubleValue() )) {             minimum = Math.min( v, minimum );             maximum = Math.max( v, maximum );         }         lvalue = icd.getStartValue( row, column );         if (lvalue != null && !Double.isNaN( v = lvalue.doubleValue() )) {             minimum = Math.min( v, minimum );             maximum = Math.max( v, maximum );         }         uvalue = icd.getEndValue( row, column );         if (uvalue != null && !Double.isNaN( v = uvalue.doubleValue() )) {             minimum = Math.min( v, minimum );             maximum = Math.max( v, maximum );         }     } }
SDL_234:495:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): value = icd.getValue( row, column ); double v; if (value != null && !Double.isNaN( v = value.doubleValue() )) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); } lvalue = icd.getStartValue( row, column ); if (lvalue != null && !Double.isNaN( v = lvalue.doubleValue() )) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); } uvalue = icd.getEndValue( row, column ); if (uvalue != null && !Double.isNaN( v = uvalue.doubleValue() )) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); }  =>   double v; if (value != null && !Double.isNaN( v = value.doubleValue() )) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); } lvalue = icd.getStartValue( row, column ); if (lvalue != null && !Double.isNaN( v = lvalue.doubleValue() )) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); } uvalue = icd.getEndValue( row, column ); if (uvalue != null && !Double.isNaN( v = uvalue.doubleValue() )) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); }
SDL_235:492:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): value = icd.getValue( row, column ); double v; if (value != null && !Double.isNaN( v = value.doubleValue() )) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); } lvalue = icd.getStartValue( row, column ); if (lvalue != null && !Double.isNaN( v = lvalue.doubleValue() )) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); } uvalue = icd.getEndValue( row, column ); if (uvalue != null && !Double.isNaN( v = uvalue.doubleValue() )) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); }  =>   value = icd.getValue( row, column ); double v; lvalue = icd.getStartValue( row, column ); if (lvalue != null && !Double.isNaN( v = lvalue.doubleValue() )) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); } uvalue = icd.getEndValue( row, column ); if (uvalue != null && !Double.isNaN( v = uvalue.doubleValue() )) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); }
SDL_236:495:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): value = icd.getValue( row, column ); double v; if (value != null && !Double.isNaN( v = value.doubleValue() )) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); } lvalue = icd.getStartValue( row, column ); if (lvalue != null && !Double.isNaN( v = lvalue.doubleValue() )) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); } uvalue = icd.getEndValue( row, column ); if (uvalue != null && !Double.isNaN( v = uvalue.doubleValue() )) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); }  =>   value = icd.getValue( row, column ); double v; if (value != null && !Double.isNaN( v = value.doubleValue() )) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); } if (lvalue != null && !Double.isNaN( v = lvalue.doubleValue() )) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); } uvalue = icd.getEndValue( row, column ); if (uvalue != null && !Double.isNaN( v = uvalue.doubleValue() )) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); }
SDL_237:492:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): value = icd.getValue( row, column ); double v; if (value != null && !Double.isNaN( v = value.doubleValue() )) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); } lvalue = icd.getStartValue( row, column ); if (lvalue != null && !Double.isNaN( v = lvalue.doubleValue() )) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); } uvalue = icd.getEndValue( row, column ); if (uvalue != null && !Double.isNaN( v = uvalue.doubleValue() )) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); }  =>   value = icd.getValue( row, column ); double v; if (value != null && !Double.isNaN( v = value.doubleValue() )) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); } lvalue = icd.getStartValue( row, column ); uvalue = icd.getEndValue( row, column ); if (uvalue != null && !Double.isNaN( v = uvalue.doubleValue() )) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); }
SDL_238:495:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): value = icd.getValue( row, column ); double v; if (value != null && !Double.isNaN( v = value.doubleValue() )) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); } lvalue = icd.getStartValue( row, column ); if (lvalue != null && !Double.isNaN( v = lvalue.doubleValue() )) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); } uvalue = icd.getEndValue( row, column ); if (uvalue != null && !Double.isNaN( v = uvalue.doubleValue() )) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); }  =>   value = icd.getValue( row, column ); double v; if (value != null && !Double.isNaN( v = value.doubleValue() )) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); } lvalue = icd.getStartValue( row, column ); if (lvalue != null && !Double.isNaN( v = lvalue.doubleValue() )) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); } if (uvalue != null && !Double.isNaN( v = uvalue.doubleValue() )) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); }
SDL_239:492:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): value = icd.getValue( row, column ); double v; if (value != null && !Double.isNaN( v = value.doubleValue() )) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); } lvalue = icd.getStartValue( row, column ); if (lvalue != null && !Double.isNaN( v = lvalue.doubleValue() )) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); } uvalue = icd.getEndValue( row, column ); if (uvalue != null && !Double.isNaN( v = uvalue.doubleValue() )) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); }  =>   value = icd.getValue( row, column ); double v; if (value != null && !Double.isNaN( v = value.doubleValue() )) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); } lvalue = icd.getStartValue( row, column ); if (lvalue != null && !Double.isNaN( v = lvalue.doubleValue() )) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); } uvalue = icd.getEndValue( row, column );
SDL_240:497:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): for (int column = 0; column < columnCount; column++) {     value = icd.getValue( row, column );     double v;     if (value != null && !Double.isNaN( v = value.doubleValue() )) {         minimum = Math.min( v, minimum );         maximum = Math.max( v, maximum );     }     lvalue = icd.getStartValue( row, column );     if (lvalue != null && !Double.isNaN( v = lvalue.doubleValue() )) {         minimum = Math.min( v, minimum );         maximum = Math.max( v, maximum );     }     uvalue = icd.getEndValue( row, column );     if (uvalue != null && !Double.isNaN( v = uvalue.doubleValue() )) {         minimum = Math.min( v, minimum );         maximum = Math.max( v, maximum );     } }  =>   for (int column = 0;; column++) {     value = icd.getValue( row, column );     double v;     if (value != null && !Double.isNaN( v = value.doubleValue() )) {         minimum = Math.min( v, minimum );         maximum = Math.max( v, maximum );     }     lvalue = icd.getStartValue( row, column );     if (lvalue != null && !Double.isNaN( v = lvalue.doubleValue() )) {         minimum = Math.min( v, minimum );         maximum = Math.max( v, maximum );     }     uvalue = icd.getEndValue( row, column );     if (uvalue != null && !Double.isNaN( v = uvalue.doubleValue() )) {         minimum = Math.min( v, minimum );         maximum = Math.max( v, maximum );     } }
SDL_241:497:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): for (int column = 0; column < columnCount; column++) {     value = icd.getValue( row, column );     double v;     if (value != null && !Double.isNaN( v = value.doubleValue() )) {         minimum = Math.min( v, minimum );         maximum = Math.max( v, maximum );     }     lvalue = icd.getStartValue( row, column );     if (lvalue != null && !Double.isNaN( v = lvalue.doubleValue() )) {         minimum = Math.min( v, minimum );         maximum = Math.max( v, maximum );     }     uvalue = icd.getEndValue( row, column );     if (uvalue != null && !Double.isNaN( v = uvalue.doubleValue() )) {         minimum = Math.min( v, minimum );         maximum = Math.max( v, maximum );     } }  =>   for (int column = 0; column < columnCount;) {     value = icd.getValue( row, column );     double v;     if (value != null && !Double.isNaN( v = value.doubleValue() )) {         minimum = Math.min( v, minimum );         maximum = Math.max( v, maximum );     }     lvalue = icd.getStartValue( row, column );     if (lvalue != null && !Double.isNaN( v = lvalue.doubleValue() )) {         minimum = Math.min( v, minimum );         maximum = Math.max( v, maximum );     }     uvalue = icd.getEndValue( row, column );     if (uvalue != null && !Double.isNaN( v = uvalue.doubleValue() )) {         minimum = Math.min( v, minimum );         maximum = Math.max( v, maximum );     } }
SDL_242:484:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): minimum = Math.min( v, minimum ); maximum = Math.max( v, maximum );  =>   maximum = Math.max( v, maximum );
SDL_243:484:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): minimum = Math.min( v, minimum ); maximum = Math.max( v, maximum );  =>   minimum = Math.min( v, minimum );
SDL_244:486:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): if (value != null && !Double.isNaN( v = value.doubleValue() )) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); }  =>   if (true) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); }
SDL_245:489:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): minimum = Math.min( v, minimum ); maximum = Math.max( v, maximum );  =>   maximum = Math.max( v, maximum );
SDL_246:489:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): minimum = Math.min( v, minimum ); maximum = Math.max( v, maximum );  =>   minimum = Math.min( v, minimum );
SDL_247:491:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): if (lvalue != null && !Double.isNaN( v = lvalue.doubleValue() )) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); }  =>   if (true) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); }
SDL_248:494:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): minimum = Math.min( v, minimum ); maximum = Math.max( v, maximum );  =>   maximum = Math.max( v, maximum );
SDL_249:494:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): minimum = Math.min( v, minimum ); maximum = Math.max( v, maximum );  =>   minimum = Math.min( v, minimum );
SDL_250:496:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): if (uvalue != null && !Double.isNaN( v = uvalue.doubleValue() )) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); }  =>   if (true) {     minimum = Math.min( v, minimum );     maximum = Math.max( v, maximum ); }
SDL_251:500:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): for (int column = 0; column < columnCount; column++) {     java.lang.Number value = dataset.getValue( row, column );     if (value != null) {         double v = value.doubleValue();         if (!Double.isNaN( v )) {             minimum = Math.min( minimum, v );             maximum = Math.max( maximum, v );         }     } }  =>  
SDL_252:511:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): for (int row = 0; row < rowCount; row++) {     for (int column = 0; column < columnCount; column++) {         java.lang.Number value = dataset.getValue( row, column );         if (value != null) {             double v = value.doubleValue();             if (!Double.isNaN( v )) {                 minimum = Math.min( minimum, v );                 maximum = Math.max( maximum, v );             }         }     } }  =>   for (int row = 0;; row++) {     for (int column = 0; column < columnCount; column++) {         java.lang.Number value = dataset.getValue( row, column );         if (value != null) {             double v = value.doubleValue();             if (!Double.isNaN( v )) {                 minimum = Math.min( minimum, v );                 maximum = Math.max( maximum, v );             }         }     } }
SDL_253:511:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): for (int row = 0; row < rowCount; row++) {     for (int column = 0; column < columnCount; column++) {         java.lang.Number value = dataset.getValue( row, column );         if (value != null) {             double v = value.doubleValue();             if (!Double.isNaN( v )) {                 minimum = Math.min( minimum, v );                 maximum = Math.max( maximum, v );             }         }     } }  =>   for (int row = 0; row < rowCount;) {     for (int column = 0; column < columnCount; column++) {         java.lang.Number value = dataset.getValue( row, column );         if (value != null) {             double v = value.doubleValue();             if (!Double.isNaN( v )) {                 minimum = Math.min( minimum, v );                 maximum = Math.max( maximum, v );             }         }     } }
SDL_254:502:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): java.lang.Number value = dataset.getValue( row, column ); if (value != null) {     double v = value.doubleValue();     if (!Double.isNaN( v )) {         minimum = Math.min( minimum, v );         maximum = Math.max( maximum, v );     } }  =>   java.lang.Number value = dataset.getValue( row, column );
SDL_255:510:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): for (int column = 0; column < columnCount; column++) {     java.lang.Number value = dataset.getValue( row, column );     if (value != null) {         double v = value.doubleValue();         if (!Double.isNaN( v )) {             minimum = Math.min( minimum, v );             maximum = Math.max( maximum, v );         }     } }  =>   for (int column = 0;; column++) {     java.lang.Number value = dataset.getValue( row, column );     if (value != null) {         double v = value.doubleValue();         if (!Double.isNaN( v )) {             minimum = Math.min( minimum, v );             maximum = Math.max( maximum, v );         }     } }
SDL_256:510:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): for (int column = 0; column < columnCount; column++) {     java.lang.Number value = dataset.getValue( row, column );     if (value != null) {         double v = value.doubleValue();         if (!Double.isNaN( v )) {             minimum = Math.min( minimum, v );             maximum = Math.max( maximum, v );         }     } }  =>   for (int column = 0; column < columnCount;) {     java.lang.Number value = dataset.getValue( row, column );     if (value != null) {         double v = value.doubleValue();         if (!Double.isNaN( v )) {             minimum = Math.min( minimum, v );             maximum = Math.max( maximum, v );         }     } }
SDL_257:504:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): double v = value.doubleValue(); if (!Double.isNaN( v )) {     minimum = Math.min( minimum, v );     maximum = Math.max( maximum, v ); }  =>   double v = value.doubleValue();
SDL_258:509:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): if (value != null) {     double v = value.doubleValue();     if (!Double.isNaN( v )) {         minimum = Math.min( minimum, v );         maximum = Math.max( maximum, v );     } }  =>   if (true) {     double v = value.doubleValue();     if (!Double.isNaN( v )) {         minimum = Math.min( minimum, v );         maximum = Math.max( maximum, v );     } }
SDL_259:506:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): minimum = Math.min( minimum, v ); maximum = Math.max( maximum, v );  =>   maximum = Math.max( maximum, v );
SDL_260:506:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): minimum = Math.min( minimum, v ); maximum = Math.max( maximum, v );  =>   minimum = Math.min( minimum, v );
SDL_261:508:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): if (!Double.isNaN( v )) {     minimum = Math.min( minimum, v );     maximum = Math.max( maximum, v ); }  =>   if (true) {     minimum = Math.min( minimum, v );     maximum = Math.max( maximum, v ); }
SDL_262:517:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean): if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }  =>   if (true) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }
SDL_263:644:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (visibleSeriesKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'visibleSeriesKeys' argument.\" ); } double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int columnCount = dataset.getColumnCount(); if (includeInterval && dataset instanceof org.jfree.data.statistics.BoxAndWhiskerCategoryDataset) {     org.jfree.data.statistics.BoxAndWhiskerCategoryDataset bx = (org.jfree.data.statistics.BoxAndWhiskerCategoryDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.getRowIndex( seriesKey );         int itemCount = dataset.getColumnCount();         for (int item = 0; item < itemCount; item++) {             java.lang.Number lvalue = bx.getMinRegularValue( series, item );             if (lvalue == null) {                 lvalue = bx.getValue( series, item );             }             java.lang.Number uvalue = bx.getMaxRegularValue( series, item );             if (uvalue == null) {                 uvalue = bx.getValue( series, item );             }             if (lvalue != null) {                 minimum = Math.min( minimum, lvalue.doubleValue() );             }             if (uvalue != null) {                 maximum = Math.max( maximum, uvalue.doubleValue() );             }         }     } } else {     if (includeInterval && dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {         org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;         java.lang.Number lvalue;         java.lang.Number uvalue;         java.util.Iterator iterator = visibleSeriesKeys.iterator();         while (iterator.hasNext()) {             java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();             int series = dataset.getRowIndex( seriesKey );             for (int column = 0; column < columnCount; column++) {                 lvalue = icd.getStartValue( series, column );                 uvalue = icd.getEndValue( series, column );                 if (lvalue != null && !Double.isNaN( lvalue.doubleValue() )) {                     minimum = Math.min( minimum, lvalue.doubleValue() );                 }                 if (uvalue != null && !Double.isNaN( uvalue.doubleValue() )) {                     maximum = Math.max( maximum, uvalue.doubleValue() );                 }             }         }     } else {         if (includeInterval && dataset instanceof org.jfree.data.statistics.MultiValueCategoryDataset) {             org.jfree.data.statistics.MultiValueCategoryDataset mvcd = (org.jfree.data.statistics.MultiValueCategoryDataset) dataset;             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.getRowIndex( seriesKey );                 for (int column = 0; column < columnCount; column++) {                     java.util.List values = mvcd.getValues( series, column );                     java.util.Iterator valueIterator = values.iterator();                     while (valueIterator.hasNext()) {                         java.lang.Object o = valueIterator.next();                         if (o instanceof java.lang.Number) {                             double v = ((java.lang.Number) o).doubleValue();                             if (!Double.isNaN( v )) {                                 minimum = Math.min( minimum, v );                                 maximum = Math.max( maximum, v );                             }                         }                     }                 }             }         } else {             if (includeInterval && dataset instanceof org.jfree.data.statistics.StatisticalCategoryDataset) {                 org.jfree.data.statistics.StatisticalCategoryDataset scd = (org.jfree.data.statistics.StatisticalCategoryDataset) dataset;                 java.util.Iterator iterator = visibleSeriesKeys.iterator();                 while (iterator.hasNext()) {                     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                     int series = dataset.getRowIndex( seriesKey );                     for (int column = 0; column < columnCount; column++) {                         java.lang.Number meanN = scd.getMeanValue( series, column );                         if (meanN != null) {                             double std = 0.0;                             java.lang.Number stdN = scd.getStdDevValue( series, column );                             if (stdN != null) {                                 std = stdN.doubleValue();                                 if (Double.isNaN( std )) {                                     std = 0.0;                                 }                             }                             double mean = meanN.doubleValue();                             if (!Double.isNaN( mean )) {                                 minimum = Math.min( minimum, mean - std );                                 maximum = Math.max( maximum, mean + std );                             }                         }                     }                 }             } else {                 java.util.Iterator iterator = visibleSeriesKeys.iterator();                 while (iterator.hasNext()) {                     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                     int series = dataset.getRowIndex( seriesKey );                     for (int column = 0; column < columnCount; column++) {                         java.lang.Number value = dataset.getValue( series, column );                         if (value != null) {                             double v = value.doubleValue();                             if (!Double.isNaN( v )) {                                 minimum = Math.min( minimum, v );                                 maximum = Math.max( maximum, v );                             }                         }                     }                 }             }         }     } } if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }  =>   if (visibleSeriesKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'visibleSeriesKeys' argument.\" ); } double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int columnCount = dataset.getColumnCount(); if (includeInterval && dataset instanceof org.jfree.data.statistics.BoxAndWhiskerCategoryDataset) {     org.jfree.data.statistics.BoxAndWhiskerCategoryDataset bx = (org.jfree.data.statistics.BoxAndWhiskerCategoryDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.getRowIndex( seriesKey );         int itemCount = dataset.getColumnCount();         for (int item = 0; item < itemCount; item++) {             java.lang.Number lvalue = bx.getMinRegularValue( series, item );             if (lvalue == null) {                 lvalue = bx.getValue( series, item );             }             java.lang.Number uvalue = bx.getMaxRegularValue( series, item );             if (uvalue == null) {                 uvalue = bx.getValue( series, item );             }             if (lvalue != null) {                 minimum = Math.min( minimum, lvalue.doubleValue() );             }             if (uvalue != null) {                 maximum = Math.max( maximum, uvalue.doubleValue() );             }         }     } } else {     if (includeInterval && dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {         org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;         java.lang.Number lvalue;         java.lang.Number uvalue;         java.util.Iterator iterator = visibleSeriesKeys.iterator();         while (iterator.hasNext()) {             java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();             int series = dataset.getRowIndex( seriesKey );             for (int column = 0; column < columnCount; column++) {                 lvalue = icd.getStartValue( series, column );                 uvalue = icd.getEndValue( series, column );                 if (lvalue != null && !Double.isNaN( lvalue.doubleValue() )) {                     minimum = Math.min( minimum, lvalue.doubleValue() );                 }                 if (uvalue != null && !Double.isNaN( uvalue.doubleValue() )) {                     maximum = Math.max( maximum, uvalue.doubleValue() );                 }             }         }     } else {         if (includeInterval && dataset instanceof org.jfree.data.statistics.MultiValueCategoryDataset) {             org.jfree.data.statistics.MultiValueCategoryDataset mvcd = (org.jfree.data.statistics.MultiValueCategoryDataset) dataset;             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.getRowIndex( seriesKey );                 for (int column = 0; column < columnCount; column++) {                     java.util.List values = mvcd.getValues( series, column );                     java.util.Iterator valueIterator = values.iterator();                     while (valueIterator.hasNext()) {                         java.lang.Object o = valueIterator.next();                         if (o instanceof java.lang.Number) {                             double v = ((java.lang.Number) o).doubleValue();                             if (!Double.isNaN( v )) {                                 minimum = Math.min( minimum, v );                                 maximum = Math.max( maximum, v );                             }                         }                     }                 }             }         } else {             if (includeInterval && dataset instanceof org.jfree.data.statistics.StatisticalCategoryDataset) {                 org.jfree.data.statistics.StatisticalCategoryDataset scd = (org.jfree.data.statistics.StatisticalCategoryDataset) dataset;                 java.util.Iterator iterator = visibleSeriesKeys.iterator();                 while (iterator.hasNext()) {                     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                     int series = dataset.getRowIndex( seriesKey );                     for (int column = 0; column < columnCount; column++) {                         java.lang.Number meanN = scd.getMeanValue( series, column );                         if (meanN != null) {                             double std = 0.0;                             java.lang.Number stdN = scd.getStdDevValue( series, column );                             if (stdN != null) {                                 std = stdN.doubleValue();                                 if (Double.isNaN( std )) {                                     std = 0.0;                                 }                             }                             double mean = meanN.doubleValue();                             if (!Double.isNaN( mean )) {                                 minimum = Math.min( minimum, mean - std );                                 maximum = Math.max( maximum, mean + std );                             }                         }                     }                 }             } else {                 java.util.Iterator iterator = visibleSeriesKeys.iterator();                 while (iterator.hasNext()) {                     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                     int series = dataset.getRowIndex( seriesKey );                     for (int column = 0; column < columnCount; column++) {                         java.lang.Number value = dataset.getValue( series, column );                         if (value != null) {                             double v = value.doubleValue();                             if (!Double.isNaN( v )) {                                 minimum = Math.min( minimum, v );                                 maximum = Math.max( maximum, v );                             }                         }                     }                 }             }         }     } } if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }
SDL_264:644:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (visibleSeriesKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'visibleSeriesKeys' argument.\" ); } double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int columnCount = dataset.getColumnCount(); if (includeInterval && dataset instanceof org.jfree.data.statistics.BoxAndWhiskerCategoryDataset) {     org.jfree.data.statistics.BoxAndWhiskerCategoryDataset bx = (org.jfree.data.statistics.BoxAndWhiskerCategoryDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.getRowIndex( seriesKey );         int itemCount = dataset.getColumnCount();         for (int item = 0; item < itemCount; item++) {             java.lang.Number lvalue = bx.getMinRegularValue( series, item );             if (lvalue == null) {                 lvalue = bx.getValue( series, item );             }             java.lang.Number uvalue = bx.getMaxRegularValue( series, item );             if (uvalue == null) {                 uvalue = bx.getValue( series, item );             }             if (lvalue != null) {                 minimum = Math.min( minimum, lvalue.doubleValue() );             }             if (uvalue != null) {                 maximum = Math.max( maximum, uvalue.doubleValue() );             }         }     } } else {     if (includeInterval && dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {         org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;         java.lang.Number lvalue;         java.lang.Number uvalue;         java.util.Iterator iterator = visibleSeriesKeys.iterator();         while (iterator.hasNext()) {             java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();             int series = dataset.getRowIndex( seriesKey );             for (int column = 0; column < columnCount; column++) {                 lvalue = icd.getStartValue( series, column );                 uvalue = icd.getEndValue( series, column );                 if (lvalue != null && !Double.isNaN( lvalue.doubleValue() )) {                     minimum = Math.min( minimum, lvalue.doubleValue() );                 }                 if (uvalue != null && !Double.isNaN( uvalue.doubleValue() )) {                     maximum = Math.max( maximum, uvalue.doubleValue() );                 }             }         }     } else {         if (includeInterval && dataset instanceof org.jfree.data.statistics.MultiValueCategoryDataset) {             org.jfree.data.statistics.MultiValueCategoryDataset mvcd = (org.jfree.data.statistics.MultiValueCategoryDataset) dataset;             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.getRowIndex( seriesKey );                 for (int column = 0; column < columnCount; column++) {                     java.util.List values = mvcd.getValues( series, column );                     java.util.Iterator valueIterator = values.iterator();                     while (valueIterator.hasNext()) {                         java.lang.Object o = valueIterator.next();                         if (o instanceof java.lang.Number) {                             double v = ((java.lang.Number) o).doubleValue();                             if (!Double.isNaN( v )) {                                 minimum = Math.min( minimum, v );                                 maximum = Math.max( maximum, v );                             }                         }                     }                 }             }         } else {             if (includeInterval && dataset instanceof org.jfree.data.statistics.StatisticalCategoryDataset) {                 org.jfree.data.statistics.StatisticalCategoryDataset scd = (org.jfree.data.statistics.StatisticalCategoryDataset) dataset;                 java.util.Iterator iterator = visibleSeriesKeys.iterator();                 while (iterator.hasNext()) {                     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                     int series = dataset.getRowIndex( seriesKey );                     for (int column = 0; column < columnCount; column++) {                         java.lang.Number meanN = scd.getMeanValue( series, column );                         if (meanN != null) {                             double std = 0.0;                             java.lang.Number stdN = scd.getStdDevValue( series, column );                             if (stdN != null) {                                 std = stdN.doubleValue();                                 if (Double.isNaN( std )) {                                     std = 0.0;                                 }                             }                             double mean = meanN.doubleValue();                             if (!Double.isNaN( mean )) {                                 minimum = Math.min( minimum, mean - std );                                 maximum = Math.max( maximum, mean + std );                             }                         }                     }                 }             } else {                 java.util.Iterator iterator = visibleSeriesKeys.iterator();                 while (iterator.hasNext()) {                     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                     int series = dataset.getRowIndex( seriesKey );                     for (int column = 0; column < columnCount; column++) {                         java.lang.Number value = dataset.getValue( series, column );                         if (value != null) {                             double v = value.doubleValue();                             if (!Double.isNaN( v )) {                                 minimum = Math.min( minimum, v );                                 maximum = Math.max( maximum, v );                             }                         }                     }                 }             }         }     } } if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int columnCount = dataset.getColumnCount(); if (includeInterval && dataset instanceof org.jfree.data.statistics.BoxAndWhiskerCategoryDataset) {     org.jfree.data.statistics.BoxAndWhiskerCategoryDataset bx = (org.jfree.data.statistics.BoxAndWhiskerCategoryDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.getRowIndex( seriesKey );         int itemCount = dataset.getColumnCount();         for (int item = 0; item < itemCount; item++) {             java.lang.Number lvalue = bx.getMinRegularValue( series, item );             if (lvalue == null) {                 lvalue = bx.getValue( series, item );             }             java.lang.Number uvalue = bx.getMaxRegularValue( series, item );             if (uvalue == null) {                 uvalue = bx.getValue( series, item );             }             if (lvalue != null) {                 minimum = Math.min( minimum, lvalue.doubleValue() );             }             if (uvalue != null) {                 maximum = Math.max( maximum, uvalue.doubleValue() );             }         }     } } else {     if (includeInterval && dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {         org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;         java.lang.Number lvalue;         java.lang.Number uvalue;         java.util.Iterator iterator = visibleSeriesKeys.iterator();         while (iterator.hasNext()) {             java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();             int series = dataset.getRowIndex( seriesKey );             for (int column = 0; column < columnCount; column++) {                 lvalue = icd.getStartValue( series, column );                 uvalue = icd.getEndValue( series, column );                 if (lvalue != null && !Double.isNaN( lvalue.doubleValue() )) {                     minimum = Math.min( minimum, lvalue.doubleValue() );                 }                 if (uvalue != null && !Double.isNaN( uvalue.doubleValue() )) {                     maximum = Math.max( maximum, uvalue.doubleValue() );                 }             }         }     } else {         if (includeInterval && dataset instanceof org.jfree.data.statistics.MultiValueCategoryDataset) {             org.jfree.data.statistics.MultiValueCategoryDataset mvcd = (org.jfree.data.statistics.MultiValueCategoryDataset) dataset;             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.getRowIndex( seriesKey );                 for (int column = 0; column < columnCount; column++) {                     java.util.List values = mvcd.getValues( series, column );                     java.util.Iterator valueIterator = values.iterator();                     while (valueIterator.hasNext()) {                         java.lang.Object o = valueIterator.next();                         if (o instanceof java.lang.Number) {                             double v = ((java.lang.Number) o).doubleValue();                             if (!Double.isNaN( v )) {                                 minimum = Math.min( minimum, v );                                 maximum = Math.max( maximum, v );                             }                         }                     }                 }             }         } else {             if (includeInterval && dataset instanceof org.jfree.data.statistics.StatisticalCategoryDataset) {                 org.jfree.data.statistics.StatisticalCategoryDataset scd = (org.jfree.data.statistics.StatisticalCategoryDataset) dataset;                 java.util.Iterator iterator = visibleSeriesKeys.iterator();                 while (iterator.hasNext()) {                     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                     int series = dataset.getRowIndex( seriesKey );                     for (int column = 0; column < columnCount; column++) {                         java.lang.Number meanN = scd.getMeanValue( series, column );                         if (meanN != null) {                             double std = 0.0;                             java.lang.Number stdN = scd.getStdDevValue( series, column );                             if (stdN != null) {                                 std = stdN.doubleValue();                                 if (Double.isNaN( std )) {                                     std = 0.0;                                 }                             }                             double mean = meanN.doubleValue();                             if (!Double.isNaN( mean )) {                                 minimum = Math.min( minimum, mean - std );                                 maximum = Math.max( maximum, mean + std );                             }                         }                     }                 }             } else {                 java.util.Iterator iterator = visibleSeriesKeys.iterator();                 while (iterator.hasNext()) {                     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                     int series = dataset.getRowIndex( seriesKey );                     for (int column = 0; column < columnCount; column++) {                         java.lang.Number value = dataset.getValue( series, column );                         if (value != null) {                             double v = value.doubleValue();                             if (!Double.isNaN( v )) {                                 minimum = Math.min( minimum, v );                                 maximum = Math.max( maximum, v );                             }                         }                     }                 }             }         }     } } if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }
SDL_265:535:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (visibleSeriesKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'visibleSeriesKeys' argument.\" ); } double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int columnCount = dataset.getColumnCount(); if (includeInterval && dataset instanceof org.jfree.data.statistics.BoxAndWhiskerCategoryDataset) {     org.jfree.data.statistics.BoxAndWhiskerCategoryDataset bx = (org.jfree.data.statistics.BoxAndWhiskerCategoryDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.getRowIndex( seriesKey );         int itemCount = dataset.getColumnCount();         for (int item = 0; item < itemCount; item++) {             java.lang.Number lvalue = bx.getMinRegularValue( series, item );             if (lvalue == null) {                 lvalue = bx.getValue( series, item );             }             java.lang.Number uvalue = bx.getMaxRegularValue( series, item );             if (uvalue == null) {                 uvalue = bx.getValue( series, item );             }             if (lvalue != null) {                 minimum = Math.min( minimum, lvalue.doubleValue() );             }             if (uvalue != null) {                 maximum = Math.max( maximum, uvalue.doubleValue() );             }         }     } } else {     if (includeInterval && dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {         org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;         java.lang.Number lvalue;         java.lang.Number uvalue;         java.util.Iterator iterator = visibleSeriesKeys.iterator();         while (iterator.hasNext()) {             java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();             int series = dataset.getRowIndex( seriesKey );             for (int column = 0; column < columnCount; column++) {                 lvalue = icd.getStartValue( series, column );                 uvalue = icd.getEndValue( series, column );                 if (lvalue != null && !Double.isNaN( lvalue.doubleValue() )) {                     minimum = Math.min( minimum, lvalue.doubleValue() );                 }                 if (uvalue != null && !Double.isNaN( uvalue.doubleValue() )) {                     maximum = Math.max( maximum, uvalue.doubleValue() );                 }             }         }     } else {         if (includeInterval && dataset instanceof org.jfree.data.statistics.MultiValueCategoryDataset) {             org.jfree.data.statistics.MultiValueCategoryDataset mvcd = (org.jfree.data.statistics.MultiValueCategoryDataset) dataset;             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.getRowIndex( seriesKey );                 for (int column = 0; column < columnCount; column++) {                     java.util.List values = mvcd.getValues( series, column );                     java.util.Iterator valueIterator = values.iterator();                     while (valueIterator.hasNext()) {                         java.lang.Object o = valueIterator.next();                         if (o instanceof java.lang.Number) {                             double v = ((java.lang.Number) o).doubleValue();                             if (!Double.isNaN( v )) {                                 minimum = Math.min( minimum, v );                                 maximum = Math.max( maximum, v );                             }                         }                     }                 }             }         } else {             if (includeInterval && dataset instanceof org.jfree.data.statistics.StatisticalCategoryDataset) {                 org.jfree.data.statistics.StatisticalCategoryDataset scd = (org.jfree.data.statistics.StatisticalCategoryDataset) dataset;                 java.util.Iterator iterator = visibleSeriesKeys.iterator();                 while (iterator.hasNext()) {                     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                     int series = dataset.getRowIndex( seriesKey );                     for (int column = 0; column < columnCount; column++) {                         java.lang.Number meanN = scd.getMeanValue( series, column );                         if (meanN != null) {                             double std = 0.0;                             java.lang.Number stdN = scd.getStdDevValue( series, column );                             if (stdN != null) {                                 std = stdN.doubleValue();                                 if (Double.isNaN( std )) {                                     std = 0.0;                                 }                             }                             double mean = meanN.doubleValue();                             if (!Double.isNaN( mean )) {                                 minimum = Math.min( minimum, mean - std );                                 maximum = Math.max( maximum, mean + std );                             }                         }                     }                 }             } else {                 java.util.Iterator iterator = visibleSeriesKeys.iterator();                 while (iterator.hasNext()) {                     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                     int series = dataset.getRowIndex( seriesKey );                     for (int column = 0; column < columnCount; column++) {                         java.lang.Number value = dataset.getValue( series, column );                         if (value != null) {                             double v = value.doubleValue();                             if (!Double.isNaN( v )) {                                 minimum = Math.min( minimum, v );                                 maximum = Math.max( maximum, v );                             }                         }                     }                 }             }         }     } } if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (visibleSeriesKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'visibleSeriesKeys' argument.\" ); } double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int columnCount = dataset.getColumnCount(); if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }
SDL_266:642:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (visibleSeriesKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'visibleSeriesKeys' argument.\" ); } double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int columnCount = dataset.getColumnCount(); if (includeInterval && dataset instanceof org.jfree.data.statistics.BoxAndWhiskerCategoryDataset) {     org.jfree.data.statistics.BoxAndWhiskerCategoryDataset bx = (org.jfree.data.statistics.BoxAndWhiskerCategoryDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.getRowIndex( seriesKey );         int itemCount = dataset.getColumnCount();         for (int item = 0; item < itemCount; item++) {             java.lang.Number lvalue = bx.getMinRegularValue( series, item );             if (lvalue == null) {                 lvalue = bx.getValue( series, item );             }             java.lang.Number uvalue = bx.getMaxRegularValue( series, item );             if (uvalue == null) {                 uvalue = bx.getValue( series, item );             }             if (lvalue != null) {                 minimum = Math.min( minimum, lvalue.doubleValue() );             }             if (uvalue != null) {                 maximum = Math.max( maximum, uvalue.doubleValue() );             }         }     } } else {     if (includeInterval && dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {         org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;         java.lang.Number lvalue;         java.lang.Number uvalue;         java.util.Iterator iterator = visibleSeriesKeys.iterator();         while (iterator.hasNext()) {             java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();             int series = dataset.getRowIndex( seriesKey );             for (int column = 0; column < columnCount; column++) {                 lvalue = icd.getStartValue( series, column );                 uvalue = icd.getEndValue( series, column );                 if (lvalue != null && !Double.isNaN( lvalue.doubleValue() )) {                     minimum = Math.min( minimum, lvalue.doubleValue() );                 }                 if (uvalue != null && !Double.isNaN( uvalue.doubleValue() )) {                     maximum = Math.max( maximum, uvalue.doubleValue() );                 }             }         }     } else {         if (includeInterval && dataset instanceof org.jfree.data.statistics.MultiValueCategoryDataset) {             org.jfree.data.statistics.MultiValueCategoryDataset mvcd = (org.jfree.data.statistics.MultiValueCategoryDataset) dataset;             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.getRowIndex( seriesKey );                 for (int column = 0; column < columnCount; column++) {                     java.util.List values = mvcd.getValues( series, column );                     java.util.Iterator valueIterator = values.iterator();                     while (valueIterator.hasNext()) {                         java.lang.Object o = valueIterator.next();                         if (o instanceof java.lang.Number) {                             double v = ((java.lang.Number) o).doubleValue();                             if (!Double.isNaN( v )) {                                 minimum = Math.min( minimum, v );                                 maximum = Math.max( maximum, v );                             }                         }                     }                 }             }         } else {             if (includeInterval && dataset instanceof org.jfree.data.statistics.StatisticalCategoryDataset) {                 org.jfree.data.statistics.StatisticalCategoryDataset scd = (org.jfree.data.statistics.StatisticalCategoryDataset) dataset;                 java.util.Iterator iterator = visibleSeriesKeys.iterator();                 while (iterator.hasNext()) {                     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                     int series = dataset.getRowIndex( seriesKey );                     for (int column = 0; column < columnCount; column++) {                         java.lang.Number meanN = scd.getMeanValue( series, column );                         if (meanN != null) {                             double std = 0.0;                             java.lang.Number stdN = scd.getStdDevValue( series, column );                             if (stdN != null) {                                 std = stdN.doubleValue();                                 if (Double.isNaN( std )) {                                     std = 0.0;                                 }                             }                             double mean = meanN.doubleValue();                             if (!Double.isNaN( mean )) {                                 minimum = Math.min( minimum, mean - std );                                 maximum = Math.max( maximum, mean + std );                             }                         }                     }                 }             } else {                 java.util.Iterator iterator = visibleSeriesKeys.iterator();                 while (iterator.hasNext()) {                     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                     int series = dataset.getRowIndex( seriesKey );                     for (int column = 0; column < columnCount; column++) {                         java.lang.Number value = dataset.getValue( series, column );                         if (value != null) {                             double v = value.doubleValue();                             if (!Double.isNaN( v )) {                                 minimum = Math.min( minimum, v );                                 maximum = Math.max( maximum, v );                             }                         }                     }                 }             }         }     } } if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (visibleSeriesKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'visibleSeriesKeys' argument.\" ); } double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int columnCount = dataset.getColumnCount(); if (includeInterval && dataset instanceof org.jfree.data.statistics.BoxAndWhiskerCategoryDataset) {     org.jfree.data.statistics.BoxAndWhiskerCategoryDataset bx = (org.jfree.data.statistics.BoxAndWhiskerCategoryDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.getRowIndex( seriesKey );         int itemCount = dataset.getColumnCount();         for (int item = 0; item < itemCount; item++) {             java.lang.Number lvalue = bx.getMinRegularValue( series, item );             if (lvalue == null) {                 lvalue = bx.getValue( series, item );             }             java.lang.Number uvalue = bx.getMaxRegularValue( series, item );             if (uvalue == null) {                 uvalue = bx.getValue( series, item );             }             if (lvalue != null) {                 minimum = Math.min( minimum, lvalue.doubleValue() );             }             if (uvalue != null) {                 maximum = Math.max( maximum, uvalue.doubleValue() );             }         }     } } else {     if (includeInterval && dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {         org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;         java.lang.Number lvalue;         java.lang.Number uvalue;         java.util.Iterator iterator = visibleSeriesKeys.iterator();         while (iterator.hasNext()) {             java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();             int series = dataset.getRowIndex( seriesKey );             for (int column = 0; column < columnCount; column++) {                 lvalue = icd.getStartValue( series, column );                 uvalue = icd.getEndValue( series, column );                 if (lvalue != null && !Double.isNaN( lvalue.doubleValue() )) {                     minimum = Math.min( minimum, lvalue.doubleValue() );                 }                 if (uvalue != null && !Double.isNaN( uvalue.doubleValue() )) {                     maximum = Math.max( maximum, uvalue.doubleValue() );                 }             }         }     } else {         if (includeInterval && dataset instanceof org.jfree.data.statistics.MultiValueCategoryDataset) {             org.jfree.data.statistics.MultiValueCategoryDataset mvcd = (org.jfree.data.statistics.MultiValueCategoryDataset) dataset;             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.getRowIndex( seriesKey );                 for (int column = 0; column < columnCount; column++) {                     java.util.List values = mvcd.getValues( series, column );                     java.util.Iterator valueIterator = values.iterator();                     while (valueIterator.hasNext()) {                         java.lang.Object o = valueIterator.next();                         if (o instanceof java.lang.Number) {                             double v = ((java.lang.Number) o).doubleValue();                             if (!Double.isNaN( v )) {                                 minimum = Math.min( minimum, v );                                 maximum = Math.max( maximum, v );                             }                         }                     }                 }             }         } else {             if (includeInterval && dataset instanceof org.jfree.data.statistics.StatisticalCategoryDataset) {                 org.jfree.data.statistics.StatisticalCategoryDataset scd = (org.jfree.data.statistics.StatisticalCategoryDataset) dataset;                 java.util.Iterator iterator = visibleSeriesKeys.iterator();                 while (iterator.hasNext()) {                     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                     int series = dataset.getRowIndex( seriesKey );                     for (int column = 0; column < columnCount; column++) {                         java.lang.Number meanN = scd.getMeanValue( series, column );                         if (meanN != null) {                             double std = 0.0;                             java.lang.Number stdN = scd.getStdDevValue( series, column );                             if (stdN != null) {                                 std = stdN.doubleValue();                                 if (Double.isNaN( std )) {                                     std = 0.0;                                 }                             }                             double mean = meanN.doubleValue();                             if (!Double.isNaN( mean )) {                                 minimum = Math.min( minimum, mean - std );                                 maximum = Math.max( maximum, mean + std );                             }                         }                     }                 }             } else {                 java.util.Iterator iterator = visibleSeriesKeys.iterator();                 while (iterator.hasNext()) {                     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                     int series = dataset.getRowIndex( seriesKey );                     for (int column = 0; column < columnCount; column++) {                         java.lang.Number value = dataset.getValue( series, column );                         if (value != null) {                             double v = value.doubleValue();                             if (!Double.isNaN( v )) {                                 minimum = Math.min( minimum, v );                                 maximum = Math.max( maximum, v );                             }                         }                     }                 }             }         }     } }
SDL_267:522:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_268:524:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_269:525:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): throw new java.lang.IllegalArgumentException( \"Null 'visibleSeriesKeys' argument.\" );  =>  
SDL_270:527:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): if (visibleSeriesKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'visibleSeriesKeys' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'visibleSeriesKeys' argument.\" ); }
SDL_271:533:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): org.jfree.data.statistics.BoxAndWhiskerCategoryDataset bx = (org.jfree.data.statistics.BoxAndWhiskerCategoryDataset) dataset; java.util.Iterator iterator = visibleSeriesKeys.iterator(); while (iterator.hasNext()) {     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();     int series = dataset.getRowIndex( seriesKey );     int itemCount = dataset.getColumnCount();     for (int item = 0; item < itemCount; item++) {         java.lang.Number lvalue = bx.getMinRegularValue( series, item );         if (lvalue == null) {             lvalue = bx.getValue( series, item );         }         java.lang.Number uvalue = bx.getMaxRegularValue( series, item );         if (uvalue == null) {             uvalue = bx.getValue( series, item );         }         if (lvalue != null) {             minimum = Math.min( minimum, lvalue.doubleValue() );         }         if (uvalue != null) {             maximum = Math.max( maximum, uvalue.doubleValue() );         }     } }  =>   org.jfree.data.statistics.BoxAndWhiskerCategoryDataset bx = (org.jfree.data.statistics.BoxAndWhiskerCategoryDataset) dataset; java.util.Iterator iterator = visibleSeriesKeys.iterator();
SDL_272:642:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): if (includeInterval && dataset instanceof org.jfree.data.statistics.BoxAndWhiskerCategoryDataset) {     org.jfree.data.statistics.BoxAndWhiskerCategoryDataset bx = (org.jfree.data.statistics.BoxAndWhiskerCategoryDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.getRowIndex( seriesKey );         int itemCount = dataset.getColumnCount();         for (int item = 0; item < itemCount; item++) {             java.lang.Number lvalue = bx.getMinRegularValue( series, item );             if (lvalue == null) {                 lvalue = bx.getValue( series, item );             }             java.lang.Number uvalue = bx.getMaxRegularValue( series, item );             if (uvalue == null) {                 uvalue = bx.getValue( series, item );             }             if (lvalue != null) {                 minimum = Math.min( minimum, lvalue.doubleValue() );             }             if (uvalue != null) {                 maximum = Math.max( maximum, uvalue.doubleValue() );             }         }     } } else {     if (includeInterval && dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {         org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;         java.lang.Number lvalue;         java.lang.Number uvalue;         java.util.Iterator iterator = visibleSeriesKeys.iterator();         while (iterator.hasNext()) {             java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();             int series = dataset.getRowIndex( seriesKey );             for (int column = 0; column < columnCount; column++) {                 lvalue = icd.getStartValue( series, column );                 uvalue = icd.getEndValue( series, column );                 if (lvalue != null && !Double.isNaN( lvalue.doubleValue() )) {                     minimum = Math.min( minimum, lvalue.doubleValue() );                 }                 if (uvalue != null && !Double.isNaN( uvalue.doubleValue() )) {                     maximum = Math.max( maximum, uvalue.doubleValue() );                 }             }         }     } else {         if (includeInterval && dataset instanceof org.jfree.data.statistics.MultiValueCategoryDataset) {             org.jfree.data.statistics.MultiValueCategoryDataset mvcd = (org.jfree.data.statistics.MultiValueCategoryDataset) dataset;             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.getRowIndex( seriesKey );                 for (int column = 0; column < columnCount; column++) {                     java.util.List values = mvcd.getValues( series, column );                     java.util.Iterator valueIterator = values.iterator();                     while (valueIterator.hasNext()) {                         java.lang.Object o = valueIterator.next();                         if (o instanceof java.lang.Number) {                             double v = ((java.lang.Number) o).doubleValue();                             if (!Double.isNaN( v )) {                                 minimum = Math.min( minimum, v );                                 maximum = Math.max( maximum, v );                             }                         }                     }                 }             }         } else {             if (includeInterval && dataset instanceof org.jfree.data.statistics.StatisticalCategoryDataset) {                 org.jfree.data.statistics.StatisticalCategoryDataset scd = (org.jfree.data.statistics.StatisticalCategoryDataset) dataset;                 java.util.Iterator iterator = visibleSeriesKeys.iterator();                 while (iterator.hasNext()) {                     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                     int series = dataset.getRowIndex( seriesKey );                     for (int column = 0; column < columnCount; column++) {                         java.lang.Number meanN = scd.getMeanValue( series, column );                         if (meanN != null) {                             double std = 0.0;                             java.lang.Number stdN = scd.getStdDevValue( series, column );                             if (stdN != null) {                                 std = stdN.doubleValue();                                 if (Double.isNaN( std )) {                                     std = 0.0;                                 }                             }                             double mean = meanN.doubleValue();                             if (!Double.isNaN( mean )) {                                 minimum = Math.min( minimum, mean - std );                                 maximum = Math.max( maximum, mean + std );                             }                         }                     }                 }             } else {                 java.util.Iterator iterator = visibleSeriesKeys.iterator();                 while (iterator.hasNext()) {                     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                     int series = dataset.getRowIndex( seriesKey );                     for (int column = 0; column < columnCount; column++) {                         java.lang.Number value = dataset.getValue( series, column );                         if (value != null) {                             double v = value.doubleValue();                             if (!Double.isNaN( v )) {                                 minimum = Math.min( minimum, v );                                 maximum = Math.max( maximum, v );                             }                         }                     }                 }             }         }     } }  =>   if (true) {     org.jfree.data.statistics.BoxAndWhiskerCategoryDataset bx = (org.jfree.data.statistics.BoxAndWhiskerCategoryDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.getRowIndex( seriesKey );         int itemCount = dataset.getColumnCount();         for (int item = 0; item < itemCount; item++) {             java.lang.Number lvalue = bx.getMinRegularValue( series, item );             if (lvalue == null) {                 lvalue = bx.getValue( series, item );             }             java.lang.Number uvalue = bx.getMaxRegularValue( series, item );             if (uvalue == null) {                 uvalue = bx.getValue( series, item );             }             if (lvalue != null) {                 minimum = Math.min( minimum, lvalue.doubleValue() );             }             if (uvalue != null) {                 maximum = Math.max( maximum, uvalue.doubleValue() );             }         }     } } else {     if (includeInterval && dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {         org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;         java.lang.Number lvalue;         java.lang.Number uvalue;         java.util.Iterator iterator = visibleSeriesKeys.iterator();         while (iterator.hasNext()) {             java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();             int series = dataset.getRowIndex( seriesKey );             for (int column = 0; column < columnCount; column++) {                 lvalue = icd.getStartValue( series, column );                 uvalue = icd.getEndValue( series, column );                 if (lvalue != null && !Double.isNaN( lvalue.doubleValue() )) {                     minimum = Math.min( minimum, lvalue.doubleValue() );                 }                 if (uvalue != null && !Double.isNaN( uvalue.doubleValue() )) {                     maximum = Math.max( maximum, uvalue.doubleValue() );                 }             }         }     } else {         if (includeInterval && dataset instanceof org.jfree.data.statistics.MultiValueCategoryDataset) {             org.jfree.data.statistics.MultiValueCategoryDataset mvcd = (org.jfree.data.statistics.MultiValueCategoryDataset) dataset;             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.getRowIndex( seriesKey );                 for (int column = 0; column < columnCount; column++) {                     java.util.List values = mvcd.getValues( series, column );                     java.util.Iterator valueIterator = values.iterator();                     while (valueIterator.hasNext()) {                         java.lang.Object o = valueIterator.next();                         if (o instanceof java.lang.Number) {                             double v = ((java.lang.Number) o).doubleValue();                             if (!Double.isNaN( v )) {                                 minimum = Math.min( minimum, v );                                 maximum = Math.max( maximum, v );                             }                         }                     }                 }             }         } else {             if (includeInterval && dataset instanceof org.jfree.data.statistics.StatisticalCategoryDataset) {                 org.jfree.data.statistics.StatisticalCategoryDataset scd = (org.jfree.data.statistics.StatisticalCategoryDataset) dataset;                 java.util.Iterator iterator = visibleSeriesKeys.iterator();                 while (iterator.hasNext()) {                     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                     int series = dataset.getRowIndex( seriesKey );                     for (int column = 0; column < columnCount; column++) {                         java.lang.Number meanN = scd.getMeanValue( series, column );                         if (meanN != null) {                             double std = 0.0;                             java.lang.Number stdN = scd.getStdDevValue( series, column );                             if (stdN != null) {                                 std = stdN.doubleValue();                                 if (Double.isNaN( std )) {                                     std = 0.0;                                 }                             }                             double mean = meanN.doubleValue();                             if (!Double.isNaN( mean )) {                                 minimum = Math.min( minimum, mean - std );                                 maximum = Math.max( maximum, mean + std );                             }                         }                     }                 }             } else {                 java.util.Iterator iterator = visibleSeriesKeys.iterator();                 while (iterator.hasNext()) {                     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                     int series = dataset.getRowIndex( seriesKey );                     for (int column = 0; column < columnCount; column++) {                         java.lang.Number value = dataset.getValue( series, column );                         if (value != null) {                             double v = value.doubleValue();                             if (!Double.isNaN( v )) {                                 minimum = Math.min( minimum, v );                                 maximum = Math.max( maximum, v );                             }                         }                     }                 }             }         }     } }
SDL_273:555:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): if (includeInterval && dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {     org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;     java.lang.Number lvalue;     java.lang.Number uvalue;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.getRowIndex( seriesKey );         for (int column = 0; column < columnCount; column++) {             lvalue = icd.getStartValue( series, column );             uvalue = icd.getEndValue( series, column );             if (lvalue != null && !Double.isNaN( lvalue.doubleValue() )) {                 minimum = Math.min( minimum, lvalue.doubleValue() );             }             if (uvalue != null && !Double.isNaN( uvalue.doubleValue() )) {                 maximum = Math.max( maximum, uvalue.doubleValue() );             }         }     } } else {     if (includeInterval && dataset instanceof org.jfree.data.statistics.MultiValueCategoryDataset) {         org.jfree.data.statistics.MultiValueCategoryDataset mvcd = (org.jfree.data.statistics.MultiValueCategoryDataset) dataset;         java.util.Iterator iterator = visibleSeriesKeys.iterator();         while (iterator.hasNext()) {             java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();             int series = dataset.getRowIndex( seriesKey );             for (int column = 0; column < columnCount; column++) {                 java.util.List values = mvcd.getValues( series, column );                 java.util.Iterator valueIterator = values.iterator();                 while (valueIterator.hasNext()) {                     java.lang.Object o = valueIterator.next();                     if (o instanceof java.lang.Number) {                         double v = ((java.lang.Number) o).doubleValue();                         if (!Double.isNaN( v )) {                             minimum = Math.min( minimum, v );                             maximum = Math.max( maximum, v );                         }                     }                 }             }         }     } else {         if (includeInterval && dataset instanceof org.jfree.data.statistics.StatisticalCategoryDataset) {             org.jfree.data.statistics.StatisticalCategoryDataset scd = (org.jfree.data.statistics.StatisticalCategoryDataset) dataset;             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.getRowIndex( seriesKey );                 for (int column = 0; column < columnCount; column++) {                     java.lang.Number meanN = scd.getMeanValue( series, column );                     if (meanN != null) {                         double std = 0.0;                         java.lang.Number stdN = scd.getStdDevValue( series, column );                         if (stdN != null) {                             std = stdN.doubleValue();                             if (Double.isNaN( std )) {                                 std = 0.0;                             }                         }                         double mean = meanN.doubleValue();                         if (!Double.isNaN( mean )) {                             minimum = Math.min( minimum, mean - std );                             maximum = Math.max( maximum, mean + std );                         }                     }                 }             }         } else {             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.getRowIndex( seriesKey );                 for (int column = 0; column < columnCount; column++) {                     java.lang.Number value = dataset.getValue( series, column );                     if (value != null) {                         double v = value.doubleValue();                         if (!Double.isNaN( v )) {                             minimum = Math.min( minimum, v );                             maximum = Math.max( maximum, v );                         }                     }                 }             }         }     } }  =>  
SDL_274:537:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next(); int series = dataset.getRowIndex( seriesKey ); int itemCount = dataset.getColumnCount(); for (int item = 0; item < itemCount; item++) {     java.lang.Number lvalue = bx.getMinRegularValue( series, item );     if (lvalue == null) {         lvalue = bx.getValue( series, item );     }     java.lang.Number uvalue = bx.getMaxRegularValue( series, item );     if (uvalue == null) {         uvalue = bx.getValue( series, item );     }     if (lvalue != null) {         minimum = Math.min( minimum, lvalue.doubleValue() );     }     if (uvalue != null) {         maximum = Math.max( maximum, uvalue.doubleValue() );     } }  =>   java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next(); int series = dataset.getRowIndex( seriesKey ); int itemCount = dataset.getColumnCount();
SDL_275:554:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): while (iterator.hasNext()) {     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();     int series = dataset.getRowIndex( seriesKey );     int itemCount = dataset.getColumnCount();     for (int item = 0; item < itemCount; item++) {         java.lang.Number lvalue = bx.getMinRegularValue( series, item );         if (lvalue == null) {             lvalue = bx.getValue( series, item );         }         java.lang.Number uvalue = bx.getMaxRegularValue( series, item );         if (uvalue == null) {             uvalue = bx.getValue( series, item );         }         if (lvalue != null) {             minimum = Math.min( minimum, lvalue.doubleValue() );         }         if (uvalue != null) {             maximum = Math.max( maximum, uvalue.doubleValue() );         }     } }  =>   while (true) {     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();     int series = dataset.getRowIndex( seriesKey );     int itemCount = dataset.getColumnCount();     for (int item = 0; item < itemCount; item++) {         java.lang.Number lvalue = bx.getMinRegularValue( series, item );         if (lvalue == null) {             lvalue = bx.getValue( series, item );         }         java.lang.Number uvalue = bx.getMaxRegularValue( series, item );         if (uvalue == null) {             uvalue = bx.getValue( series, item );         }         if (lvalue != null) {             minimum = Math.min( minimum, lvalue.doubleValue() );         }         if (uvalue != null) {             maximum = Math.max( maximum, uvalue.doubleValue() );         }     } }
SDL_276:549:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): java.lang.Number lvalue = bx.getMinRegularValue( series, item ); if (lvalue == null) {     lvalue = bx.getValue( series, item ); } java.lang.Number uvalue = bx.getMaxRegularValue( series, item ); if (uvalue == null) {     uvalue = bx.getValue( series, item ); } if (lvalue != null) {     minimum = Math.min( minimum, lvalue.doubleValue() ); } if (uvalue != null) {     maximum = Math.max( maximum, uvalue.doubleValue() ); }  =>   java.lang.Number lvalue = bx.getMinRegularValue( series, item ); java.lang.Number uvalue = bx.getMaxRegularValue( series, item ); if (uvalue == null) {     uvalue = bx.getValue( series, item ); } if (lvalue != null) {     minimum = Math.min( minimum, lvalue.doubleValue() ); } if (uvalue != null) {     maximum = Math.max( maximum, uvalue.doubleValue() ); }
SDL_277:549:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): java.lang.Number lvalue = bx.getMinRegularValue( series, item ); if (lvalue == null) {     lvalue = bx.getValue( series, item ); } java.lang.Number uvalue = bx.getMaxRegularValue( series, item ); if (uvalue == null) {     uvalue = bx.getValue( series, item ); } if (lvalue != null) {     minimum = Math.min( minimum, lvalue.doubleValue() ); } if (uvalue != null) {     maximum = Math.max( maximum, uvalue.doubleValue() ); }  =>   java.lang.Number lvalue = bx.getMinRegularValue( series, item ); if (lvalue == null) {     lvalue = bx.getValue( series, item ); } java.lang.Number uvalue = bx.getMaxRegularValue( series, item ); if (lvalue != null) {     minimum = Math.min( minimum, lvalue.doubleValue() ); } if (uvalue != null) {     maximum = Math.max( maximum, uvalue.doubleValue() ); }
SDL_278:549:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): java.lang.Number lvalue = bx.getMinRegularValue( series, item ); if (lvalue == null) {     lvalue = bx.getValue( series, item ); } java.lang.Number uvalue = bx.getMaxRegularValue( series, item ); if (uvalue == null) {     uvalue = bx.getValue( series, item ); } if (lvalue != null) {     minimum = Math.min( minimum, lvalue.doubleValue() ); } if (uvalue != null) {     maximum = Math.max( maximum, uvalue.doubleValue() ); }  =>   java.lang.Number lvalue = bx.getMinRegularValue( series, item ); if (lvalue == null) {     lvalue = bx.getValue( series, item ); } java.lang.Number uvalue = bx.getMaxRegularValue( series, item ); if (uvalue == null) {     uvalue = bx.getValue( series, item ); } if (uvalue != null) {     maximum = Math.max( maximum, uvalue.doubleValue() ); }
SDL_279:549:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): java.lang.Number lvalue = bx.getMinRegularValue( series, item ); if (lvalue == null) {     lvalue = bx.getValue( series, item ); } java.lang.Number uvalue = bx.getMaxRegularValue( series, item ); if (uvalue == null) {     uvalue = bx.getValue( series, item ); } if (lvalue != null) {     minimum = Math.min( minimum, lvalue.doubleValue() ); } if (uvalue != null) {     maximum = Math.max( maximum, uvalue.doubleValue() ); }  =>   java.lang.Number lvalue = bx.getMinRegularValue( series, item ); if (lvalue == null) {     lvalue = bx.getValue( series, item ); } java.lang.Number uvalue = bx.getMaxRegularValue( series, item ); if (uvalue == null) {     uvalue = bx.getValue( series, item ); } if (lvalue != null) {     minimum = Math.min( minimum, lvalue.doubleValue() ); }
SDL_280:553:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): for (int item = 0; item < itemCount; item++) {     java.lang.Number lvalue = bx.getMinRegularValue( series, item );     if (lvalue == null) {         lvalue = bx.getValue( series, item );     }     java.lang.Number uvalue = bx.getMaxRegularValue( series, item );     if (uvalue == null) {         uvalue = bx.getValue( series, item );     }     if (lvalue != null) {         minimum = Math.min( minimum, lvalue.doubleValue() );     }     if (uvalue != null) {         maximum = Math.max( maximum, uvalue.doubleValue() );     } }  =>   for (int item = 0;; item++) {     java.lang.Number lvalue = bx.getMinRegularValue( series, item );     if (lvalue == null) {         lvalue = bx.getValue( series, item );     }     java.lang.Number uvalue = bx.getMaxRegularValue( series, item );     if (uvalue == null) {         uvalue = bx.getValue( series, item );     }     if (lvalue != null) {         minimum = Math.min( minimum, lvalue.doubleValue() );     }     if (uvalue != null) {         maximum = Math.max( maximum, uvalue.doubleValue() );     } }
SDL_281:553:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): for (int item = 0; item < itemCount; item++) {     java.lang.Number lvalue = bx.getMinRegularValue( series, item );     if (lvalue == null) {         lvalue = bx.getValue( series, item );     }     java.lang.Number uvalue = bx.getMaxRegularValue( series, item );     if (uvalue == null) {         uvalue = bx.getValue( series, item );     }     if (lvalue != null) {         minimum = Math.min( minimum, lvalue.doubleValue() );     }     if (uvalue != null) {         maximum = Math.max( maximum, uvalue.doubleValue() );     } }  =>   for (int item = 0; item < itemCount;) {     java.lang.Number lvalue = bx.getMinRegularValue( series, item );     if (lvalue == null) {         lvalue = bx.getValue( series, item );     }     java.lang.Number uvalue = bx.getMaxRegularValue( series, item );     if (uvalue == null) {         uvalue = bx.getValue( series, item );     }     if (lvalue != null) {         minimum = Math.min( minimum, lvalue.doubleValue() );     }     if (uvalue != null) {         maximum = Math.max( maximum, uvalue.doubleValue() );     } }
SDL_282:540:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): lvalue = bx.getValue( series, item );  =>  
SDL_283:542:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): if (lvalue == null) {     lvalue = bx.getValue( series, item ); }  =>   if (true) {     lvalue = bx.getValue( series, item ); }
SDL_284:544:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): uvalue = bx.getValue( series, item );  =>  
SDL_285:546:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): if (uvalue == null) {     uvalue = bx.getValue( series, item ); }  =>   if (true) {     uvalue = bx.getValue( series, item ); }
SDL_286:547:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): minimum = Math.min( minimum, lvalue.doubleValue() );  =>  
SDL_287:549:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): if (lvalue != null) {     minimum = Math.min( minimum, lvalue.doubleValue() ); }  =>   if (true) {     minimum = Math.min( minimum, lvalue.doubleValue() ); }
SDL_288:550:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): maximum = Math.max( maximum, uvalue.doubleValue() );  =>  
SDL_289:552:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): if (uvalue != null) {     maximum = Math.max( maximum, uvalue.doubleValue() ); }  =>   if (true) {     maximum = Math.max( maximum, uvalue.doubleValue() ); }
SDL_290:560:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset; java.lang.Number lvalue; java.lang.Number uvalue; java.util.Iterator iterator = visibleSeriesKeys.iterator(); while (iterator.hasNext()) {     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();     int series = dataset.getRowIndex( seriesKey );     for (int column = 0; column < columnCount; column++) {         lvalue = icd.getStartValue( series, column );         uvalue = icd.getEndValue( series, column );         if (lvalue != null && !Double.isNaN( lvalue.doubleValue() )) {             minimum = Math.min( minimum, lvalue.doubleValue() );         }         if (uvalue != null && !Double.isNaN( uvalue.doubleValue() )) {             maximum = Math.max( maximum, uvalue.doubleValue() );         }     } }  =>   org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset; java.lang.Number lvalue; java.lang.Number uvalue; java.util.Iterator iterator = visibleSeriesKeys.iterator();
SDL_291:641:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): if (includeInterval && dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {     org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;     java.lang.Number lvalue;     java.lang.Number uvalue;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.getRowIndex( seriesKey );         for (int column = 0; column < columnCount; column++) {             lvalue = icd.getStartValue( series, column );             uvalue = icd.getEndValue( series, column );             if (lvalue != null && !Double.isNaN( lvalue.doubleValue() )) {                 minimum = Math.min( minimum, lvalue.doubleValue() );             }             if (uvalue != null && !Double.isNaN( uvalue.doubleValue() )) {                 maximum = Math.max( maximum, uvalue.doubleValue() );             }         }     } } else {     if (includeInterval && dataset instanceof org.jfree.data.statistics.MultiValueCategoryDataset) {         org.jfree.data.statistics.MultiValueCategoryDataset mvcd = (org.jfree.data.statistics.MultiValueCategoryDataset) dataset;         java.util.Iterator iterator = visibleSeriesKeys.iterator();         while (iterator.hasNext()) {             java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();             int series = dataset.getRowIndex( seriesKey );             for (int column = 0; column < columnCount; column++) {                 java.util.List values = mvcd.getValues( series, column );                 java.util.Iterator valueIterator = values.iterator();                 while (valueIterator.hasNext()) {                     java.lang.Object o = valueIterator.next();                     if (o instanceof java.lang.Number) {                         double v = ((java.lang.Number) o).doubleValue();                         if (!Double.isNaN( v )) {                             minimum = Math.min( minimum, v );                             maximum = Math.max( maximum, v );                         }                     }                 }             }         }     } else {         if (includeInterval && dataset instanceof org.jfree.data.statistics.StatisticalCategoryDataset) {             org.jfree.data.statistics.StatisticalCategoryDataset scd = (org.jfree.data.statistics.StatisticalCategoryDataset) dataset;             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.getRowIndex( seriesKey );                 for (int column = 0; column < columnCount; column++) {                     java.lang.Number meanN = scd.getMeanValue( series, column );                     if (meanN != null) {                         double std = 0.0;                         java.lang.Number stdN = scd.getStdDevValue( series, column );                         if (stdN != null) {                             std = stdN.doubleValue();                             if (Double.isNaN( std )) {                                 std = 0.0;                             }                         }                         double mean = meanN.doubleValue();                         if (!Double.isNaN( mean )) {                             minimum = Math.min( minimum, mean - std );                             maximum = Math.max( maximum, mean + std );                         }                     }                 }             }         } else {             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.getRowIndex( seriesKey );                 for (int column = 0; column < columnCount; column++) {                     java.lang.Number value = dataset.getValue( series, column );                     if (value != null) {                         double v = value.doubleValue();                         if (!Double.isNaN( v )) {                             minimum = Math.min( minimum, v );                             maximum = Math.max( maximum, v );                         }                     }                 }             }         }     } }  =>   if (true) {     org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;     java.lang.Number lvalue;     java.lang.Number uvalue;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.getRowIndex( seriesKey );         for (int column = 0; column < columnCount; column++) {             lvalue = icd.getStartValue( series, column );             uvalue = icd.getEndValue( series, column );             if (lvalue != null && !Double.isNaN( lvalue.doubleValue() )) {                 minimum = Math.min( minimum, lvalue.doubleValue() );             }             if (uvalue != null && !Double.isNaN( uvalue.doubleValue() )) {                 maximum = Math.max( maximum, uvalue.doubleValue() );             }         }     } } else {     if (includeInterval && dataset instanceof org.jfree.data.statistics.MultiValueCategoryDataset) {         org.jfree.data.statistics.MultiValueCategoryDataset mvcd = (org.jfree.data.statistics.MultiValueCategoryDataset) dataset;         java.util.Iterator iterator = visibleSeriesKeys.iterator();         while (iterator.hasNext()) {             java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();             int series = dataset.getRowIndex( seriesKey );             for (int column = 0; column < columnCount; column++) {                 java.util.List values = mvcd.getValues( series, column );                 java.util.Iterator valueIterator = values.iterator();                 while (valueIterator.hasNext()) {                     java.lang.Object o = valueIterator.next();                     if (o instanceof java.lang.Number) {                         double v = ((java.lang.Number) o).doubleValue();                         if (!Double.isNaN( v )) {                             minimum = Math.min( minimum, v );                             maximum = Math.max( maximum, v );                         }                     }                 }             }         }     } else {         if (includeInterval && dataset instanceof org.jfree.data.statistics.StatisticalCategoryDataset) {             org.jfree.data.statistics.StatisticalCategoryDataset scd = (org.jfree.data.statistics.StatisticalCategoryDataset) dataset;             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.getRowIndex( seriesKey );                 for (int column = 0; column < columnCount; column++) {                     java.lang.Number meanN = scd.getMeanValue( series, column );                     if (meanN != null) {                         double std = 0.0;                         java.lang.Number stdN = scd.getStdDevValue( series, column );                         if (stdN != null) {                             std = stdN.doubleValue();                             if (Double.isNaN( std )) {                                 std = 0.0;                             }                         }                         double mean = meanN.doubleValue();                         if (!Double.isNaN( mean )) {                             minimum = Math.min( minimum, mean - std );                             maximum = Math.max( maximum, mean + std );                         }                     }                 }             }         } else {             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.getRowIndex( seriesKey );                 for (int column = 0; column < columnCount; column++) {                     java.lang.Number value = dataset.getValue( series, column );                     if (value != null) {                         double v = value.doubleValue();                         if (!Double.isNaN( v )) {                             minimum = Math.min( minimum, v );                             maximum = Math.max( maximum, v );                         }                     }                 }             }         }     } }
SDL_292:575:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): if (includeInterval && dataset instanceof org.jfree.data.statistics.MultiValueCategoryDataset) {     org.jfree.data.statistics.MultiValueCategoryDataset mvcd = (org.jfree.data.statistics.MultiValueCategoryDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.getRowIndex( seriesKey );         for (int column = 0; column < columnCount; column++) {             java.util.List values = mvcd.getValues( series, column );             java.util.Iterator valueIterator = values.iterator();             while (valueIterator.hasNext()) {                 java.lang.Object o = valueIterator.next();                 if (o instanceof java.lang.Number) {                     double v = ((java.lang.Number) o).doubleValue();                     if (!Double.isNaN( v )) {                         minimum = Math.min( minimum, v );                         maximum = Math.max( maximum, v );                     }                 }             }         }     } } else {     if (includeInterval && dataset instanceof org.jfree.data.statistics.StatisticalCategoryDataset) {         org.jfree.data.statistics.StatisticalCategoryDataset scd = (org.jfree.data.statistics.StatisticalCategoryDataset) dataset;         java.util.Iterator iterator = visibleSeriesKeys.iterator();         while (iterator.hasNext()) {             java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();             int series = dataset.getRowIndex( seriesKey );             for (int column = 0; column < columnCount; column++) {                 java.lang.Number meanN = scd.getMeanValue( series, column );                 if (meanN != null) {                     double std = 0.0;                     java.lang.Number stdN = scd.getStdDevValue( series, column );                     if (stdN != null) {                         std = stdN.doubleValue();                         if (Double.isNaN( std )) {                             std = 0.0;                         }                     }                     double mean = meanN.doubleValue();                     if (!Double.isNaN( mean )) {                         minimum = Math.min( minimum, mean - std );                         maximum = Math.max( maximum, mean + std );                     }                 }             }         }     } else {         java.util.Iterator iterator = visibleSeriesKeys.iterator();         while (iterator.hasNext()) {             java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();             int series = dataset.getRowIndex( seriesKey );             for (int column = 0; column < columnCount; column++) {                 java.lang.Number value = dataset.getValue( series, column );                 if (value != null) {                     double v = value.doubleValue();                     if (!Double.isNaN( v )) {                         minimum = Math.min( minimum, v );                         maximum = Math.max( maximum, v );                     }                 }             }         }     } }  =>  
SDL_293:563:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next(); int series = dataset.getRowIndex( seriesKey ); for (int column = 0; column < columnCount; column++) {     lvalue = icd.getStartValue( series, column );     uvalue = icd.getEndValue( series, column );     if (lvalue != null && !Double.isNaN( lvalue.doubleValue() )) {         minimum = Math.min( minimum, lvalue.doubleValue() );     }     if (uvalue != null && !Double.isNaN( uvalue.doubleValue() )) {         maximum = Math.max( maximum, uvalue.doubleValue() );     } }  =>   java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next(); int series = dataset.getRowIndex( seriesKey );
SDL_294:574:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): while (iterator.hasNext()) {     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();     int series = dataset.getRowIndex( seriesKey );     for (int column = 0; column < columnCount; column++) {         lvalue = icd.getStartValue( series, column );         uvalue = icd.getEndValue( series, column );         if (lvalue != null && !Double.isNaN( lvalue.doubleValue() )) {             minimum = Math.min( minimum, lvalue.doubleValue() );         }         if (uvalue != null && !Double.isNaN( uvalue.doubleValue() )) {             maximum = Math.max( maximum, uvalue.doubleValue() );         }     } }  =>   while (true) {     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();     int series = dataset.getRowIndex( seriesKey );     for (int column = 0; column < columnCount; column++) {         lvalue = icd.getStartValue( series, column );         uvalue = icd.getEndValue( series, column );         if (lvalue != null && !Double.isNaN( lvalue.doubleValue() )) {             minimum = Math.min( minimum, lvalue.doubleValue() );         }         if (uvalue != null && !Double.isNaN( uvalue.doubleValue() )) {             maximum = Math.max( maximum, uvalue.doubleValue() );         }     } }
SDL_295:571:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): lvalue = icd.getStartValue( series, column ); uvalue = icd.getEndValue( series, column ); if (lvalue != null && !Double.isNaN( lvalue.doubleValue() )) {     minimum = Math.min( minimum, lvalue.doubleValue() ); } if (uvalue != null && !Double.isNaN( uvalue.doubleValue() )) {     maximum = Math.max( maximum, uvalue.doubleValue() ); }  =>   uvalue = icd.getEndValue( series, column ); if (lvalue != null && !Double.isNaN( lvalue.doubleValue() )) {     minimum = Math.min( minimum, lvalue.doubleValue() ); } if (uvalue != null && !Double.isNaN( uvalue.doubleValue() )) {     maximum = Math.max( maximum, uvalue.doubleValue() ); }
SDL_296:571:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): lvalue = icd.getStartValue( series, column ); uvalue = icd.getEndValue( series, column ); if (lvalue != null && !Double.isNaN( lvalue.doubleValue() )) {     minimum = Math.min( minimum, lvalue.doubleValue() ); } if (uvalue != null && !Double.isNaN( uvalue.doubleValue() )) {     maximum = Math.max( maximum, uvalue.doubleValue() ); }  =>   lvalue = icd.getStartValue( series, column ); if (lvalue != null && !Double.isNaN( lvalue.doubleValue() )) {     minimum = Math.min( minimum, lvalue.doubleValue() ); } if (uvalue != null && !Double.isNaN( uvalue.doubleValue() )) {     maximum = Math.max( maximum, uvalue.doubleValue() ); }
SDL_297:569:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): lvalue = icd.getStartValue( series, column ); uvalue = icd.getEndValue( series, column ); if (lvalue != null && !Double.isNaN( lvalue.doubleValue() )) {     minimum = Math.min( minimum, lvalue.doubleValue() ); } if (uvalue != null && !Double.isNaN( uvalue.doubleValue() )) {     maximum = Math.max( maximum, uvalue.doubleValue() ); }  =>   lvalue = icd.getStartValue( series, column ); uvalue = icd.getEndValue( series, column ); if (uvalue != null && !Double.isNaN( uvalue.doubleValue() )) {     maximum = Math.max( maximum, uvalue.doubleValue() ); }
SDL_298:569:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): lvalue = icd.getStartValue( series, column ); uvalue = icd.getEndValue( series, column ); if (lvalue != null && !Double.isNaN( lvalue.doubleValue() )) {     minimum = Math.min( minimum, lvalue.doubleValue() ); } if (uvalue != null && !Double.isNaN( uvalue.doubleValue() )) {     maximum = Math.max( maximum, uvalue.doubleValue() ); }  =>   lvalue = icd.getStartValue( series, column ); uvalue = icd.getEndValue( series, column ); if (lvalue != null && !Double.isNaN( lvalue.doubleValue() )) {     minimum = Math.min( minimum, lvalue.doubleValue() ); }
SDL_299:573:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): for (int column = 0; column < columnCount; column++) {     lvalue = icd.getStartValue( series, column );     uvalue = icd.getEndValue( series, column );     if (lvalue != null && !Double.isNaN( lvalue.doubleValue() )) {         minimum = Math.min( minimum, lvalue.doubleValue() );     }     if (uvalue != null && !Double.isNaN( uvalue.doubleValue() )) {         maximum = Math.max( maximum, uvalue.doubleValue() );     } }  =>   for (int column = 0;; column++) {     lvalue = icd.getStartValue( series, column );     uvalue = icd.getEndValue( series, column );     if (lvalue != null && !Double.isNaN( lvalue.doubleValue() )) {         minimum = Math.min( minimum, lvalue.doubleValue() );     }     if (uvalue != null && !Double.isNaN( uvalue.doubleValue() )) {         maximum = Math.max( maximum, uvalue.doubleValue() );     } }
SDL_300:573:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): for (int column = 0; column < columnCount; column++) {     lvalue = icd.getStartValue( series, column );     uvalue = icd.getEndValue( series, column );     if (lvalue != null && !Double.isNaN( lvalue.doubleValue() )) {         minimum = Math.min( minimum, lvalue.doubleValue() );     }     if (uvalue != null && !Double.isNaN( uvalue.doubleValue() )) {         maximum = Math.max( maximum, uvalue.doubleValue() );     } }  =>   for (int column = 0; column < columnCount;) {     lvalue = icd.getStartValue( series, column );     uvalue = icd.getEndValue( series, column );     if (lvalue != null && !Double.isNaN( lvalue.doubleValue() )) {         minimum = Math.min( minimum, lvalue.doubleValue() );     }     if (uvalue != null && !Double.isNaN( uvalue.doubleValue() )) {         maximum = Math.max( maximum, uvalue.doubleValue() );     } }
SDL_301:567:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): minimum = Math.min( minimum, lvalue.doubleValue() );  =>  
SDL_302:569:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): if (lvalue != null && !Double.isNaN( lvalue.doubleValue() )) {     minimum = Math.min( minimum, lvalue.doubleValue() ); }  =>   if (true) {     minimum = Math.min( minimum, lvalue.doubleValue() ); }
SDL_303:570:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): maximum = Math.max( maximum, uvalue.doubleValue() );  =>  
SDL_304:572:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): if (uvalue != null && !Double.isNaN( uvalue.doubleValue() )) {     maximum = Math.max( maximum, uvalue.doubleValue() ); }  =>   if (true) {     maximum = Math.max( maximum, uvalue.doubleValue() ); }
SDL_305:578:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): org.jfree.data.statistics.MultiValueCategoryDataset mvcd = (org.jfree.data.statistics.MultiValueCategoryDataset) dataset; java.util.Iterator iterator = visibleSeriesKeys.iterator(); while (iterator.hasNext()) {     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();     int series = dataset.getRowIndex( seriesKey );     for (int column = 0; column < columnCount; column++) {         java.util.List values = mvcd.getValues( series, column );         java.util.Iterator valueIterator = values.iterator();         while (valueIterator.hasNext()) {             java.lang.Object o = valueIterator.next();             if (o instanceof java.lang.Number) {                 double v = ((java.lang.Number) o).doubleValue();                 if (!Double.isNaN( v )) {                     minimum = Math.min( minimum, v );                     maximum = Math.max( maximum, v );                 }             }         }     } }  =>   org.jfree.data.statistics.MultiValueCategoryDataset mvcd = (org.jfree.data.statistics.MultiValueCategoryDataset) dataset; java.util.Iterator iterator = visibleSeriesKeys.iterator();
SDL_306:640:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): if (includeInterval && dataset instanceof org.jfree.data.statistics.MultiValueCategoryDataset) {     org.jfree.data.statistics.MultiValueCategoryDataset mvcd = (org.jfree.data.statistics.MultiValueCategoryDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.getRowIndex( seriesKey );         for (int column = 0; column < columnCount; column++) {             java.util.List values = mvcd.getValues( series, column );             java.util.Iterator valueIterator = values.iterator();             while (valueIterator.hasNext()) {                 java.lang.Object o = valueIterator.next();                 if (o instanceof java.lang.Number) {                     double v = ((java.lang.Number) o).doubleValue();                     if (!Double.isNaN( v )) {                         minimum = Math.min( minimum, v );                         maximum = Math.max( maximum, v );                     }                 }             }         }     } } else {     if (includeInterval && dataset instanceof org.jfree.data.statistics.StatisticalCategoryDataset) {         org.jfree.data.statistics.StatisticalCategoryDataset scd = (org.jfree.data.statistics.StatisticalCategoryDataset) dataset;         java.util.Iterator iterator = visibleSeriesKeys.iterator();         while (iterator.hasNext()) {             java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();             int series = dataset.getRowIndex( seriesKey );             for (int column = 0; column < columnCount; column++) {                 java.lang.Number meanN = scd.getMeanValue( series, column );                 if (meanN != null) {                     double std = 0.0;                     java.lang.Number stdN = scd.getStdDevValue( series, column );                     if (stdN != null) {                         std = stdN.doubleValue();                         if (Double.isNaN( std )) {                             std = 0.0;                         }                     }                     double mean = meanN.doubleValue();                     if (!Double.isNaN( mean )) {                         minimum = Math.min( minimum, mean - std );                         maximum = Math.max( maximum, mean + std );                     }                 }             }         }     } else {         java.util.Iterator iterator = visibleSeriesKeys.iterator();         while (iterator.hasNext()) {             java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();             int series = dataset.getRowIndex( seriesKey );             for (int column = 0; column < columnCount; column++) {                 java.lang.Number value = dataset.getValue( series, column );                 if (value != null) {                     double v = value.doubleValue();                     if (!Double.isNaN( v )) {                         minimum = Math.min( minimum, v );                         maximum = Math.max( maximum, v );                     }                 }             }         }     } }  =>   if (true) {     org.jfree.data.statistics.MultiValueCategoryDataset mvcd = (org.jfree.data.statistics.MultiValueCategoryDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.getRowIndex( seriesKey );         for (int column = 0; column < columnCount; column++) {             java.util.List values = mvcd.getValues( series, column );             java.util.Iterator valueIterator = values.iterator();             while (valueIterator.hasNext()) {                 java.lang.Object o = valueIterator.next();                 if (o instanceof java.lang.Number) {                     double v = ((java.lang.Number) o).doubleValue();                     if (!Double.isNaN( v )) {                         minimum = Math.min( minimum, v );                         maximum = Math.max( maximum, v );                     }                 }             }         }     } } else {     if (includeInterval && dataset instanceof org.jfree.data.statistics.StatisticalCategoryDataset) {         org.jfree.data.statistics.StatisticalCategoryDataset scd = (org.jfree.data.statistics.StatisticalCategoryDataset) dataset;         java.util.Iterator iterator = visibleSeriesKeys.iterator();         while (iterator.hasNext()) {             java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();             int series = dataset.getRowIndex( seriesKey );             for (int column = 0; column < columnCount; column++) {                 java.lang.Number meanN = scd.getMeanValue( series, column );                 if (meanN != null) {                     double std = 0.0;                     java.lang.Number stdN = scd.getStdDevValue( series, column );                     if (stdN != null) {                         std = stdN.doubleValue();                         if (Double.isNaN( std )) {                             std = 0.0;                         }                     }                     double mean = meanN.doubleValue();                     if (!Double.isNaN( mean )) {                         minimum = Math.min( minimum, mean - std );                         maximum = Math.max( maximum, mean + std );                     }                 }             }         }     } else {         java.util.Iterator iterator = visibleSeriesKeys.iterator();         while (iterator.hasNext()) {             java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();             int series = dataset.getRowIndex( seriesKey );             for (int column = 0; column < columnCount; column++) {                 java.lang.Number value = dataset.getValue( series, column );                 if (value != null) {                     double v = value.doubleValue();                     if (!Double.isNaN( v )) {                         minimum = Math.min( minimum, v );                         maximum = Math.max( maximum, v );                     }                 }             }         }     } }
SDL_307:597:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): if (includeInterval && dataset instanceof org.jfree.data.statistics.StatisticalCategoryDataset) {     org.jfree.data.statistics.StatisticalCategoryDataset scd = (org.jfree.data.statistics.StatisticalCategoryDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.getRowIndex( seriesKey );         for (int column = 0; column < columnCount; column++) {             java.lang.Number meanN = scd.getMeanValue( series, column );             if (meanN != null) {                 double std = 0.0;                 java.lang.Number stdN = scd.getStdDevValue( series, column );                 if (stdN != null) {                     std = stdN.doubleValue();                     if (Double.isNaN( std )) {                         std = 0.0;                     }                 }                 double mean = meanN.doubleValue();                 if (!Double.isNaN( mean )) {                     minimum = Math.min( minimum, mean - std );                     maximum = Math.max( maximum, mean + std );                 }             }         }     } } else {     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.getRowIndex( seriesKey );         for (int column = 0; column < columnCount; column++) {             java.lang.Number value = dataset.getValue( series, column );             if (value != null) {                 double v = value.doubleValue();                 if (!Double.isNaN( v )) {                     minimum = Math.min( minimum, v );                     maximum = Math.max( maximum, v );                 }             }         }     } }  =>  
SDL_308:581:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next(); int series = dataset.getRowIndex( seriesKey ); for (int column = 0; column < columnCount; column++) {     java.util.List values = mvcd.getValues( series, column );     java.util.Iterator valueIterator = values.iterator();     while (valueIterator.hasNext()) {         java.lang.Object o = valueIterator.next();         if (o instanceof java.lang.Number) {             double v = ((java.lang.Number) o).doubleValue();             if (!Double.isNaN( v )) {                 minimum = Math.min( minimum, v );                 maximum = Math.max( maximum, v );             }         }     } }  =>   java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next(); int series = dataset.getRowIndex( seriesKey );
SDL_309:596:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): while (iterator.hasNext()) {     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();     int series = dataset.getRowIndex( seriesKey );     for (int column = 0; column < columnCount; column++) {         java.util.List values = mvcd.getValues( series, column );         java.util.Iterator valueIterator = values.iterator();         while (valueIterator.hasNext()) {             java.lang.Object o = valueIterator.next();             if (o instanceof java.lang.Number) {                 double v = ((java.lang.Number) o).doubleValue();                 if (!Double.isNaN( v )) {                     minimum = Math.min( minimum, v );                     maximum = Math.max( maximum, v );                 }             }         }     } }  =>   while (true) {     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();     int series = dataset.getRowIndex( seriesKey );     for (int column = 0; column < columnCount; column++) {         java.util.List values = mvcd.getValues( series, column );         java.util.Iterator valueIterator = values.iterator();         while (valueIterator.hasNext()) {             java.lang.Object o = valueIterator.next();             if (o instanceof java.lang.Number) {                 double v = ((java.lang.Number) o).doubleValue();                 if (!Double.isNaN( v )) {                     minimum = Math.min( minimum, v );                     maximum = Math.max( maximum, v );                 }             }         }     } }
SDL_310:584:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): java.util.List values = mvcd.getValues( series, column ); java.util.Iterator valueIterator = values.iterator(); while (valueIterator.hasNext()) {     java.lang.Object o = valueIterator.next();     if (o instanceof java.lang.Number) {         double v = ((java.lang.Number) o).doubleValue();         if (!Double.isNaN( v )) {             minimum = Math.min( minimum, v );             maximum = Math.max( maximum, v );         }     } }  =>   java.util.List values = mvcd.getValues( series, column ); java.util.Iterator valueIterator = values.iterator();
SDL_311:595:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): for (int column = 0; column < columnCount; column++) {     java.util.List values = mvcd.getValues( series, column );     java.util.Iterator valueIterator = values.iterator();     while (valueIterator.hasNext()) {         java.lang.Object o = valueIterator.next();         if (o instanceof java.lang.Number) {             double v = ((java.lang.Number) o).doubleValue();             if (!Double.isNaN( v )) {                 minimum = Math.min( minimum, v );                 maximum = Math.max( maximum, v );             }         }     } }  =>   for (int column = 0;; column++) {     java.util.List values = mvcd.getValues( series, column );     java.util.Iterator valueIterator = values.iterator();     while (valueIterator.hasNext()) {         java.lang.Object o = valueIterator.next();         if (o instanceof java.lang.Number) {             double v = ((java.lang.Number) o).doubleValue();             if (!Double.isNaN( v )) {                 minimum = Math.min( minimum, v );                 maximum = Math.max( maximum, v );             }         }     } }
SDL_312:595:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): for (int column = 0; column < columnCount; column++) {     java.util.List values = mvcd.getValues( series, column );     java.util.Iterator valueIterator = values.iterator();     while (valueIterator.hasNext()) {         java.lang.Object o = valueIterator.next();         if (o instanceof java.lang.Number) {             double v = ((java.lang.Number) o).doubleValue();             if (!Double.isNaN( v )) {                 minimum = Math.min( minimum, v );                 maximum = Math.max( maximum, v );             }         }     } }  =>   for (int column = 0; column < columnCount;) {     java.util.List values = mvcd.getValues( series, column );     java.util.Iterator valueIterator = values.iterator();     while (valueIterator.hasNext()) {         java.lang.Object o = valueIterator.next();         if (o instanceof java.lang.Number) {             double v = ((java.lang.Number) o).doubleValue();             if (!Double.isNaN( v )) {                 minimum = Math.min( minimum, v );                 maximum = Math.max( maximum, v );             }         }     } }
SDL_313:586:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): java.lang.Object o = valueIterator.next(); if (o instanceof java.lang.Number) {     double v = ((java.lang.Number) o).doubleValue();     if (!Double.isNaN( v )) {         minimum = Math.min( minimum, v );         maximum = Math.max( maximum, v );     } }  =>   java.lang.Object o = valueIterator.next();
SDL_314:594:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): while (valueIterator.hasNext()) {     java.lang.Object o = valueIterator.next();     if (o instanceof java.lang.Number) {         double v = ((java.lang.Number) o).doubleValue();         if (!Double.isNaN( v )) {             minimum = Math.min( minimum, v );             maximum = Math.max( maximum, v );         }     } }  =>   while (true) {     java.lang.Object o = valueIterator.next();     if (o instanceof java.lang.Number) {         double v = ((java.lang.Number) o).doubleValue();         if (!Double.isNaN( v )) {             minimum = Math.min( minimum, v );             maximum = Math.max( maximum, v );         }     } }
SDL_315:588:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): double v = ((java.lang.Number) o).doubleValue(); if (!Double.isNaN( v )) {     minimum = Math.min( minimum, v );     maximum = Math.max( maximum, v ); }  =>   double v = ((java.lang.Number) o).doubleValue();
SDL_316:593:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): if (o instanceof java.lang.Number) {     double v = ((java.lang.Number) o).doubleValue();     if (!Double.isNaN( v )) {         minimum = Math.min( minimum, v );         maximum = Math.max( maximum, v );     } }  =>   if (true) {     double v = ((java.lang.Number) o).doubleValue();     if (!Double.isNaN( v )) {         minimum = Math.min( minimum, v );         maximum = Math.max( maximum, v );     } }
SDL_317:590:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): minimum = Math.min( minimum, v ); maximum = Math.max( maximum, v );  =>   maximum = Math.max( maximum, v );
SDL_318:590:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): minimum = Math.min( minimum, v ); maximum = Math.max( maximum, v );  =>   minimum = Math.min( minimum, v );
SDL_319:592:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): if (!Double.isNaN( v )) {     minimum = Math.min( minimum, v );     maximum = Math.max( maximum, v ); }  =>   if (true) {     minimum = Math.min( minimum, v );     maximum = Math.max( maximum, v ); }
SDL_320:600:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): org.jfree.data.statistics.StatisticalCategoryDataset scd = (org.jfree.data.statistics.StatisticalCategoryDataset) dataset; java.util.Iterator iterator = visibleSeriesKeys.iterator(); while (iterator.hasNext()) {     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();     int series = dataset.getRowIndex( seriesKey );     for (int column = 0; column < columnCount; column++) {         java.lang.Number meanN = scd.getMeanValue( series, column );         if (meanN != null) {             double std = 0.0;             java.lang.Number stdN = scd.getStdDevValue( series, column );             if (stdN != null) {                 std = stdN.doubleValue();                 if (Double.isNaN( std )) {                     std = 0.0;                 }             }             double mean = meanN.doubleValue();             if (!Double.isNaN( mean )) {                 minimum = Math.min( minimum, mean - std );                 maximum = Math.max( maximum, mean + std );             }         }     } }  =>   org.jfree.data.statistics.StatisticalCategoryDataset scd = (org.jfree.data.statistics.StatisticalCategoryDataset) dataset; java.util.Iterator iterator = visibleSeriesKeys.iterator();
SDL_321:639:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): if (includeInterval && dataset instanceof org.jfree.data.statistics.StatisticalCategoryDataset) {     org.jfree.data.statistics.StatisticalCategoryDataset scd = (org.jfree.data.statistics.StatisticalCategoryDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.getRowIndex( seriesKey );         for (int column = 0; column < columnCount; column++) {             java.lang.Number meanN = scd.getMeanValue( series, column );             if (meanN != null) {                 double std = 0.0;                 java.lang.Number stdN = scd.getStdDevValue( series, column );                 if (stdN != null) {                     std = stdN.doubleValue();                     if (Double.isNaN( std )) {                         std = 0.0;                     }                 }                 double mean = meanN.doubleValue();                 if (!Double.isNaN( mean )) {                     minimum = Math.min( minimum, mean - std );                     maximum = Math.max( maximum, mean + std );                 }             }         }     } } else {     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.getRowIndex( seriesKey );         for (int column = 0; column < columnCount; column++) {             java.lang.Number value = dataset.getValue( series, column );             if (value != null) {                 double v = value.doubleValue();                 if (!Double.isNaN( v )) {                     minimum = Math.min( minimum, v );                     maximum = Math.max( maximum, v );                 }             }         }     } }  =>   if (true) {     org.jfree.data.statistics.StatisticalCategoryDataset scd = (org.jfree.data.statistics.StatisticalCategoryDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.getRowIndex( seriesKey );         for (int column = 0; column < columnCount; column++) {             java.lang.Number meanN = scd.getMeanValue( series, column );             if (meanN != null) {                 double std = 0.0;                 java.lang.Number stdN = scd.getStdDevValue( series, column );                 if (stdN != null) {                     std = stdN.doubleValue();                     if (Double.isNaN( std )) {                         std = 0.0;                     }                 }                 double mean = meanN.doubleValue();                 if (!Double.isNaN( mean )) {                     minimum = Math.min( minimum, mean - std );                     maximum = Math.max( maximum, mean + std );                 }             }         }     } } else {     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.getRowIndex( seriesKey );         for (int column = 0; column < columnCount; column++) {             java.lang.Number value = dataset.getValue( series, column );             if (value != null) {                 double v = value.doubleValue();                 if (!Double.isNaN( v )) {                     minimum = Math.min( minimum, v );                     maximum = Math.max( maximum, v );                 }             }         }     } }
SDL_322:624:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): java.util.Iterator iterator = visibleSeriesKeys.iterator(); while (iterator.hasNext()) {     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();     int series = dataset.getRowIndex( seriesKey );     for (int column = 0; column < columnCount; column++) {         java.lang.Number value = dataset.getValue( series, column );         if (value != null) {             double v = value.doubleValue();             if (!Double.isNaN( v )) {                 minimum = Math.min( minimum, v );                 maximum = Math.max( maximum, v );             }         }     } }  =>   java.util.Iterator iterator = visibleSeriesKeys.iterator();
SDL_323:603:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next(); int series = dataset.getRowIndex( seriesKey ); for (int column = 0; column < columnCount; column++) {     java.lang.Number meanN = scd.getMeanValue( series, column );     if (meanN != null) {         double std = 0.0;         java.lang.Number stdN = scd.getStdDevValue( series, column );         if (stdN != null) {             std = stdN.doubleValue();             if (Double.isNaN( std )) {                 std = 0.0;             }         }         double mean = meanN.doubleValue();         if (!Double.isNaN( mean )) {             minimum = Math.min( minimum, mean - std );             maximum = Math.max( maximum, mean + std );         }     } }  =>   java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next(); int series = dataset.getRowIndex( seriesKey );
SDL_324:622:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): while (iterator.hasNext()) {     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();     int series = dataset.getRowIndex( seriesKey );     for (int column = 0; column < columnCount; column++) {         java.lang.Number meanN = scd.getMeanValue( series, column );         if (meanN != null) {             double std = 0.0;             java.lang.Number stdN = scd.getStdDevValue( series, column );             if (stdN != null) {                 std = stdN.doubleValue();                 if (Double.isNaN( std )) {                     std = 0.0;                 }             }             double mean = meanN.doubleValue();             if (!Double.isNaN( mean )) {                 minimum = Math.min( minimum, mean - std );                 maximum = Math.max( maximum, mean + std );             }         }     } }  =>   while (true) {     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();     int series = dataset.getRowIndex( seriesKey );     for (int column = 0; column < columnCount; column++) {         java.lang.Number meanN = scd.getMeanValue( series, column );         if (meanN != null) {             double std = 0.0;             java.lang.Number stdN = scd.getStdDevValue( series, column );             if (stdN != null) {                 std = stdN.doubleValue();                 if (Double.isNaN( std )) {                     std = 0.0;                 }             }             double mean = meanN.doubleValue();             if (!Double.isNaN( mean )) {                 minimum = Math.min( minimum, mean - std );                 maximum = Math.max( maximum, mean + std );             }         }     } }
SDL_325:605:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): java.lang.Number meanN = scd.getMeanValue( series, column ); if (meanN != null) {     double std = 0.0;     java.lang.Number stdN = scd.getStdDevValue( series, column );     if (stdN != null) {         std = stdN.doubleValue();         if (Double.isNaN( std )) {             std = 0.0;         }     }     double mean = meanN.doubleValue();     if (!Double.isNaN( mean )) {         minimum = Math.min( minimum, mean - std );         maximum = Math.max( maximum, mean + std );     } }  =>   java.lang.Number meanN = scd.getMeanValue( series, column );
SDL_326:621:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): for (int column = 0; column < columnCount; column++) {     java.lang.Number meanN = scd.getMeanValue( series, column );     if (meanN != null) {         double std = 0.0;         java.lang.Number stdN = scd.getStdDevValue( series, column );         if (stdN != null) {             std = stdN.doubleValue();             if (Double.isNaN( std )) {                 std = 0.0;             }         }         double mean = meanN.doubleValue();         if (!Double.isNaN( mean )) {             minimum = Math.min( minimum, mean - std );             maximum = Math.max( maximum, mean + std );         }     } }  =>   for (int column = 0;; column++) {     java.lang.Number meanN = scd.getMeanValue( series, column );     if (meanN != null) {         double std = 0.0;         java.lang.Number stdN = scd.getStdDevValue( series, column );         if (stdN != null) {             std = stdN.doubleValue();             if (Double.isNaN( std )) {                 std = 0.0;             }         }         double mean = meanN.doubleValue();         if (!Double.isNaN( mean )) {             minimum = Math.min( minimum, mean - std );             maximum = Math.max( maximum, mean + std );         }     } }
SDL_327:621:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): for (int column = 0; column < columnCount; column++) {     java.lang.Number meanN = scd.getMeanValue( series, column );     if (meanN != null) {         double std = 0.0;         java.lang.Number stdN = scd.getStdDevValue( series, column );         if (stdN != null) {             std = stdN.doubleValue();             if (Double.isNaN( std )) {                 std = 0.0;             }         }         double mean = meanN.doubleValue();         if (!Double.isNaN( mean )) {             minimum = Math.min( minimum, mean - std );             maximum = Math.max( maximum, mean + std );         }     } }  =>   for (int column = 0; column < columnCount;) {     java.lang.Number meanN = scd.getMeanValue( series, column );     if (meanN != null) {         double std = 0.0;         java.lang.Number stdN = scd.getStdDevValue( series, column );         if (stdN != null) {             std = stdN.doubleValue();             if (Double.isNaN( std )) {                 std = 0.0;             }         }         double mean = meanN.doubleValue();         if (!Double.isNaN( mean )) {             minimum = Math.min( minimum, mean - std );             maximum = Math.max( maximum, mean + std );         }     } }
SDL_328:613:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): double std = 0.0; java.lang.Number stdN = scd.getStdDevValue( series, column ); if (stdN != null) {     std = stdN.doubleValue();     if (Double.isNaN( std )) {         std = 0.0;     } } double mean = meanN.doubleValue(); if (!Double.isNaN( mean )) {     minimum = Math.min( minimum, mean - std );     maximum = Math.max( maximum, mean + std ); }  =>   double std = 0.0; java.lang.Number stdN = scd.getStdDevValue( series, column ); double mean = meanN.doubleValue(); if (!Double.isNaN( mean )) {     minimum = Math.min( minimum, mean - std );     maximum = Math.max( maximum, mean + std ); }
SDL_329:615:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): double std = 0.0; java.lang.Number stdN = scd.getStdDevValue( series, column ); if (stdN != null) {     std = stdN.doubleValue();     if (Double.isNaN( std )) {         std = 0.0;     } } double mean = meanN.doubleValue(); if (!Double.isNaN( mean )) {     minimum = Math.min( minimum, mean - std );     maximum = Math.max( maximum, mean + std ); }  =>   double std = 0.0; java.lang.Number stdN = scd.getStdDevValue( series, column ); if (stdN != null) {     std = stdN.doubleValue();     if (Double.isNaN( std )) {         std = 0.0;     } } double mean = meanN.doubleValue();
SDL_330:620:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): if (meanN != null) {     double std = 0.0;     java.lang.Number stdN = scd.getStdDevValue( series, column );     if (stdN != null) {         std = stdN.doubleValue();         if (Double.isNaN( std )) {             std = 0.0;         }     }     double mean = meanN.doubleValue();     if (!Double.isNaN( mean )) {         minimum = Math.min( minimum, mean - std );         maximum = Math.max( maximum, mean + std );     } }  =>   if (true) {     double std = 0.0;     java.lang.Number stdN = scd.getStdDevValue( series, column );     if (stdN != null) {         std = stdN.doubleValue();         if (Double.isNaN( std )) {             std = 0.0;         }     }     double mean = meanN.doubleValue();     if (!Double.isNaN( mean )) {         minimum = Math.min( minimum, mean - std );         maximum = Math.max( maximum, mean + std );     } }
SDL_331:612:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): std = stdN.doubleValue(); if (Double.isNaN( std )) {     std = 0.0; }  =>   if (Double.isNaN( std )) {     std = 0.0; }
SDL_332:610:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): std = stdN.doubleValue(); if (Double.isNaN( std )) {     std = 0.0; }  =>   std = stdN.doubleValue();
SDL_333:614:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): if (stdN != null) {     std = stdN.doubleValue();     if (Double.isNaN( std )) {         std = 0.0;     } }  =>   if (true) {     std = stdN.doubleValue();     if (Double.isNaN( std )) {         std = 0.0;     } }
SDL_334:611:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): std = 0.0;  =>  
SDL_335:613:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): if (Double.isNaN( std )) {     std = 0.0; }  =>   if (true) {     std = 0.0; }
SDL_336:617:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): minimum = Math.min( minimum, mean - std ); maximum = Math.max( maximum, mean + std );  =>   maximum = Math.max( maximum, mean + std );
SDL_337:617:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): minimum = Math.min( minimum, mean - std ); maximum = Math.max( maximum, mean + std );  =>   minimum = Math.min( minimum, mean - std );
SDL_338:619:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): if (!Double.isNaN( mean )) {     minimum = Math.min( minimum, mean - std );     maximum = Math.max( maximum, mean + std ); }  =>   if (true) {     minimum = Math.min( minimum, mean - std );     maximum = Math.max( maximum, mean + std ); }
SDL_339:627:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next(); int series = dataset.getRowIndex( seriesKey ); for (int column = 0; column < columnCount; column++) {     java.lang.Number value = dataset.getValue( series, column );     if (value != null) {         double v = value.doubleValue();         if (!Double.isNaN( v )) {             minimum = Math.min( minimum, v );             maximum = Math.max( maximum, v );         }     } }  =>   java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next(); int series = dataset.getRowIndex( seriesKey );
SDL_340:638:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): while (iterator.hasNext()) {     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();     int series = dataset.getRowIndex( seriesKey );     for (int column = 0; column < columnCount; column++) {         java.lang.Number value = dataset.getValue( series, column );         if (value != null) {             double v = value.doubleValue();             if (!Double.isNaN( v )) {                 minimum = Math.min( minimum, v );                 maximum = Math.max( maximum, v );             }         }     } }  =>   while (true) {     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();     int series = dataset.getRowIndex( seriesKey );     for (int column = 0; column < columnCount; column++) {         java.lang.Number value = dataset.getValue( series, column );         if (value != null) {             double v = value.doubleValue();             if (!Double.isNaN( v )) {                 minimum = Math.min( minimum, v );                 maximum = Math.max( maximum, v );             }         }     } }
SDL_341:629:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): java.lang.Number value = dataset.getValue( series, column ); if (value != null) {     double v = value.doubleValue();     if (!Double.isNaN( v )) {         minimum = Math.min( minimum, v );         maximum = Math.max( maximum, v );     } }  =>   java.lang.Number value = dataset.getValue( series, column );
SDL_342:637:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): for (int column = 0; column < columnCount; column++) {     java.lang.Number value = dataset.getValue( series, column );     if (value != null) {         double v = value.doubleValue();         if (!Double.isNaN( v )) {             minimum = Math.min( minimum, v );             maximum = Math.max( maximum, v );         }     } }  =>   for (int column = 0;; column++) {     java.lang.Number value = dataset.getValue( series, column );     if (value != null) {         double v = value.doubleValue();         if (!Double.isNaN( v )) {             minimum = Math.min( minimum, v );             maximum = Math.max( maximum, v );         }     } }
SDL_343:637:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): for (int column = 0; column < columnCount; column++) {     java.lang.Number value = dataset.getValue( series, column );     if (value != null) {         double v = value.doubleValue();         if (!Double.isNaN( v )) {             minimum = Math.min( minimum, v );             maximum = Math.max( maximum, v );         }     } }  =>   for (int column = 0; column < columnCount;) {     java.lang.Number value = dataset.getValue( series, column );     if (value != null) {         double v = value.doubleValue();         if (!Double.isNaN( v )) {             minimum = Math.min( minimum, v );             maximum = Math.max( maximum, v );         }     } }
SDL_344:631:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): double v = value.doubleValue(); if (!Double.isNaN( v )) {     minimum = Math.min( minimum, v );     maximum = Math.max( maximum, v ); }  =>   double v = value.doubleValue();
SDL_345:636:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): if (value != null) {     double v = value.doubleValue();     if (!Double.isNaN( v )) {         minimum = Math.min( minimum, v );         maximum = Math.max( maximum, v );     } }  =>   if (true) {     double v = value.doubleValue();     if (!Double.isNaN( v )) {         minimum = Math.min( minimum, v );         maximum = Math.max( maximum, v );     } }
SDL_346:633:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): minimum = Math.min( minimum, v ); maximum = Math.max( maximum, v );  =>   maximum = Math.max( maximum, v );
SDL_347:633:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): minimum = Math.min( minimum, v ); maximum = Math.max( maximum, v );  =>   minimum = Math.min( minimum, v );
SDL_348:635:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): if (!Double.isNaN( v )) {     minimum = Math.min( minimum, v );     maximum = Math.max( maximum, v ); }  =>   if (true) {     minimum = Math.min( minimum, v );     maximum = Math.max( maximum, v ); }
SDL_349:647:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean): if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }  =>   if (true) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }
SDL_350:669:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset;     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double lvalue = ixyd.getStartYValue( series, item );             double uvalue = ixyd.getEndYValue( series, item );             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );             }             if (!Double.isNaN( uvalue )) {                 maximum = Math.max( maximum, uvalue );             }         }     } } else {     if (includeInterval && dataset instanceof org.jfree.data.xy.OHLCDataset) {         org.jfree.data.xy.OHLCDataset ohlc = (org.jfree.data.xy.OHLCDataset) dataset;         for (int series = 0; series < seriesCount; series++) {             int itemCount = dataset.getItemCount( series );             for (int item = 0; item < itemCount; item++) {                 double lvalue = ohlc.getLowValue( series, item );                 double uvalue = ohlc.getHighValue( series, item );                 if (!Double.isNaN( lvalue )) {                     minimum = Math.min( minimum, lvalue );                 }                 if (!Double.isNaN( uvalue )) {                     maximum = Math.max( maximum, uvalue );                 }             }         }     } else {         for (int series = 0; series < seriesCount; series++) {             int itemCount = dataset.getItemCount( series );             for (int item = 0; item < itemCount; item++) {                 double value = dataset.getYValue( series, item );                 if (!Double.isNaN( value )) {                     minimum = Math.min( minimum, value );                     maximum = Math.max( maximum, value );                 }             }         }     } } if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }  =>   double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }
SDL_351:708:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset;     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double lvalue = ixyd.getStartYValue( series, item );             double uvalue = ixyd.getEndYValue( series, item );             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );             }             if (!Double.isNaN( uvalue )) {                 maximum = Math.max( maximum, uvalue );             }         }     } } else {     if (includeInterval && dataset instanceof org.jfree.data.xy.OHLCDataset) {         org.jfree.data.xy.OHLCDataset ohlc = (org.jfree.data.xy.OHLCDataset) dataset;         for (int series = 0; series < seriesCount; series++) {             int itemCount = dataset.getItemCount( series );             for (int item = 0; item < itemCount; item++) {                 double lvalue = ohlc.getLowValue( series, item );                 double uvalue = ohlc.getHighValue( series, item );                 if (!Double.isNaN( lvalue )) {                     minimum = Math.min( minimum, lvalue );                 }                 if (!Double.isNaN( uvalue )) {                     maximum = Math.max( maximum, uvalue );                 }             }         }     } else {         for (int series = 0; series < seriesCount; series++) {             int itemCount = dataset.getItemCount( series );             for (int item = 0; item < itemCount; item++) {                 double value = dataset.getYValue( series, item );                 if (!Double.isNaN( value )) {                     minimum = Math.min( minimum, value );                     maximum = Math.max( maximum, value );                 }             }         }     } } if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }  =>   double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset;     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double lvalue = ixyd.getStartYValue( series, item );             double uvalue = ixyd.getEndYValue( series, item );             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );             }             if (!Double.isNaN( uvalue )) {                 maximum = Math.max( maximum, uvalue );             }         }     } } else {     if (includeInterval && dataset instanceof org.jfree.data.xy.OHLCDataset) {         org.jfree.data.xy.OHLCDataset ohlc = (org.jfree.data.xy.OHLCDataset) dataset;         for (int series = 0; series < seriesCount; series++) {             int itemCount = dataset.getItemCount( series );             for (int item = 0; item < itemCount; item++) {                 double lvalue = ohlc.getLowValue( series, item );                 double uvalue = ohlc.getHighValue( series, item );                 if (!Double.isNaN( lvalue )) {                     minimum = Math.min( minimum, lvalue );                 }                 if (!Double.isNaN( uvalue )) {                     maximum = Math.max( maximum, uvalue );                 }             }         }     } else {         for (int series = 0; series < seriesCount; series++) {             int itemCount = dataset.getItemCount( series );             for (int item = 0; item < itemCount; item++) {                 double value = dataset.getYValue( series, item );                 if (!Double.isNaN( value )) {                     minimum = Math.min( minimum, value );                     maximum = Math.max( maximum, value );                 }             }         }     } }
SDL_352:666:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset; for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double lvalue = ixyd.getStartYValue( series, item );         double uvalue = ixyd.getEndYValue( series, item );         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );         }         if (!Double.isNaN( uvalue )) {             maximum = Math.max( maximum, uvalue );         }     } }  =>   org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset;
SDL_353:708:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset;     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double lvalue = ixyd.getStartYValue( series, item );             double uvalue = ixyd.getEndYValue( series, item );             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );             }             if (!Double.isNaN( uvalue )) {                 maximum = Math.max( maximum, uvalue );             }         }     } } else {     if (includeInterval && dataset instanceof org.jfree.data.xy.OHLCDataset) {         org.jfree.data.xy.OHLCDataset ohlc = (org.jfree.data.xy.OHLCDataset) dataset;         for (int series = 0; series < seriesCount; series++) {             int itemCount = dataset.getItemCount( series );             for (int item = 0; item < itemCount; item++) {                 double lvalue = ohlc.getLowValue( series, item );                 double uvalue = ohlc.getHighValue( series, item );                 if (!Double.isNaN( lvalue )) {                     minimum = Math.min( minimum, lvalue );                 }                 if (!Double.isNaN( uvalue )) {                     maximum = Math.max( maximum, uvalue );                 }             }         }     } else {         for (int series = 0; series < seriesCount; series++) {             int itemCount = dataset.getItemCount( series );             for (int item = 0; item < itemCount; item++) {                 double value = dataset.getYValue( series, item );                 if (!Double.isNaN( value )) {                     minimum = Math.min( minimum, value );                     maximum = Math.max( maximum, value );                 }             }         }     } }  =>   if (true) {     org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset;     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double lvalue = ixyd.getStartYValue( series, item );             double uvalue = ixyd.getEndYValue( series, item );             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );             }             if (!Double.isNaN( uvalue )) {                 maximum = Math.max( maximum, uvalue );             }         }     } } else {     if (includeInterval && dataset instanceof org.jfree.data.xy.OHLCDataset) {         org.jfree.data.xy.OHLCDataset ohlc = (org.jfree.data.xy.OHLCDataset) dataset;         for (int series = 0; series < seriesCount; series++) {             int itemCount = dataset.getItemCount( series );             for (int item = 0; item < itemCount; item++) {                 double lvalue = ohlc.getLowValue( series, item );                 double uvalue = ohlc.getHighValue( series, item );                 if (!Double.isNaN( lvalue )) {                     minimum = Math.min( minimum, lvalue );                 }                 if (!Double.isNaN( uvalue )) {                     maximum = Math.max( maximum, uvalue );                 }             }         }     } else {         for (int series = 0; series < seriesCount; series++) {             int itemCount = dataset.getItemCount( series );             for (int item = 0; item < itemCount; item++) {                 double value = dataset.getYValue( series, item );                 if (!Double.isNaN( value )) {                     minimum = Math.min( minimum, value );                     maximum = Math.max( maximum, value );                 }             }         }     } }
SDL_354:680:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): if (includeInterval && dataset instanceof org.jfree.data.xy.OHLCDataset) {     org.jfree.data.xy.OHLCDataset ohlc = (org.jfree.data.xy.OHLCDataset) dataset;     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double lvalue = ohlc.getLowValue( series, item );             double uvalue = ohlc.getHighValue( series, item );             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );             }             if (!Double.isNaN( uvalue )) {                 maximum = Math.max( maximum, uvalue );             }         }     } } else {     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value = dataset.getYValue( series, item );             if (!Double.isNaN( value )) {                 minimum = Math.min( minimum, value );                 maximum = Math.max( maximum, value );             }         }     } }  =>  
SDL_355:668:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): int itemCount = dataset.getItemCount( series ); for (int item = 0; item < itemCount; item++) {     double lvalue = ixyd.getStartYValue( series, item );     double uvalue = ixyd.getEndYValue( series, item );     if (!Double.isNaN( lvalue )) {         minimum = Math.min( minimum, lvalue );     }     if (!Double.isNaN( uvalue )) {         maximum = Math.max( maximum, uvalue );     } }  =>   int itemCount = dataset.getItemCount( series );
SDL_356:679:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double lvalue = ixyd.getStartYValue( series, item );         double uvalue = ixyd.getEndYValue( series, item );         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );         }         if (!Double.isNaN( uvalue )) {             maximum = Math.max( maximum, uvalue );         }     } }  =>   for (int series = 0;; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double lvalue = ixyd.getStartYValue( series, item );         double uvalue = ixyd.getEndYValue( series, item );         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );         }         if (!Double.isNaN( uvalue )) {             maximum = Math.max( maximum, uvalue );         }     } }
SDL_357:679:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double lvalue = ixyd.getStartYValue( series, item );         double uvalue = ixyd.getEndYValue( series, item );         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );         }         if (!Double.isNaN( uvalue )) {             maximum = Math.max( maximum, uvalue );         }     } }  =>   for (int series = 0; series < seriesCount;) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double lvalue = ixyd.getStartYValue( series, item );         double uvalue = ixyd.getEndYValue( series, item );         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );         }         if (!Double.isNaN( uvalue )) {             maximum = Math.max( maximum, uvalue );         }     } }
SDL_358:674:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): double lvalue = ixyd.getStartYValue( series, item ); double uvalue = ixyd.getEndYValue( series, item ); if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue ); } if (!Double.isNaN( uvalue )) {     maximum = Math.max( maximum, uvalue ); }  =>   double lvalue = ixyd.getStartYValue( series, item ); double uvalue = ixyd.getEndYValue( series, item ); if (!Double.isNaN( uvalue )) {     maximum = Math.max( maximum, uvalue ); }
SDL_359:674:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): double lvalue = ixyd.getStartYValue( series, item ); double uvalue = ixyd.getEndYValue( series, item ); if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue ); } if (!Double.isNaN( uvalue )) {     maximum = Math.max( maximum, uvalue ); }  =>   double lvalue = ixyd.getStartYValue( series, item ); double uvalue = ixyd.getEndYValue( series, item ); if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue ); }
SDL_360:678:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): for (int item = 0; item < itemCount; item++) {     double lvalue = ixyd.getStartYValue( series, item );     double uvalue = ixyd.getEndYValue( series, item );     if (!Double.isNaN( lvalue )) {         minimum = Math.min( minimum, lvalue );     }     if (!Double.isNaN( uvalue )) {         maximum = Math.max( maximum, uvalue );     } }  =>   for (int item = 0;; item++) {     double lvalue = ixyd.getStartYValue( series, item );     double uvalue = ixyd.getEndYValue( series, item );     if (!Double.isNaN( lvalue )) {         minimum = Math.min( minimum, lvalue );     }     if (!Double.isNaN( uvalue )) {         maximum = Math.max( maximum, uvalue );     } }
SDL_361:678:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): for (int item = 0; item < itemCount; item++) {     double lvalue = ixyd.getStartYValue( series, item );     double uvalue = ixyd.getEndYValue( series, item );     if (!Double.isNaN( lvalue )) {         minimum = Math.min( minimum, lvalue );     }     if (!Double.isNaN( uvalue )) {         maximum = Math.max( maximum, uvalue );     } }  =>   for (int item = 0; item < itemCount;) {     double lvalue = ixyd.getStartYValue( series, item );     double uvalue = ixyd.getEndYValue( series, item );     if (!Double.isNaN( lvalue )) {         minimum = Math.min( minimum, lvalue );     }     if (!Double.isNaN( uvalue )) {         maximum = Math.max( maximum, uvalue );     } }
SDL_362:672:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): minimum = Math.min( minimum, lvalue );  =>  
SDL_363:674:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue ); }  =>   if (true) {     minimum = Math.min( minimum, lvalue ); }
SDL_364:675:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): maximum = Math.max( maximum, uvalue );  =>  
SDL_365:677:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): if (!Double.isNaN( uvalue )) {     maximum = Math.max( maximum, uvalue ); }  =>   if (true) {     maximum = Math.max( maximum, uvalue ); }
SDL_366:682:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): org.jfree.data.xy.OHLCDataset ohlc = (org.jfree.data.xy.OHLCDataset) dataset; for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double lvalue = ohlc.getLowValue( series, item );         double uvalue = ohlc.getHighValue( series, item );         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );         }         if (!Double.isNaN( uvalue )) {             maximum = Math.max( maximum, uvalue );         }     } }  =>   org.jfree.data.xy.OHLCDataset ohlc = (org.jfree.data.xy.OHLCDataset) dataset;
SDL_367:707:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): if (includeInterval && dataset instanceof org.jfree.data.xy.OHLCDataset) {     org.jfree.data.xy.OHLCDataset ohlc = (org.jfree.data.xy.OHLCDataset) dataset;     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double lvalue = ohlc.getLowValue( series, item );             double uvalue = ohlc.getHighValue( series, item );             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );             }             if (!Double.isNaN( uvalue )) {                 maximum = Math.max( maximum, uvalue );             }         }     } } else {     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value = dataset.getYValue( series, item );             if (!Double.isNaN( value )) {                 minimum = Math.min( minimum, value );                 maximum = Math.max( maximum, value );             }         }     } }  =>   if (true) {     org.jfree.data.xy.OHLCDataset ohlc = (org.jfree.data.xy.OHLCDataset) dataset;     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double lvalue = ohlc.getLowValue( series, item );             double uvalue = ohlc.getHighValue( series, item );             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );             }             if (!Double.isNaN( uvalue )) {                 maximum = Math.max( maximum, uvalue );             }         }     } } else {     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value = dataset.getYValue( series, item );             if (!Double.isNaN( value )) {                 minimum = Math.min( minimum, value );                 maximum = Math.max( maximum, value );             }         }     } }
SDL_368:696:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value = dataset.getYValue( series, item );         if (!Double.isNaN( value )) {             minimum = Math.min( minimum, value );             maximum = Math.max( maximum, value );         }     } }  =>  
SDL_369:684:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): int itemCount = dataset.getItemCount( series ); for (int item = 0; item < itemCount; item++) {     double lvalue = ohlc.getLowValue( series, item );     double uvalue = ohlc.getHighValue( series, item );     if (!Double.isNaN( lvalue )) {         minimum = Math.min( minimum, lvalue );     }     if (!Double.isNaN( uvalue )) {         maximum = Math.max( maximum, uvalue );     } }  =>   int itemCount = dataset.getItemCount( series );
SDL_370:695:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double lvalue = ohlc.getLowValue( series, item );         double uvalue = ohlc.getHighValue( series, item );         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );         }         if (!Double.isNaN( uvalue )) {             maximum = Math.max( maximum, uvalue );         }     } }  =>   for (int series = 0;; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double lvalue = ohlc.getLowValue( series, item );         double uvalue = ohlc.getHighValue( series, item );         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );         }         if (!Double.isNaN( uvalue )) {             maximum = Math.max( maximum, uvalue );         }     } }
SDL_371:695:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double lvalue = ohlc.getLowValue( series, item );         double uvalue = ohlc.getHighValue( series, item );         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );         }         if (!Double.isNaN( uvalue )) {             maximum = Math.max( maximum, uvalue );         }     } }  =>   for (int series = 0; series < seriesCount;) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double lvalue = ohlc.getLowValue( series, item );         double uvalue = ohlc.getHighValue( series, item );         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );         }         if (!Double.isNaN( uvalue )) {             maximum = Math.max( maximum, uvalue );         }     } }
SDL_372:690:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): double lvalue = ohlc.getLowValue( series, item ); double uvalue = ohlc.getHighValue( series, item ); if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue ); } if (!Double.isNaN( uvalue )) {     maximum = Math.max( maximum, uvalue ); }  =>   double lvalue = ohlc.getLowValue( series, item ); double uvalue = ohlc.getHighValue( series, item ); if (!Double.isNaN( uvalue )) {     maximum = Math.max( maximum, uvalue ); }
SDL_373:690:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): double lvalue = ohlc.getLowValue( series, item ); double uvalue = ohlc.getHighValue( series, item ); if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue ); } if (!Double.isNaN( uvalue )) {     maximum = Math.max( maximum, uvalue ); }  =>   double lvalue = ohlc.getLowValue( series, item ); double uvalue = ohlc.getHighValue( series, item ); if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue ); }
SDL_374:694:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): for (int item = 0; item < itemCount; item++) {     double lvalue = ohlc.getLowValue( series, item );     double uvalue = ohlc.getHighValue( series, item );     if (!Double.isNaN( lvalue )) {         minimum = Math.min( minimum, lvalue );     }     if (!Double.isNaN( uvalue )) {         maximum = Math.max( maximum, uvalue );     } }  =>   for (int item = 0;; item++) {     double lvalue = ohlc.getLowValue( series, item );     double uvalue = ohlc.getHighValue( series, item );     if (!Double.isNaN( lvalue )) {         minimum = Math.min( minimum, lvalue );     }     if (!Double.isNaN( uvalue )) {         maximum = Math.max( maximum, uvalue );     } }
SDL_375:694:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): for (int item = 0; item < itemCount; item++) {     double lvalue = ohlc.getLowValue( series, item );     double uvalue = ohlc.getHighValue( series, item );     if (!Double.isNaN( lvalue )) {         minimum = Math.min( minimum, lvalue );     }     if (!Double.isNaN( uvalue )) {         maximum = Math.max( maximum, uvalue );     } }  =>   for (int item = 0; item < itemCount;) {     double lvalue = ohlc.getLowValue( series, item );     double uvalue = ohlc.getHighValue( series, item );     if (!Double.isNaN( lvalue )) {         minimum = Math.min( minimum, lvalue );     }     if (!Double.isNaN( uvalue )) {         maximum = Math.max( maximum, uvalue );     } }
SDL_376:688:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): minimum = Math.min( minimum, lvalue );  =>  
SDL_377:690:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue ); }  =>   if (true) {     minimum = Math.min( minimum, lvalue ); }
SDL_378:691:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): maximum = Math.max( maximum, uvalue );  =>  
SDL_379:693:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): if (!Double.isNaN( uvalue )) {     maximum = Math.max( maximum, uvalue ); }  =>   if (true) {     maximum = Math.max( maximum, uvalue ); }
SDL_380:698:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): int itemCount = dataset.getItemCount( series ); for (int item = 0; item < itemCount; item++) {     double value = dataset.getYValue( series, item );     if (!Double.isNaN( value )) {         minimum = Math.min( minimum, value );         maximum = Math.max( maximum, value );     } }  =>   int itemCount = dataset.getItemCount( series );
SDL_381:706:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value = dataset.getYValue( series, item );         if (!Double.isNaN( value )) {             minimum = Math.min( minimum, value );             maximum = Math.max( maximum, value );         }     } }  =>   for (int series = 0;; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value = dataset.getYValue( series, item );         if (!Double.isNaN( value )) {             minimum = Math.min( minimum, value );             maximum = Math.max( maximum, value );         }     } }
SDL_382:706:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value = dataset.getYValue( series, item );         if (!Double.isNaN( value )) {             minimum = Math.min( minimum, value );             maximum = Math.max( maximum, value );         }     } }  =>   for (int series = 0; series < seriesCount;) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value = dataset.getYValue( series, item );         if (!Double.isNaN( value )) {             minimum = Math.min( minimum, value );             maximum = Math.max( maximum, value );         }     } }
SDL_383:700:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): double value = dataset.getYValue( series, item ); if (!Double.isNaN( value )) {     minimum = Math.min( minimum, value );     maximum = Math.max( maximum, value ); }  =>   double value = dataset.getYValue( series, item );
SDL_384:705:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): for (int item = 0; item < itemCount; item++) {     double value = dataset.getYValue( series, item );     if (!Double.isNaN( value )) {         minimum = Math.min( minimum, value );         maximum = Math.max( maximum, value );     } }  =>   for (int item = 0;; item++) {     double value = dataset.getYValue( series, item );     if (!Double.isNaN( value )) {         minimum = Math.min( minimum, value );         maximum = Math.max( maximum, value );     } }
SDL_385:705:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): for (int item = 0; item < itemCount; item++) {     double value = dataset.getYValue( series, item );     if (!Double.isNaN( value )) {         minimum = Math.min( minimum, value );         maximum = Math.max( maximum, value );     } }  =>   for (int item = 0; item < itemCount;) {     double value = dataset.getYValue( series, item );     if (!Double.isNaN( value )) {         minimum = Math.min( minimum, value );         maximum = Math.max( maximum, value );     } }
SDL_386:702:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): minimum = Math.min( minimum, value ); maximum = Math.max( maximum, value );  =>   maximum = Math.max( maximum, value );
SDL_387:702:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): minimum = Math.min( minimum, value ); maximum = Math.max( maximum, value );  =>   minimum = Math.min( minimum, value );
SDL_388:704:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): if (!Double.isNaN( value )) {     minimum = Math.min( minimum, value );     maximum = Math.max( maximum, value ); }  =>   if (true) {     minimum = Math.min( minimum, value );     maximum = Math.max( maximum, value ); }
SDL_389:713:org.jfree.data.Range_iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean): if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }  =>   if (true) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }
SDL_390:760:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (visibleSeriesKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'visibleSeriesKeys' argument.\" ); } double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double lvalue = ixyd.getStartXValue( series, item );             double uvalue = ixyd.getEndXValue( series, item );             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );             }             if (!Double.isNaN( uvalue )) {                 maximum = Math.max( maximum, uvalue );             }         }     } } else {     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double x = dataset.getXValue( series, item );             if (!Double.isNaN( x )) {                 minimum = Math.min( minimum, x );                 maximum = Math.max( maximum, x );             }         }     } } if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }  =>   if (visibleSeriesKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'visibleSeriesKeys' argument.\" ); } double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double lvalue = ixyd.getStartXValue( series, item );             double uvalue = ixyd.getEndXValue( series, item );             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );             }             if (!Double.isNaN( uvalue )) {                 maximum = Math.max( maximum, uvalue );             }         }     } } else {     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double x = dataset.getXValue( series, item );             if (!Double.isNaN( x )) {                 minimum = Math.min( minimum, x );                 maximum = Math.max( maximum, x );             }         }     } } if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }
SDL_391:760:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (visibleSeriesKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'visibleSeriesKeys' argument.\" ); } double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double lvalue = ixyd.getStartXValue( series, item );             double uvalue = ixyd.getEndXValue( series, item );             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );             }             if (!Double.isNaN( uvalue )) {                 maximum = Math.max( maximum, uvalue );             }         }     } } else {     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double x = dataset.getXValue( series, item );             if (!Double.isNaN( x )) {                 minimum = Math.min( minimum, x );                 maximum = Math.max( maximum, x );             }         }     } } if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double lvalue = ixyd.getStartXValue( series, item );             double uvalue = ixyd.getEndXValue( series, item );             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );             }             if (!Double.isNaN( uvalue )) {                 maximum = Math.max( maximum, uvalue );             }         }     } } else {     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double x = dataset.getXValue( series, item );             if (!Double.isNaN( x )) {                 minimum = Math.min( minimum, x );                 maximum = Math.max( maximum, x );             }         }     } } if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }
SDL_392:730:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (visibleSeriesKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'visibleSeriesKeys' argument.\" ); } double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double lvalue = ixyd.getStartXValue( series, item );             double uvalue = ixyd.getEndXValue( series, item );             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );             }             if (!Double.isNaN( uvalue )) {                 maximum = Math.max( maximum, uvalue );             }         }     } } else {     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double x = dataset.getXValue( series, item );             if (!Double.isNaN( x )) {                 minimum = Math.min( minimum, x );                 maximum = Math.max( maximum, x );             }         }     } } if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (visibleSeriesKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'visibleSeriesKeys' argument.\" ); } double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }
SDL_393:758:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (visibleSeriesKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'visibleSeriesKeys' argument.\" ); } double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double lvalue = ixyd.getStartXValue( series, item );             double uvalue = ixyd.getEndXValue( series, item );             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );             }             if (!Double.isNaN( uvalue )) {                 maximum = Math.max( maximum, uvalue );             }         }     } } else {     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double x = dataset.getXValue( series, item );             if (!Double.isNaN( x )) {                 minimum = Math.min( minimum, x );                 maximum = Math.max( maximum, x );             }         }     } } if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (visibleSeriesKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'visibleSeriesKeys' argument.\" ); } double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double lvalue = ixyd.getStartXValue( series, item );             double uvalue = ixyd.getEndXValue( series, item );             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );             }             if (!Double.isNaN( uvalue )) {                 maximum = Math.max( maximum, uvalue );             }         }     } } else {     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double x = dataset.getXValue( series, item );             if (!Double.isNaN( x )) {                 minimum = Math.min( minimum, x );                 maximum = Math.max( maximum, x );             }         }     } }
SDL_394:718:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_395:720:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_396:721:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): throw new java.lang.IllegalArgumentException( \"Null 'visibleSeriesKeys' argument.\" );  =>  
SDL_397:723:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): if (visibleSeriesKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'visibleSeriesKeys' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'visibleSeriesKeys' argument.\" ); }
SDL_398:728:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset; java.util.Iterator iterator = visibleSeriesKeys.iterator(); while (iterator.hasNext()) {     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();     int series = dataset.indexOf( seriesKey );     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double lvalue = ixyd.getStartXValue( series, item );         double uvalue = ixyd.getEndXValue( series, item );         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );         }         if (!Double.isNaN( uvalue )) {             maximum = Math.max( maximum, uvalue );         }     } }  =>   org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset; java.util.Iterator iterator = visibleSeriesKeys.iterator();
SDL_399:758:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double lvalue = ixyd.getStartXValue( series, item );             double uvalue = ixyd.getEndXValue( series, item );             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );             }             if (!Double.isNaN( uvalue )) {                 maximum = Math.max( maximum, uvalue );             }         }     } } else {     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double x = dataset.getXValue( series, item );             if (!Double.isNaN( x )) {                 minimum = Math.min( minimum, x );                 maximum = Math.max( maximum, x );             }         }     } }  =>   if (true) {     org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double lvalue = ixyd.getStartXValue( series, item );             double uvalue = ixyd.getEndXValue( series, item );             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );             }             if (!Double.isNaN( uvalue )) {                 maximum = Math.max( maximum, uvalue );             }         }     } } else {     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double x = dataset.getXValue( series, item );             if (!Double.isNaN( x )) {                 minimum = Math.min( minimum, x );                 maximum = Math.max( maximum, x );             }         }     } }
SDL_400:745:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): java.util.Iterator iterator = visibleSeriesKeys.iterator(); while (iterator.hasNext()) {     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();     int series = dataset.indexOf( seriesKey );     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double x = dataset.getXValue( series, item );         if (!Double.isNaN( x )) {             minimum = Math.min( minimum, x );             maximum = Math.max( maximum, x );         }     } }  =>   java.util.Iterator iterator = visibleSeriesKeys.iterator();
SDL_401:732:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next(); int series = dataset.indexOf( seriesKey ); int itemCount = dataset.getItemCount( series ); for (int item = 0; item < itemCount; item++) {     double lvalue = ixyd.getStartXValue( series, item );     double uvalue = ixyd.getEndXValue( series, item );     if (!Double.isNaN( lvalue )) {         minimum = Math.min( minimum, lvalue );     }     if (!Double.isNaN( uvalue )) {         maximum = Math.max( maximum, uvalue );     } }  =>   java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next(); int series = dataset.indexOf( seriesKey ); int itemCount = dataset.getItemCount( series );
SDL_402:743:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): while (iterator.hasNext()) {     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();     int series = dataset.indexOf( seriesKey );     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double lvalue = ixyd.getStartXValue( series, item );         double uvalue = ixyd.getEndXValue( series, item );         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );         }         if (!Double.isNaN( uvalue )) {             maximum = Math.max( maximum, uvalue );         }     } }  =>   while (true) {     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();     int series = dataset.indexOf( seriesKey );     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double lvalue = ixyd.getStartXValue( series, item );         double uvalue = ixyd.getEndXValue( series, item );         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );         }         if (!Double.isNaN( uvalue )) {             maximum = Math.max( maximum, uvalue );         }     } }
SDL_403:738:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): double lvalue = ixyd.getStartXValue( series, item ); double uvalue = ixyd.getEndXValue( series, item ); if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue ); } if (!Double.isNaN( uvalue )) {     maximum = Math.max( maximum, uvalue ); }  =>   double lvalue = ixyd.getStartXValue( series, item ); double uvalue = ixyd.getEndXValue( series, item ); if (!Double.isNaN( uvalue )) {     maximum = Math.max( maximum, uvalue ); }
SDL_404:738:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): double lvalue = ixyd.getStartXValue( series, item ); double uvalue = ixyd.getEndXValue( series, item ); if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue ); } if (!Double.isNaN( uvalue )) {     maximum = Math.max( maximum, uvalue ); }  =>   double lvalue = ixyd.getStartXValue( series, item ); double uvalue = ixyd.getEndXValue( series, item ); if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue ); }
SDL_405:742:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): for (int item = 0; item < itemCount; item++) {     double lvalue = ixyd.getStartXValue( series, item );     double uvalue = ixyd.getEndXValue( series, item );     if (!Double.isNaN( lvalue )) {         minimum = Math.min( minimum, lvalue );     }     if (!Double.isNaN( uvalue )) {         maximum = Math.max( maximum, uvalue );     } }  =>   for (int item = 0;; item++) {     double lvalue = ixyd.getStartXValue( series, item );     double uvalue = ixyd.getEndXValue( series, item );     if (!Double.isNaN( lvalue )) {         minimum = Math.min( minimum, lvalue );     }     if (!Double.isNaN( uvalue )) {         maximum = Math.max( maximum, uvalue );     } }
SDL_406:742:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): for (int item = 0; item < itemCount; item++) {     double lvalue = ixyd.getStartXValue( series, item );     double uvalue = ixyd.getEndXValue( series, item );     if (!Double.isNaN( lvalue )) {         minimum = Math.min( minimum, lvalue );     }     if (!Double.isNaN( uvalue )) {         maximum = Math.max( maximum, uvalue );     } }  =>   for (int item = 0; item < itemCount;) {     double lvalue = ixyd.getStartXValue( series, item );     double uvalue = ixyd.getEndXValue( series, item );     if (!Double.isNaN( lvalue )) {         minimum = Math.min( minimum, lvalue );     }     if (!Double.isNaN( uvalue )) {         maximum = Math.max( maximum, uvalue );     } }
SDL_407:736:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): minimum = Math.min( minimum, lvalue );  =>  
SDL_408:738:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue ); }  =>   if (true) {     minimum = Math.min( minimum, lvalue ); }
SDL_409:739:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): maximum = Math.max( maximum, uvalue );  =>  
SDL_410:741:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): if (!Double.isNaN( uvalue )) {     maximum = Math.max( maximum, uvalue ); }  =>   if (true) {     maximum = Math.max( maximum, uvalue ); }
SDL_411:749:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next(); int series = dataset.indexOf( seriesKey ); int itemCount = dataset.getItemCount( series ); for (int item = 0; item < itemCount; item++) {     double x = dataset.getXValue( series, item );     if (!Double.isNaN( x )) {         minimum = Math.min( minimum, x );         maximum = Math.max( maximum, x );     } }  =>   java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next(); int series = dataset.indexOf( seriesKey ); int itemCount = dataset.getItemCount( series );
SDL_412:757:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): while (iterator.hasNext()) {     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();     int series = dataset.indexOf( seriesKey );     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double x = dataset.getXValue( series, item );         if (!Double.isNaN( x )) {             minimum = Math.min( minimum, x );             maximum = Math.max( maximum, x );         }     } }  =>   while (true) {     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();     int series = dataset.indexOf( seriesKey );     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double x = dataset.getXValue( series, item );         if (!Double.isNaN( x )) {             minimum = Math.min( minimum, x );             maximum = Math.max( maximum, x );         }     } }
SDL_413:751:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): double x = dataset.getXValue( series, item ); if (!Double.isNaN( x )) {     minimum = Math.min( minimum, x );     maximum = Math.max( maximum, x ); }  =>   double x = dataset.getXValue( series, item );
SDL_414:756:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): for (int item = 0; item < itemCount; item++) {     double x = dataset.getXValue( series, item );     if (!Double.isNaN( x )) {         minimum = Math.min( minimum, x );         maximum = Math.max( maximum, x );     } }  =>   for (int item = 0;; item++) {     double x = dataset.getXValue( series, item );     if (!Double.isNaN( x )) {         minimum = Math.min( minimum, x );         maximum = Math.max( maximum, x );     } }
SDL_415:756:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): for (int item = 0; item < itemCount; item++) {     double x = dataset.getXValue( series, item );     if (!Double.isNaN( x )) {         minimum = Math.min( minimum, x );         maximum = Math.max( maximum, x );     } }  =>   for (int item = 0; item < itemCount;) {     double x = dataset.getXValue( series, item );     if (!Double.isNaN( x )) {         minimum = Math.min( minimum, x );         maximum = Math.max( maximum, x );     } }
SDL_416:753:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): minimum = Math.min( minimum, x ); maximum = Math.max( maximum, x );  =>   maximum = Math.max( maximum, x );
SDL_417:753:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): minimum = Math.min( minimum, x ); maximum = Math.max( maximum, x );  =>   minimum = Math.min( minimum, x );
SDL_418:755:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): if (!Double.isNaN( x )) {     minimum = Math.min( minimum, x );     maximum = Math.max( maximum, x ); }  =>   if (true) {     minimum = Math.min( minimum, x );     maximum = Math.max( maximum, x ); }
SDL_419:763:org.jfree.data.Range_iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean): if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }  =>   if (true) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }
SDL_420:865:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (visibleSeriesKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'visibleSeriesKeys' argument.\" ); } if (xRange == null) {     throw new java.lang.IllegalArgumentException( \"Null 'xRange' argument\" ); } double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; if (includeInterval && dataset instanceof org.jfree.data.xy.OHLCDataset) {     org.jfree.data.xy.OHLCDataset ohlc = (org.jfree.data.xy.OHLCDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double x = ohlc.getXValue( series, item );             if (xRange.contains( x )) {                 double lvalue = ohlc.getLowValue( series, item );                 double uvalue = ohlc.getHighValue( series, item );                 if (!Double.isNaN( lvalue )) {                     minimum = Math.min( minimum, lvalue );                 }                 if (!Double.isNaN( uvalue )) {                     maximum = Math.max( maximum, uvalue );                 }             }         }     } } else {     if (includeInterval && dataset instanceof org.jfree.data.statistics.BoxAndWhiskerXYDataset) {         org.jfree.data.statistics.BoxAndWhiskerXYDataset bx = (org.jfree.data.statistics.BoxAndWhiskerXYDataset) dataset;         java.util.Iterator iterator = visibleSeriesKeys.iterator();         while (iterator.hasNext()) {             java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();             int series = dataset.indexOf( seriesKey );             int itemCount = dataset.getItemCount( series );             for (int item = 0; item < itemCount; item++) {                 double x = bx.getXValue( series, item );                 if (xRange.contains( x )) {                     java.lang.Number lvalue = bx.getMinRegularValue( series, item );                     java.lang.Number uvalue = bx.getMaxRegularValue( series, item );                     if (lvalue != null) {                         minimum = Math.min( minimum, lvalue.doubleValue() );                     }                     if (uvalue != null) {                         maximum = Math.max( maximum, uvalue.doubleValue() );                     }                 }             }         }     } else {         if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset;             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.indexOf( seriesKey );                 int itemCount = dataset.getItemCount( series );                 for (int item = 0; item < itemCount; item++) {                     double x = ixyd.getXValue( series, item );                     if (xRange.contains( x )) {                         double lvalue = ixyd.getStartYValue( series, item );                         double uvalue = ixyd.getEndYValue( series, item );                         if (!Double.isNaN( lvalue )) {                             minimum = Math.min( minimum, lvalue );                         }                         if (!Double.isNaN( uvalue )) {                             maximum = Math.max( maximum, uvalue );                         }                     }                 }             }         } else {             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.indexOf( seriesKey );                 int itemCount = dataset.getItemCount( series );                 for (int item = 0; item < itemCount; item++) {                     double x = dataset.getXValue( series, item );                     double y = dataset.getYValue( series, item );                     if (xRange.contains( x )) {                         if (!Double.isNaN( y )) {                             minimum = Math.min( minimum, y );                             maximum = Math.max( maximum, y );                         }                     }                 }             }         }     } } if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }  =>   if (visibleSeriesKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'visibleSeriesKeys' argument.\" ); } if (xRange == null) {     throw new java.lang.IllegalArgumentException( \"Null 'xRange' argument\" ); } double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; if (includeInterval && dataset instanceof org.jfree.data.xy.OHLCDataset) {     org.jfree.data.xy.OHLCDataset ohlc = (org.jfree.data.xy.OHLCDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double x = ohlc.getXValue( series, item );             if (xRange.contains( x )) {                 double lvalue = ohlc.getLowValue( series, item );                 double uvalue = ohlc.getHighValue( series, item );                 if (!Double.isNaN( lvalue )) {                     minimum = Math.min( minimum, lvalue );                 }                 if (!Double.isNaN( uvalue )) {                     maximum = Math.max( maximum, uvalue );                 }             }         }     } } else {     if (includeInterval && dataset instanceof org.jfree.data.statistics.BoxAndWhiskerXYDataset) {         org.jfree.data.statistics.BoxAndWhiskerXYDataset bx = (org.jfree.data.statistics.BoxAndWhiskerXYDataset) dataset;         java.util.Iterator iterator = visibleSeriesKeys.iterator();         while (iterator.hasNext()) {             java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();             int series = dataset.indexOf( seriesKey );             int itemCount = dataset.getItemCount( series );             for (int item = 0; item < itemCount; item++) {                 double x = bx.getXValue( series, item );                 if (xRange.contains( x )) {                     java.lang.Number lvalue = bx.getMinRegularValue( series, item );                     java.lang.Number uvalue = bx.getMaxRegularValue( series, item );                     if (lvalue != null) {                         minimum = Math.min( minimum, lvalue.doubleValue() );                     }                     if (uvalue != null) {                         maximum = Math.max( maximum, uvalue.doubleValue() );                     }                 }             }         }     } else {         if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset;             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.indexOf( seriesKey );                 int itemCount = dataset.getItemCount( series );                 for (int item = 0; item < itemCount; item++) {                     double x = ixyd.getXValue( series, item );                     if (xRange.contains( x )) {                         double lvalue = ixyd.getStartYValue( series, item );                         double uvalue = ixyd.getEndYValue( series, item );                         if (!Double.isNaN( lvalue )) {                             minimum = Math.min( minimum, lvalue );                         }                         if (!Double.isNaN( uvalue )) {                             maximum = Math.max( maximum, uvalue );                         }                     }                 }             }         } else {             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.indexOf( seriesKey );                 int itemCount = dataset.getItemCount( series );                 for (int item = 0; item < itemCount; item++) {                     double x = dataset.getXValue( series, item );                     double y = dataset.getYValue( series, item );                     if (xRange.contains( x )) {                         if (!Double.isNaN( y )) {                             minimum = Math.min( minimum, y );                             maximum = Math.max( maximum, y );                         }                     }                 }             }         }     } } if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }
SDL_421:865:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (visibleSeriesKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'visibleSeriesKeys' argument.\" ); } if (xRange == null) {     throw new java.lang.IllegalArgumentException( \"Null 'xRange' argument\" ); } double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; if (includeInterval && dataset instanceof org.jfree.data.xy.OHLCDataset) {     org.jfree.data.xy.OHLCDataset ohlc = (org.jfree.data.xy.OHLCDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double x = ohlc.getXValue( series, item );             if (xRange.contains( x )) {                 double lvalue = ohlc.getLowValue( series, item );                 double uvalue = ohlc.getHighValue( series, item );                 if (!Double.isNaN( lvalue )) {                     minimum = Math.min( minimum, lvalue );                 }                 if (!Double.isNaN( uvalue )) {                     maximum = Math.max( maximum, uvalue );                 }             }         }     } } else {     if (includeInterval && dataset instanceof org.jfree.data.statistics.BoxAndWhiskerXYDataset) {         org.jfree.data.statistics.BoxAndWhiskerXYDataset bx = (org.jfree.data.statistics.BoxAndWhiskerXYDataset) dataset;         java.util.Iterator iterator = visibleSeriesKeys.iterator();         while (iterator.hasNext()) {             java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();             int series = dataset.indexOf( seriesKey );             int itemCount = dataset.getItemCount( series );             for (int item = 0; item < itemCount; item++) {                 double x = bx.getXValue( series, item );                 if (xRange.contains( x )) {                     java.lang.Number lvalue = bx.getMinRegularValue( series, item );                     java.lang.Number uvalue = bx.getMaxRegularValue( series, item );                     if (lvalue != null) {                         minimum = Math.min( minimum, lvalue.doubleValue() );                     }                     if (uvalue != null) {                         maximum = Math.max( maximum, uvalue.doubleValue() );                     }                 }             }         }     } else {         if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset;             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.indexOf( seriesKey );                 int itemCount = dataset.getItemCount( series );                 for (int item = 0; item < itemCount; item++) {                     double x = ixyd.getXValue( series, item );                     if (xRange.contains( x )) {                         double lvalue = ixyd.getStartYValue( series, item );                         double uvalue = ixyd.getEndYValue( series, item );                         if (!Double.isNaN( lvalue )) {                             minimum = Math.min( minimum, lvalue );                         }                         if (!Double.isNaN( uvalue )) {                             maximum = Math.max( maximum, uvalue );                         }                     }                 }             }         } else {             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.indexOf( seriesKey );                 int itemCount = dataset.getItemCount( series );                 for (int item = 0; item < itemCount; item++) {                     double x = dataset.getXValue( series, item );                     double y = dataset.getYValue( series, item );                     if (xRange.contains( x )) {                         if (!Double.isNaN( y )) {                             minimum = Math.min( minimum, y );                             maximum = Math.max( maximum, y );                         }                     }                 }             }         }     } } if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (xRange == null) {     throw new java.lang.IllegalArgumentException( \"Null 'xRange' argument\" ); } double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; if (includeInterval && dataset instanceof org.jfree.data.xy.OHLCDataset) {     org.jfree.data.xy.OHLCDataset ohlc = (org.jfree.data.xy.OHLCDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double x = ohlc.getXValue( series, item );             if (xRange.contains( x )) {                 double lvalue = ohlc.getLowValue( series, item );                 double uvalue = ohlc.getHighValue( series, item );                 if (!Double.isNaN( lvalue )) {                     minimum = Math.min( minimum, lvalue );                 }                 if (!Double.isNaN( uvalue )) {                     maximum = Math.max( maximum, uvalue );                 }             }         }     } } else {     if (includeInterval && dataset instanceof org.jfree.data.statistics.BoxAndWhiskerXYDataset) {         org.jfree.data.statistics.BoxAndWhiskerXYDataset bx = (org.jfree.data.statistics.BoxAndWhiskerXYDataset) dataset;         java.util.Iterator iterator = visibleSeriesKeys.iterator();         while (iterator.hasNext()) {             java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();             int series = dataset.indexOf( seriesKey );             int itemCount = dataset.getItemCount( series );             for (int item = 0; item < itemCount; item++) {                 double x = bx.getXValue( series, item );                 if (xRange.contains( x )) {                     java.lang.Number lvalue = bx.getMinRegularValue( series, item );                     java.lang.Number uvalue = bx.getMaxRegularValue( series, item );                     if (lvalue != null) {                         minimum = Math.min( minimum, lvalue.doubleValue() );                     }                     if (uvalue != null) {                         maximum = Math.max( maximum, uvalue.doubleValue() );                     }                 }             }         }     } else {         if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset;             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.indexOf( seriesKey );                 int itemCount = dataset.getItemCount( series );                 for (int item = 0; item < itemCount; item++) {                     double x = ixyd.getXValue( series, item );                     if (xRange.contains( x )) {                         double lvalue = ixyd.getStartYValue( series, item );                         double uvalue = ixyd.getEndYValue( series, item );                         if (!Double.isNaN( lvalue )) {                             minimum = Math.min( minimum, lvalue );                         }                         if (!Double.isNaN( uvalue )) {                             maximum = Math.max( maximum, uvalue );                         }                     }                 }             }         } else {             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.indexOf( seriesKey );                 int itemCount = dataset.getItemCount( series );                 for (int item = 0; item < itemCount; item++) {                     double x = dataset.getXValue( series, item );                     double y = dataset.getYValue( series, item );                     if (xRange.contains( x )) {                         if (!Double.isNaN( y )) {                             minimum = Math.min( minimum, y );                             maximum = Math.max( maximum, y );                         }                     }                 }             }         }     } } if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }
SDL_422:865:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (visibleSeriesKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'visibleSeriesKeys' argument.\" ); } if (xRange == null) {     throw new java.lang.IllegalArgumentException( \"Null 'xRange' argument\" ); } double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; if (includeInterval && dataset instanceof org.jfree.data.xy.OHLCDataset) {     org.jfree.data.xy.OHLCDataset ohlc = (org.jfree.data.xy.OHLCDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double x = ohlc.getXValue( series, item );             if (xRange.contains( x )) {                 double lvalue = ohlc.getLowValue( series, item );                 double uvalue = ohlc.getHighValue( series, item );                 if (!Double.isNaN( lvalue )) {                     minimum = Math.min( minimum, lvalue );                 }                 if (!Double.isNaN( uvalue )) {                     maximum = Math.max( maximum, uvalue );                 }             }         }     } } else {     if (includeInterval && dataset instanceof org.jfree.data.statistics.BoxAndWhiskerXYDataset) {         org.jfree.data.statistics.BoxAndWhiskerXYDataset bx = (org.jfree.data.statistics.BoxAndWhiskerXYDataset) dataset;         java.util.Iterator iterator = visibleSeriesKeys.iterator();         while (iterator.hasNext()) {             java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();             int series = dataset.indexOf( seriesKey );             int itemCount = dataset.getItemCount( series );             for (int item = 0; item < itemCount; item++) {                 double x = bx.getXValue( series, item );                 if (xRange.contains( x )) {                     java.lang.Number lvalue = bx.getMinRegularValue( series, item );                     java.lang.Number uvalue = bx.getMaxRegularValue( series, item );                     if (lvalue != null) {                         minimum = Math.min( minimum, lvalue.doubleValue() );                     }                     if (uvalue != null) {                         maximum = Math.max( maximum, uvalue.doubleValue() );                     }                 }             }         }     } else {         if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset;             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.indexOf( seriesKey );                 int itemCount = dataset.getItemCount( series );                 for (int item = 0; item < itemCount; item++) {                     double x = ixyd.getXValue( series, item );                     if (xRange.contains( x )) {                         double lvalue = ixyd.getStartYValue( series, item );                         double uvalue = ixyd.getEndYValue( series, item );                         if (!Double.isNaN( lvalue )) {                             minimum = Math.min( minimum, lvalue );                         }                         if (!Double.isNaN( uvalue )) {                             maximum = Math.max( maximum, uvalue );                         }                     }                 }             }         } else {             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.indexOf( seriesKey );                 int itemCount = dataset.getItemCount( series );                 for (int item = 0; item < itemCount; item++) {                     double x = dataset.getXValue( series, item );                     double y = dataset.getYValue( series, item );                     if (xRange.contains( x )) {                         if (!Double.isNaN( y )) {                             minimum = Math.min( minimum, y );                             maximum = Math.max( maximum, y );                         }                     }                 }             }         }     } } if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (visibleSeriesKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'visibleSeriesKeys' argument.\" ); } double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; if (includeInterval && dataset instanceof org.jfree.data.xy.OHLCDataset) {     org.jfree.data.xy.OHLCDataset ohlc = (org.jfree.data.xy.OHLCDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double x = ohlc.getXValue( series, item );             if (xRange.contains( x )) {                 double lvalue = ohlc.getLowValue( series, item );                 double uvalue = ohlc.getHighValue( series, item );                 if (!Double.isNaN( lvalue )) {                     minimum = Math.min( minimum, lvalue );                 }                 if (!Double.isNaN( uvalue )) {                     maximum = Math.max( maximum, uvalue );                 }             }         }     } } else {     if (includeInterval && dataset instanceof org.jfree.data.statistics.BoxAndWhiskerXYDataset) {         org.jfree.data.statistics.BoxAndWhiskerXYDataset bx = (org.jfree.data.statistics.BoxAndWhiskerXYDataset) dataset;         java.util.Iterator iterator = visibleSeriesKeys.iterator();         while (iterator.hasNext()) {             java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();             int series = dataset.indexOf( seriesKey );             int itemCount = dataset.getItemCount( series );             for (int item = 0; item < itemCount; item++) {                 double x = bx.getXValue( series, item );                 if (xRange.contains( x )) {                     java.lang.Number lvalue = bx.getMinRegularValue( series, item );                     java.lang.Number uvalue = bx.getMaxRegularValue( series, item );                     if (lvalue != null) {                         minimum = Math.min( minimum, lvalue.doubleValue() );                     }                     if (uvalue != null) {                         maximum = Math.max( maximum, uvalue.doubleValue() );                     }                 }             }         }     } else {         if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset;             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.indexOf( seriesKey );                 int itemCount = dataset.getItemCount( series );                 for (int item = 0; item < itemCount; item++) {                     double x = ixyd.getXValue( series, item );                     if (xRange.contains( x )) {                         double lvalue = ixyd.getStartYValue( series, item );                         double uvalue = ixyd.getEndYValue( series, item );                         if (!Double.isNaN( lvalue )) {                             minimum = Math.min( minimum, lvalue );                         }                         if (!Double.isNaN( uvalue )) {                             maximum = Math.max( maximum, uvalue );                         }                     }                 }             }         } else {             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.indexOf( seriesKey );                 int itemCount = dataset.getItemCount( series );                 for (int item = 0; item < itemCount; item++) {                     double x = dataset.getXValue( series, item );                     double y = dataset.getYValue( series, item );                     if (xRange.contains( x )) {                         if (!Double.isNaN( y )) {                             minimum = Math.min( minimum, y );                             maximum = Math.max( maximum, y );                         }                     }                 }             }         }     } } if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }
SDL_423:783:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (visibleSeriesKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'visibleSeriesKeys' argument.\" ); } if (xRange == null) {     throw new java.lang.IllegalArgumentException( \"Null 'xRange' argument\" ); } double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; if (includeInterval && dataset instanceof org.jfree.data.xy.OHLCDataset) {     org.jfree.data.xy.OHLCDataset ohlc = (org.jfree.data.xy.OHLCDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double x = ohlc.getXValue( series, item );             if (xRange.contains( x )) {                 double lvalue = ohlc.getLowValue( series, item );                 double uvalue = ohlc.getHighValue( series, item );                 if (!Double.isNaN( lvalue )) {                     minimum = Math.min( minimum, lvalue );                 }                 if (!Double.isNaN( uvalue )) {                     maximum = Math.max( maximum, uvalue );                 }             }         }     } } else {     if (includeInterval && dataset instanceof org.jfree.data.statistics.BoxAndWhiskerXYDataset) {         org.jfree.data.statistics.BoxAndWhiskerXYDataset bx = (org.jfree.data.statistics.BoxAndWhiskerXYDataset) dataset;         java.util.Iterator iterator = visibleSeriesKeys.iterator();         while (iterator.hasNext()) {             java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();             int series = dataset.indexOf( seriesKey );             int itemCount = dataset.getItemCount( series );             for (int item = 0; item < itemCount; item++) {                 double x = bx.getXValue( series, item );                 if (xRange.contains( x )) {                     java.lang.Number lvalue = bx.getMinRegularValue( series, item );                     java.lang.Number uvalue = bx.getMaxRegularValue( series, item );                     if (lvalue != null) {                         minimum = Math.min( minimum, lvalue.doubleValue() );                     }                     if (uvalue != null) {                         maximum = Math.max( maximum, uvalue.doubleValue() );                     }                 }             }         }     } else {         if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset;             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.indexOf( seriesKey );                 int itemCount = dataset.getItemCount( series );                 for (int item = 0; item < itemCount; item++) {                     double x = ixyd.getXValue( series, item );                     if (xRange.contains( x )) {                         double lvalue = ixyd.getStartYValue( series, item );                         double uvalue = ixyd.getEndYValue( series, item );                         if (!Double.isNaN( lvalue )) {                             minimum = Math.min( minimum, lvalue );                         }                         if (!Double.isNaN( uvalue )) {                             maximum = Math.max( maximum, uvalue );                         }                     }                 }             }         } else {             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.indexOf( seriesKey );                 int itemCount = dataset.getItemCount( series );                 for (int item = 0; item < itemCount; item++) {                     double x = dataset.getXValue( series, item );                     double y = dataset.getYValue( series, item );                     if (xRange.contains( x )) {                         if (!Double.isNaN( y )) {                             minimum = Math.min( minimum, y );                             maximum = Math.max( maximum, y );                         }                     }                 }             }         }     } } if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (visibleSeriesKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'visibleSeriesKeys' argument.\" ); } if (xRange == null) {     throw new java.lang.IllegalArgumentException( \"Null 'xRange' argument\" ); } double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }
SDL_424:863:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (visibleSeriesKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'visibleSeriesKeys' argument.\" ); } if (xRange == null) {     throw new java.lang.IllegalArgumentException( \"Null 'xRange' argument\" ); } double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; if (includeInterval && dataset instanceof org.jfree.data.xy.OHLCDataset) {     org.jfree.data.xy.OHLCDataset ohlc = (org.jfree.data.xy.OHLCDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double x = ohlc.getXValue( series, item );             if (xRange.contains( x )) {                 double lvalue = ohlc.getLowValue( series, item );                 double uvalue = ohlc.getHighValue( series, item );                 if (!Double.isNaN( lvalue )) {                     minimum = Math.min( minimum, lvalue );                 }                 if (!Double.isNaN( uvalue )) {                     maximum = Math.max( maximum, uvalue );                 }             }         }     } } else {     if (includeInterval && dataset instanceof org.jfree.data.statistics.BoxAndWhiskerXYDataset) {         org.jfree.data.statistics.BoxAndWhiskerXYDataset bx = (org.jfree.data.statistics.BoxAndWhiskerXYDataset) dataset;         java.util.Iterator iterator = visibleSeriesKeys.iterator();         while (iterator.hasNext()) {             java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();             int series = dataset.indexOf( seriesKey );             int itemCount = dataset.getItemCount( series );             for (int item = 0; item < itemCount; item++) {                 double x = bx.getXValue( series, item );                 if (xRange.contains( x )) {                     java.lang.Number lvalue = bx.getMinRegularValue( series, item );                     java.lang.Number uvalue = bx.getMaxRegularValue( series, item );                     if (lvalue != null) {                         minimum = Math.min( minimum, lvalue.doubleValue() );                     }                     if (uvalue != null) {                         maximum = Math.max( maximum, uvalue.doubleValue() );                     }                 }             }         }     } else {         if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset;             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.indexOf( seriesKey );                 int itemCount = dataset.getItemCount( series );                 for (int item = 0; item < itemCount; item++) {                     double x = ixyd.getXValue( series, item );                     if (xRange.contains( x )) {                         double lvalue = ixyd.getStartYValue( series, item );                         double uvalue = ixyd.getEndYValue( series, item );                         if (!Double.isNaN( lvalue )) {                             minimum = Math.min( minimum, lvalue );                         }                         if (!Double.isNaN( uvalue )) {                             maximum = Math.max( maximum, uvalue );                         }                     }                 }             }         } else {             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.indexOf( seriesKey );                 int itemCount = dataset.getItemCount( series );                 for (int item = 0; item < itemCount; item++) {                     double x = dataset.getXValue( series, item );                     double y = dataset.getYValue( series, item );                     if (xRange.contains( x )) {                         if (!Double.isNaN( y )) {                             minimum = Math.min( minimum, y );                             maximum = Math.max( maximum, y );                         }                     }                 }             }         }     } } if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (visibleSeriesKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'visibleSeriesKeys' argument.\" ); } if (xRange == null) {     throw new java.lang.IllegalArgumentException( \"Null 'xRange' argument\" ); } double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; if (includeInterval && dataset instanceof org.jfree.data.xy.OHLCDataset) {     org.jfree.data.xy.OHLCDataset ohlc = (org.jfree.data.xy.OHLCDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double x = ohlc.getXValue( series, item );             if (xRange.contains( x )) {                 double lvalue = ohlc.getLowValue( series, item );                 double uvalue = ohlc.getHighValue( series, item );                 if (!Double.isNaN( lvalue )) {                     minimum = Math.min( minimum, lvalue );                 }                 if (!Double.isNaN( uvalue )) {                     maximum = Math.max( maximum, uvalue );                 }             }         }     } } else {     if (includeInterval && dataset instanceof org.jfree.data.statistics.BoxAndWhiskerXYDataset) {         org.jfree.data.statistics.BoxAndWhiskerXYDataset bx = (org.jfree.data.statistics.BoxAndWhiskerXYDataset) dataset;         java.util.Iterator iterator = visibleSeriesKeys.iterator();         while (iterator.hasNext()) {             java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();             int series = dataset.indexOf( seriesKey );             int itemCount = dataset.getItemCount( series );             for (int item = 0; item < itemCount; item++) {                 double x = bx.getXValue( series, item );                 if (xRange.contains( x )) {                     java.lang.Number lvalue = bx.getMinRegularValue( series, item );                     java.lang.Number uvalue = bx.getMaxRegularValue( series, item );                     if (lvalue != null) {                         minimum = Math.min( minimum, lvalue.doubleValue() );                     }                     if (uvalue != null) {                         maximum = Math.max( maximum, uvalue.doubleValue() );                     }                 }             }         }     } else {         if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset;             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.indexOf( seriesKey );                 int itemCount = dataset.getItemCount( series );                 for (int item = 0; item < itemCount; item++) {                     double x = ixyd.getXValue( series, item );                     if (xRange.contains( x )) {                         double lvalue = ixyd.getStartYValue( series, item );                         double uvalue = ixyd.getEndYValue( series, item );                         if (!Double.isNaN( lvalue )) {                             minimum = Math.min( minimum, lvalue );                         }                         if (!Double.isNaN( uvalue )) {                             maximum = Math.max( maximum, uvalue );                         }                     }                 }             }         } else {             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.indexOf( seriesKey );                 int itemCount = dataset.getItemCount( series );                 for (int item = 0; item < itemCount; item++) {                     double x = dataset.getXValue( series, item );                     double y = dataset.getYValue( series, item );                     if (xRange.contains( x )) {                         if (!Double.isNaN( y )) {                             minimum = Math.min( minimum, y );                             maximum = Math.max( maximum, y );                         }                     }                 }             }         }     } }
SDL_425:768:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_426:770:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_427:771:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): throw new java.lang.IllegalArgumentException( \"Null 'visibleSeriesKeys' argument.\" );  =>  
SDL_428:773:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): if (visibleSeriesKeys == null) {     throw new java.lang.IllegalArgumentException( \"Null 'visibleSeriesKeys' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'visibleSeriesKeys' argument.\" ); }
SDL_429:774:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): throw new java.lang.IllegalArgumentException( \"Null 'xRange' argument\" );  =>  
SDL_430:776:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): if (xRange == null) {     throw new java.lang.IllegalArgumentException( \"Null 'xRange' argument\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'xRange' argument\" ); }
SDL_431:781:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): org.jfree.data.xy.OHLCDataset ohlc = (org.jfree.data.xy.OHLCDataset) dataset; java.util.Iterator iterator = visibleSeriesKeys.iterator(); while (iterator.hasNext()) {     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();     int series = dataset.indexOf( seriesKey );     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double x = ohlc.getXValue( series, item );         if (xRange.contains( x )) {             double lvalue = ohlc.getLowValue( series, item );             double uvalue = ohlc.getHighValue( series, item );             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );             }             if (!Double.isNaN( uvalue )) {                 maximum = Math.max( maximum, uvalue );             }         }     } }  =>   org.jfree.data.xy.OHLCDataset ohlc = (org.jfree.data.xy.OHLCDataset) dataset; java.util.Iterator iterator = visibleSeriesKeys.iterator();
SDL_432:863:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): if (includeInterval && dataset instanceof org.jfree.data.xy.OHLCDataset) {     org.jfree.data.xy.OHLCDataset ohlc = (org.jfree.data.xy.OHLCDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double x = ohlc.getXValue( series, item );             if (xRange.contains( x )) {                 double lvalue = ohlc.getLowValue( series, item );                 double uvalue = ohlc.getHighValue( series, item );                 if (!Double.isNaN( lvalue )) {                     minimum = Math.min( minimum, lvalue );                 }                 if (!Double.isNaN( uvalue )) {                     maximum = Math.max( maximum, uvalue );                 }             }         }     } } else {     if (includeInterval && dataset instanceof org.jfree.data.statistics.BoxAndWhiskerXYDataset) {         org.jfree.data.statistics.BoxAndWhiskerXYDataset bx = (org.jfree.data.statistics.BoxAndWhiskerXYDataset) dataset;         java.util.Iterator iterator = visibleSeriesKeys.iterator();         while (iterator.hasNext()) {             java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();             int series = dataset.indexOf( seriesKey );             int itemCount = dataset.getItemCount( series );             for (int item = 0; item < itemCount; item++) {                 double x = bx.getXValue( series, item );                 if (xRange.contains( x )) {                     java.lang.Number lvalue = bx.getMinRegularValue( series, item );                     java.lang.Number uvalue = bx.getMaxRegularValue( series, item );                     if (lvalue != null) {                         minimum = Math.min( minimum, lvalue.doubleValue() );                     }                     if (uvalue != null) {                         maximum = Math.max( maximum, uvalue.doubleValue() );                     }                 }             }         }     } else {         if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset;             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.indexOf( seriesKey );                 int itemCount = dataset.getItemCount( series );                 for (int item = 0; item < itemCount; item++) {                     double x = ixyd.getXValue( series, item );                     if (xRange.contains( x )) {                         double lvalue = ixyd.getStartYValue( series, item );                         double uvalue = ixyd.getEndYValue( series, item );                         if (!Double.isNaN( lvalue )) {                             minimum = Math.min( minimum, lvalue );                         }                         if (!Double.isNaN( uvalue )) {                             maximum = Math.max( maximum, uvalue );                         }                     }                 }             }         } else {             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.indexOf( seriesKey );                 int itemCount = dataset.getItemCount( series );                 for (int item = 0; item < itemCount; item++) {                     double x = dataset.getXValue( series, item );                     double y = dataset.getYValue( series, item );                     if (xRange.contains( x )) {                         if (!Double.isNaN( y )) {                             minimum = Math.min( minimum, y );                             maximum = Math.max( maximum, y );                         }                     }                 }             }         }     } }  =>   if (true) {     org.jfree.data.xy.OHLCDataset ohlc = (org.jfree.data.xy.OHLCDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double x = ohlc.getXValue( series, item );             if (xRange.contains( x )) {                 double lvalue = ohlc.getLowValue( series, item );                 double uvalue = ohlc.getHighValue( series, item );                 if (!Double.isNaN( lvalue )) {                     minimum = Math.min( minimum, lvalue );                 }                 if (!Double.isNaN( uvalue )) {                     maximum = Math.max( maximum, uvalue );                 }             }         }     } } else {     if (includeInterval && dataset instanceof org.jfree.data.statistics.BoxAndWhiskerXYDataset) {         org.jfree.data.statistics.BoxAndWhiskerXYDataset bx = (org.jfree.data.statistics.BoxAndWhiskerXYDataset) dataset;         java.util.Iterator iterator = visibleSeriesKeys.iterator();         while (iterator.hasNext()) {             java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();             int series = dataset.indexOf( seriesKey );             int itemCount = dataset.getItemCount( series );             for (int item = 0; item < itemCount; item++) {                 double x = bx.getXValue( series, item );                 if (xRange.contains( x )) {                     java.lang.Number lvalue = bx.getMinRegularValue( series, item );                     java.lang.Number uvalue = bx.getMaxRegularValue( series, item );                     if (lvalue != null) {                         minimum = Math.min( minimum, lvalue.doubleValue() );                     }                     if (uvalue != null) {                         maximum = Math.max( maximum, uvalue.doubleValue() );                     }                 }             }         }     } else {         if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset;             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.indexOf( seriesKey );                 int itemCount = dataset.getItemCount( series );                 for (int item = 0; item < itemCount; item++) {                     double x = ixyd.getXValue( series, item );                     if (xRange.contains( x )) {                         double lvalue = ixyd.getStartYValue( series, item );                         double uvalue = ixyd.getEndYValue( series, item );                         if (!Double.isNaN( lvalue )) {                             minimum = Math.min( minimum, lvalue );                         }                         if (!Double.isNaN( uvalue )) {                             maximum = Math.max( maximum, uvalue );                         }                     }                 }             }         } else {             java.util.Iterator iterator = visibleSeriesKeys.iterator();             while (iterator.hasNext()) {                 java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();                 int series = dataset.indexOf( seriesKey );                 int itemCount = dataset.getItemCount( series );                 for (int item = 0; item < itemCount; item++) {                     double x = dataset.getXValue( series, item );                     double y = dataset.getYValue( series, item );                     if (xRange.contains( x )) {                         if (!Double.isNaN( y )) {                             minimum = Math.min( minimum, y );                             maximum = Math.max( maximum, y );                         }                     }                 }             }         }     } }
SDL_433:800:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): if (includeInterval && dataset instanceof org.jfree.data.statistics.BoxAndWhiskerXYDataset) {     org.jfree.data.statistics.BoxAndWhiskerXYDataset bx = (org.jfree.data.statistics.BoxAndWhiskerXYDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double x = bx.getXValue( series, item );             if (xRange.contains( x )) {                 java.lang.Number lvalue = bx.getMinRegularValue( series, item );                 java.lang.Number uvalue = bx.getMaxRegularValue( series, item );                 if (lvalue != null) {                     minimum = Math.min( minimum, lvalue.doubleValue() );                 }                 if (uvalue != null) {                     maximum = Math.max( maximum, uvalue.doubleValue() );                 }             }         }     } } else {     if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset;         java.util.Iterator iterator = visibleSeriesKeys.iterator();         while (iterator.hasNext()) {             java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();             int series = dataset.indexOf( seriesKey );             int itemCount = dataset.getItemCount( series );             for (int item = 0; item < itemCount; item++) {                 double x = ixyd.getXValue( series, item );                 if (xRange.contains( x )) {                     double lvalue = ixyd.getStartYValue( series, item );                     double uvalue = ixyd.getEndYValue( series, item );                     if (!Double.isNaN( lvalue )) {                         minimum = Math.min( minimum, lvalue );                     }                     if (!Double.isNaN( uvalue )) {                         maximum = Math.max( maximum, uvalue );                     }                 }             }         }     } else {         java.util.Iterator iterator = visibleSeriesKeys.iterator();         while (iterator.hasNext()) {             java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();             int series = dataset.indexOf( seriesKey );             int itemCount = dataset.getItemCount( series );             for (int item = 0; item < itemCount; item++) {                 double x = dataset.getXValue( series, item );                 double y = dataset.getYValue( series, item );                 if (xRange.contains( x )) {                     if (!Double.isNaN( y )) {                         minimum = Math.min( minimum, y );                         maximum = Math.max( maximum, y );                     }                 }             }         }     } }  =>  
SDL_434:785:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next(); int series = dataset.indexOf( seriesKey ); int itemCount = dataset.getItemCount( series ); for (int item = 0; item < itemCount; item++) {     double x = ohlc.getXValue( series, item );     if (xRange.contains( x )) {         double lvalue = ohlc.getLowValue( series, item );         double uvalue = ohlc.getHighValue( series, item );         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );         }         if (!Double.isNaN( uvalue )) {             maximum = Math.max( maximum, uvalue );         }     } }  =>   java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next(); int series = dataset.indexOf( seriesKey ); int itemCount = dataset.getItemCount( series );
SDL_435:799:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): while (iterator.hasNext()) {     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();     int series = dataset.indexOf( seriesKey );     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double x = ohlc.getXValue( series, item );         if (xRange.contains( x )) {             double lvalue = ohlc.getLowValue( series, item );             double uvalue = ohlc.getHighValue( series, item );             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );             }             if (!Double.isNaN( uvalue )) {                 maximum = Math.max( maximum, uvalue );             }         }     } }  =>   while (true) {     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();     int series = dataset.indexOf( seriesKey );     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double x = ohlc.getXValue( series, item );         if (xRange.contains( x )) {             double lvalue = ohlc.getLowValue( series, item );             double uvalue = ohlc.getHighValue( series, item );             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );             }             if (!Double.isNaN( uvalue )) {                 maximum = Math.max( maximum, uvalue );             }         }     } }
SDL_436:787:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): double x = ohlc.getXValue( series, item ); if (xRange.contains( x )) {     double lvalue = ohlc.getLowValue( series, item );     double uvalue = ohlc.getHighValue( series, item );     if (!Double.isNaN( lvalue )) {         minimum = Math.min( minimum, lvalue );     }     if (!Double.isNaN( uvalue )) {         maximum = Math.max( maximum, uvalue );     } }  =>   double x = ohlc.getXValue( series, item );
SDL_437:798:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): for (int item = 0; item < itemCount; item++) {     double x = ohlc.getXValue( series, item );     if (xRange.contains( x )) {         double lvalue = ohlc.getLowValue( series, item );         double uvalue = ohlc.getHighValue( series, item );         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );         }         if (!Double.isNaN( uvalue )) {             maximum = Math.max( maximum, uvalue );         }     } }  =>   for (int item = 0;; item++) {     double x = ohlc.getXValue( series, item );     if (xRange.contains( x )) {         double lvalue = ohlc.getLowValue( series, item );         double uvalue = ohlc.getHighValue( series, item );         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );         }         if (!Double.isNaN( uvalue )) {             maximum = Math.max( maximum, uvalue );         }     } }
SDL_438:798:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): for (int item = 0; item < itemCount; item++) {     double x = ohlc.getXValue( series, item );     if (xRange.contains( x )) {         double lvalue = ohlc.getLowValue( series, item );         double uvalue = ohlc.getHighValue( series, item );         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );         }         if (!Double.isNaN( uvalue )) {             maximum = Math.max( maximum, uvalue );         }     } }  =>   for (int item = 0; item < itemCount;) {     double x = ohlc.getXValue( series, item );     if (xRange.contains( x )) {         double lvalue = ohlc.getLowValue( series, item );         double uvalue = ohlc.getHighValue( series, item );         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );         }         if (!Double.isNaN( uvalue )) {             maximum = Math.max( maximum, uvalue );         }     } }
SDL_439:793:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): double lvalue = ohlc.getLowValue( series, item ); double uvalue = ohlc.getHighValue( series, item ); if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue ); } if (!Double.isNaN( uvalue )) {     maximum = Math.max( maximum, uvalue ); }  =>   double lvalue = ohlc.getLowValue( series, item ); double uvalue = ohlc.getHighValue( series, item ); if (!Double.isNaN( uvalue )) {     maximum = Math.max( maximum, uvalue ); }
SDL_440:793:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): double lvalue = ohlc.getLowValue( series, item ); double uvalue = ohlc.getHighValue( series, item ); if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue ); } if (!Double.isNaN( uvalue )) {     maximum = Math.max( maximum, uvalue ); }  =>   double lvalue = ohlc.getLowValue( series, item ); double uvalue = ohlc.getHighValue( series, item ); if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue ); }
SDL_441:797:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): if (xRange.contains( x )) {     double lvalue = ohlc.getLowValue( series, item );     double uvalue = ohlc.getHighValue( series, item );     if (!Double.isNaN( lvalue )) {         minimum = Math.min( minimum, lvalue );     }     if (!Double.isNaN( uvalue )) {         maximum = Math.max( maximum, uvalue );     } }  =>   if (true) {     double lvalue = ohlc.getLowValue( series, item );     double uvalue = ohlc.getHighValue( series, item );     if (!Double.isNaN( lvalue )) {         minimum = Math.min( minimum, lvalue );     }     if (!Double.isNaN( uvalue )) {         maximum = Math.max( maximum, uvalue );     } }
SDL_442:791:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): minimum = Math.min( minimum, lvalue );  =>  
SDL_443:793:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue ); }  =>   if (true) {     minimum = Math.min( minimum, lvalue ); }
SDL_444:794:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): maximum = Math.max( maximum, uvalue );  =>  
SDL_445:796:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): if (!Double.isNaN( uvalue )) {     maximum = Math.max( maximum, uvalue ); }  =>   if (true) {     maximum = Math.max( maximum, uvalue ); }
SDL_446:803:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): org.jfree.data.statistics.BoxAndWhiskerXYDataset bx = (org.jfree.data.statistics.BoxAndWhiskerXYDataset) dataset; java.util.Iterator iterator = visibleSeriesKeys.iterator(); while (iterator.hasNext()) {     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();     int series = dataset.indexOf( seriesKey );     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double x = bx.getXValue( series, item );         if (xRange.contains( x )) {             java.lang.Number lvalue = bx.getMinRegularValue( series, item );             java.lang.Number uvalue = bx.getMaxRegularValue( series, item );             if (lvalue != null) {                 minimum = Math.min( minimum, lvalue.doubleValue() );             }             if (uvalue != null) {                 maximum = Math.max( maximum, uvalue.doubleValue() );             }         }     } }  =>   org.jfree.data.statistics.BoxAndWhiskerXYDataset bx = (org.jfree.data.statistics.BoxAndWhiskerXYDataset) dataset; java.util.Iterator iterator = visibleSeriesKeys.iterator();
SDL_447:862:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): if (includeInterval && dataset instanceof org.jfree.data.statistics.BoxAndWhiskerXYDataset) {     org.jfree.data.statistics.BoxAndWhiskerXYDataset bx = (org.jfree.data.statistics.BoxAndWhiskerXYDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double x = bx.getXValue( series, item );             if (xRange.contains( x )) {                 java.lang.Number lvalue = bx.getMinRegularValue( series, item );                 java.lang.Number uvalue = bx.getMaxRegularValue( series, item );                 if (lvalue != null) {                     minimum = Math.min( minimum, lvalue.doubleValue() );                 }                 if (uvalue != null) {                     maximum = Math.max( maximum, uvalue.doubleValue() );                 }             }         }     } } else {     if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset;         java.util.Iterator iterator = visibleSeriesKeys.iterator();         while (iterator.hasNext()) {             java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();             int series = dataset.indexOf( seriesKey );             int itemCount = dataset.getItemCount( series );             for (int item = 0; item < itemCount; item++) {                 double x = ixyd.getXValue( series, item );                 if (xRange.contains( x )) {                     double lvalue = ixyd.getStartYValue( series, item );                     double uvalue = ixyd.getEndYValue( series, item );                     if (!Double.isNaN( lvalue )) {                         minimum = Math.min( minimum, lvalue );                     }                     if (!Double.isNaN( uvalue )) {                         maximum = Math.max( maximum, uvalue );                     }                 }             }         }     } else {         java.util.Iterator iterator = visibleSeriesKeys.iterator();         while (iterator.hasNext()) {             java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();             int series = dataset.indexOf( seriesKey );             int itemCount = dataset.getItemCount( series );             for (int item = 0; item < itemCount; item++) {                 double x = dataset.getXValue( series, item );                 double y = dataset.getYValue( series, item );                 if (xRange.contains( x )) {                     if (!Double.isNaN( y )) {                         minimum = Math.min( minimum, y );                         maximum = Math.max( maximum, y );                     }                 }             }         }     } }  =>   if (true) {     org.jfree.data.statistics.BoxAndWhiskerXYDataset bx = (org.jfree.data.statistics.BoxAndWhiskerXYDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double x = bx.getXValue( series, item );             if (xRange.contains( x )) {                 java.lang.Number lvalue = bx.getMinRegularValue( series, item );                 java.lang.Number uvalue = bx.getMaxRegularValue( series, item );                 if (lvalue != null) {                     minimum = Math.min( minimum, lvalue.doubleValue() );                 }                 if (uvalue != null) {                     maximum = Math.max( maximum, uvalue.doubleValue() );                 }             }         }     } } else {     if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset;         java.util.Iterator iterator = visibleSeriesKeys.iterator();         while (iterator.hasNext()) {             java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();             int series = dataset.indexOf( seriesKey );             int itemCount = dataset.getItemCount( series );             for (int item = 0; item < itemCount; item++) {                 double x = ixyd.getXValue( series, item );                 if (xRange.contains( x )) {                     double lvalue = ixyd.getStartYValue( series, item );                     double uvalue = ixyd.getEndYValue( series, item );                     if (!Double.isNaN( lvalue )) {                         minimum = Math.min( minimum, lvalue );                     }                     if (!Double.isNaN( uvalue )) {                         maximum = Math.max( maximum, uvalue );                     }                 }             }         }     } else {         java.util.Iterator iterator = visibleSeriesKeys.iterator();         while (iterator.hasNext()) {             java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();             int series = dataset.indexOf( seriesKey );             int itemCount = dataset.getItemCount( series );             for (int item = 0; item < itemCount; item++) {                 double x = dataset.getXValue( series, item );                 double y = dataset.getYValue( series, item );                 if (xRange.contains( x )) {                     if (!Double.isNaN( y )) {                         minimum = Math.min( minimum, y );                         maximum = Math.max( maximum, y );                     }                 }             }         }     } }
SDL_448:822:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double x = ixyd.getXValue( series, item );             if (xRange.contains( x )) {                 double lvalue = ixyd.getStartYValue( series, item );                 double uvalue = ixyd.getEndYValue( series, item );                 if (!Double.isNaN( lvalue )) {                     minimum = Math.min( minimum, lvalue );                 }                 if (!Double.isNaN( uvalue )) {                     maximum = Math.max( maximum, uvalue );                 }             }         }     } } else {     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double x = dataset.getXValue( series, item );             double y = dataset.getYValue( series, item );             if (xRange.contains( x )) {                 if (!Double.isNaN( y )) {                     minimum = Math.min( minimum, y );                     maximum = Math.max( maximum, y );                 }             }         }     } }  =>  
SDL_449:807:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next(); int series = dataset.indexOf( seriesKey ); int itemCount = dataset.getItemCount( series ); for (int item = 0; item < itemCount; item++) {     double x = bx.getXValue( series, item );     if (xRange.contains( x )) {         java.lang.Number lvalue = bx.getMinRegularValue( series, item );         java.lang.Number uvalue = bx.getMaxRegularValue( series, item );         if (lvalue != null) {             minimum = Math.min( minimum, lvalue.doubleValue() );         }         if (uvalue != null) {             maximum = Math.max( maximum, uvalue.doubleValue() );         }     } }  =>   java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next(); int series = dataset.indexOf( seriesKey ); int itemCount = dataset.getItemCount( series );
SDL_450:821:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): while (iterator.hasNext()) {     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();     int series = dataset.indexOf( seriesKey );     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double x = bx.getXValue( series, item );         if (xRange.contains( x )) {             java.lang.Number lvalue = bx.getMinRegularValue( series, item );             java.lang.Number uvalue = bx.getMaxRegularValue( series, item );             if (lvalue != null) {                 minimum = Math.min( minimum, lvalue.doubleValue() );             }             if (uvalue != null) {                 maximum = Math.max( maximum, uvalue.doubleValue() );             }         }     } }  =>   while (true) {     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();     int series = dataset.indexOf( seriesKey );     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double x = bx.getXValue( series, item );         if (xRange.contains( x )) {             java.lang.Number lvalue = bx.getMinRegularValue( series, item );             java.lang.Number uvalue = bx.getMaxRegularValue( series, item );             if (lvalue != null) {                 minimum = Math.min( minimum, lvalue.doubleValue() );             }             if (uvalue != null) {                 maximum = Math.max( maximum, uvalue.doubleValue() );             }         }     } }
SDL_451:809:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): double x = bx.getXValue( series, item ); if (xRange.contains( x )) {     java.lang.Number lvalue = bx.getMinRegularValue( series, item );     java.lang.Number uvalue = bx.getMaxRegularValue( series, item );     if (lvalue != null) {         minimum = Math.min( minimum, lvalue.doubleValue() );     }     if (uvalue != null) {         maximum = Math.max( maximum, uvalue.doubleValue() );     } }  =>   double x = bx.getXValue( series, item );
SDL_452:820:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): for (int item = 0; item < itemCount; item++) {     double x = bx.getXValue( series, item );     if (xRange.contains( x )) {         java.lang.Number lvalue = bx.getMinRegularValue( series, item );         java.lang.Number uvalue = bx.getMaxRegularValue( series, item );         if (lvalue != null) {             minimum = Math.min( minimum, lvalue.doubleValue() );         }         if (uvalue != null) {             maximum = Math.max( maximum, uvalue.doubleValue() );         }     } }  =>   for (int item = 0;; item++) {     double x = bx.getXValue( series, item );     if (xRange.contains( x )) {         java.lang.Number lvalue = bx.getMinRegularValue( series, item );         java.lang.Number uvalue = bx.getMaxRegularValue( series, item );         if (lvalue != null) {             minimum = Math.min( minimum, lvalue.doubleValue() );         }         if (uvalue != null) {             maximum = Math.max( maximum, uvalue.doubleValue() );         }     } }
SDL_453:820:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): for (int item = 0; item < itemCount; item++) {     double x = bx.getXValue( series, item );     if (xRange.contains( x )) {         java.lang.Number lvalue = bx.getMinRegularValue( series, item );         java.lang.Number uvalue = bx.getMaxRegularValue( series, item );         if (lvalue != null) {             minimum = Math.min( minimum, lvalue.doubleValue() );         }         if (uvalue != null) {             maximum = Math.max( maximum, uvalue.doubleValue() );         }     } }  =>   for (int item = 0; item < itemCount;) {     double x = bx.getXValue( series, item );     if (xRange.contains( x )) {         java.lang.Number lvalue = bx.getMinRegularValue( series, item );         java.lang.Number uvalue = bx.getMaxRegularValue( series, item );         if (lvalue != null) {             minimum = Math.min( minimum, lvalue.doubleValue() );         }         if (uvalue != null) {             maximum = Math.max( maximum, uvalue.doubleValue() );         }     } }
SDL_454:815:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): java.lang.Number lvalue = bx.getMinRegularValue( series, item ); java.lang.Number uvalue = bx.getMaxRegularValue( series, item ); if (lvalue != null) {     minimum = Math.min( minimum, lvalue.doubleValue() ); } if (uvalue != null) {     maximum = Math.max( maximum, uvalue.doubleValue() ); }  =>   java.lang.Number lvalue = bx.getMinRegularValue( series, item ); java.lang.Number uvalue = bx.getMaxRegularValue( series, item ); if (uvalue != null) {     maximum = Math.max( maximum, uvalue.doubleValue() ); }
SDL_455:815:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): java.lang.Number lvalue = bx.getMinRegularValue( series, item ); java.lang.Number uvalue = bx.getMaxRegularValue( series, item ); if (lvalue != null) {     minimum = Math.min( minimum, lvalue.doubleValue() ); } if (uvalue != null) {     maximum = Math.max( maximum, uvalue.doubleValue() ); }  =>   java.lang.Number lvalue = bx.getMinRegularValue( series, item ); java.lang.Number uvalue = bx.getMaxRegularValue( series, item ); if (lvalue != null) {     minimum = Math.min( minimum, lvalue.doubleValue() ); }
SDL_456:819:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): if (xRange.contains( x )) {     java.lang.Number lvalue = bx.getMinRegularValue( series, item );     java.lang.Number uvalue = bx.getMaxRegularValue( series, item );     if (lvalue != null) {         minimum = Math.min( minimum, lvalue.doubleValue() );     }     if (uvalue != null) {         maximum = Math.max( maximum, uvalue.doubleValue() );     } }  =>   if (true) {     java.lang.Number lvalue = bx.getMinRegularValue( series, item );     java.lang.Number uvalue = bx.getMaxRegularValue( series, item );     if (lvalue != null) {         minimum = Math.min( minimum, lvalue.doubleValue() );     }     if (uvalue != null) {         maximum = Math.max( maximum, uvalue.doubleValue() );     } }
SDL_457:813:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): minimum = Math.min( minimum, lvalue.doubleValue() );  =>  
SDL_458:815:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): if (lvalue != null) {     minimum = Math.min( minimum, lvalue.doubleValue() ); }  =>   if (true) {     minimum = Math.min( minimum, lvalue.doubleValue() ); }
SDL_459:816:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): maximum = Math.max( maximum, uvalue.doubleValue() );  =>  
SDL_460:818:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): if (uvalue != null) {     maximum = Math.max( maximum, uvalue.doubleValue() ); }  =>   if (true) {     maximum = Math.max( maximum, uvalue.doubleValue() ); }
SDL_461:825:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset; java.util.Iterator iterator = visibleSeriesKeys.iterator(); while (iterator.hasNext()) {     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();     int series = dataset.indexOf( seriesKey );     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double x = ixyd.getXValue( series, item );         if (xRange.contains( x )) {             double lvalue = ixyd.getStartYValue( series, item );             double uvalue = ixyd.getEndYValue( series, item );             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );             }             if (!Double.isNaN( uvalue )) {                 maximum = Math.max( maximum, uvalue );             }         }     } }  =>   org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset; java.util.Iterator iterator = visibleSeriesKeys.iterator();
SDL_462:861:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): if (includeInterval && dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double x = ixyd.getXValue( series, item );             if (xRange.contains( x )) {                 double lvalue = ixyd.getStartYValue( series, item );                 double uvalue = ixyd.getEndYValue( series, item );                 if (!Double.isNaN( lvalue )) {                     minimum = Math.min( minimum, lvalue );                 }                 if (!Double.isNaN( uvalue )) {                     maximum = Math.max( maximum, uvalue );                 }             }         }     } } else {     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double x = dataset.getXValue( series, item );             double y = dataset.getYValue( series, item );             if (xRange.contains( x )) {                 if (!Double.isNaN( y )) {                     minimum = Math.min( minimum, y );                     maximum = Math.max( maximum, y );                 }             }         }     } }  =>   if (true) {     org.jfree.data.xy.IntervalXYDataset ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset;     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double x = ixyd.getXValue( series, item );             if (xRange.contains( x )) {                 double lvalue = ixyd.getStartYValue( series, item );                 double uvalue = ixyd.getEndYValue( series, item );                 if (!Double.isNaN( lvalue )) {                     minimum = Math.min( minimum, lvalue );                 }                 if (!Double.isNaN( uvalue )) {                     maximum = Math.max( maximum, uvalue );                 }             }         }     } } else {     java.util.Iterator iterator = visibleSeriesKeys.iterator();     while (iterator.hasNext()) {         java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();         int series = dataset.indexOf( seriesKey );         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double x = dataset.getXValue( series, item );             double y = dataset.getYValue( series, item );             if (xRange.contains( x )) {                 if (!Double.isNaN( y )) {                     minimum = Math.min( minimum, y );                     maximum = Math.max( maximum, y );                 }             }         }     } }
SDL_463:845:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): java.util.Iterator iterator = visibleSeriesKeys.iterator(); while (iterator.hasNext()) {     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();     int series = dataset.indexOf( seriesKey );     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double x = dataset.getXValue( series, item );         double y = dataset.getYValue( series, item );         if (xRange.contains( x )) {             if (!Double.isNaN( y )) {                 minimum = Math.min( minimum, y );                 maximum = Math.max( maximum, y );             }         }     } }  =>   java.util.Iterator iterator = visibleSeriesKeys.iterator();
SDL_464:829:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next(); int series = dataset.indexOf( seriesKey ); int itemCount = dataset.getItemCount( series ); for (int item = 0; item < itemCount; item++) {     double x = ixyd.getXValue( series, item );     if (xRange.contains( x )) {         double lvalue = ixyd.getStartYValue( series, item );         double uvalue = ixyd.getEndYValue( series, item );         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );         }         if (!Double.isNaN( uvalue )) {             maximum = Math.max( maximum, uvalue );         }     } }  =>   java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next(); int series = dataset.indexOf( seriesKey ); int itemCount = dataset.getItemCount( series );
SDL_465:843:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): while (iterator.hasNext()) {     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();     int series = dataset.indexOf( seriesKey );     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double x = ixyd.getXValue( series, item );         if (xRange.contains( x )) {             double lvalue = ixyd.getStartYValue( series, item );             double uvalue = ixyd.getEndYValue( series, item );             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );             }             if (!Double.isNaN( uvalue )) {                 maximum = Math.max( maximum, uvalue );             }         }     } }  =>   while (true) {     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();     int series = dataset.indexOf( seriesKey );     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double x = ixyd.getXValue( series, item );         if (xRange.contains( x )) {             double lvalue = ixyd.getStartYValue( series, item );             double uvalue = ixyd.getEndYValue( series, item );             if (!Double.isNaN( lvalue )) {                 minimum = Math.min( minimum, lvalue );             }             if (!Double.isNaN( uvalue )) {                 maximum = Math.max( maximum, uvalue );             }         }     } }
SDL_466:831:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): double x = ixyd.getXValue( series, item ); if (xRange.contains( x )) {     double lvalue = ixyd.getStartYValue( series, item );     double uvalue = ixyd.getEndYValue( series, item );     if (!Double.isNaN( lvalue )) {         minimum = Math.min( minimum, lvalue );     }     if (!Double.isNaN( uvalue )) {         maximum = Math.max( maximum, uvalue );     } }  =>   double x = ixyd.getXValue( series, item );
SDL_467:842:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): for (int item = 0; item < itemCount; item++) {     double x = ixyd.getXValue( series, item );     if (xRange.contains( x )) {         double lvalue = ixyd.getStartYValue( series, item );         double uvalue = ixyd.getEndYValue( series, item );         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );         }         if (!Double.isNaN( uvalue )) {             maximum = Math.max( maximum, uvalue );         }     } }  =>   for (int item = 0;; item++) {     double x = ixyd.getXValue( series, item );     if (xRange.contains( x )) {         double lvalue = ixyd.getStartYValue( series, item );         double uvalue = ixyd.getEndYValue( series, item );         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );         }         if (!Double.isNaN( uvalue )) {             maximum = Math.max( maximum, uvalue );         }     } }
SDL_468:842:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): for (int item = 0; item < itemCount; item++) {     double x = ixyd.getXValue( series, item );     if (xRange.contains( x )) {         double lvalue = ixyd.getStartYValue( series, item );         double uvalue = ixyd.getEndYValue( series, item );         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );         }         if (!Double.isNaN( uvalue )) {             maximum = Math.max( maximum, uvalue );         }     } }  =>   for (int item = 0; item < itemCount;) {     double x = ixyd.getXValue( series, item );     if (xRange.contains( x )) {         double lvalue = ixyd.getStartYValue( series, item );         double uvalue = ixyd.getEndYValue( series, item );         if (!Double.isNaN( lvalue )) {             minimum = Math.min( minimum, lvalue );         }         if (!Double.isNaN( uvalue )) {             maximum = Math.max( maximum, uvalue );         }     } }
SDL_469:837:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): double lvalue = ixyd.getStartYValue( series, item ); double uvalue = ixyd.getEndYValue( series, item ); if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue ); } if (!Double.isNaN( uvalue )) {     maximum = Math.max( maximum, uvalue ); }  =>   double lvalue = ixyd.getStartYValue( series, item ); double uvalue = ixyd.getEndYValue( series, item ); if (!Double.isNaN( uvalue )) {     maximum = Math.max( maximum, uvalue ); }
SDL_470:837:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): double lvalue = ixyd.getStartYValue( series, item ); double uvalue = ixyd.getEndYValue( series, item ); if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue ); } if (!Double.isNaN( uvalue )) {     maximum = Math.max( maximum, uvalue ); }  =>   double lvalue = ixyd.getStartYValue( series, item ); double uvalue = ixyd.getEndYValue( series, item ); if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue ); }
SDL_471:841:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): if (xRange.contains( x )) {     double lvalue = ixyd.getStartYValue( series, item );     double uvalue = ixyd.getEndYValue( series, item );     if (!Double.isNaN( lvalue )) {         minimum = Math.min( minimum, lvalue );     }     if (!Double.isNaN( uvalue )) {         maximum = Math.max( maximum, uvalue );     } }  =>   if (true) {     double lvalue = ixyd.getStartYValue( series, item );     double uvalue = ixyd.getEndYValue( series, item );     if (!Double.isNaN( lvalue )) {         minimum = Math.min( minimum, lvalue );     }     if (!Double.isNaN( uvalue )) {         maximum = Math.max( maximum, uvalue );     } }
SDL_472:835:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): minimum = Math.min( minimum, lvalue );  =>  
SDL_473:837:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): if (!Double.isNaN( lvalue )) {     minimum = Math.min( minimum, lvalue ); }  =>   if (true) {     minimum = Math.min( minimum, lvalue ); }
SDL_474:838:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): maximum = Math.max( maximum, uvalue );  =>  
SDL_475:840:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): if (!Double.isNaN( uvalue )) {     maximum = Math.max( maximum, uvalue ); }  =>   if (true) {     maximum = Math.max( maximum, uvalue ); }
SDL_476:849:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next(); int series = dataset.indexOf( seriesKey ); int itemCount = dataset.getItemCount( series ); for (int item = 0; item < itemCount; item++) {     double x = dataset.getXValue( series, item );     double y = dataset.getYValue( series, item );     if (xRange.contains( x )) {         if (!Double.isNaN( y )) {             minimum = Math.min( minimum, y );             maximum = Math.max( maximum, y );         }     } }  =>   java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next(); int series = dataset.indexOf( seriesKey ); int itemCount = dataset.getItemCount( series );
SDL_477:860:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): while (iterator.hasNext()) {     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();     int series = dataset.indexOf( seriesKey );     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double x = dataset.getXValue( series, item );         double y = dataset.getYValue( series, item );         if (xRange.contains( x )) {             if (!Double.isNaN( y )) {                 minimum = Math.min( minimum, y );                 maximum = Math.max( maximum, y );             }         }     } }  =>   while (true) {     java.lang.Comparable seriesKey = (java.lang.Comparable) iterator.next();     int series = dataset.indexOf( seriesKey );     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double x = dataset.getXValue( series, item );         double y = dataset.getYValue( series, item );         if (xRange.contains( x )) {             if (!Double.isNaN( y )) {                 minimum = Math.min( minimum, y );                 maximum = Math.max( maximum, y );             }         }     } }
SDL_478:852:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): double x = dataset.getXValue( series, item ); double y = dataset.getYValue( series, item ); if (xRange.contains( x )) {     if (!Double.isNaN( y )) {         minimum = Math.min( minimum, y );         maximum = Math.max( maximum, y );     } }  =>   double x = dataset.getXValue( series, item ); double y = dataset.getYValue( series, item );
SDL_479:859:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): for (int item = 0; item < itemCount; item++) {     double x = dataset.getXValue( series, item );     double y = dataset.getYValue( series, item );     if (xRange.contains( x )) {         if (!Double.isNaN( y )) {             minimum = Math.min( minimum, y );             maximum = Math.max( maximum, y );         }     } }  =>   for (int item = 0;; item++) {     double x = dataset.getXValue( series, item );     double y = dataset.getYValue( series, item );     if (xRange.contains( x )) {         if (!Double.isNaN( y )) {             minimum = Math.min( minimum, y );             maximum = Math.max( maximum, y );         }     } }
SDL_480:859:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): for (int item = 0; item < itemCount; item++) {     double x = dataset.getXValue( series, item );     double y = dataset.getYValue( series, item );     if (xRange.contains( x )) {         if (!Double.isNaN( y )) {             minimum = Math.min( minimum, y );             maximum = Math.max( maximum, y );         }     } }  =>   for (int item = 0; item < itemCount;) {     double x = dataset.getXValue( series, item );     double y = dataset.getYValue( series, item );     if (xRange.contains( x )) {         if (!Double.isNaN( y )) {             minimum = Math.min( minimum, y );             maximum = Math.max( maximum, y );         }     } }
SDL_481:853:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): if (!Double.isNaN( y )) {     minimum = Math.min( minimum, y );     maximum = Math.max( maximum, y ); }  =>  
SDL_482:858:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): if (xRange.contains( x )) {     if (!Double.isNaN( y )) {         minimum = Math.min( minimum, y );         maximum = Math.max( maximum, y );     } }  =>   if (true) {     if (!Double.isNaN( y )) {         minimum = Math.min( minimum, y );         maximum = Math.max( maximum, y );     } }
SDL_483:855:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): minimum = Math.min( minimum, y ); maximum = Math.max( maximum, y );  =>   maximum = Math.max( maximum, y );
SDL_484:855:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): minimum = Math.min( minimum, y ); maximum = Math.max( maximum, y );  =>   minimum = Math.min( minimum, y );
SDL_485:857:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): if (!Double.isNaN( y )) {     minimum = Math.min( minimum, y );     maximum = Math.max( maximum, y ); }  =>   if (true) {     minimum = Math.min( minimum, y );     maximum = Math.max( maximum, y ); }
SDL_486:868:org.jfree.data.Range_iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean): if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }  =>   if (true) {     return null; } else {     return new org.jfree.data.Range( minimum, maximum ); }
SDL_487:901:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } java.lang.Number result = null; if (dataset instanceof org.jfree.data.DomainInfo) {     org.jfree.data.DomainInfo info = (org.jfree.data.DomainInfo) dataset;     return new java.lang.Double( info.getDomainLowerBound( true ) ); } else {     double minimum = Double.POSITIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getStartXValue( series, item );             } else {                 value = dataset.getXValue( series, item );             }             if (!Double.isNaN( value )) {                 minimum = Math.min( minimum, value );             }         }     }     if (minimum == Double.POSITIVE_INFINITY) {         result = null;     } else {         result = new java.lang.Double( minimum );     } } return result;  =>   java.lang.Number result = null; if (dataset instanceof org.jfree.data.DomainInfo) {     org.jfree.data.DomainInfo info = (org.jfree.data.DomainInfo) dataset;     return new java.lang.Double( info.getDomainLowerBound( true ) ); } else {     double minimum = Double.POSITIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getStartXValue( series, item );             } else {                 value = dataset.getXValue( series, item );             }             if (!Double.isNaN( value )) {                 minimum = Math.min( minimum, value );             }         }     }     if (minimum == Double.POSITIVE_INFINITY) {         result = null;     } else {         result = new java.lang.Double( minimum );     } } return result;
SDL_488:877:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } java.lang.Number result = null; if (dataset instanceof org.jfree.data.DomainInfo) {     org.jfree.data.DomainInfo info = (org.jfree.data.DomainInfo) dataset;     return new java.lang.Double( info.getDomainLowerBound( true ) ); } else {     double minimum = Double.POSITIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getStartXValue( series, item );             } else {                 value = dataset.getXValue( series, item );             }             if (!Double.isNaN( value )) {                 minimum = Math.min( minimum, value );             }         }     }     if (minimum == Double.POSITIVE_INFINITY) {         result = null;     } else {         result = new java.lang.Double( minimum );     } } return result;  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } java.lang.Number result = null; return result;
SDL_489:873:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_490:875:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_491:903:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): if (dataset instanceof org.jfree.data.DomainInfo) {     org.jfree.data.DomainInfo info = (org.jfree.data.DomainInfo) dataset;     return new java.lang.Double( info.getDomainLowerBound( true ) ); } else {     double minimum = Double.POSITIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getStartXValue( series, item );             } else {                 value = dataset.getXValue( series, item );             }             if (!Double.isNaN( value )) {                 minimum = Math.min( minimum, value );             }         }     }     if (minimum == Double.POSITIVE_INFINITY) {         result = null;     } else {         result = new java.lang.Double( minimum );     } }  =>   if (true) {     org.jfree.data.DomainInfo info = (org.jfree.data.DomainInfo) dataset;     return new java.lang.Double( info.getDomainLowerBound( true ) ); } else {     double minimum = Double.POSITIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getStartXValue( series, item );             } else {                 value = dataset.getXValue( series, item );             }             if (!Double.isNaN( value )) {                 minimum = Math.min( minimum, value );             }         }     }     if (minimum == Double.POSITIVE_INFINITY) {         result = null;     } else {         result = new java.lang.Double( minimum );     } }
SDL_492:887:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): double minimum = Double.POSITIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getStartXValue( series, item );         } else {             value = dataset.getXValue( series, item );         }         if (!Double.isNaN( value )) {             minimum = Math.min( minimum, value );         }     } } if (minimum == Double.POSITIVE_INFINITY) {     result = null; } else {     result = new java.lang.Double( minimum ); }  =>   double minimum = Double.POSITIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); if (minimum == Double.POSITIVE_INFINITY) {     result = null; } else {     result = new java.lang.Double( minimum ); }
SDL_493:897:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): double minimum = Double.POSITIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getStartXValue( series, item );         } else {             value = dataset.getXValue( series, item );         }         if (!Double.isNaN( value )) {             minimum = Math.min( minimum, value );         }     } } if (minimum == Double.POSITIVE_INFINITY) {     result = null; } else {     result = new java.lang.Double( minimum ); }  =>   double minimum = Double.POSITIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getStartXValue( series, item );         } else {             value = dataset.getXValue( series, item );         }         if (!Double.isNaN( value )) {             minimum = Math.min( minimum, value );         }     } }
SDL_494:884:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): int itemCount = dataset.getItemCount( series ); for (int item = 0; item < itemCount; item++) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getStartXValue( series, item );     } else {         value = dataset.getXValue( series, item );     }     if (!Double.isNaN( value )) {         minimum = Math.min( minimum, value );     } }  =>   int itemCount = dataset.getItemCount( series );
SDL_495:897:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getStartXValue( series, item );         } else {             value = dataset.getXValue( series, item );         }         if (!Double.isNaN( value )) {             minimum = Math.min( minimum, value );         }     } }  =>   for (int series = 0;; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getStartXValue( series, item );         } else {             value = dataset.getXValue( series, item );         }         if (!Double.isNaN( value )) {             minimum = Math.min( minimum, value );         }     } }
SDL_496:897:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getStartXValue( series, item );         } else {             value = dataset.getXValue( series, item );         }         if (!Double.isNaN( value )) {             minimum = Math.min( minimum, value );         }     } }  =>   for (int series = 0; series < seriesCount;) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getStartXValue( series, item );         } else {             value = dataset.getXValue( series, item );         }         if (!Double.isNaN( value )) {             minimum = Math.min( minimum, value );         }     } }
SDL_497:889:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): double value; if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getStartXValue( series, item ); } else {     value = dataset.getXValue( series, item ); } if (!Double.isNaN( value )) {     minimum = Math.min( minimum, value ); }  =>   double value; if (!Double.isNaN( value )) {     minimum = Math.min( minimum, value ); }
SDL_498:892:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): double value; if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getStartXValue( series, item ); } else {     value = dataset.getXValue( series, item ); } if (!Double.isNaN( value )) {     minimum = Math.min( minimum, value ); }  =>   double value; if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getStartXValue( series, item ); } else {     value = dataset.getXValue( series, item ); }
SDL_499:896:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): for (int item = 0; item < itemCount; item++) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getStartXValue( series, item );     } else {         value = dataset.getXValue( series, item );     }     if (!Double.isNaN( value )) {         minimum = Math.min( minimum, value );     } }  =>   for (int item = 0;; item++) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getStartXValue( series, item );     } else {         value = dataset.getXValue( series, item );     }     if (!Double.isNaN( value )) {         minimum = Math.min( minimum, value );     } }
SDL_500:896:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): for (int item = 0; item < itemCount; item++) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getStartXValue( series, item );     } else {         value = dataset.getXValue( series, item );     }     if (!Double.isNaN( value )) {         minimum = Math.min( minimum, value );     } }  =>   for (int item = 0; item < itemCount;) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getStartXValue( series, item );     } else {         value = dataset.getXValue( series, item );     }     if (!Double.isNaN( value )) {         minimum = Math.min( minimum, value );     } }
SDL_501:888:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset; value = intervalXYData.getStartXValue( series, item );  =>   org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;
SDL_502:892:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getStartXValue( series, item ); } else {     value = dataset.getXValue( series, item ); }  =>   if (true) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getStartXValue( series, item ); } else {     value = dataset.getXValue( series, item ); }
SDL_503:890:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): value = dataset.getXValue( series, item );  =>  
SDL_504:893:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): minimum = Math.min( minimum, value );  =>  
SDL_505:895:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): if (!Double.isNaN( value )) {     minimum = Math.min( minimum, value ); }  =>   if (true) {     minimum = Math.min( minimum, value ); }
SDL_506:898:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): result = null;  =>  
SDL_507:902:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): if (minimum == Double.POSITIVE_INFINITY) {     result = null; } else {     result = new java.lang.Double( minimum ); }  =>   if (true) {     result = null; } else {     result = new java.lang.Double( minimum ); }
SDL_508:900:java.lang.Number_findMinimumDomainValue(org.jfree.data.xy.XYDataset): result = new java.lang.Double( minimum );  =>  
SDL_509:937:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } java.lang.Number result = null; if (dataset instanceof org.jfree.data.DomainInfo) {     org.jfree.data.DomainInfo info = (org.jfree.data.DomainInfo) dataset;     return new java.lang.Double( info.getDomainUpperBound( true ) ); } else {     double maximum = Double.NEGATIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getEndXValue( series, item );             } else {                 value = dataset.getXValue( series, item );             }             if (!Double.isNaN( value )) {                 maximum = Math.max( maximum, value );             }         }     }     if (maximum == Double.NEGATIVE_INFINITY) {         result = null;     } else {         result = new java.lang.Double( maximum );     } } return result;  =>   java.lang.Number result = null; if (dataset instanceof org.jfree.data.DomainInfo) {     org.jfree.data.DomainInfo info = (org.jfree.data.DomainInfo) dataset;     return new java.lang.Double( info.getDomainUpperBound( true ) ); } else {     double maximum = Double.NEGATIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getEndXValue( series, item );             } else {                 value = dataset.getXValue( series, item );             }             if (!Double.isNaN( value )) {                 maximum = Math.max( maximum, value );             }         }     }     if (maximum == Double.NEGATIVE_INFINITY) {         result = null;     } else {         result = new java.lang.Double( maximum );     } } return result;
SDL_510:913:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } java.lang.Number result = null; if (dataset instanceof org.jfree.data.DomainInfo) {     org.jfree.data.DomainInfo info = (org.jfree.data.DomainInfo) dataset;     return new java.lang.Double( info.getDomainUpperBound( true ) ); } else {     double maximum = Double.NEGATIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getEndXValue( series, item );             } else {                 value = dataset.getXValue( series, item );             }             if (!Double.isNaN( value )) {                 maximum = Math.max( maximum, value );             }         }     }     if (maximum == Double.NEGATIVE_INFINITY) {         result = null;     } else {         result = new java.lang.Double( maximum );     } } return result;  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } java.lang.Number result = null; return result;
SDL_511:909:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_512:911:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_513:939:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): if (dataset instanceof org.jfree.data.DomainInfo) {     org.jfree.data.DomainInfo info = (org.jfree.data.DomainInfo) dataset;     return new java.lang.Double( info.getDomainUpperBound( true ) ); } else {     double maximum = Double.NEGATIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getEndXValue( series, item );             } else {                 value = dataset.getXValue( series, item );             }             if (!Double.isNaN( value )) {                 maximum = Math.max( maximum, value );             }         }     }     if (maximum == Double.NEGATIVE_INFINITY) {         result = null;     } else {         result = new java.lang.Double( maximum );     } }  =>   if (true) {     org.jfree.data.DomainInfo info = (org.jfree.data.DomainInfo) dataset;     return new java.lang.Double( info.getDomainUpperBound( true ) ); } else {     double maximum = Double.NEGATIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getEndXValue( series, item );             } else {                 value = dataset.getXValue( series, item );             }             if (!Double.isNaN( value )) {                 maximum = Math.max( maximum, value );             }         }     }     if (maximum == Double.NEGATIVE_INFINITY) {         result = null;     } else {         result = new java.lang.Double( maximum );     } }
SDL_514:923:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getEndXValue( series, item );         } else {             value = dataset.getXValue( series, item );         }         if (!Double.isNaN( value )) {             maximum = Math.max( maximum, value );         }     } } if (maximum == Double.NEGATIVE_INFINITY) {     result = null; } else {     result = new java.lang.Double( maximum ); }  =>   double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); if (maximum == Double.NEGATIVE_INFINITY) {     result = null; } else {     result = new java.lang.Double( maximum ); }
SDL_515:933:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getEndXValue( series, item );         } else {             value = dataset.getXValue( series, item );         }         if (!Double.isNaN( value )) {             maximum = Math.max( maximum, value );         }     } } if (maximum == Double.NEGATIVE_INFINITY) {     result = null; } else {     result = new java.lang.Double( maximum ); }  =>   double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getEndXValue( series, item );         } else {             value = dataset.getXValue( series, item );         }         if (!Double.isNaN( value )) {             maximum = Math.max( maximum, value );         }     } }
SDL_516:920:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): int itemCount = dataset.getItemCount( series ); for (int item = 0; item < itemCount; item++) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getEndXValue( series, item );     } else {         value = dataset.getXValue( series, item );     }     if (!Double.isNaN( value )) {         maximum = Math.max( maximum, value );     } }  =>   int itemCount = dataset.getItemCount( series );
SDL_517:933:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getEndXValue( series, item );         } else {             value = dataset.getXValue( series, item );         }         if (!Double.isNaN( value )) {             maximum = Math.max( maximum, value );         }     } }  =>   for (int series = 0;; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getEndXValue( series, item );         } else {             value = dataset.getXValue( series, item );         }         if (!Double.isNaN( value )) {             maximum = Math.max( maximum, value );         }     } }
SDL_518:933:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getEndXValue( series, item );         } else {             value = dataset.getXValue( series, item );         }         if (!Double.isNaN( value )) {             maximum = Math.max( maximum, value );         }     } }  =>   for (int series = 0; series < seriesCount;) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getEndXValue( series, item );         } else {             value = dataset.getXValue( series, item );         }         if (!Double.isNaN( value )) {             maximum = Math.max( maximum, value );         }     } }
SDL_519:925:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): double value; if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getEndXValue( series, item ); } else {     value = dataset.getXValue( series, item ); } if (!Double.isNaN( value )) {     maximum = Math.max( maximum, value ); }  =>   double value; if (!Double.isNaN( value )) {     maximum = Math.max( maximum, value ); }
SDL_520:928:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): double value; if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getEndXValue( series, item ); } else {     value = dataset.getXValue( series, item ); } if (!Double.isNaN( value )) {     maximum = Math.max( maximum, value ); }  =>   double value; if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getEndXValue( series, item ); } else {     value = dataset.getXValue( series, item ); }
SDL_521:932:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): for (int item = 0; item < itemCount; item++) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getEndXValue( series, item );     } else {         value = dataset.getXValue( series, item );     }     if (!Double.isNaN( value )) {         maximum = Math.max( maximum, value );     } }  =>   for (int item = 0;; item++) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getEndXValue( series, item );     } else {         value = dataset.getXValue( series, item );     }     if (!Double.isNaN( value )) {         maximum = Math.max( maximum, value );     } }
SDL_522:932:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): for (int item = 0; item < itemCount; item++) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getEndXValue( series, item );     } else {         value = dataset.getXValue( series, item );     }     if (!Double.isNaN( value )) {         maximum = Math.max( maximum, value );     } }  =>   for (int item = 0; item < itemCount;) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getEndXValue( series, item );     } else {         value = dataset.getXValue( series, item );     }     if (!Double.isNaN( value )) {         maximum = Math.max( maximum, value );     } }
SDL_523:924:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset; value = intervalXYData.getEndXValue( series, item );  =>   org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;
SDL_524:928:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getEndXValue( series, item ); } else {     value = dataset.getXValue( series, item ); }  =>   if (true) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getEndXValue( series, item ); } else {     value = dataset.getXValue( series, item ); }
SDL_525:926:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): value = dataset.getXValue( series, item );  =>  
SDL_526:929:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): maximum = Math.max( maximum, value );  =>  
SDL_527:931:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): if (!Double.isNaN( value )) {     maximum = Math.max( maximum, value ); }  =>   if (true) {     maximum = Math.max( maximum, value ); }
SDL_528:934:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): result = null;  =>  
SDL_529:938:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): if (maximum == Double.NEGATIVE_INFINITY) {     result = null; } else {     result = new java.lang.Double( maximum ); }  =>   if (true) {     result = null; } else {     result = new java.lang.Double( maximum ); }
SDL_530:936:java.lang.Number_findMaximumDomainValue(org.jfree.data.xy.XYDataset): result = new java.lang.Double( maximum );  =>  
SDL_531:971:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeLowerBound( true ) ); } else {     double minimum = Double.POSITIVE_INFINITY;     int seriesCount = dataset.getRowCount();     int itemCount = dataset.getColumnCount();     for (int series = 0; series < seriesCount; series++) {         for (int item = 0; item < itemCount; item++) {             java.lang.Number value;             if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {                 org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;                 value = icd.getStartValue( series, item );             } else {                 value = dataset.getValue( series, item );             }             if (value != null) {                 minimum = Math.min( minimum, value.doubleValue() );             }         }     }     if (minimum == Double.POSITIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( minimum );     } }  =>   if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeLowerBound( true ) ); } else {     double minimum = Double.POSITIVE_INFINITY;     int seriesCount = dataset.getRowCount();     int itemCount = dataset.getColumnCount();     for (int series = 0; series < seriesCount; series++) {         for (int item = 0; item < itemCount; item++) {             java.lang.Number value;             if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {                 org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;                 value = icd.getStartValue( series, item );             } else {                 value = dataset.getValue( series, item );             }             if (value != null) {                 minimum = Math.min( minimum, value.doubleValue() );             }         }     }     if (minimum == Double.POSITIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( minimum );     } }
SDL_532:947:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeLowerBound( true ) ); } else {     double minimum = Double.POSITIVE_INFINITY;     int seriesCount = dataset.getRowCount();     int itemCount = dataset.getColumnCount();     for (int series = 0; series < seriesCount; series++) {         for (int item = 0; item < itemCount; item++) {             java.lang.Number value;             if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {                 org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;                 value = icd.getStartValue( series, item );             } else {                 value = dataset.getValue( series, item );             }             if (value != null) {                 minimum = Math.min( minimum, value.doubleValue() );             }         }     }     if (minimum == Double.POSITIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( minimum );     } }  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_533:945:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_534:947:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_535:974:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeLowerBound( true ) ); } else {     double minimum = Double.POSITIVE_INFINITY;     int seriesCount = dataset.getRowCount();     int itemCount = dataset.getColumnCount();     for (int series = 0; series < seriesCount; series++) {         for (int item = 0; item < itemCount; item++) {             java.lang.Number value;             if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {                 org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;                 value = icd.getStartValue( series, item );             } else {                 value = dataset.getValue( series, item );             }             if (value != null) {                 minimum = Math.min( minimum, value.doubleValue() );             }         }     }     if (minimum == Double.POSITIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( minimum );     } }  =>   if (true) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeLowerBound( true ) ); } else {     double minimum = Double.POSITIVE_INFINITY;     int seriesCount = dataset.getRowCount();     int itemCount = dataset.getColumnCount();     for (int series = 0; series < seriesCount; series++) {         for (int item = 0; item < itemCount; item++) {             java.lang.Number value;             if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {                 org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;                 value = icd.getStartValue( series, item );             } else {                 value = dataset.getValue( series, item );             }             if (value != null) {                 minimum = Math.min( minimum, value.doubleValue() );             }         }     }     if (minimum == Double.POSITIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( minimum );     } }
SDL_536:959:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): double minimum = Double.POSITIVE_INFINITY; int seriesCount = dataset.getRowCount(); int itemCount = dataset.getColumnCount(); for (int series = 0; series < seriesCount; series++) {     for (int item = 0; item < itemCount; item++) {         java.lang.Number value;         if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {             org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;             value = icd.getStartValue( series, item );         } else {             value = dataset.getValue( series, item );         }         if (value != null) {             minimum = Math.min( minimum, value.doubleValue() );         }     } } if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new java.lang.Double( minimum ); }  =>   double minimum = Double.POSITIVE_INFINITY; int seriesCount = dataset.getRowCount(); int itemCount = dataset.getColumnCount(); if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new java.lang.Double( minimum ); }
SDL_537:968:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): double minimum = Double.POSITIVE_INFINITY; int seriesCount = dataset.getRowCount(); int itemCount = dataset.getColumnCount(); for (int series = 0; series < seriesCount; series++) {     for (int item = 0; item < itemCount; item++) {         java.lang.Number value;         if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {             org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;             value = icd.getStartValue( series, item );         } else {             value = dataset.getValue( series, item );         }         if (value != null) {             minimum = Math.min( minimum, value.doubleValue() );         }     } } if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new java.lang.Double( minimum ); }  =>   double minimum = Double.POSITIVE_INFINITY; int seriesCount = dataset.getRowCount(); int itemCount = dataset.getColumnCount(); for (int series = 0; series < seriesCount; series++) {     for (int item = 0; item < itemCount; item++) {         java.lang.Number value;         if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {             org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;             value = icd.getStartValue( series, item );         } else {             value = dataset.getValue( series, item );         }         if (value != null) {             minimum = Math.min( minimum, value.doubleValue() );         }     } }
SDL_538:955:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): for (int item = 0; item < itemCount; item++) {     java.lang.Number value;     if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {         org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;         value = icd.getStartValue( series, item );     } else {         value = dataset.getValue( series, item );     }     if (value != null) {         minimum = Math.min( minimum, value.doubleValue() );     } }  =>  
SDL_539:968:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): for (int series = 0; series < seriesCount; series++) {     for (int item = 0; item < itemCount; item++) {         java.lang.Number value;         if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {             org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;             value = icd.getStartValue( series, item );         } else {             value = dataset.getValue( series, item );         }         if (value != null) {             minimum = Math.min( minimum, value.doubleValue() );         }     } }  =>   for (int series = 0;; series++) {     for (int item = 0; item < itemCount; item++) {         java.lang.Number value;         if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {             org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;             value = icd.getStartValue( series, item );         } else {             value = dataset.getValue( series, item );         }         if (value != null) {             minimum = Math.min( minimum, value.doubleValue() );         }     } }
SDL_540:968:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): for (int series = 0; series < seriesCount; series++) {     for (int item = 0; item < itemCount; item++) {         java.lang.Number value;         if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {             org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;             value = icd.getStartValue( series, item );         } else {             value = dataset.getValue( series, item );         }         if (value != null) {             minimum = Math.min( minimum, value.doubleValue() );         }     } }  =>   for (int series = 0; series < seriesCount;) {     for (int item = 0; item < itemCount; item++) {         java.lang.Number value;         if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {             org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;             value = icd.getStartValue( series, item );         } else {             value = dataset.getValue( series, item );         }         if (value != null) {             minimum = Math.min( minimum, value.doubleValue() );         }     } }
SDL_541:960:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): java.lang.Number value; if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {     org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;     value = icd.getStartValue( series, item ); } else {     value = dataset.getValue( series, item ); } if (value != null) {     minimum = Math.min( minimum, value.doubleValue() ); }  =>   java.lang.Number value; if (value != null) {     minimum = Math.min( minimum, value.doubleValue() ); }
SDL_542:963:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): java.lang.Number value; if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {     org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;     value = icd.getStartValue( series, item ); } else {     value = dataset.getValue( series, item ); } if (value != null) {     minimum = Math.min( minimum, value.doubleValue() ); }  =>   java.lang.Number value; if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {     org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;     value = icd.getStartValue( series, item ); } else {     value = dataset.getValue( series, item ); }
SDL_543:967:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): for (int item = 0; item < itemCount; item++) {     java.lang.Number value;     if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {         org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;         value = icd.getStartValue( series, item );     } else {         value = dataset.getValue( series, item );     }     if (value != null) {         minimum = Math.min( minimum, value.doubleValue() );     } }  =>   for (int item = 0;; item++) {     java.lang.Number value;     if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {         org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;         value = icd.getStartValue( series, item );     } else {         value = dataset.getValue( series, item );     }     if (value != null) {         minimum = Math.min( minimum, value.doubleValue() );     } }
SDL_544:967:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): for (int item = 0; item < itemCount; item++) {     java.lang.Number value;     if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {         org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;         value = icd.getStartValue( series, item );     } else {         value = dataset.getValue( series, item );     }     if (value != null) {         minimum = Math.min( minimum, value.doubleValue() );     } }  =>   for (int item = 0; item < itemCount;) {     java.lang.Number value;     if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {         org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;         value = icd.getStartValue( series, item );     } else {         value = dataset.getValue( series, item );     }     if (value != null) {         minimum = Math.min( minimum, value.doubleValue() );     } }
SDL_545:959:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset; value = icd.getStartValue( series, item );  =>   org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;
SDL_546:963:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {     org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;     value = icd.getStartValue( series, item ); } else {     value = dataset.getValue( series, item ); }  =>   if (true) {     org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;     value = icd.getStartValue( series, item ); } else {     value = dataset.getValue( series, item ); }
SDL_547:961:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): value = dataset.getValue( series, item );  =>  
SDL_548:964:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): minimum = Math.min( minimum, value.doubleValue() );  =>  
SDL_549:966:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): if (value != null) {     minimum = Math.min( minimum, value.doubleValue() ); }  =>   if (true) {     minimum = Math.min( minimum, value.doubleValue() ); }
SDL_550:973:java.lang.Number_findMinimumRangeValue(org.jfree.data.category.CategoryDataset): if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new java.lang.Double( minimum ); }  =>   if (true) {     return null; } else {     return new java.lang.Double( minimum ); }
SDL_551:1010:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeLowerBound( true ) ); } else {     double minimum = Double.POSITIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getStartYValue( series, item );             } else {                 if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                     org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                     value = highLowData.getLowValue( series, item );                 } else {                     value = dataset.getYValue( series, item );                 }             }             if (!Double.isNaN( value )) {                 minimum = Math.min( minimum, value );             }         }     }     if (minimum == Double.POSITIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( minimum );     } }  =>   if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeLowerBound( true ) ); } else {     double minimum = Double.POSITIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getStartYValue( series, item );             } else {                 if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                     org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                     value = highLowData.getLowValue( series, item );                 } else {                     value = dataset.getYValue( series, item );                 }             }             if (!Double.isNaN( value )) {                 minimum = Math.min( minimum, value );             }         }     }     if (minimum == Double.POSITIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( minimum );     } }
SDL_552:981:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeLowerBound( true ) ); } else {     double minimum = Double.POSITIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getStartYValue( series, item );             } else {                 if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                     org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                     value = highLowData.getLowValue( series, item );                 } else {                     value = dataset.getYValue( series, item );                 }             }             if (!Double.isNaN( value )) {                 minimum = Math.min( minimum, value );             }         }     }     if (minimum == Double.POSITIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( minimum );     } }  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_553:979:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_554:981:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_555:1013:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeLowerBound( true ) ); } else {     double minimum = Double.POSITIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getStartYValue( series, item );             } else {                 if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                     org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                     value = highLowData.getLowValue( series, item );                 } else {                     value = dataset.getYValue( series, item );                 }             }             if (!Double.isNaN( value )) {                 minimum = Math.min( minimum, value );             }         }     }     if (minimum == Double.POSITIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( minimum );     } }  =>   if (true) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeLowerBound( true ) ); } else {     double minimum = Double.POSITIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getStartYValue( series, item );             } else {                 if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                     org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                     value = highLowData.getLowValue( series, item );                 } else {                     value = dataset.getYValue( series, item );                 }             }             if (!Double.isNaN( value )) {                 minimum = Math.min( minimum, value );             }         }     }     if (minimum == Double.POSITIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( minimum );     } }
SDL_556:992:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): double minimum = Double.POSITIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getStartYValue( series, item );         } else {             if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                 org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                 value = highLowData.getLowValue( series, item );             } else {                 value = dataset.getYValue( series, item );             }         }         if (!Double.isNaN( value )) {             minimum = Math.min( minimum, value );         }     } } if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new java.lang.Double( minimum ); }  =>   double minimum = Double.POSITIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new java.lang.Double( minimum ); }
SDL_557:1007:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): double minimum = Double.POSITIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getStartYValue( series, item );         } else {             if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                 org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                 value = highLowData.getLowValue( series, item );             } else {                 value = dataset.getYValue( series, item );             }         }         if (!Double.isNaN( value )) {             minimum = Math.min( minimum, value );         }     } } if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new java.lang.Double( minimum ); }  =>   double minimum = Double.POSITIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getStartYValue( series, item );         } else {             if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                 org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                 value = highLowData.getLowValue( series, item );             } else {                 value = dataset.getYValue( series, item );             }         }         if (!Double.isNaN( value )) {             minimum = Math.min( minimum, value );         }     } }
SDL_558:989:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): int itemCount = dataset.getItemCount( series ); for (int item = 0; item < itemCount; item++) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getStartYValue( series, item );     } else {         if (dataset instanceof org.jfree.data.xy.OHLCDataset) {             org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;             value = highLowData.getLowValue( series, item );         } else {             value = dataset.getYValue( series, item );         }     }     if (!Double.isNaN( value )) {         minimum = Math.min( minimum, value );     } }  =>   int itemCount = dataset.getItemCount( series );
SDL_559:1007:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getStartYValue( series, item );         } else {             if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                 org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                 value = highLowData.getLowValue( series, item );             } else {                 value = dataset.getYValue( series, item );             }         }         if (!Double.isNaN( value )) {             minimum = Math.min( minimum, value );         }     } }  =>   for (int series = 0;; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getStartYValue( series, item );         } else {             if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                 org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                 value = highLowData.getLowValue( series, item );             } else {                 value = dataset.getYValue( series, item );             }         }         if (!Double.isNaN( value )) {             minimum = Math.min( minimum, value );         }     } }
SDL_560:1007:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getStartYValue( series, item );         } else {             if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                 org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                 value = highLowData.getLowValue( series, item );             } else {                 value = dataset.getYValue( series, item );             }         }         if (!Double.isNaN( value )) {             minimum = Math.min( minimum, value );         }     } }  =>   for (int series = 0; series < seriesCount;) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getStartYValue( series, item );         } else {             if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                 org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                 value = highLowData.getLowValue( series, item );             } else {                 value = dataset.getYValue( series, item );             }         }         if (!Double.isNaN( value )) {             minimum = Math.min( minimum, value );         }     } }
SDL_561:994:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): double value; if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getStartYValue( series, item ); } else {     if (dataset instanceof org.jfree.data.xy.OHLCDataset) {         org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;         value = highLowData.getLowValue( series, item );     } else {         value = dataset.getYValue( series, item );     } } if (!Double.isNaN( value )) {     minimum = Math.min( minimum, value ); }  =>   double value; if (!Double.isNaN( value )) {     minimum = Math.min( minimum, value ); }
SDL_562:1002:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): double value; if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getStartYValue( series, item ); } else {     if (dataset instanceof org.jfree.data.xy.OHLCDataset) {         org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;         value = highLowData.getLowValue( series, item );     } else {         value = dataset.getYValue( series, item );     } } if (!Double.isNaN( value )) {     minimum = Math.min( minimum, value ); }  =>   double value; if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getStartYValue( series, item ); } else {     if (dataset instanceof org.jfree.data.xy.OHLCDataset) {         org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;         value = highLowData.getLowValue( series, item );     } else {         value = dataset.getYValue( series, item );     } }
SDL_563:1006:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): for (int item = 0; item < itemCount; item++) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getStartYValue( series, item );     } else {         if (dataset instanceof org.jfree.data.xy.OHLCDataset) {             org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;             value = highLowData.getLowValue( series, item );         } else {             value = dataset.getYValue( series, item );         }     }     if (!Double.isNaN( value )) {         minimum = Math.min( minimum, value );     } }  =>   for (int item = 0;; item++) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getStartYValue( series, item );     } else {         if (dataset instanceof org.jfree.data.xy.OHLCDataset) {             org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;             value = highLowData.getLowValue( series, item );         } else {             value = dataset.getYValue( series, item );         }     }     if (!Double.isNaN( value )) {         minimum = Math.min( minimum, value );     } }
SDL_564:1006:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): for (int item = 0; item < itemCount; item++) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getStartYValue( series, item );     } else {         if (dataset instanceof org.jfree.data.xy.OHLCDataset) {             org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;             value = highLowData.getLowValue( series, item );         } else {             value = dataset.getYValue( series, item );         }     }     if (!Double.isNaN( value )) {         minimum = Math.min( minimum, value );     } }  =>   for (int item = 0; item < itemCount;) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getStartYValue( series, item );     } else {         if (dataset instanceof org.jfree.data.xy.OHLCDataset) {             org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;             value = highLowData.getLowValue( series, item );         } else {             value = dataset.getYValue( series, item );         }     }     if (!Double.isNaN( value )) {         minimum = Math.min( minimum, value );     } }
SDL_565:993:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset; value = intervalXYData.getStartYValue( series, item );  =>   org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;
SDL_566:1002:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getStartYValue( series, item ); } else {     if (dataset instanceof org.jfree.data.xy.OHLCDataset) {         org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;         value = highLowData.getLowValue( series, item );     } else {         value = dataset.getYValue( series, item );     } }  =>   if (true) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getStartYValue( series, item ); } else {     if (dataset instanceof org.jfree.data.xy.OHLCDataset) {         org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;         value = highLowData.getLowValue( series, item );     } else {         value = dataset.getYValue( series, item );     } }
SDL_567:995:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): if (dataset instanceof org.jfree.data.xy.OHLCDataset) {     org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;     value = highLowData.getLowValue( series, item ); } else {     value = dataset.getYValue( series, item ); }  =>  
SDL_568:997:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset; value = highLowData.getLowValue( series, item );  =>   org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;
SDL_569:1001:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): if (dataset instanceof org.jfree.data.xy.OHLCDataset) {     org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;     value = highLowData.getLowValue( series, item ); } else {     value = dataset.getYValue( series, item ); }  =>   if (true) {     org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;     value = highLowData.getLowValue( series, item ); } else {     value = dataset.getYValue( series, item ); }
SDL_570:999:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): value = dataset.getYValue( series, item );  =>  
SDL_571:1003:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): minimum = Math.min( minimum, value );  =>  
SDL_572:1005:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): if (!Double.isNaN( value )) {     minimum = Math.min( minimum, value ); }  =>   if (true) {     minimum = Math.min( minimum, value ); }
SDL_573:1012:java.lang.Number_findMinimumRangeValue(org.jfree.data.xy.XYDataset): if (minimum == Double.POSITIVE_INFINITY) {     return null; } else {     return new java.lang.Double( minimum ); }  =>   if (true) {     return null; } else {     return new java.lang.Double( minimum ); }
SDL_574:1044:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeUpperBound( true ) ); } else {     double maximum = Double.NEGATIVE_INFINITY;     int seriesCount = dataset.getRowCount();     int itemCount = dataset.getColumnCount();     for (int series = 0; series < seriesCount; series++) {         for (int item = 0; item < itemCount; item++) {             java.lang.Number value;             if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {                 org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;                 value = icd.getEndValue( series, item );             } else {                 value = dataset.getValue( series, item );             }             if (value != null) {                 maximum = Math.max( maximum, value.doubleValue() );             }         }     }     if (maximum == Double.NEGATIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( maximum );     } }  =>   if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeUpperBound( true ) ); } else {     double maximum = Double.NEGATIVE_INFINITY;     int seriesCount = dataset.getRowCount();     int itemCount = dataset.getColumnCount();     for (int series = 0; series < seriesCount; series++) {         for (int item = 0; item < itemCount; item++) {             java.lang.Number value;             if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {                 org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;                 value = icd.getEndValue( series, item );             } else {                 value = dataset.getValue( series, item );             }             if (value != null) {                 maximum = Math.max( maximum, value.doubleValue() );             }         }     }     if (maximum == Double.NEGATIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( maximum );     } }
SDL_575:1020:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeUpperBound( true ) ); } else {     double maximum = Double.NEGATIVE_INFINITY;     int seriesCount = dataset.getRowCount();     int itemCount = dataset.getColumnCount();     for (int series = 0; series < seriesCount; series++) {         for (int item = 0; item < itemCount; item++) {             java.lang.Number value;             if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {                 org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;                 value = icd.getEndValue( series, item );             } else {                 value = dataset.getValue( series, item );             }             if (value != null) {                 maximum = Math.max( maximum, value.doubleValue() );             }         }     }     if (maximum == Double.NEGATIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( maximum );     } }  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_576:1018:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_577:1020:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_578:1047:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeUpperBound( true ) ); } else {     double maximum = Double.NEGATIVE_INFINITY;     int seriesCount = dataset.getRowCount();     int itemCount = dataset.getColumnCount();     for (int series = 0; series < seriesCount; series++) {         for (int item = 0; item < itemCount; item++) {             java.lang.Number value;             if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {                 org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;                 value = icd.getEndValue( series, item );             } else {                 value = dataset.getValue( series, item );             }             if (value != null) {                 maximum = Math.max( maximum, value.doubleValue() );             }         }     }     if (maximum == Double.NEGATIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( maximum );     } }  =>   if (true) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeUpperBound( true ) ); } else {     double maximum = Double.NEGATIVE_INFINITY;     int seriesCount = dataset.getRowCount();     int itemCount = dataset.getColumnCount();     for (int series = 0; series < seriesCount; series++) {         for (int item = 0; item < itemCount; item++) {             java.lang.Number value;             if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {                 org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;                 value = icd.getEndValue( series, item );             } else {                 value = dataset.getValue( series, item );             }             if (value != null) {                 maximum = Math.max( maximum, value.doubleValue() );             }         }     }     if (maximum == Double.NEGATIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( maximum );     } }
SDL_579:1032:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getRowCount(); int itemCount = dataset.getColumnCount(); for (int series = 0; series < seriesCount; series++) {     for (int item = 0; item < itemCount; item++) {         java.lang.Number value;         if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {             org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;             value = icd.getEndValue( series, item );         } else {             value = dataset.getValue( series, item );         }         if (value != null) {             maximum = Math.max( maximum, value.doubleValue() );         }     } } if (maximum == Double.NEGATIVE_INFINITY) {     return null; } else {     return new java.lang.Double( maximum ); }  =>   double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getRowCount(); int itemCount = dataset.getColumnCount(); if (maximum == Double.NEGATIVE_INFINITY) {     return null; } else {     return new java.lang.Double( maximum ); }
SDL_580:1041:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getRowCount(); int itemCount = dataset.getColumnCount(); for (int series = 0; series < seriesCount; series++) {     for (int item = 0; item < itemCount; item++) {         java.lang.Number value;         if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {             org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;             value = icd.getEndValue( series, item );         } else {             value = dataset.getValue( series, item );         }         if (value != null) {             maximum = Math.max( maximum, value.doubleValue() );         }     } } if (maximum == Double.NEGATIVE_INFINITY) {     return null; } else {     return new java.lang.Double( maximum ); }  =>   double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getRowCount(); int itemCount = dataset.getColumnCount(); for (int series = 0; series < seriesCount; series++) {     for (int item = 0; item < itemCount; item++) {         java.lang.Number value;         if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {             org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;             value = icd.getEndValue( series, item );         } else {             value = dataset.getValue( series, item );         }         if (value != null) {             maximum = Math.max( maximum, value.doubleValue() );         }     } }
SDL_581:1028:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): for (int item = 0; item < itemCount; item++) {     java.lang.Number value;     if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {         org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;         value = icd.getEndValue( series, item );     } else {         value = dataset.getValue( series, item );     }     if (value != null) {         maximum = Math.max( maximum, value.doubleValue() );     } }  =>  
SDL_582:1041:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): for (int series = 0; series < seriesCount; series++) {     for (int item = 0; item < itemCount; item++) {         java.lang.Number value;         if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {             org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;             value = icd.getEndValue( series, item );         } else {             value = dataset.getValue( series, item );         }         if (value != null) {             maximum = Math.max( maximum, value.doubleValue() );         }     } }  =>   for (int series = 0;; series++) {     for (int item = 0; item < itemCount; item++) {         java.lang.Number value;         if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {             org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;             value = icd.getEndValue( series, item );         } else {             value = dataset.getValue( series, item );         }         if (value != null) {             maximum = Math.max( maximum, value.doubleValue() );         }     } }
SDL_583:1041:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): for (int series = 0; series < seriesCount; series++) {     for (int item = 0; item < itemCount; item++) {         java.lang.Number value;         if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {             org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;             value = icd.getEndValue( series, item );         } else {             value = dataset.getValue( series, item );         }         if (value != null) {             maximum = Math.max( maximum, value.doubleValue() );         }     } }  =>   for (int series = 0; series < seriesCount;) {     for (int item = 0; item < itemCount; item++) {         java.lang.Number value;         if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {             org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;             value = icd.getEndValue( series, item );         } else {             value = dataset.getValue( series, item );         }         if (value != null) {             maximum = Math.max( maximum, value.doubleValue() );         }     } }
SDL_584:1033:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): java.lang.Number value; if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {     org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;     value = icd.getEndValue( series, item ); } else {     value = dataset.getValue( series, item ); } if (value != null) {     maximum = Math.max( maximum, value.doubleValue() ); }  =>   java.lang.Number value; if (value != null) {     maximum = Math.max( maximum, value.doubleValue() ); }
SDL_585:1036:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): java.lang.Number value; if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {     org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;     value = icd.getEndValue( series, item ); } else {     value = dataset.getValue( series, item ); } if (value != null) {     maximum = Math.max( maximum, value.doubleValue() ); }  =>   java.lang.Number value; if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {     org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;     value = icd.getEndValue( series, item ); } else {     value = dataset.getValue( series, item ); }
SDL_586:1040:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): for (int item = 0; item < itemCount; item++) {     java.lang.Number value;     if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {         org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;         value = icd.getEndValue( series, item );     } else {         value = dataset.getValue( series, item );     }     if (value != null) {         maximum = Math.max( maximum, value.doubleValue() );     } }  =>   for (int item = 0;; item++) {     java.lang.Number value;     if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {         org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;         value = icd.getEndValue( series, item );     } else {         value = dataset.getValue( series, item );     }     if (value != null) {         maximum = Math.max( maximum, value.doubleValue() );     } }
SDL_587:1040:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): for (int item = 0; item < itemCount; item++) {     java.lang.Number value;     if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {         org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;         value = icd.getEndValue( series, item );     } else {         value = dataset.getValue( series, item );     }     if (value != null) {         maximum = Math.max( maximum, value.doubleValue() );     } }  =>   for (int item = 0; item < itemCount;) {     java.lang.Number value;     if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {         org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;         value = icd.getEndValue( series, item );     } else {         value = dataset.getValue( series, item );     }     if (value != null) {         maximum = Math.max( maximum, value.doubleValue() );     } }
SDL_588:1032:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset; value = icd.getEndValue( series, item );  =>   org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;
SDL_589:1036:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {     org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;     value = icd.getEndValue( series, item ); } else {     value = dataset.getValue( series, item ); }  =>   if (true) {     org.jfree.data.category.IntervalCategoryDataset icd = (org.jfree.data.category.IntervalCategoryDataset) dataset;     value = icd.getEndValue( series, item ); } else {     value = dataset.getValue( series, item ); }
SDL_590:1034:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): value = dataset.getValue( series, item );  =>  
SDL_591:1037:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): maximum = Math.max( maximum, value.doubleValue() );  =>  
SDL_592:1039:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): if (value != null) {     maximum = Math.max( maximum, value.doubleValue() ); }  =>   if (true) {     maximum = Math.max( maximum, value.doubleValue() ); }
SDL_593:1046:java.lang.Number_findMaximumRangeValue(org.jfree.data.category.CategoryDataset): if (maximum == Double.NEGATIVE_INFINITY) {     return null; } else {     return new java.lang.Double( maximum ); }  =>   if (true) {     return null; } else {     return new java.lang.Double( maximum ); }
SDL_594:1083:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeUpperBound( true ) ); } else {     double maximum = Double.NEGATIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getEndYValue( series, item );             } else {                 if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                     org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                     value = highLowData.getHighValue( series, item );                 } else {                     value = dataset.getYValue( series, item );                 }             }             if (!Double.isNaN( value )) {                 maximum = Math.max( maximum, value );             }         }     }     if (maximum == Double.NEGATIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( maximum );     } }  =>   if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeUpperBound( true ) ); } else {     double maximum = Double.NEGATIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getEndYValue( series, item );             } else {                 if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                     org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                     value = highLowData.getHighValue( series, item );                 } else {                     value = dataset.getYValue( series, item );                 }             }             if (!Double.isNaN( value )) {                 maximum = Math.max( maximum, value );             }         }     }     if (maximum == Double.NEGATIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( maximum );     } }
SDL_595:1054:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeUpperBound( true ) ); } else {     double maximum = Double.NEGATIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getEndYValue( series, item );             } else {                 if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                     org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                     value = highLowData.getHighValue( series, item );                 } else {                     value = dataset.getYValue( series, item );                 }             }             if (!Double.isNaN( value )) {                 maximum = Math.max( maximum, value );             }         }     }     if (maximum == Double.NEGATIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( maximum );     } }  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_596:1052:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_597:1054:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_598:1086:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): if (dataset instanceof org.jfree.data.RangeInfo) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeUpperBound( true ) ); } else {     double maximum = Double.NEGATIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getEndYValue( series, item );             } else {                 if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                     org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                     value = highLowData.getHighValue( series, item );                 } else {                     value = dataset.getYValue( series, item );                 }             }             if (!Double.isNaN( value )) {                 maximum = Math.max( maximum, value );             }         }     }     if (maximum == Double.NEGATIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( maximum );     } }  =>   if (true) {     org.jfree.data.RangeInfo info = (org.jfree.data.RangeInfo) dataset;     return new java.lang.Double( info.getRangeUpperBound( true ) ); } else {     double maximum = Double.NEGATIVE_INFINITY;     int seriesCount = dataset.getSeriesCount();     for (int series = 0; series < seriesCount; series++) {         int itemCount = dataset.getItemCount( series );         for (int item = 0; item < itemCount; item++) {             double value;             if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {                 org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;                 value = intervalXYData.getEndYValue( series, item );             } else {                 if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                     org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                     value = highLowData.getHighValue( series, item );                 } else {                     value = dataset.getYValue( series, item );                 }             }             if (!Double.isNaN( value )) {                 maximum = Math.max( maximum, value );             }         }     }     if (maximum == Double.NEGATIVE_INFINITY) {         return null;     } else {         return new java.lang.Double( maximum );     } }
SDL_599:1065:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getEndYValue( series, item );         } else {             if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                 org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                 value = highLowData.getHighValue( series, item );             } else {                 value = dataset.getYValue( series, item );             }         }         if (!Double.isNaN( value )) {             maximum = Math.max( maximum, value );         }     } } if (maximum == Double.NEGATIVE_INFINITY) {     return null; } else {     return new java.lang.Double( maximum ); }  =>   double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); if (maximum == Double.NEGATIVE_INFINITY) {     return null; } else {     return new java.lang.Double( maximum ); }
SDL_600:1080:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getEndYValue( series, item );         } else {             if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                 org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                 value = highLowData.getHighValue( series, item );             } else {                 value = dataset.getYValue( series, item );             }         }         if (!Double.isNaN( value )) {             maximum = Math.max( maximum, value );         }     } } if (maximum == Double.NEGATIVE_INFINITY) {     return null; } else {     return new java.lang.Double( maximum ); }  =>   double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getSeriesCount(); for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getEndYValue( series, item );         } else {             if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                 org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                 value = highLowData.getHighValue( series, item );             } else {                 value = dataset.getYValue( series, item );             }         }         if (!Double.isNaN( value )) {             maximum = Math.max( maximum, value );         }     } }
SDL_601:1062:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): int itemCount = dataset.getItemCount( series ); for (int item = 0; item < itemCount; item++) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getEndYValue( series, item );     } else {         if (dataset instanceof org.jfree.data.xy.OHLCDataset) {             org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;             value = highLowData.getHighValue( series, item );         } else {             value = dataset.getYValue( series, item );         }     }     if (!Double.isNaN( value )) {         maximum = Math.max( maximum, value );     } }  =>   int itemCount = dataset.getItemCount( series );
SDL_602:1080:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getEndYValue( series, item );         } else {             if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                 org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                 value = highLowData.getHighValue( series, item );             } else {                 value = dataset.getYValue( series, item );             }         }         if (!Double.isNaN( value )) {             maximum = Math.max( maximum, value );         }     } }  =>   for (int series = 0;; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getEndYValue( series, item );         } else {             if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                 org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                 value = highLowData.getHighValue( series, item );             } else {                 value = dataset.getYValue( series, item );             }         }         if (!Double.isNaN( value )) {             maximum = Math.max( maximum, value );         }     } }
SDL_603:1080:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): for (int series = 0; series < seriesCount; series++) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getEndYValue( series, item );         } else {             if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                 org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                 value = highLowData.getHighValue( series, item );             } else {                 value = dataset.getYValue( series, item );             }         }         if (!Double.isNaN( value )) {             maximum = Math.max( maximum, value );         }     } }  =>   for (int series = 0; series < seriesCount;) {     int itemCount = dataset.getItemCount( series );     for (int item = 0; item < itemCount; item++) {         double value;         if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {             org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;             value = intervalXYData.getEndYValue( series, item );         } else {             if (dataset instanceof org.jfree.data.xy.OHLCDataset) {                 org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;                 value = highLowData.getHighValue( series, item );             } else {                 value = dataset.getYValue( series, item );             }         }         if (!Double.isNaN( value )) {             maximum = Math.max( maximum, value );         }     } }
SDL_604:1067:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): double value; if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getEndYValue( series, item ); } else {     if (dataset instanceof org.jfree.data.xy.OHLCDataset) {         org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;         value = highLowData.getHighValue( series, item );     } else {         value = dataset.getYValue( series, item );     } } if (!Double.isNaN( value )) {     maximum = Math.max( maximum, value ); }  =>   double value; if (!Double.isNaN( value )) {     maximum = Math.max( maximum, value ); }
SDL_605:1075:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): double value; if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getEndYValue( series, item ); } else {     if (dataset instanceof org.jfree.data.xy.OHLCDataset) {         org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;         value = highLowData.getHighValue( series, item );     } else {         value = dataset.getYValue( series, item );     } } if (!Double.isNaN( value )) {     maximum = Math.max( maximum, value ); }  =>   double value; if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getEndYValue( series, item ); } else {     if (dataset instanceof org.jfree.data.xy.OHLCDataset) {         org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;         value = highLowData.getHighValue( series, item );     } else {         value = dataset.getYValue( series, item );     } }
SDL_606:1079:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): for (int item = 0; item < itemCount; item++) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getEndYValue( series, item );     } else {         if (dataset instanceof org.jfree.data.xy.OHLCDataset) {             org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;             value = highLowData.getHighValue( series, item );         } else {             value = dataset.getYValue( series, item );         }     }     if (!Double.isNaN( value )) {         maximum = Math.max( maximum, value );     } }  =>   for (int item = 0;; item++) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getEndYValue( series, item );     } else {         if (dataset instanceof org.jfree.data.xy.OHLCDataset) {             org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;             value = highLowData.getHighValue( series, item );         } else {             value = dataset.getYValue( series, item );         }     }     if (!Double.isNaN( value )) {         maximum = Math.max( maximum, value );     } }
SDL_607:1079:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): for (int item = 0; item < itemCount; item++) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getEndYValue( series, item );     } else {         if (dataset instanceof org.jfree.data.xy.OHLCDataset) {             org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;             value = highLowData.getHighValue( series, item );         } else {             value = dataset.getYValue( series, item );         }     }     if (!Double.isNaN( value )) {         maximum = Math.max( maximum, value );     } }  =>   for (int item = 0; item < itemCount;) {     double value;     if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {         org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;         value = intervalXYData.getEndYValue( series, item );     } else {         if (dataset instanceof org.jfree.data.xy.OHLCDataset) {             org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;             value = highLowData.getHighValue( series, item );         } else {             value = dataset.getYValue( series, item );         }     }     if (!Double.isNaN( value )) {         maximum = Math.max( maximum, value );     } }
SDL_608:1066:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset; value = intervalXYData.getEndYValue( series, item );  =>   org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;
SDL_609:1075:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getEndYValue( series, item ); } else {     if (dataset instanceof org.jfree.data.xy.OHLCDataset) {         org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;         value = highLowData.getHighValue( series, item );     } else {         value = dataset.getYValue( series, item );     } }  =>   if (true) {     org.jfree.data.xy.IntervalXYDataset intervalXYData = (org.jfree.data.xy.IntervalXYDataset) dataset;     value = intervalXYData.getEndYValue( series, item ); } else {     if (dataset instanceof org.jfree.data.xy.OHLCDataset) {         org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;         value = highLowData.getHighValue( series, item );     } else {         value = dataset.getYValue( series, item );     } }
SDL_610:1068:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): if (dataset instanceof org.jfree.data.xy.OHLCDataset) {     org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;     value = highLowData.getHighValue( series, item ); } else {     value = dataset.getYValue( series, item ); }  =>  
SDL_611:1070:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset; value = highLowData.getHighValue( series, item );  =>   org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;
SDL_612:1074:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): if (dataset instanceof org.jfree.data.xy.OHLCDataset) {     org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;     value = highLowData.getHighValue( series, item ); } else {     value = dataset.getYValue( series, item ); }  =>   if (true) {     org.jfree.data.xy.OHLCDataset highLowData = (org.jfree.data.xy.OHLCDataset) dataset;     value = highLowData.getHighValue( series, item ); } else {     value = dataset.getYValue( series, item ); }
SDL_613:1072:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): value = dataset.getYValue( series, item );  =>  
SDL_614:1076:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): maximum = Math.max( maximum, value );  =>  
SDL_615:1078:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): if (!Double.isNaN( value )) {     maximum = Math.max( maximum, value ); }  =>   if (true) {     maximum = Math.max( maximum, value ); }
SDL_616:1085:java.lang.Number_findMaximumRangeValue(org.jfree.data.xy.XYDataset): if (maximum == Double.NEGATIVE_INFINITY) {     return null; } else {     return new java.lang.Double( maximum ); }  =>   if (true) {     return null; } else {     return new java.lang.Double( maximum ); }
SDL_617:1122:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int categoryCount = dataset.getColumnCount(); for (int item = 0; item < categoryCount; item++) {     double positive = base;     double negative = base;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value > 0.0) {                 positive = positive + value;             }             if (value < 0.0) {                 negative = negative + value;             }         }     }     minimum = Math.min( minimum, negative );     maximum = Math.max( maximum, positive ); } if (minimum <= maximum) {     result = new org.jfree.data.Range( minimum, maximum ); } return result;  =>   org.jfree.data.Range result = null; double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int categoryCount = dataset.getColumnCount(); for (int item = 0; item < categoryCount; item++) {     double positive = base;     double negative = base;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value > 0.0) {                 positive = positive + value;             }             if (value < 0.0) {                 negative = negative + value;             }         }     }     minimum = Math.min( minimum, negative );     maximum = Math.max( maximum, positive ); } if (minimum <= maximum) {     result = new org.jfree.data.Range( minimum, maximum ); } return result;
SDL_618:1106:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int categoryCount = dataset.getColumnCount(); for (int item = 0; item < categoryCount; item++) {     double positive = base;     double negative = base;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value > 0.0) {                 positive = positive + value;             }             if (value < 0.0) {                 negative = negative + value;             }         }     }     minimum = Math.min( minimum, negative );     maximum = Math.max( maximum, positive ); } if (minimum <= maximum) {     result = new org.jfree.data.Range( minimum, maximum ); } return result;  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int categoryCount = dataset.getColumnCount(); if (minimum <= maximum) {     result = new org.jfree.data.Range( minimum, maximum ); } return result;
SDL_619:1122:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int categoryCount = dataset.getColumnCount(); for (int item = 0; item < categoryCount; item++) {     double positive = base;     double negative = base;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value > 0.0) {                 positive = positive + value;             }             if (value < 0.0) {                 negative = negative + value;             }         }     }     minimum = Math.min( minimum, negative );     maximum = Math.max( maximum, positive ); } if (minimum <= maximum) {     result = new org.jfree.data.Range( minimum, maximum ); } return result;  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } org.jfree.data.Range result = null; double minimum = Double.POSITIVE_INFINITY; double maximum = Double.NEGATIVE_INFINITY; int categoryCount = dataset.getColumnCount(); for (int item = 0; item < categoryCount; item++) {     double positive = base;     double negative = base;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value > 0.0) {                 positive = positive + value;             }             if (value < 0.0) {                 negative = negative + value;             }         }     }     minimum = Math.min( minimum, negative );     maximum = Math.max( maximum, positive ); } return result;
SDL_620:1096:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_621:1098:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_622:1108:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): double positive = base; double negative = base; int seriesCount = dataset.getRowCount(); for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value > 0.0) {             positive = positive + value;         }         if (value < 0.0) {             negative = negative + value;         }     } } minimum = Math.min( minimum, negative ); maximum = Math.max( maximum, positive );  =>   double positive = base; double negative = base; int seriesCount = dataset.getRowCount(); minimum = Math.min( minimum, negative ); maximum = Math.max( maximum, positive );
SDL_623:1119:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): double positive = base; double negative = base; int seriesCount = dataset.getRowCount(); for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value > 0.0) {             positive = positive + value;         }         if (value < 0.0) {             negative = negative + value;         }     } } minimum = Math.min( minimum, negative ); maximum = Math.max( maximum, positive );  =>   double positive = base; double negative = base; int seriesCount = dataset.getRowCount(); for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value > 0.0) {             positive = positive + value;         }         if (value < 0.0) {             negative = negative + value;         }     } } maximum = Math.max( maximum, positive );
SDL_624:1119:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): double positive = base; double negative = base; int seriesCount = dataset.getRowCount(); for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value > 0.0) {             positive = positive + value;         }         if (value < 0.0) {             negative = negative + value;         }     } } minimum = Math.min( minimum, negative ); maximum = Math.max( maximum, positive );  =>   double positive = base; double negative = base; int seriesCount = dataset.getRowCount(); for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value > 0.0) {             positive = positive + value;         }         if (value < 0.0) {             negative = negative + value;         }     } } minimum = Math.min( minimum, negative );
SDL_625:1121:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): for (int item = 0; item < categoryCount; item++) {     double positive = base;     double negative = base;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value > 0.0) {                 positive = positive + value;             }             if (value < 0.0) {                 negative = negative + value;             }         }     }     minimum = Math.min( minimum, negative );     maximum = Math.max( maximum, positive ); }  =>   for (int item = 0;; item++) {     double positive = base;     double negative = base;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value > 0.0) {                 positive = positive + value;             }             if (value < 0.0) {                 negative = negative + value;             }         }     }     minimum = Math.min( minimum, negative );     maximum = Math.max( maximum, positive ); }
SDL_626:1121:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): for (int item = 0; item < categoryCount; item++) {     double positive = base;     double negative = base;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value > 0.0) {                 positive = positive + value;             }             if (value < 0.0) {                 negative = negative + value;             }         }     }     minimum = Math.min( minimum, negative );     maximum = Math.max( maximum, positive ); }  =>   for (int item = 0; item < categoryCount;) {     double positive = base;     double negative = base;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             double value = number.doubleValue();             if (value > 0.0) {                 positive = positive + value;             }             if (value < 0.0) {                 negative = negative + value;             }         }     }     minimum = Math.min( minimum, negative );     maximum = Math.max( maximum, positive ); }
SDL_627:1108:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): java.lang.Number number = dataset.getValue( series, item ); if (number != null) {     double value = number.doubleValue();     if (value > 0.0) {         positive = positive + value;     }     if (value < 0.0) {         negative = negative + value;     } }  =>   java.lang.Number number = dataset.getValue( series, item );
SDL_628:1118:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value > 0.0) {             positive = positive + value;         }         if (value < 0.0) {             negative = negative + value;         }     } }  =>   for (int series = 0;; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value > 0.0) {             positive = positive + value;         }         if (value < 0.0) {             negative = negative + value;         }     } }
SDL_629:1118:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value > 0.0) {             positive = positive + value;         }         if (value < 0.0) {             negative = negative + value;         }     } }  =>   for (int series = 0; series < seriesCount;) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         double value = number.doubleValue();         if (value > 0.0) {             positive = positive + value;         }         if (value < 0.0) {             negative = negative + value;         }     } }
SDL_630:1113:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): double value = number.doubleValue(); if (value > 0.0) {     positive = positive + value; } if (value < 0.0) {     negative = negative + value; }  =>   double value = number.doubleValue(); if (value < 0.0) {     negative = negative + value; }
SDL_631:1113:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): double value = number.doubleValue(); if (value > 0.0) {     positive = positive + value; } if (value < 0.0) {     negative = negative + value; }  =>   double value = number.doubleValue(); if (value > 0.0) {     positive = positive + value; }
SDL_632:1117:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): if (number != null) {     double value = number.doubleValue();     if (value > 0.0) {         positive = positive + value;     }     if (value < 0.0) {         negative = negative + value;     } }  =>   if (true) {     double value = number.doubleValue();     if (value > 0.0) {         positive = positive + value;     }     if (value < 0.0) {         negative = negative + value;     } }
SDL_633:1111:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): positive = positive + value;  =>  
SDL_634:1113:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): if (value > 0.0) {     positive = positive + value; }  =>   if (true) {     positive = positive + value; }
SDL_635:1114:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): negative = negative + value;  =>  
SDL_636:1116:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): if (value < 0.0) {     negative = negative + value; }  =>   if (true) {     negative = negative + value; }
SDL_637:1122:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): result = new org.jfree.data.Range( minimum, maximum );  =>  
SDL_638:1124:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double): if (minimum <= maximum) {     result = new org.jfree.data.Range( minimum, maximum ); }  =>   if (true) {     result = new org.jfree.data.Range( minimum, maximum ); }
SDL_639:1167:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } boolean hasValidData = false; org.jfree.data.Range result = null; int[] groupIndex = new int[dataset.getRowCount()]; for (int i = 0; i < dataset.getRowCount(); i++) {     groupIndex[i] = map.getGroupIndex( map.getGroup( dataset.getRowKey( i ) ) ); } int groupCount = map.getGroupCount(); double[] minimum = new double[groupCount]; double[] maximum = new double[groupCount]; int categoryCount = dataset.getColumnCount(); for (int item = 0; item < categoryCount; item++) {     double[] positive = new double[groupCount];     double[] negative = new double[groupCount];     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             hasValidData = true;             double value = number.doubleValue();             if (value > 0.0) {                 positive[groupIndex[series]] = positive[groupIndex[series]] + value;             }             if (value < 0.0) {                 negative[groupIndex[series]] = negative[groupIndex[series]] + value;             }         }     }     for (int g = 0; g < groupCount; g++) {         minimum[g] = Math.min( minimum[g], negative[g] );         maximum[g] = Math.max( maximum[g], positive[g] );     } } if (hasValidData) {     for (int j = 0; j < groupCount; j++) {         result = Range.combine( result, new org.jfree.data.Range( minimum[j], maximum[j] ) );     } } return result;  =>   boolean hasValidData = false; org.jfree.data.Range result = null; int[] groupIndex = new int[dataset.getRowCount()]; for (int i = 0; i < dataset.getRowCount(); i++) {     groupIndex[i] = map.getGroupIndex( map.getGroup( dataset.getRowKey( i ) ) ); } int groupCount = map.getGroupCount(); double[] minimum = new double[groupCount]; double[] maximum = new double[groupCount]; int categoryCount = dataset.getColumnCount(); for (int item = 0; item < categoryCount; item++) {     double[] positive = new double[groupCount];     double[] negative = new double[groupCount];     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             hasValidData = true;             double value = number.doubleValue();             if (value > 0.0) {                 positive[groupIndex[series]] = positive[groupIndex[series]] + value;             }             if (value < 0.0) {                 negative[groupIndex[series]] = negative[groupIndex[series]] + value;             }         }     }     for (int g = 0; g < groupCount; g++) {         minimum[g] = Math.min( minimum[g], negative[g] );         maximum[g] = Math.max( maximum[g], positive[g] );     } } if (hasValidData) {     for (int j = 0; j < groupCount; j++) {         result = Range.combine( result, new org.jfree.data.Range( minimum[j], maximum[j] ) );     } } return result;
SDL_640:1167:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } boolean hasValidData = false; org.jfree.data.Range result = null; int[] groupIndex = new int[dataset.getRowCount()]; for (int i = 0; i < dataset.getRowCount(); i++) {     groupIndex[i] = map.getGroupIndex( map.getGroup( dataset.getRowKey( i ) ) ); } int groupCount = map.getGroupCount(); double[] minimum = new double[groupCount]; double[] maximum = new double[groupCount]; int categoryCount = dataset.getColumnCount(); for (int item = 0; item < categoryCount; item++) {     double[] positive = new double[groupCount];     double[] negative = new double[groupCount];     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             hasValidData = true;             double value = number.doubleValue();             if (value > 0.0) {                 positive[groupIndex[series]] = positive[groupIndex[series]] + value;             }             if (value < 0.0) {                 negative[groupIndex[series]] = negative[groupIndex[series]] + value;             }         }     }     for (int g = 0; g < groupCount; g++) {         minimum[g] = Math.min( minimum[g], negative[g] );         maximum[g] = Math.max( maximum[g], positive[g] );     } } if (hasValidData) {     for (int j = 0; j < groupCount; j++) {         result = Range.combine( result, new org.jfree.data.Range( minimum[j], maximum[j] ) );     } } return result;  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } boolean hasValidData = false; org.jfree.data.Range result = null; int[] groupIndex = new int[dataset.getRowCount()]; int groupCount = map.getGroupCount(); double[] minimum = new double[groupCount]; double[] maximum = new double[groupCount]; int categoryCount = dataset.getColumnCount(); for (int item = 0; item < categoryCount; item++) {     double[] positive = new double[groupCount];     double[] negative = new double[groupCount];     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             hasValidData = true;             double value = number.doubleValue();             if (value > 0.0) {                 positive[groupIndex[series]] = positive[groupIndex[series]] + value;             }             if (value < 0.0) {                 negative[groupIndex[series]] = negative[groupIndex[series]] + value;             }         }     }     for (int g = 0; g < groupCount; g++) {         minimum[g] = Math.min( minimum[g], negative[g] );         maximum[g] = Math.max( maximum[g], positive[g] );     } } if (hasValidData) {     for (int j = 0; j < groupCount; j++) {         result = Range.combine( result, new org.jfree.data.Range( minimum[j], maximum[j] ) );     } } return result;
SDL_641:1148:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } boolean hasValidData = false; org.jfree.data.Range result = null; int[] groupIndex = new int[dataset.getRowCount()]; for (int i = 0; i < dataset.getRowCount(); i++) {     groupIndex[i] = map.getGroupIndex( map.getGroup( dataset.getRowKey( i ) ) ); } int groupCount = map.getGroupCount(); double[] minimum = new double[groupCount]; double[] maximum = new double[groupCount]; int categoryCount = dataset.getColumnCount(); for (int item = 0; item < categoryCount; item++) {     double[] positive = new double[groupCount];     double[] negative = new double[groupCount];     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             hasValidData = true;             double value = number.doubleValue();             if (value > 0.0) {                 positive[groupIndex[series]] = positive[groupIndex[series]] + value;             }             if (value < 0.0) {                 negative[groupIndex[series]] = negative[groupIndex[series]] + value;             }         }     }     for (int g = 0; g < groupCount; g++) {         minimum[g] = Math.min( minimum[g], negative[g] );         maximum[g] = Math.max( maximum[g], positive[g] );     } } if (hasValidData) {     for (int j = 0; j < groupCount; j++) {         result = Range.combine( result, new org.jfree.data.Range( minimum[j], maximum[j] ) );     } } return result;  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } boolean hasValidData = false; org.jfree.data.Range result = null; int[] groupIndex = new int[dataset.getRowCount()]; for (int i = 0; i < dataset.getRowCount(); i++) {     groupIndex[i] = map.getGroupIndex( map.getGroup( dataset.getRowKey( i ) ) ); } int groupCount = map.getGroupCount(); double[] minimum = new double[groupCount]; double[] maximum = new double[groupCount]; int categoryCount = dataset.getColumnCount(); if (hasValidData) {     for (int j = 0; j < groupCount; j++) {         result = Range.combine( result, new org.jfree.data.Range( minimum[j], maximum[j] ) );     } } return result;
SDL_642:1165:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } boolean hasValidData = false; org.jfree.data.Range result = null; int[] groupIndex = new int[dataset.getRowCount()]; for (int i = 0; i < dataset.getRowCount(); i++) {     groupIndex[i] = map.getGroupIndex( map.getGroup( dataset.getRowKey( i ) ) ); } int groupCount = map.getGroupCount(); double[] minimum = new double[groupCount]; double[] maximum = new double[groupCount]; int categoryCount = dataset.getColumnCount(); for (int item = 0; item < categoryCount; item++) {     double[] positive = new double[groupCount];     double[] negative = new double[groupCount];     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             hasValidData = true;             double value = number.doubleValue();             if (value > 0.0) {                 positive[groupIndex[series]] = positive[groupIndex[series]] + value;             }             if (value < 0.0) {                 negative[groupIndex[series]] = negative[groupIndex[series]] + value;             }         }     }     for (int g = 0; g < groupCount; g++) {         minimum[g] = Math.min( minimum[g], negative[g] );         maximum[g] = Math.max( maximum[g], positive[g] );     } } if (hasValidData) {     for (int j = 0; j < groupCount; j++) {         result = Range.combine( result, new org.jfree.data.Range( minimum[j], maximum[j] ) );     } } return result;  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } boolean hasValidData = false; org.jfree.data.Range result = null; int[] groupIndex = new int[dataset.getRowCount()]; for (int i = 0; i < dataset.getRowCount(); i++) {     groupIndex[i] = map.getGroupIndex( map.getGroup( dataset.getRowKey( i ) ) ); } int groupCount = map.getGroupCount(); double[] minimum = new double[groupCount]; double[] maximum = new double[groupCount]; int categoryCount = dataset.getColumnCount(); for (int item = 0; item < categoryCount; item++) {     double[] positive = new double[groupCount];     double[] negative = new double[groupCount];     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             hasValidData = true;             double value = number.doubleValue();             if (value > 0.0) {                 positive[groupIndex[series]] = positive[groupIndex[series]] + value;             }             if (value < 0.0) {                 negative[groupIndex[series]] = negative[groupIndex[series]] + value;             }         }     }     for (int g = 0; g < groupCount; g++) {         minimum[g] = Math.min( minimum[g], negative[g] );         maximum[g] = Math.max( maximum[g], positive[g] );     } } return result;
SDL_643:1130:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_644:1132:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_645:1136:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): groupIndex[i] = map.getGroupIndex( map.getGroup( dataset.getRowKey( i ) ) );  =>  
SDL_646:1138:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): for (int i = 0; i < dataset.getRowCount(); i++) {     groupIndex[i] = map.getGroupIndex( map.getGroup( dataset.getRowKey( i ) ) ); }  =>   for (int i = 0;; i++) {     groupIndex[i] = map.getGroupIndex( map.getGroup( dataset.getRowKey( i ) ) ); }
SDL_647:1138:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): for (int i = 0; i < dataset.getRowCount(); i++) {     groupIndex[i] = map.getGroupIndex( map.getGroup( dataset.getRowKey( i ) ) ); }  =>   for (int i = 0; i < dataset.getRowCount();) {     groupIndex[i] = map.getGroupIndex( map.getGroup( dataset.getRowKey( i ) ) ); }
SDL_648:1150:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): double[] positive = new double[groupCount]; double[] negative = new double[groupCount]; int seriesCount = dataset.getRowCount(); for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         hasValidData = true;         double value = number.doubleValue();         if (value > 0.0) {             positive[groupIndex[series]] = positive[groupIndex[series]] + value;         }         if (value < 0.0) {             negative[groupIndex[series]] = negative[groupIndex[series]] + value;         }     } } for (int g = 0; g < groupCount; g++) {     minimum[g] = Math.min( minimum[g], negative[g] );     maximum[g] = Math.max( maximum[g], positive[g] ); }  =>   double[] positive = new double[groupCount]; double[] negative = new double[groupCount]; int seriesCount = dataset.getRowCount(); for (int g = 0; g < groupCount; g++) {     minimum[g] = Math.min( minimum[g], negative[g] );     maximum[g] = Math.max( maximum[g], positive[g] ); }
SDL_649:1159:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): double[] positive = new double[groupCount]; double[] negative = new double[groupCount]; int seriesCount = dataset.getRowCount(); for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         hasValidData = true;         double value = number.doubleValue();         if (value > 0.0) {             positive[groupIndex[series]] = positive[groupIndex[series]] + value;         }         if (value < 0.0) {             negative[groupIndex[series]] = negative[groupIndex[series]] + value;         }     } } for (int g = 0; g < groupCount; g++) {     minimum[g] = Math.min( minimum[g], negative[g] );     maximum[g] = Math.max( maximum[g], positive[g] ); }  =>   double[] positive = new double[groupCount]; double[] negative = new double[groupCount]; int seriesCount = dataset.getRowCount(); for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         hasValidData = true;         double value = number.doubleValue();         if (value > 0.0) {             positive[groupIndex[series]] = positive[groupIndex[series]] + value;         }         if (value < 0.0) {             negative[groupIndex[series]] = negative[groupIndex[series]] + value;         }     } }
SDL_650:1164:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): for (int item = 0; item < categoryCount; item++) {     double[] positive = new double[groupCount];     double[] negative = new double[groupCount];     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             hasValidData = true;             double value = number.doubleValue();             if (value > 0.0) {                 positive[groupIndex[series]] = positive[groupIndex[series]] + value;             }             if (value < 0.0) {                 negative[groupIndex[series]] = negative[groupIndex[series]] + value;             }         }     }     for (int g = 0; g < groupCount; g++) {         minimum[g] = Math.min( minimum[g], negative[g] );         maximum[g] = Math.max( maximum[g], positive[g] );     } }  =>   for (int item = 0;; item++) {     double[] positive = new double[groupCount];     double[] negative = new double[groupCount];     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             hasValidData = true;             double value = number.doubleValue();             if (value > 0.0) {                 positive[groupIndex[series]] = positive[groupIndex[series]] + value;             }             if (value < 0.0) {                 negative[groupIndex[series]] = negative[groupIndex[series]] + value;             }         }     }     for (int g = 0; g < groupCount; g++) {         minimum[g] = Math.min( minimum[g], negative[g] );         maximum[g] = Math.max( maximum[g], positive[g] );     } }
SDL_651:1164:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): for (int item = 0; item < categoryCount; item++) {     double[] positive = new double[groupCount];     double[] negative = new double[groupCount];     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             hasValidData = true;             double value = number.doubleValue();             if (value > 0.0) {                 positive[groupIndex[series]] = positive[groupIndex[series]] + value;             }             if (value < 0.0) {                 negative[groupIndex[series]] = negative[groupIndex[series]] + value;             }         }     }     for (int g = 0; g < groupCount; g++) {         minimum[g] = Math.min( minimum[g], negative[g] );         maximum[g] = Math.max( maximum[g], positive[g] );     } }  =>   for (int item = 0; item < categoryCount;) {     double[] positive = new double[groupCount];     double[] negative = new double[groupCount];     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             hasValidData = true;             double value = number.doubleValue();             if (value > 0.0) {                 positive[groupIndex[series]] = positive[groupIndex[series]] + value;             }             if (value < 0.0) {                 negative[groupIndex[series]] = negative[groupIndex[series]] + value;             }         }     }     for (int g = 0; g < groupCount; g++) {         minimum[g] = Math.min( minimum[g], negative[g] );         maximum[g] = Math.max( maximum[g], positive[g] );     } }
SDL_652:1148:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): java.lang.Number number = dataset.getValue( series, item ); if (number != null) {     hasValidData = true;     double value = number.doubleValue();     if (value > 0.0) {         positive[groupIndex[series]] = positive[groupIndex[series]] + value;     }     if (value < 0.0) {         negative[groupIndex[series]] = negative[groupIndex[series]] + value;     } }  =>   java.lang.Number number = dataset.getValue( series, item );
SDL_653:1159:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         hasValidData = true;         double value = number.doubleValue();         if (value > 0.0) {             positive[groupIndex[series]] = positive[groupIndex[series]] + value;         }         if (value < 0.0) {             negative[groupIndex[series]] = negative[groupIndex[series]] + value;         }     } }  =>   for (int series = 0;; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         hasValidData = true;         double value = number.doubleValue();         if (value > 0.0) {             positive[groupIndex[series]] = positive[groupIndex[series]] + value;         }         if (value < 0.0) {             negative[groupIndex[series]] = negative[groupIndex[series]] + value;         }     } }
SDL_654:1159:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         hasValidData = true;         double value = number.doubleValue();         if (value > 0.0) {             positive[groupIndex[series]] = positive[groupIndex[series]] + value;         }         if (value < 0.0) {             negative[groupIndex[series]] = negative[groupIndex[series]] + value;         }     } }  =>   for (int series = 0; series < seriesCount;) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         hasValidData = true;         double value = number.doubleValue();         if (value > 0.0) {             positive[groupIndex[series]] = positive[groupIndex[series]] + value;         }         if (value < 0.0) {             negative[groupIndex[series]] = negative[groupIndex[series]] + value;         }     } }
SDL_655:1156:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): hasValidData = true; double value = number.doubleValue(); if (value > 0.0) {     positive[groupIndex[series]] = positive[groupIndex[series]] + value; } if (value < 0.0) {     negative[groupIndex[series]] = negative[groupIndex[series]] + value; }  =>   double value = number.doubleValue(); if (value > 0.0) {     positive[groupIndex[series]] = positive[groupIndex[series]] + value; } if (value < 0.0) {     negative[groupIndex[series]] = negative[groupIndex[series]] + value; }
SDL_656:1154:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): hasValidData = true; double value = number.doubleValue(); if (value > 0.0) {     positive[groupIndex[series]] = positive[groupIndex[series]] + value; } if (value < 0.0) {     negative[groupIndex[series]] = negative[groupIndex[series]] + value; }  =>   hasValidData = true; double value = number.doubleValue(); if (value < 0.0) {     negative[groupIndex[series]] = negative[groupIndex[series]] + value; }
SDL_657:1154:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): hasValidData = true; double value = number.doubleValue(); if (value > 0.0) {     positive[groupIndex[series]] = positive[groupIndex[series]] + value; } if (value < 0.0) {     negative[groupIndex[series]] = negative[groupIndex[series]] + value; }  =>   hasValidData = true; double value = number.doubleValue(); if (value > 0.0) {     positive[groupIndex[series]] = positive[groupIndex[series]] + value; }
SDL_658:1158:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): if (number != null) {     hasValidData = true;     double value = number.doubleValue();     if (value > 0.0) {         positive[groupIndex[series]] = positive[groupIndex[series]] + value;     }     if (value < 0.0) {         negative[groupIndex[series]] = negative[groupIndex[series]] + value;     } }  =>   if (true) {     hasValidData = true;     double value = number.doubleValue();     if (value > 0.0) {         positive[groupIndex[series]] = positive[groupIndex[series]] + value;     }     if (value < 0.0) {         negative[groupIndex[series]] = negative[groupIndex[series]] + value;     } }
SDL_659:1152:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): positive[groupIndex[series]] = positive[groupIndex[series]] + value;  =>  
SDL_660:1154:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): if (value > 0.0) {     positive[groupIndex[series]] = positive[groupIndex[series]] + value; }  =>   if (true) {     positive[groupIndex[series]] = positive[groupIndex[series]] + value; }
SDL_661:1155:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): negative[groupIndex[series]] = negative[groupIndex[series]] + value;  =>  
SDL_662:1157:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): if (value < 0.0) {     negative[groupIndex[series]] = negative[groupIndex[series]] + value; }  =>   if (true) {     negative[groupIndex[series]] = negative[groupIndex[series]] + value; }
SDL_663:1161:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): minimum[g] = Math.min( minimum[g], negative[g] ); maximum[g] = Math.max( maximum[g], positive[g] );  =>   maximum[g] = Math.max( maximum[g], positive[g] );
SDL_664:1161:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): minimum[g] = Math.min( minimum[g], negative[g] ); maximum[g] = Math.max( maximum[g], positive[g] );  =>   minimum[g] = Math.min( minimum[g], negative[g] );
SDL_665:1163:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): for (int g = 0; g < groupCount; g++) {     minimum[g] = Math.min( minimum[g], negative[g] );     maximum[g] = Math.max( maximum[g], positive[g] ); }  =>   for (int g = 0;; g++) {     minimum[g] = Math.min( minimum[g], negative[g] );     maximum[g] = Math.max( maximum[g], positive[g] ); }
SDL_666:1163:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): for (int g = 0; g < groupCount; g++) {     minimum[g] = Math.min( minimum[g], negative[g] );     maximum[g] = Math.max( maximum[g], positive[g] ); }  =>   for (int g = 0; g < groupCount;) {     minimum[g] = Math.min( minimum[g], negative[g] );     maximum[g] = Math.max( maximum[g], positive[g] ); }
SDL_667:1165:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): for (int j = 0; j < groupCount; j++) {     result = Range.combine( result, new org.jfree.data.Range( minimum[j], maximum[j] ) ); }  =>  
SDL_668:1169:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): if (hasValidData) {     for (int j = 0; j < groupCount; j++) {         result = Range.combine( result, new org.jfree.data.Range( minimum[j], maximum[j] ) );     } }  =>   if (true) {     for (int j = 0; j < groupCount; j++) {         result = Range.combine( result, new org.jfree.data.Range( minimum[j], maximum[j] ) );     } }
SDL_669:1166:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): result = Range.combine( result, new org.jfree.data.Range( minimum[j], maximum[j] ) );  =>  
SDL_670:1168:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): for (int j = 0; j < groupCount; j++) {     result = Range.combine( result, new org.jfree.data.Range( minimum[j], maximum[j] ) ); }  =>   for (int j = 0;; j++) {     result = Range.combine( result, new org.jfree.data.Range( minimum[j], maximum[j] ) ); }
SDL_671:1168:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap): for (int j = 0; j < groupCount; j++) {     result = Range.combine( result, new org.jfree.data.Range( minimum[j], maximum[j] ) ); }  =>   for (int j = 0; j < groupCount;) {     result = Range.combine( result, new org.jfree.data.Range( minimum[j], maximum[j] ) ); }
SDL_672:1197:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } java.lang.Number result = null; boolean hasValidData = false; double minimum = 0.0; int categoryCount = dataset.getColumnCount(); for (int item = 0; item < categoryCount; item++) {     double total = 0.0;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             hasValidData = true;             double value = number.doubleValue();             if (value < 0.0) {                 total = total + value;             }         }     }     minimum = Math.min( minimum, total ); } if (hasValidData) {     result = new java.lang.Double( minimum ); } return result;  =>   java.lang.Number result = null; boolean hasValidData = false; double minimum = 0.0; int categoryCount = dataset.getColumnCount(); for (int item = 0; item < categoryCount; item++) {     double total = 0.0;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             hasValidData = true;             double value = number.doubleValue();             if (value < 0.0) {                 total = total + value;             }         }     }     minimum = Math.min( minimum, total ); } if (hasValidData) {     result = new java.lang.Double( minimum ); } return result;
SDL_673:1185:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } java.lang.Number result = null; boolean hasValidData = false; double minimum = 0.0; int categoryCount = dataset.getColumnCount(); for (int item = 0; item < categoryCount; item++) {     double total = 0.0;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             hasValidData = true;             double value = number.doubleValue();             if (value < 0.0) {                 total = total + value;             }         }     }     minimum = Math.min( minimum, total ); } if (hasValidData) {     result = new java.lang.Double( minimum ); } return result;  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } java.lang.Number result = null; boolean hasValidData = false; double minimum = 0.0; int categoryCount = dataset.getColumnCount(); if (hasValidData) {     result = new java.lang.Double( minimum ); } return result;
SDL_674:1197:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } java.lang.Number result = null; boolean hasValidData = false; double minimum = 0.0; int categoryCount = dataset.getColumnCount(); for (int item = 0; item < categoryCount; item++) {     double total = 0.0;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             hasValidData = true;             double value = number.doubleValue();             if (value < 0.0) {                 total = total + value;             }         }     }     minimum = Math.min( minimum, total ); } if (hasValidData) {     result = new java.lang.Double( minimum ); } return result;  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } java.lang.Number result = null; boolean hasValidData = false; double minimum = 0.0; int categoryCount = dataset.getColumnCount(); for (int item = 0; item < categoryCount; item++) {     double total = 0.0;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             hasValidData = true;             double value = number.doubleValue();             if (value < 0.0) {                 total = total + value;             }         }     }     minimum = Math.min( minimum, total ); } return result;
SDL_675:1175:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_676:1177:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_677:1185:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): double total = 0.0; int seriesCount = dataset.getRowCount(); for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         hasValidData = true;         double value = number.doubleValue();         if (value < 0.0) {             total = total + value;         }     } } minimum = Math.min( minimum, total );  =>   double total = 0.0; int seriesCount = dataset.getRowCount(); minimum = Math.min( minimum, total );
SDL_678:1194:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): double total = 0.0; int seriesCount = dataset.getRowCount(); for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         hasValidData = true;         double value = number.doubleValue();         if (value < 0.0) {             total = total + value;         }     } } minimum = Math.min( minimum, total );  =>   double total = 0.0; int seriesCount = dataset.getRowCount(); for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         hasValidData = true;         double value = number.doubleValue();         if (value < 0.0) {             total = total + value;         }     } }
SDL_679:1196:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): for (int item = 0; item < categoryCount; item++) {     double total = 0.0;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             hasValidData = true;             double value = number.doubleValue();             if (value < 0.0) {                 total = total + value;             }         }     }     minimum = Math.min( minimum, total ); }  =>   for (int item = 0;; item++) {     double total = 0.0;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             hasValidData = true;             double value = number.doubleValue();             if (value < 0.0) {                 total = total + value;             }         }     }     minimum = Math.min( minimum, total ); }
SDL_680:1196:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): for (int item = 0; item < categoryCount; item++) {     double total = 0.0;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             hasValidData = true;             double value = number.doubleValue();             if (value < 0.0) {                 total = total + value;             }         }     }     minimum = Math.min( minimum, total ); }  =>   for (int item = 0; item < categoryCount;) {     double total = 0.0;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             hasValidData = true;             double value = number.doubleValue();             if (value < 0.0) {                 total = total + value;             }         }     }     minimum = Math.min( minimum, total ); }
SDL_681:1186:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): java.lang.Number number = dataset.getValue( series, item ); if (number != null) {     hasValidData = true;     double value = number.doubleValue();     if (value < 0.0) {         total = total + value;     } }  =>   java.lang.Number number = dataset.getValue( series, item );
SDL_682:1194:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         hasValidData = true;         double value = number.doubleValue();         if (value < 0.0) {             total = total + value;         }     } }  =>   for (int series = 0;; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         hasValidData = true;         double value = number.doubleValue();         if (value < 0.0) {             total = total + value;         }     } }
SDL_683:1194:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         hasValidData = true;         double value = number.doubleValue();         if (value < 0.0) {             total = total + value;         }     } }  =>   for (int series = 0; series < seriesCount;) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         hasValidData = true;         double value = number.doubleValue();         if (value < 0.0) {             total = total + value;         }     } }
SDL_684:1191:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): hasValidData = true; double value = number.doubleValue(); if (value < 0.0) {     total = total + value; }  =>   double value = number.doubleValue(); if (value < 0.0) {     total = total + value; }
SDL_685:1189:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): hasValidData = true; double value = number.doubleValue(); if (value < 0.0) {     total = total + value; }  =>   hasValidData = true; double value = number.doubleValue();
SDL_686:1193:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): if (number != null) {     hasValidData = true;     double value = number.doubleValue();     if (value < 0.0) {         total = total + value;     } }  =>   if (true) {     hasValidData = true;     double value = number.doubleValue();     if (value < 0.0) {         total = total + value;     } }
SDL_687:1190:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): total = total + value;  =>  
SDL_688:1192:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): if (value < 0.0) {     total = total + value; }  =>   if (true) {     total = total + value; }
SDL_689:1197:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): result = new java.lang.Double( minimum );  =>  
SDL_690:1199:java.lang.Number_findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset): if (hasValidData) {     result = new java.lang.Double( minimum ); }  =>   if (true) {     result = new java.lang.Double( minimum ); }
SDL_691:1227:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } java.lang.Number result = null; boolean hasValidData = false; double maximum = 0.0; int categoryCount = dataset.getColumnCount(); for (int item = 0; item < categoryCount; item++) {     double total = 0.0;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             hasValidData = true;             double value = number.doubleValue();             if (value > 0.0) {                 total = total + value;             }         }     }     maximum = Math.max( maximum, total ); } if (hasValidData) {     result = new java.lang.Double( maximum ); } return result;  =>   java.lang.Number result = null; boolean hasValidData = false; double maximum = 0.0; int categoryCount = dataset.getColumnCount(); for (int item = 0; item < categoryCount; item++) {     double total = 0.0;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             hasValidData = true;             double value = number.doubleValue();             if (value > 0.0) {                 total = total + value;             }         }     }     maximum = Math.max( maximum, total ); } if (hasValidData) {     result = new java.lang.Double( maximum ); } return result;
SDL_692:1215:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } java.lang.Number result = null; boolean hasValidData = false; double maximum = 0.0; int categoryCount = dataset.getColumnCount(); for (int item = 0; item < categoryCount; item++) {     double total = 0.0;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             hasValidData = true;             double value = number.doubleValue();             if (value > 0.0) {                 total = total + value;             }         }     }     maximum = Math.max( maximum, total ); } if (hasValidData) {     result = new java.lang.Double( maximum ); } return result;  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } java.lang.Number result = null; boolean hasValidData = false; double maximum = 0.0; int categoryCount = dataset.getColumnCount(); if (hasValidData) {     result = new java.lang.Double( maximum ); } return result;
SDL_693:1227:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } java.lang.Number result = null; boolean hasValidData = false; double maximum = 0.0; int categoryCount = dataset.getColumnCount(); for (int item = 0; item < categoryCount; item++) {     double total = 0.0;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             hasValidData = true;             double value = number.doubleValue();             if (value > 0.0) {                 total = total + value;             }         }     }     maximum = Math.max( maximum, total ); } if (hasValidData) {     result = new java.lang.Double( maximum ); } return result;  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } java.lang.Number result = null; boolean hasValidData = false; double maximum = 0.0; int categoryCount = dataset.getColumnCount(); for (int item = 0; item < categoryCount; item++) {     double total = 0.0;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             hasValidData = true;             double value = number.doubleValue();             if (value > 0.0) {                 total = total + value;             }         }     }     maximum = Math.max( maximum, total ); } return result;
SDL_694:1205:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_695:1207:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_696:1215:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): double total = 0.0; int seriesCount = dataset.getRowCount(); for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         hasValidData = true;         double value = number.doubleValue();         if (value > 0.0) {             total = total + value;         }     } } maximum = Math.max( maximum, total );  =>   double total = 0.0; int seriesCount = dataset.getRowCount(); maximum = Math.max( maximum, total );
SDL_697:1224:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): double total = 0.0; int seriesCount = dataset.getRowCount(); for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         hasValidData = true;         double value = number.doubleValue();         if (value > 0.0) {             total = total + value;         }     } } maximum = Math.max( maximum, total );  =>   double total = 0.0; int seriesCount = dataset.getRowCount(); for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         hasValidData = true;         double value = number.doubleValue();         if (value > 0.0) {             total = total + value;         }     } }
SDL_698:1226:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): for (int item = 0; item < categoryCount; item++) {     double total = 0.0;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             hasValidData = true;             double value = number.doubleValue();             if (value > 0.0) {                 total = total + value;             }         }     }     maximum = Math.max( maximum, total ); }  =>   for (int item = 0;; item++) {     double total = 0.0;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             hasValidData = true;             double value = number.doubleValue();             if (value > 0.0) {                 total = total + value;             }         }     }     maximum = Math.max( maximum, total ); }
SDL_699:1226:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): for (int item = 0; item < categoryCount; item++) {     double total = 0.0;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             hasValidData = true;             double value = number.doubleValue();             if (value > 0.0) {                 total = total + value;             }         }     }     maximum = Math.max( maximum, total ); }  =>   for (int item = 0; item < categoryCount;) {     double total = 0.0;     int seriesCount = dataset.getRowCount();     for (int series = 0; series < seriesCount; series++) {         java.lang.Number number = dataset.getValue( series, item );         if (number != null) {             hasValidData = true;             double value = number.doubleValue();             if (value > 0.0) {                 total = total + value;             }         }     }     maximum = Math.max( maximum, total ); }
SDL_700:1216:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): java.lang.Number number = dataset.getValue( series, item ); if (number != null) {     hasValidData = true;     double value = number.doubleValue();     if (value > 0.0) {         total = total + value;     } }  =>   java.lang.Number number = dataset.getValue( series, item );
SDL_701:1224:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         hasValidData = true;         double value = number.doubleValue();         if (value > 0.0) {             total = total + value;         }     } }  =>   for (int series = 0;; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         hasValidData = true;         double value = number.doubleValue();         if (value > 0.0) {             total = total + value;         }     } }
SDL_702:1224:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): for (int series = 0; series < seriesCount; series++) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         hasValidData = true;         double value = number.doubleValue();         if (value > 0.0) {             total = total + value;         }     } }  =>   for (int series = 0; series < seriesCount;) {     java.lang.Number number = dataset.getValue( series, item );     if (number != null) {         hasValidData = true;         double value = number.doubleValue();         if (value > 0.0) {             total = total + value;         }     } }
SDL_703:1221:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): hasValidData = true; double value = number.doubleValue(); if (value > 0.0) {     total = total + value; }  =>   double value = number.doubleValue(); if (value > 0.0) {     total = total + value; }
SDL_704:1219:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): hasValidData = true; double value = number.doubleValue(); if (value > 0.0) {     total = total + value; }  =>   hasValidData = true; double value = number.doubleValue();
SDL_705:1223:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): if (number != null) {     hasValidData = true;     double value = number.doubleValue();     if (value > 0.0) {         total = total + value;     } }  =>   if (true) {     hasValidData = true;     double value = number.doubleValue();     if (value > 0.0) {         total = total + value;     } }
SDL_706:1220:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): total = total + value;  =>  
SDL_707:1222:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): if (value > 0.0) {     total = total + value; }  =>   if (true) {     total = total + value; }
SDL_708:1227:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): result = new java.lang.Double( maximum );  =>  
SDL_709:1229:java.lang.Number_findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset): if (hasValidData) {     result = new java.lang.Double( maximum ); }  =>   if (true) {     result = new java.lang.Double( maximum ); }
SDL_710:1267:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } double minimum = base; double maximum = base; for (int itemNo = 0; itemNo < dataset.getItemCount(); itemNo++) {     double positive = base;     double negative = base;     int seriesCount = dataset.getSeriesCount();     for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {         double y = dataset.getYValue( seriesNo, itemNo );         if (!Double.isNaN( y )) {             if (y > 0.0) {                 positive += y;             } else {                 negative += y;             }         }     }     if (positive > maximum) {         maximum = positive;     }     if (negative < minimum) {         minimum = negative;     } } if (minimum <= maximum) {     return new org.jfree.data.Range( minimum, maximum ); } else {     return null; }  =>   double minimum = base; double maximum = base; for (int itemNo = 0; itemNo < dataset.getItemCount(); itemNo++) {     double positive = base;     double negative = base;     int seriesCount = dataset.getSeriesCount();     for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {         double y = dataset.getYValue( seriesNo, itemNo );         if (!Double.isNaN( y )) {             if (y > 0.0) {                 positive += y;             } else {                 negative += y;             }         }     }     if (positive > maximum) {         maximum = positive;     }     if (negative < minimum) {         minimum = negative;     } } if (minimum <= maximum) {     return new org.jfree.data.Range( minimum, maximum ); } else {     return null; }
SDL_711:1249:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } double minimum = base; double maximum = base; for (int itemNo = 0; itemNo < dataset.getItemCount(); itemNo++) {     double positive = base;     double negative = base;     int seriesCount = dataset.getSeriesCount();     for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {         double y = dataset.getYValue( seriesNo, itemNo );         if (!Double.isNaN( y )) {             if (y > 0.0) {                 positive += y;             } else {                 negative += y;             }         }     }     if (positive > maximum) {         maximum = positive;     }     if (negative < minimum) {         minimum = negative;     } } if (minimum <= maximum) {     return new org.jfree.data.Range( minimum, maximum ); } else {     return null; }  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } double minimum = base; double maximum = base; if (minimum <= maximum) {     return new org.jfree.data.Range( minimum, maximum ); } else {     return null; }
SDL_712:1265:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } double minimum = base; double maximum = base; for (int itemNo = 0; itemNo < dataset.getItemCount(); itemNo++) {     double positive = base;     double negative = base;     int seriesCount = dataset.getSeriesCount();     for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {         double y = dataset.getYValue( seriesNo, itemNo );         if (!Double.isNaN( y )) {             if (y > 0.0) {                 positive += y;             } else {                 negative += y;             }         }     }     if (positive > maximum) {         maximum = positive;     }     if (negative < minimum) {         minimum = negative;     } } if (minimum <= maximum) {     return new org.jfree.data.Range( minimum, maximum ); } else {     return null; }  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } double minimum = base; double maximum = base; for (int itemNo = 0; itemNo < dataset.getItemCount(); itemNo++) {     double positive = base;     double negative = base;     int seriesCount = dataset.getSeriesCount();     for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {         double y = dataset.getYValue( seriesNo, itemNo );         if (!Double.isNaN( y )) {             if (y > 0.0) {                 positive += y;             } else {                 negative += y;             }         }     }     if (positive > maximum) {         maximum = positive;     }     if (negative < minimum) {         minimum = negative;     } }
SDL_713:1240:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_714:1242:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_715:1254:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): double positive = base; double negative = base; int seriesCount = dataset.getSeriesCount(); for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {     double y = dataset.getYValue( seriesNo, itemNo );     if (!Double.isNaN( y )) {         if (y > 0.0) {             positive += y;         } else {             negative += y;         }     } } if (positive > maximum) {     maximum = positive; } if (negative < minimum) {     minimum = negative; }  =>   double positive = base; double negative = base; int seriesCount = dataset.getSeriesCount(); if (positive > maximum) {     maximum = positive; } if (negative < minimum) {     minimum = negative; }
SDL_716:1261:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): double positive = base; double negative = base; int seriesCount = dataset.getSeriesCount(); for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {     double y = dataset.getYValue( seriesNo, itemNo );     if (!Double.isNaN( y )) {         if (y > 0.0) {             positive += y;         } else {             negative += y;         }     } } if (positive > maximum) {     maximum = positive; } if (negative < minimum) {     minimum = negative; }  =>   double positive = base; double negative = base; int seriesCount = dataset.getSeriesCount(); for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {     double y = dataset.getYValue( seriesNo, itemNo );     if (!Double.isNaN( y )) {         if (y > 0.0) {             positive += y;         } else {             negative += y;         }     } } if (negative < minimum) {     minimum = negative; }
SDL_717:1261:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): double positive = base; double negative = base; int seriesCount = dataset.getSeriesCount(); for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {     double y = dataset.getYValue( seriesNo, itemNo );     if (!Double.isNaN( y )) {         if (y > 0.0) {             positive += y;         } else {             negative += y;         }     } } if (positive > maximum) {     maximum = positive; } if (negative < minimum) {     minimum = negative; }  =>   double positive = base; double negative = base; int seriesCount = dataset.getSeriesCount(); for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {     double y = dataset.getYValue( seriesNo, itemNo );     if (!Double.isNaN( y )) {         if (y > 0.0) {             positive += y;         } else {             negative += y;         }     } } if (positive > maximum) {     maximum = positive; }
SDL_718:1265:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): for (int itemNo = 0; itemNo < dataset.getItemCount(); itemNo++) {     double positive = base;     double negative = base;     int seriesCount = dataset.getSeriesCount();     for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {         double y = dataset.getYValue( seriesNo, itemNo );         if (!Double.isNaN( y )) {             if (y > 0.0) {                 positive += y;             } else {                 negative += y;             }         }     }     if (positive > maximum) {         maximum = positive;     }     if (negative < minimum) {         minimum = negative;     } }  =>   for (int itemNo = 0;; itemNo++) {     double positive = base;     double negative = base;     int seriesCount = dataset.getSeriesCount();     for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {         double y = dataset.getYValue( seriesNo, itemNo );         if (!Double.isNaN( y )) {             if (y > 0.0) {                 positive += y;             } else {                 negative += y;             }         }     }     if (positive > maximum) {         maximum = positive;     }     if (negative < minimum) {         minimum = negative;     } }
SDL_719:1265:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): for (int itemNo = 0; itemNo < dataset.getItemCount(); itemNo++) {     double positive = base;     double negative = base;     int seriesCount = dataset.getSeriesCount();     for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {         double y = dataset.getYValue( seriesNo, itemNo );         if (!Double.isNaN( y )) {             if (y > 0.0) {                 positive += y;             } else {                 negative += y;             }         }     }     if (positive > maximum) {         maximum = positive;     }     if (negative < minimum) {         minimum = negative;     } }  =>   for (int itemNo = 0; itemNo < dataset.getItemCount();) {     double positive = base;     double negative = base;     int seriesCount = dataset.getSeriesCount();     for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {         double y = dataset.getYValue( seriesNo, itemNo );         if (!Double.isNaN( y )) {             if (y > 0.0) {                 positive += y;             } else {                 negative += y;             }         }     }     if (positive > maximum) {         maximum = positive;     }     if (negative < minimum) {         minimum = negative;     } }
SDL_720:1250:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): double y = dataset.getYValue( seriesNo, itemNo ); if (!Double.isNaN( y )) {     if (y > 0.0) {         positive += y;     } else {         negative += y;     } }  =>   double y = dataset.getYValue( seriesNo, itemNo );
SDL_721:1258:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {     double y = dataset.getYValue( seriesNo, itemNo );     if (!Double.isNaN( y )) {         if (y > 0.0) {             positive += y;         } else {             negative += y;         }     } }  =>   for (int seriesNo = 0;; seriesNo++) {     double y = dataset.getYValue( seriesNo, itemNo );     if (!Double.isNaN( y )) {         if (y > 0.0) {             positive += y;         } else {             negative += y;         }     } }
SDL_722:1258:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {     double y = dataset.getYValue( seriesNo, itemNo );     if (!Double.isNaN( y )) {         if (y > 0.0) {             positive += y;         } else {             negative += y;         }     } }  =>   for (int seriesNo = 0; seriesNo < seriesCount;) {     double y = dataset.getYValue( seriesNo, itemNo );     if (!Double.isNaN( y )) {         if (y > 0.0) {             positive += y;         } else {             negative += y;         }     } }
SDL_723:1251:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): if (y > 0.0) {     positive += y; } else {     negative += y; }  =>  
SDL_724:1257:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): if (!Double.isNaN( y )) {     if (y > 0.0) {         positive += y;     } else {         negative += y;     } }  =>   if (true) {     if (y > 0.0) {         positive += y;     } else {         negative += y;     } }
SDL_725:1252:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): positive += y;  =>  
SDL_726:1256:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): if (y > 0.0) {     positive += y; } else {     negative += y; }  =>   if (true) {     positive += y; } else {     negative += y; }
SDL_727:1254:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): negative += y;  =>  
SDL_728:1259:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): maximum = positive;  =>  
SDL_729:1261:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): if (positive > maximum) {     maximum = positive; }  =>   if (true) {     maximum = positive; }
SDL_730:1262:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): minimum = negative;  =>  
SDL_731:1264:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): if (negative < minimum) {     minimum = negative; }  =>   if (true) {     minimum = negative; }
SDL_732:1270:org.jfree.data.Range_findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double): if (minimum <= maximum) {     return new org.jfree.data.Range( minimum, maximum ); } else {     return null; }  =>   if (true) {     return new org.jfree.data.Range( minimum, maximum ); } else {     return null; }
SDL_733:1277:double_calculateStackTotal(org.jfree.data.xy.TableXYDataset,int): double total = 0.0; int seriesCount = dataset.getSeriesCount(); for (int s = 0; s < seriesCount; s++) {     double value = dataset.getYValue( s, item );     if (!Double.isNaN( value )) {         total = total + value;     } } return total;  =>   double total = 0.0; int seriesCount = dataset.getSeriesCount(); return total;
SDL_734:1278:double_calculateStackTotal(org.jfree.data.xy.TableXYDataset,int): double value = dataset.getYValue( s, item ); if (!Double.isNaN( value )) {     total = total + value; }  =>   double value = dataset.getYValue( s, item );
SDL_735:1282:double_calculateStackTotal(org.jfree.data.xy.TableXYDataset,int): for (int s = 0; s < seriesCount; s++) {     double value = dataset.getYValue( s, item );     if (!Double.isNaN( value )) {         total = total + value;     } }  =>   for (int s = 0;; s++) {     double value = dataset.getYValue( s, item );     if (!Double.isNaN( value )) {         total = total + value;     } }
SDL_736:1282:double_calculateStackTotal(org.jfree.data.xy.TableXYDataset,int): for (int s = 0; s < seriesCount; s++) {     double value = dataset.getYValue( s, item );     if (!Double.isNaN( value )) {         total = total + value;     } }  =>   for (int s = 0; s < seriesCount;) {     double value = dataset.getYValue( s, item );     if (!Double.isNaN( value )) {         total = total + value;     } }
SDL_737:1279:double_calculateStackTotal(org.jfree.data.xy.TableXYDataset,int): total = total + value;  =>  
SDL_738:1281:double_calculateStackTotal(org.jfree.data.xy.TableXYDataset,int): if (!Double.isNaN( value )) {     total = total + value; }  =>   if (true) {     total = total + value; }
SDL_739:1283:double_calculateStackTotal(org.jfree.data.xy.TableXYDataset,int): return total;  =>   return 0;
SDL_740:1310:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } boolean allItemsNull = true; double minimum = 0.0; double maximum = 0.0; for (int row = 0; row < dataset.getRowCount(); row++) {     double runningTotal = 0.0;     for (int column = 0; column <= dataset.getColumnCount() - 1; column++) {         java.lang.Number n = dataset.getValue( row, column );         if (n != null) {             allItemsNull = false;             double value = n.doubleValue();             if (!Double.isNaN( value )) {                 runningTotal = runningTotal + value;                 minimum = Math.min( minimum, runningTotal );                 maximum = Math.max( maximum, runningTotal );             }         }     } } if (!allItemsNull) {     return new org.jfree.data.Range( minimum, maximum ); } else {     return null; }  =>   boolean allItemsNull = true; double minimum = 0.0; double maximum = 0.0; for (int row = 0; row < dataset.getRowCount(); row++) {     double runningTotal = 0.0;     for (int column = 0; column <= dataset.getColumnCount() - 1; column++) {         java.lang.Number n = dataset.getValue( row, column );         if (n != null) {             allItemsNull = false;             double value = n.doubleValue();             if (!Double.isNaN( value )) {                 runningTotal = runningTotal + value;                 minimum = Math.min( minimum, runningTotal );                 maximum = Math.max( maximum, runningTotal );             }         }     } } if (!allItemsNull) {     return new org.jfree.data.Range( minimum, maximum ); } else {     return null; }
SDL_741:1298:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } boolean allItemsNull = true; double minimum = 0.0; double maximum = 0.0; for (int row = 0; row < dataset.getRowCount(); row++) {     double runningTotal = 0.0;     for (int column = 0; column <= dataset.getColumnCount() - 1; column++) {         java.lang.Number n = dataset.getValue( row, column );         if (n != null) {             allItemsNull = false;             double value = n.doubleValue();             if (!Double.isNaN( value )) {                 runningTotal = runningTotal + value;                 minimum = Math.min( minimum, runningTotal );                 maximum = Math.max( maximum, runningTotal );             }         }     } } if (!allItemsNull) {     return new org.jfree.data.Range( minimum, maximum ); } else {     return null; }  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } boolean allItemsNull = true; double minimum = 0.0; double maximum = 0.0; if (!allItemsNull) {     return new org.jfree.data.Range( minimum, maximum ); } else {     return null; }
SDL_742:1308:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } boolean allItemsNull = true; double minimum = 0.0; double maximum = 0.0; for (int row = 0; row < dataset.getRowCount(); row++) {     double runningTotal = 0.0;     for (int column = 0; column <= dataset.getColumnCount() - 1; column++) {         java.lang.Number n = dataset.getValue( row, column );         if (n != null) {             allItemsNull = false;             double value = n.doubleValue();             if (!Double.isNaN( value )) {                 runningTotal = runningTotal + value;                 minimum = Math.min( minimum, runningTotal );                 maximum = Math.max( maximum, runningTotal );             }         }     } } if (!allItemsNull) {     return new org.jfree.data.Range( minimum, maximum ); } else {     return null; }  =>   if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); } boolean allItemsNull = true; double minimum = 0.0; double maximum = 0.0; for (int row = 0; row < dataset.getRowCount(); row++) {     double runningTotal = 0.0;     for (int column = 0; column <= dataset.getColumnCount() - 1; column++) {         java.lang.Number n = dataset.getValue( row, column );         if (n != null) {             allItemsNull = false;             double value = n.doubleValue();             if (!Double.isNaN( value )) {                 runningTotal = runningTotal + value;                 minimum = Math.min( minimum, runningTotal );                 maximum = Math.max( maximum, runningTotal );             }         }     } }
SDL_743:1288:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" );  =>  
SDL_744:1290:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): if (dataset == null) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'dataset' argument.\" ); }
SDL_745:1295:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): double runningTotal = 0.0; for (int column = 0; column <= dataset.getColumnCount() - 1; column++) {     java.lang.Number n = dataset.getValue( row, column );     if (n != null) {         allItemsNull = false;         double value = n.doubleValue();         if (!Double.isNaN( value )) {             runningTotal = runningTotal + value;             minimum = Math.min( minimum, runningTotal );             maximum = Math.max( maximum, runningTotal );         }     } }  =>   double runningTotal = 0.0;
SDL_746:1308:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): for (int row = 0; row < dataset.getRowCount(); row++) {     double runningTotal = 0.0;     for (int column = 0; column <= dataset.getColumnCount() - 1; column++) {         java.lang.Number n = dataset.getValue( row, column );         if (n != null) {             allItemsNull = false;             double value = n.doubleValue();             if (!Double.isNaN( value )) {                 runningTotal = runningTotal + value;                 minimum = Math.min( minimum, runningTotal );                 maximum = Math.max( maximum, runningTotal );             }         }     } }  =>   for (int row = 0;; row++) {     double runningTotal = 0.0;     for (int column = 0; column <= dataset.getColumnCount() - 1; column++) {         java.lang.Number n = dataset.getValue( row, column );         if (n != null) {             allItemsNull = false;             double value = n.doubleValue();             if (!Double.isNaN( value )) {                 runningTotal = runningTotal + value;                 minimum = Math.min( minimum, runningTotal );                 maximum = Math.max( maximum, runningTotal );             }         }     } }
SDL_747:1308:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): for (int row = 0; row < dataset.getRowCount(); row++) {     double runningTotal = 0.0;     for (int column = 0; column <= dataset.getColumnCount() - 1; column++) {         java.lang.Number n = dataset.getValue( row, column );         if (n != null) {             allItemsNull = false;             double value = n.doubleValue();             if (!Double.isNaN( value )) {                 runningTotal = runningTotal + value;                 minimum = Math.min( minimum, runningTotal );                 maximum = Math.max( maximum, runningTotal );             }         }     } }  =>   for (int row = 0; row < dataset.getRowCount();) {     double runningTotal = 0.0;     for (int column = 0; column <= dataset.getColumnCount() - 1; column++) {         java.lang.Number n = dataset.getValue( row, column );         if (n != null) {             allItemsNull = false;             double value = n.doubleValue();             if (!Double.isNaN( value )) {                 runningTotal = runningTotal + value;                 minimum = Math.min( minimum, runningTotal );                 maximum = Math.max( maximum, runningTotal );             }         }     } }
SDL_748:1297:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): java.lang.Number n = dataset.getValue( row, column ); if (n != null) {     allItemsNull = false;     double value = n.doubleValue();     if (!Double.isNaN( value )) {         runningTotal = runningTotal + value;         minimum = Math.min( minimum, runningTotal );         maximum = Math.max( maximum, runningTotal );     } }  =>   java.lang.Number n = dataset.getValue( row, column );
SDL_749:1307:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): for (int column = 0; column <= dataset.getColumnCount() - 1; column++) {     java.lang.Number n = dataset.getValue( row, column );     if (n != null) {         allItemsNull = false;         double value = n.doubleValue();         if (!Double.isNaN( value )) {             runningTotal = runningTotal + value;             minimum = Math.min( minimum, runningTotal );             maximum = Math.max( maximum, runningTotal );         }     } }  =>   for (int column = 0;; column++) {     java.lang.Number n = dataset.getValue( row, column );     if (n != null) {         allItemsNull = false;         double value = n.doubleValue();         if (!Double.isNaN( value )) {             runningTotal = runningTotal + value;             minimum = Math.min( minimum, runningTotal );             maximum = Math.max( maximum, runningTotal );         }     } }
SDL_750:1307:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): for (int column = 0; column <= dataset.getColumnCount() - 1; column++) {     java.lang.Number n = dataset.getValue( row, column );     if (n != null) {         allItemsNull = false;         double value = n.doubleValue();         if (!Double.isNaN( value )) {             runningTotal = runningTotal + value;             minimum = Math.min( minimum, runningTotal );             maximum = Math.max( maximum, runningTotal );         }     } }  =>   for (int column = 0; column <= dataset.getColumnCount() - 1;) {     java.lang.Number n = dataset.getValue( row, column );     if (n != null) {         allItemsNull = false;         double value = n.doubleValue();         if (!Double.isNaN( value )) {             runningTotal = runningTotal + value;             minimum = Math.min( minimum, runningTotal );             maximum = Math.max( maximum, runningTotal );         }     } }
SDL_751:1304:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): allItemsNull = false; double value = n.doubleValue(); if (!Double.isNaN( value )) {     runningTotal = runningTotal + value;     minimum = Math.min( minimum, runningTotal );     maximum = Math.max( maximum, runningTotal ); }  =>   double value = n.doubleValue(); if (!Double.isNaN( value )) {     runningTotal = runningTotal + value;     minimum = Math.min( minimum, runningTotal );     maximum = Math.max( maximum, runningTotal ); }
SDL_752:1300:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): allItemsNull = false; double value = n.doubleValue(); if (!Double.isNaN( value )) {     runningTotal = runningTotal + value;     minimum = Math.min( minimum, runningTotal );     maximum = Math.max( maximum, runningTotal ); }  =>   allItemsNull = false; double value = n.doubleValue();
SDL_753:1306:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): if (n != null) {     allItemsNull = false;     double value = n.doubleValue();     if (!Double.isNaN( value )) {         runningTotal = runningTotal + value;         minimum = Math.min( minimum, runningTotal );         maximum = Math.max( maximum, runningTotal );     } }  =>   if (true) {     allItemsNull = false;     double value = n.doubleValue();     if (!Double.isNaN( value )) {         runningTotal = runningTotal + value;         minimum = Math.min( minimum, runningTotal );         maximum = Math.max( maximum, runningTotal );     } }
SDL_754:1303:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): runningTotal = runningTotal + value; minimum = Math.min( minimum, runningTotal ); maximum = Math.max( maximum, runningTotal );  =>   minimum = Math.min( minimum, runningTotal ); maximum = Math.max( maximum, runningTotal );
SDL_755:1303:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): runningTotal = runningTotal + value; minimum = Math.min( minimum, runningTotal ); maximum = Math.max( maximum, runningTotal );  =>   runningTotal = runningTotal + value; maximum = Math.max( maximum, runningTotal );
SDL_756:1303:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): runningTotal = runningTotal + value; minimum = Math.min( minimum, runningTotal ); maximum = Math.max( maximum, runningTotal );  =>   runningTotal = runningTotal + value; minimum = Math.min( minimum, runningTotal );
SDL_757:1305:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): if (!Double.isNaN( value )) {     runningTotal = runningTotal + value;     minimum = Math.min( minimum, runningTotal );     maximum = Math.max( maximum, runningTotal ); }  =>   if (true) {     runningTotal = runningTotal + value;     minimum = Math.min( minimum, runningTotal );     maximum = Math.max( maximum, runningTotal ); }
SDL_758:1313:org.jfree.data.Range_findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset): if (!allItemsNull) {     return new org.jfree.data.Range( minimum, maximum ); } else {     return null; }  =>   if (true) {     return new org.jfree.data.Range( minimum, maximum ); } else {     return null; }
