AORB_1:129:void_add(org.jfree.data.xy.XYDataItem,boolean):-index - 1 => -index * 1
AORB_2:129:void_add(org.jfree.data.xy.XYDataItem,boolean):-index - 1 => -index / 1
AORB_3:129:void_add(org.jfree.data.xy.XYDataItem,boolean):-index - 1 => -index % 1
AORB_4:129:void_add(org.jfree.data.xy.XYDataItem,boolean):-index - 1 => -index + 1
AORB_5:246:org.jfree.data.xy.XYDataItem_addOrUpdate(java.lang.Number,java.lang.Number):-index - 1 => -index * 1
AORB_6:246:org.jfree.data.xy.XYDataItem_addOrUpdate(java.lang.Number,java.lang.Number):-index - 1 => -index / 1
AORB_7:246:org.jfree.data.xy.XYDataItem_addOrUpdate(java.lang.Number,java.lang.Number):-index - 1 => -index % 1
AORB_8:246:org.jfree.data.xy.XYDataItem_addOrUpdate(java.lang.Number,java.lang.Number):-index - 1 => -index + 1
AORB_9:349:int_hashCode():29 * result => 29 / result
AORB_10:349:int_hashCode():29 * result => 29 % result
AORB_11:349:int_hashCode():29 * result => 29 + result
AORB_12:349:int_hashCode():29 * result => 29 - result
AORB_13:349:int_hashCode():29 * result + item.hashCode() => 29 * result * item.hashCode()
AORB_14:349:int_hashCode():29 * result + item.hashCode() => 29 * result / item.hashCode()
AORB_15:349:int_hashCode():29 * result + item.hashCode() => 29 * result % item.hashCode()
AORB_16:349:int_hashCode():29 * result + item.hashCode() => 29 * result - item.hashCode()
AORB_17:352:int_hashCode():count - 1 => count * 1
AORB_18:352:int_hashCode():count - 1 => count / 1
AORB_19:352:int_hashCode():count - 1 => count % 1
AORB_20:352:int_hashCode():count - 1 => count + 1
AORB_21:353:int_hashCode():29 * result => 29 / result
AORB_22:353:int_hashCode():29 * result => 29 % result
AORB_23:353:int_hashCode():29 * result => 29 + result
AORB_24:353:int_hashCode():29 * result => 29 - result
AORB_25:353:int_hashCode():29 * result + item.hashCode() => 29 * result * item.hashCode()
AORB_26:353:int_hashCode():29 * result + item.hashCode() => 29 * result / item.hashCode()
AORB_27:353:int_hashCode():29 * result + item.hashCode() => 29 * result % item.hashCode()
AORB_28:353:int_hashCode():29 * result + item.hashCode() => 29 * result - item.hashCode()
AORB_29:356:int_hashCode():count / 2 => count * 2
AORB_30:356:int_hashCode():count / 2 => count % 2
AORB_31:356:int_hashCode():count / 2 => count + 2
AORB_32:356:int_hashCode():count / 2 => count - 2
AORB_33:357:int_hashCode():29 * result => 29 / result
AORB_34:357:int_hashCode():29 * result => 29 % result
AORB_35:357:int_hashCode():29 * result => 29 + result
AORB_36:357:int_hashCode():29 * result => 29 - result
AORB_37:357:int_hashCode():29 * result + item.hashCode() => 29 * result * item.hashCode()
AORB_38:357:int_hashCode():29 * result + item.hashCode() => 29 * result / item.hashCode()
AORB_39:357:int_hashCode():29 * result + item.hashCode() => 29 * result % item.hashCode()
AORB_40:357:int_hashCode():29 * result + item.hashCode() => 29 * result - item.hashCode()
AORB_41:359:int_hashCode():29 * result => 29 / result
AORB_42:359:int_hashCode():29 * result => 29 % result
AORB_43:359:int_hashCode():29 * result => 29 + result
AORB_44:359:int_hashCode():29 * result => 29 - result
AORB_45:359:int_hashCode():29 * result + this.maximumItemCount => 29 * result * this.maximumItemCount
AORB_46:359:int_hashCode():29 * result + this.maximumItemCount => 29 * result / this.maximumItemCount
AORB_47:359:int_hashCode():29 * result + this.maximumItemCount => 29 * result % this.maximumItemCount
AORB_48:359:int_hashCode():29 * result + this.maximumItemCount => 29 * result - this.maximumItemCount
AORB_49:360:int_hashCode():29 * result => 29 / result
AORB_50:360:int_hashCode():29 * result => 29 % result
AORB_51:360:int_hashCode():29 * result => 29 + result
AORB_52:360:int_hashCode():29 * result => 29 - result
AORB_53:360:int_hashCode():29 * result + (this.autoSort ? 1 : 0) => 29 * result * (this.autoSort ? 1 : 0)
AORB_54:360:int_hashCode():29 * result + (this.autoSort ? 1 : 0) => 29 * result / (this.autoSort ? 1 : 0)
AORB_55:360:int_hashCode():29 * result + (this.autoSort ? 1 : 0) => 29 * result % (this.autoSort ? 1 : 0)
AORB_56:360:int_hashCode():29 * result + (this.autoSort ? 1 : 0) => 29 * result - (this.autoSort ? 1 : 0)
AORB_57:361:int_hashCode():29 * result => 29 / result
AORB_58:361:int_hashCode():29 * result => 29 % result
AORB_59:361:int_hashCode():29 * result => 29 + result
AORB_60:361:int_hashCode():29 * result => 29 - result
AORB_61:361:int_hashCode():29 * result + (this.allowDuplicateXValues ? 1 : 0) => 29 * result * (this.allowDuplicateXValues ? 1 : 0)
AORB_62:361:int_hashCode():29 * result + (this.allowDuplicateXValues ? 1 : 0) => 29 * result / (this.allowDuplicateXValues ? 1 : 0)
AORB_63:361:int_hashCode():29 * result + (this.allowDuplicateXValues ? 1 : 0) => 29 * result % (this.allowDuplicateXValues ? 1 : 0)
AORB_64:361:int_hashCode():29 * result + (this.allowDuplicateXValues ? 1 : 0) => 29 * result - (this.allowDuplicateXValues ? 1 : 0)
ROR_1:76:void_setMaximumItemCount(int): this.data.size() > maximum  =>   this.data.size() >= maximum
ROR_2:76:void_setMaximumItemCount(int): this.data.size() > maximum  =>   this.data.size() < maximum
ROR_3:76:void_setMaximumItemCount(int): this.data.size() > maximum  =>   this.data.size() <= maximum
ROR_4:76:void_setMaximumItemCount(int): this.data.size() > maximum  =>   this.data.size() == maximum
ROR_5:76:void_setMaximumItemCount(int): this.data.size() > maximum  =>   this.data.size() != maximum
ROR_6:76:void_setMaximumItemCount(int): this.data.size() > maximum  =>   true
ROR_7:76:void_setMaximumItemCount(int): this.data.size() > maximum  =>   false
ROR_8:123:void_add(org.jfree.data.xy.XYDataItem,boolean): item == null  =>   item != null
ROR_9:128:void_add(org.jfree.data.xy.XYDataItem,boolean): index < 0  =>   index > 0
ROR_10:128:void_add(org.jfree.data.xy.XYDataItem,boolean): index < 0  =>   index >= 0
ROR_11:128:void_add(org.jfree.data.xy.XYDataItem,boolean): index < 0  =>   index <= 0
ROR_12:128:void_add(org.jfree.data.xy.XYDataItem,boolean): index < 0  =>   index == 0
ROR_13:128:void_add(org.jfree.data.xy.XYDataItem,boolean): index < 0  =>   index != 0
ROR_14:128:void_add(org.jfree.data.xy.XYDataItem,boolean): index < 0  =>   true
ROR_15:128:void_add(org.jfree.data.xy.XYDataItem,boolean): index < 0  =>   false
ROR_16:133:void_add(org.jfree.data.xy.XYDataItem,boolean): index < size  =>   index > size
ROR_17:133:void_add(org.jfree.data.xy.XYDataItem,boolean): index < size  =>   index >= size
ROR_18:133:void_add(org.jfree.data.xy.XYDataItem,boolean): index < size  =>   index <= size
ROR_19:133:void_add(org.jfree.data.xy.XYDataItem,boolean): index < size  =>   index == size
ROR_20:133:void_add(org.jfree.data.xy.XYDataItem,boolean): index < size  =>   index != size
ROR_21:133:void_add(org.jfree.data.xy.XYDataItem,boolean): index < size  =>   true
ROR_22:133:void_add(org.jfree.data.xy.XYDataItem,boolean): index < size  =>   false
ROR_23:133:void_add(org.jfree.data.xy.XYDataItem,boolean): item.compareTo( this.data.get( index ) ) == 0  =>   item.compareTo( this.data.get( index ) ) > 0
ROR_24:133:void_add(org.jfree.data.xy.XYDataItem,boolean): item.compareTo( this.data.get( index ) ) == 0  =>   item.compareTo( this.data.get( index ) ) >= 0
ROR_25:133:void_add(org.jfree.data.xy.XYDataItem,boolean): item.compareTo( this.data.get( index ) ) == 0  =>   item.compareTo( this.data.get( index ) ) < 0
ROR_26:133:void_add(org.jfree.data.xy.XYDataItem,boolean): item.compareTo( this.data.get( index ) ) == 0  =>   item.compareTo( this.data.get( index ) ) <= 0
ROR_27:133:void_add(org.jfree.data.xy.XYDataItem,boolean): item.compareTo( this.data.get( index ) ) == 0  =>   item.compareTo( this.data.get( index ) ) != 0
ROR_28:133:void_add(org.jfree.data.xy.XYDataItem,boolean): item.compareTo( this.data.get( index ) ) == 0  =>   true
ROR_29:133:void_add(org.jfree.data.xy.XYDataItem,boolean): item.compareTo( this.data.get( index ) ) == 0  =>   false
ROR_30:136:void_add(org.jfree.data.xy.XYDataItem,boolean): index < this.data.size()  =>   index > this.data.size()
ROR_31:136:void_add(org.jfree.data.xy.XYDataItem,boolean): index < this.data.size()  =>   index >= this.data.size()
ROR_32:136:void_add(org.jfree.data.xy.XYDataItem,boolean): index < this.data.size()  =>   index <= this.data.size()
ROR_33:136:void_add(org.jfree.data.xy.XYDataItem,boolean): index < this.data.size()  =>   index == this.data.size()
ROR_34:136:void_add(org.jfree.data.xy.XYDataItem,boolean): index < this.data.size()  =>   index != this.data.size()
ROR_35:136:void_add(org.jfree.data.xy.XYDataItem,boolean): index < this.data.size()  =>   true
ROR_36:136:void_add(org.jfree.data.xy.XYDataItem,boolean): index < this.data.size()  =>   false
ROR_37:148:void_add(org.jfree.data.xy.XYDataItem,boolean): index >= 0  =>   index > 0
ROR_38:148:void_add(org.jfree.data.xy.XYDataItem,boolean): index >= 0  =>   index < 0
ROR_39:148:void_add(org.jfree.data.xy.XYDataItem,boolean): index >= 0  =>   index <= 0
ROR_40:148:void_add(org.jfree.data.xy.XYDataItem,boolean): index >= 0  =>   index == 0
ROR_41:148:void_add(org.jfree.data.xy.XYDataItem,boolean): index >= 0  =>   index != 0
ROR_42:148:void_add(org.jfree.data.xy.XYDataItem,boolean): index >= 0  =>   true
ROR_43:148:void_add(org.jfree.data.xy.XYDataItem,boolean): index >= 0  =>   false
ROR_44:154:void_add(org.jfree.data.xy.XYDataItem,boolean): getItemCount() > this.maximumItemCount  =>   getItemCount() >= this.maximumItemCount
ROR_45:154:void_add(org.jfree.data.xy.XYDataItem,boolean): getItemCount() > this.maximumItemCount  =>   getItemCount() < this.maximumItemCount
ROR_46:154:void_add(org.jfree.data.xy.XYDataItem,boolean): getItemCount() > this.maximumItemCount  =>   getItemCount() <= this.maximumItemCount
ROR_47:154:void_add(org.jfree.data.xy.XYDataItem,boolean): getItemCount() > this.maximumItemCount  =>   getItemCount() == this.maximumItemCount
ROR_48:154:void_add(org.jfree.data.xy.XYDataItem,boolean): getItemCount() > this.maximumItemCount  =>   getItemCount() != this.maximumItemCount
ROR_49:154:void_add(org.jfree.data.xy.XYDataItem,boolean): getItemCount() > this.maximumItemCount  =>   true
ROR_50:154:void_add(org.jfree.data.xy.XYDataItem,boolean): getItemCount() > this.maximumItemCount  =>   false
ROR_51:164:void_delete(int,int): i <= end  =>   i > end
ROR_52:164:void_delete(int,int): i <= end  =>   i >= end
ROR_53:164:void_delete(int,int): i <= end  =>   i < end
ROR_54:164:void_delete(int,int): i <= end  =>   i == end
ROR_55:164:void_delete(int,int): i <= end  =>   i != end
ROR_56:164:void_delete(int,int): i <= end  =>   true
ROR_57:164:void_delete(int,int): i <= end  =>   false
ROR_58:184:void_clear(): this.data.size() > 0  =>   this.data.size() >= 0
ROR_59:184:void_clear(): this.data.size() > 0  =>   this.data.size() < 0
ROR_60:184:void_clear(): this.data.size() > 0  =>   this.data.size() <= 0
ROR_61:184:void_clear(): this.data.size() > 0  =>   this.data.size() == 0
ROR_62:184:void_clear(): this.data.size() > 0  =>   this.data.size() != 0
ROR_63:184:void_clear(): this.data.size() > 0  =>   true
ROR_64:184:void_clear(): this.data.size() > 0  =>   false
ROR_65:215:void_update(java.lang.Number,java.lang.Number): index < 0  =>   index > 0
ROR_66:215:void_update(java.lang.Number,java.lang.Number): index < 0  =>   index >= 0
ROR_67:215:void_update(java.lang.Number,java.lang.Number): index < 0  =>   index <= 0
ROR_68:215:void_update(java.lang.Number,java.lang.Number): index < 0  =>   index == 0
ROR_69:215:void_update(java.lang.Number,java.lang.Number): index < 0  =>   index != 0
ROR_70:215:void_update(java.lang.Number,java.lang.Number): index < 0  =>   true
ROR_71:215:void_update(java.lang.Number,java.lang.Number): index < 0  =>   false
ROR_72:231:org.jfree.data.xy.XYDataItem_addOrUpdate(java.lang.Number,java.lang.Number): x == null  =>   x != null
ROR_73:236:org.jfree.data.xy.XYDataItem_addOrUpdate(java.lang.Number,java.lang.Number): index >= 0  =>   index > 0
ROR_74:236:org.jfree.data.xy.XYDataItem_addOrUpdate(java.lang.Number,java.lang.Number): index >= 0  =>   index < 0
ROR_75:236:org.jfree.data.xy.XYDataItem_addOrUpdate(java.lang.Number,java.lang.Number): index >= 0  =>   index <= 0
ROR_76:236:org.jfree.data.xy.XYDataItem_addOrUpdate(java.lang.Number,java.lang.Number): index >= 0  =>   index == 0
ROR_77:236:org.jfree.data.xy.XYDataItem_addOrUpdate(java.lang.Number,java.lang.Number): index >= 0  =>   index != 0
ROR_78:236:org.jfree.data.xy.XYDataItem_addOrUpdate(java.lang.Number,java.lang.Number): index >= 0  =>   true
ROR_79:236:org.jfree.data.xy.XYDataItem_addOrUpdate(java.lang.Number,java.lang.Number): index >= 0  =>   false
ROR_80:250:org.jfree.data.xy.XYDataItem_addOrUpdate(java.lang.Number,java.lang.Number): getItemCount() > this.maximumItemCount  =>   getItemCount() >= this.maximumItemCount
ROR_81:250:org.jfree.data.xy.XYDataItem_addOrUpdate(java.lang.Number,java.lang.Number): getItemCount() > this.maximumItemCount  =>   getItemCount() < this.maximumItemCount
ROR_82:250:org.jfree.data.xy.XYDataItem_addOrUpdate(java.lang.Number,java.lang.Number): getItemCount() > this.maximumItemCount  =>   getItemCount() <= this.maximumItemCount
ROR_83:250:org.jfree.data.xy.XYDataItem_addOrUpdate(java.lang.Number,java.lang.Number): getItemCount() > this.maximumItemCount  =>   getItemCount() == this.maximumItemCount
ROR_84:250:org.jfree.data.xy.XYDataItem_addOrUpdate(java.lang.Number,java.lang.Number): getItemCount() > this.maximumItemCount  =>   getItemCount() != this.maximumItemCount
ROR_85:250:org.jfree.data.xy.XYDataItem_addOrUpdate(java.lang.Number,java.lang.Number): getItemCount() > this.maximumItemCount  =>   true
ROR_86:250:org.jfree.data.xy.XYDataItem_addOrUpdate(java.lang.Number,java.lang.Number): getItemCount() > this.maximumItemCount  =>   false
ROR_87:263:int_indexOf(java.lang.Number): i < this.data.size()  =>   i > this.data.size()
ROR_88:263:int_indexOf(java.lang.Number): i < this.data.size()  =>   i >= this.data.size()
ROR_89:263:int_indexOf(java.lang.Number): i < this.data.size()  =>   i <= this.data.size()
ROR_90:263:int_indexOf(java.lang.Number): i < this.data.size()  =>   i == this.data.size()
ROR_91:263:int_indexOf(java.lang.Number): i < this.data.size()  =>   i != this.data.size()
ROR_92:263:int_indexOf(java.lang.Number): i < this.data.size()  =>   true
ROR_93:263:int_indexOf(java.lang.Number): i < this.data.size()  =>   false
ROR_94:277:double_toArray(): i < itemCount  =>   i > itemCount
ROR_95:277:double_toArray(): i < itemCount  =>   i >= itemCount
ROR_96:277:double_toArray(): i < itemCount  =>   i <= itemCount
ROR_97:277:double_toArray(): i < itemCount  =>   i == itemCount
ROR_98:277:double_toArray(): i < itemCount  =>   i != itemCount
ROR_99:277:double_toArray(): i < itemCount  =>   true
ROR_100:277:double_toArray(): i < itemCount  =>   false
ROR_101:280:double_toArray(): y != null  =>   y == null
ROR_102:302:org.jfree.data.xy.XYSeries_createCopy(int,int): this.data.size() > 0  =>   this.data.size() >= 0
ROR_103:302:org.jfree.data.xy.XYSeries_createCopy(int,int): this.data.size() > 0  =>   this.data.size() < 0
ROR_104:302:org.jfree.data.xy.XYSeries_createCopy(int,int): this.data.size() > 0  =>   this.data.size() <= 0
ROR_105:302:org.jfree.data.xy.XYSeries_createCopy(int,int): this.data.size() > 0  =>   this.data.size() == 0
ROR_106:302:org.jfree.data.xy.XYSeries_createCopy(int,int): this.data.size() > 0  =>   this.data.size() != 0
ROR_107:302:org.jfree.data.xy.XYSeries_createCopy(int,int): this.data.size() > 0  =>   true
ROR_108:302:org.jfree.data.xy.XYSeries_createCopy(int,int): this.data.size() > 0  =>   false
ROR_109:303:org.jfree.data.xy.XYSeries_createCopy(int,int): index <= end  =>   index > end
ROR_110:303:org.jfree.data.xy.XYSeries_createCopy(int,int): index <= end  =>   index >= end
ROR_111:303:org.jfree.data.xy.XYSeries_createCopy(int,int): index <= end  =>   index < end
ROR_112:303:org.jfree.data.xy.XYSeries_createCopy(int,int): index <= end  =>   index == end
ROR_113:303:org.jfree.data.xy.XYSeries_createCopy(int,int): index <= end  =>   index != end
ROR_114:303:org.jfree.data.xy.XYSeries_createCopy(int,int): index <= end  =>   true
ROR_115:303:org.jfree.data.xy.XYSeries_createCopy(int,int): index <= end  =>   false
ROR_116:318:boolean_equals(java.lang.Object): obj == this  =>   obj != this
ROR_117:328:boolean_equals(java.lang.Object): this.maximumItemCount != that.maximumItemCount  =>   this.maximumItemCount > that.maximumItemCount
ROR_118:328:boolean_equals(java.lang.Object): this.maximumItemCount != that.maximumItemCount  =>   this.maximumItemCount >= that.maximumItemCount
ROR_119:328:boolean_equals(java.lang.Object): this.maximumItemCount != that.maximumItemCount  =>   this.maximumItemCount < that.maximumItemCount
ROR_120:328:boolean_equals(java.lang.Object): this.maximumItemCount != that.maximumItemCount  =>   this.maximumItemCount <= that.maximumItemCount
ROR_121:328:boolean_equals(java.lang.Object): this.maximumItemCount != that.maximumItemCount  =>   this.maximumItemCount == that.maximumItemCount
ROR_122:328:boolean_equals(java.lang.Object): this.maximumItemCount != that.maximumItemCount  =>   true
ROR_123:328:boolean_equals(java.lang.Object): this.maximumItemCount != that.maximumItemCount  =>   false
ROR_124:331:boolean_equals(java.lang.Object): this.autoSort != that.autoSort  =>   this.autoSort == that.autoSort
ROR_125:334:boolean_equals(java.lang.Object): this.allowDuplicateXValues != that.allowDuplicateXValues  =>   this.allowDuplicateXValues == that.allowDuplicateXValues
ROR_126:347:int_hashCode(): count > 0  =>   count >= 0
ROR_127:347:int_hashCode(): count > 0  =>   count < 0
ROR_128:347:int_hashCode(): count > 0  =>   count <= 0
ROR_129:347:int_hashCode(): count > 0  =>   count == 0
ROR_130:347:int_hashCode(): count > 0  =>   count != 0
ROR_131:347:int_hashCode(): count > 0  =>   true
ROR_132:347:int_hashCode(): count > 0  =>   false
ROR_133:351:int_hashCode(): count > 1  =>   count >= 1
ROR_134:351:int_hashCode(): count > 1  =>   count < 1
ROR_135:351:int_hashCode(): count > 1  =>   count <= 1
ROR_136:351:int_hashCode(): count > 1  =>   count == 1
ROR_137:351:int_hashCode(): count > 1  =>   count != 1
ROR_138:351:int_hashCode(): count > 1  =>   true
ROR_139:351:int_hashCode(): count > 1  =>   false
ROR_140:355:int_hashCode(): count > 2  =>   count >= 2
ROR_141:355:int_hashCode(): count > 2  =>   count < 2
ROR_142:355:int_hashCode(): count > 2  =>   count <= 2
ROR_143:355:int_hashCode(): count > 2  =>   count == 2
ROR_144:355:int_hashCode(): count > 2  =>   count != 2
ROR_145:355:int_hashCode(): count > 2  =>   true
ROR_146:355:int_hashCode(): count > 2  =>   false
COR_1:133:void_add(org.jfree.data.xy.XYDataItem,boolean): index < size && item.compareTo( this.data.get( index ) ) == 0  =>   index < size || item.compareTo( this.data.get( index ) ) == 0
COR_2:133:void_add(org.jfree.data.xy.XYDataItem,boolean): index < size && item.compareTo( this.data.get( index ) ) == 0  =>   index < size ^ item.compareTo( this.data.get( index ) ) == 0
COR_3:236:org.jfree.data.xy.XYDataItem_addOrUpdate(java.lang.Number,java.lang.Number): index >= 0 && !this.allowDuplicateXValues  =>   index >= 0 || !this.allowDuplicateXValues
COR_4:236:org.jfree.data.xy.XYDataItem_addOrUpdate(java.lang.Number,java.lang.Number): index >= 0 && !this.allowDuplicateXValues  =>   index >= 0 ^ !this.allowDuplicateXValues
SDL_1:44:XYSeries(java.lang.Comparable,boolean,boolean): this.data = new java.util.ArrayList(); this.autoSort = autoSort; this.allowDuplicateXValues = allowDuplicateXValues;  =>   this.autoSort = autoSort; this.allowDuplicateXValues = allowDuplicateXValues;
SDL_2:44:XYSeries(java.lang.Comparable,boolean,boolean): this.data = new java.util.ArrayList(); this.autoSort = autoSort; this.allowDuplicateXValues = allowDuplicateXValues;  =>   this.data = new java.util.ArrayList(); this.allowDuplicateXValues = allowDuplicateXValues;
SDL_3:44:XYSeries(java.lang.Comparable,boolean,boolean): this.data = new java.util.ArrayList(); this.autoSort = autoSort; this.allowDuplicateXValues = allowDuplicateXValues;  =>   this.data = new java.util.ArrayList(); this.autoSort = autoSort;
SDL_4:50:boolean_getAutoSort(): return this.autoSort;  =>   return true;
SDL_5:50:boolean_getAutoSort(): return this.autoSort;  =>   return false;
SDL_6:55:boolean_getAllowDuplicateXValues(): return this.allowDuplicateXValues;  =>   return true;
SDL_7:55:boolean_getAllowDuplicateXValues(): return this.allowDuplicateXValues;  =>   return false;
SDL_8:60:int_getItemCount(): return this.data.size();  =>   return 0;
SDL_9:70:int_getMaximumItemCount(): return this.maximumItemCount;  =>   return 0;
SDL_10:82:void_setMaximumItemCount(int): this.maximumItemCount = maximum; boolean dataRemoved = false; while (this.data.size() > maximum) {     this.data.remove( 0 );     dataRemoved = true; } if (dataRemoved) {     fireSeriesChanged(); }  =>   boolean dataRemoved = false; while (this.data.size() > maximum) {     this.data.remove( 0 );     dataRemoved = true; } if (dataRemoved) {     fireSeriesChanged(); }
SDL_11:79:void_setMaximumItemCount(int): this.maximumItemCount = maximum; boolean dataRemoved = false; while (this.data.size() > maximum) {     this.data.remove( 0 );     dataRemoved = true; } if (dataRemoved) {     fireSeriesChanged(); }  =>   this.maximumItemCount = maximum; boolean dataRemoved = false; if (dataRemoved) {     fireSeriesChanged(); }
SDL_12:80:void_setMaximumItemCount(int): this.maximumItemCount = maximum; boolean dataRemoved = false; while (this.data.size() > maximum) {     this.data.remove( 0 );     dataRemoved = true; } if (dataRemoved) {     fireSeriesChanged(); }  =>   this.maximumItemCount = maximum; boolean dataRemoved = false; while (this.data.size() > maximum) {     this.data.remove( 0 );     dataRemoved = true; }
SDL_13:78:void_setMaximumItemCount(int): this.data.remove( 0 ); dataRemoved = true;  =>   dataRemoved = true;
SDL_14:78:void_setMaximumItemCount(int): this.data.remove( 0 ); dataRemoved = true;  =>   this.data.remove( 0 );
SDL_15:80:void_setMaximumItemCount(int): while (this.data.size() > maximum) {     this.data.remove( 0 );     dataRemoved = true; }  =>   while (true) {     this.data.remove( 0 );     dataRemoved = true; }
SDL_16:81:void_setMaximumItemCount(int): fireSeriesChanged();  =>  
SDL_17:83:void_setMaximumItemCount(int): if (dataRemoved) {     fireSeriesChanged(); }  =>   if (true) {     fireSeriesChanged(); }
SDL_18:87:void_add(org.jfree.data.xy.XYDataItem): add( item, true );  =>  
SDL_19:92:void_add(double,double): add( new java.lang.Double( x ), new java.lang.Double( y ), true );  =>  
SDL_20:97:void_add(double,double,boolean): add( new java.lang.Double( x ), new java.lang.Double( y ), notify );  =>  
SDL_21:102:void_add(double,java.lang.Number): add( new java.lang.Double( x ), y );  =>  
SDL_22:107:void_add(double,java.lang.Number,boolean): add( new java.lang.Double( x ), y, notify );  =>  
SDL_23:112:void_add(java.lang.Number,java.lang.Number): add( x, y, true );  =>  
SDL_24:118:void_add(java.lang.Number,java.lang.Number,boolean): org.jfree.data.xy.XYDataItem item = new org.jfree.data.xy.XYDataItem( x, y ); add( item, notify );  =>   org.jfree.data.xy.XYDataItem item = new org.jfree.data.xy.XYDataItem( x, y );
SDL_25:157:void_add(org.jfree.data.xy.XYDataItem,boolean): if (item == null) {     throw new java.lang.IllegalArgumentException( \"Null 'item' argument.\" ); } if (this.autoSort) {     int index = Collections.binarySearch( this.data, item );     if (index < 0) {         this.data.add( -index - 1, item );     } else {         if (this.allowDuplicateXValues) {             int size = this.data.size();             while (index < size && item.compareTo( this.data.get( index ) ) == 0) {                 index++;             }             if (index < this.data.size()) {                 this.data.add( index, item );             } else {                 this.data.add( item );             }         } else {             throw new org.jfree.data.general.SeriesException( \"X-value already exists.\" );         }     } } else {     if (!this.allowDuplicateXValues) {         int index = indexOf( item.getX() );         if (index >= 0) {             throw new org.jfree.data.general.SeriesException( \"X-value already exists.\" );         }     }     this.data.add( item ); } if (getItemCount() > this.maximumItemCount) {     this.data.remove( 0 ); } if (notify) {     fireSeriesChanged(); }  =>   if (this.autoSort) {     int index = Collections.binarySearch( this.data, item );     if (index < 0) {         this.data.add( -index - 1, item );     } else {         if (this.allowDuplicateXValues) {             int size = this.data.size();             while (index < size && item.compareTo( this.data.get( index ) ) == 0) {                 index++;             }             if (index < this.data.size()) {                 this.data.add( index, item );             } else {                 this.data.add( item );             }         } else {             throw new org.jfree.data.general.SeriesException( \"X-value already exists.\" );         }     } } else {     if (!this.allowDuplicateXValues) {         int index = indexOf( item.getX() );         if (index >= 0) {             throw new org.jfree.data.general.SeriesException( \"X-value already exists.\" );         }     }     this.data.add( item ); } if (getItemCount() > this.maximumItemCount) {     this.data.remove( 0 ); } if (notify) {     fireSeriesChanged(); }
SDL_26:132:void_add(org.jfree.data.xy.XYDataItem,boolean): if (item == null) {     throw new java.lang.IllegalArgumentException( \"Null 'item' argument.\" ); } if (this.autoSort) {     int index = Collections.binarySearch( this.data, item );     if (index < 0) {         this.data.add( -index - 1, item );     } else {         if (this.allowDuplicateXValues) {             int size = this.data.size();             while (index < size && item.compareTo( this.data.get( index ) ) == 0) {                 index++;             }             if (index < this.data.size()) {                 this.data.add( index, item );             } else {                 this.data.add( item );             }         } else {             throw new org.jfree.data.general.SeriesException( \"X-value already exists.\" );         }     } } else {     if (!this.allowDuplicateXValues) {         int index = indexOf( item.getX() );         if (index >= 0) {             throw new org.jfree.data.general.SeriesException( \"X-value already exists.\" );         }     }     this.data.add( item ); } if (getItemCount() > this.maximumItemCount) {     this.data.remove( 0 ); } if (notify) {     fireSeriesChanged(); }  =>   if (item == null) {     throw new java.lang.IllegalArgumentException( \"Null 'item' argument.\" ); } if (getItemCount() > this.maximumItemCount) {     this.data.remove( 0 ); } if (notify) {     fireSeriesChanged(); }
SDL_27:157:void_add(org.jfree.data.xy.XYDataItem,boolean): if (item == null) {     throw new java.lang.IllegalArgumentException( \"Null 'item' argument.\" ); } if (this.autoSort) {     int index = Collections.binarySearch( this.data, item );     if (index < 0) {         this.data.add( -index - 1, item );     } else {         if (this.allowDuplicateXValues) {             int size = this.data.size();             while (index < size && item.compareTo( this.data.get( index ) ) == 0) {                 index++;             }             if (index < this.data.size()) {                 this.data.add( index, item );             } else {                 this.data.add( item );             }         } else {             throw new org.jfree.data.general.SeriesException( \"X-value already exists.\" );         }     } } else {     if (!this.allowDuplicateXValues) {         int index = indexOf( item.getX() );         if (index >= 0) {             throw new org.jfree.data.general.SeriesException( \"X-value already exists.\" );         }     }     this.data.add( item ); } if (getItemCount() > this.maximumItemCount) {     this.data.remove( 0 ); } if (notify) {     fireSeriesChanged(); }  =>   if (item == null) {     throw new java.lang.IllegalArgumentException( \"Null 'item' argument.\" ); } if (this.autoSort) {     int index = Collections.binarySearch( this.data, item );     if (index < 0) {         this.data.add( -index - 1, item );     } else {         if (this.allowDuplicateXValues) {             int size = this.data.size();             while (index < size && item.compareTo( this.data.get( index ) ) == 0) {                 index++;             }             if (index < this.data.size()) {                 this.data.add( index, item );             } else {                 this.data.add( item );             }         } else {             throw new org.jfree.data.general.SeriesException( \"X-value already exists.\" );         }     } } else {     if (!this.allowDuplicateXValues) {         int index = indexOf( item.getX() );         if (index >= 0) {             throw new org.jfree.data.general.SeriesException( \"X-value already exists.\" );         }     }     this.data.add( item ); } if (notify) {     fireSeriesChanged(); }
SDL_28:157:void_add(org.jfree.data.xy.XYDataItem,boolean): if (item == null) {     throw new java.lang.IllegalArgumentException( \"Null 'item' argument.\" ); } if (this.autoSort) {     int index = Collections.binarySearch( this.data, item );     if (index < 0) {         this.data.add( -index - 1, item );     } else {         if (this.allowDuplicateXValues) {             int size = this.data.size();             while (index < size && item.compareTo( this.data.get( index ) ) == 0) {                 index++;             }             if (index < this.data.size()) {                 this.data.add( index, item );             } else {                 this.data.add( item );             }         } else {             throw new org.jfree.data.general.SeriesException( \"X-value already exists.\" );         }     } } else {     if (!this.allowDuplicateXValues) {         int index = indexOf( item.getX() );         if (index >= 0) {             throw new org.jfree.data.general.SeriesException( \"X-value already exists.\" );         }     }     this.data.add( item ); } if (getItemCount() > this.maximumItemCount) {     this.data.remove( 0 ); } if (notify) {     fireSeriesChanged(); }  =>   if (item == null) {     throw new java.lang.IllegalArgumentException( \"Null 'item' argument.\" ); } if (this.autoSort) {     int index = Collections.binarySearch( this.data, item );     if (index < 0) {         this.data.add( -index - 1, item );     } else {         if (this.allowDuplicateXValues) {             int size = this.data.size();             while (index < size && item.compareTo( this.data.get( index ) ) == 0) {                 index++;             }             if (index < this.data.size()) {                 this.data.add( index, item );             } else {                 this.data.add( item );             }         } else {             throw new org.jfree.data.general.SeriesException( \"X-value already exists.\" );         }     } } else {     if (!this.allowDuplicateXValues) {         int index = indexOf( item.getX() );         if (index >= 0) {             throw new org.jfree.data.general.SeriesException( \"X-value already exists.\" );         }     }     this.data.add( item ); } if (getItemCount() > this.maximumItemCount) {     this.data.remove( 0 ); }
SDL_29:124:void_add(org.jfree.data.xy.XYDataItem,boolean): throw new java.lang.IllegalArgumentException( \"Null 'item' argument.\" );  =>  
SDL_30:126:void_add(org.jfree.data.xy.XYDataItem,boolean): if (item == null) {     throw new java.lang.IllegalArgumentException( \"Null 'item' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'item' argument.\" ); }
SDL_31:128:void_add(org.jfree.data.xy.XYDataItem,boolean): int index = Collections.binarySearch( this.data, item ); if (index < 0) {     this.data.add( -index - 1, item ); } else {     if (this.allowDuplicateXValues) {         int size = this.data.size();         while (index < size && item.compareTo( this.data.get( index ) ) == 0) {             index++;         }         if (index < this.data.size()) {             this.data.add( index, item );         } else {             this.data.add( item );         }     } else {         throw new org.jfree.data.general.SeriesException( \"X-value already exists.\" );     } }  =>   int index = Collections.binarySearch( this.data, item );
SDL_32:154:void_add(org.jfree.data.xy.XYDataItem,boolean): if (this.autoSort) {     int index = Collections.binarySearch( this.data, item );     if (index < 0) {         this.data.add( -index - 1, item );     } else {         if (this.allowDuplicateXValues) {             int size = this.data.size();             while (index < size && item.compareTo( this.data.get( index ) ) == 0) {                 index++;             }             if (index < this.data.size()) {                 this.data.add( index, item );             } else {                 this.data.add( item );             }         } else {             throw new org.jfree.data.general.SeriesException( \"X-value already exists.\" );         }     } } else {     if (!this.allowDuplicateXValues) {         int index = indexOf( item.getX() );         if (index >= 0) {             throw new org.jfree.data.general.SeriesException( \"X-value already exists.\" );         }     }     this.data.add( item ); }  =>   if (true) {     int index = Collections.binarySearch( this.data, item );     if (index < 0) {         this.data.add( -index - 1, item );     } else {         if (this.allowDuplicateXValues) {             int size = this.data.size();             while (index < size && item.compareTo( this.data.get( index ) ) == 0) {                 index++;             }             if (index < this.data.size()) {                 this.data.add( index, item );             } else {                 this.data.add( item );             }         } else {             throw new org.jfree.data.general.SeriesException( \"X-value already exists.\" );         }     } } else {     if (!this.allowDuplicateXValues) {         int index = indexOf( item.getX() );         if (index >= 0) {             throw new org.jfree.data.general.SeriesException( \"X-value already exists.\" );         }     }     this.data.add( item ); }
SDL_33:147:void_add(org.jfree.data.xy.XYDataItem,boolean): if (!this.allowDuplicateXValues) {     int index = indexOf( item.getX() );     if (index >= 0) {         throw new org.jfree.data.general.SeriesException( \"X-value already exists.\" );     } } this.data.add( item );  =>   this.data.add( item );
SDL_34:152:void_add(org.jfree.data.xy.XYDataItem,boolean): if (!this.allowDuplicateXValues) {     int index = indexOf( item.getX() );     if (index >= 0) {         throw new org.jfree.data.general.SeriesException( \"X-value already exists.\" );     } } this.data.add( item );  =>   if (!this.allowDuplicateXValues) {     int index = indexOf( item.getX() );     if (index >= 0) {         throw new org.jfree.data.general.SeriesException( \"X-value already exists.\" );     } }
SDL_35:129:void_add(org.jfree.data.xy.XYDataItem,boolean): this.data.add( -index - 1, item );  =>  
SDL_36:145:void_add(org.jfree.data.xy.XYDataItem,boolean): if (index < 0) {     this.data.add( -index - 1, item ); } else {     if (this.allowDuplicateXValues) {         int size = this.data.size();         while (index < size && item.compareTo( this.data.get( index ) ) == 0) {             index++;         }         if (index < this.data.size()) {             this.data.add( index, item );         } else {             this.data.add( item );         }     } else {         throw new org.jfree.data.general.SeriesException( \"X-value already exists.\" );     } }  =>   if (true) {     this.data.add( -index - 1, item ); } else {     if (this.allowDuplicateXValues) {         int size = this.data.size();         while (index < size && item.compareTo( this.data.get( index ) ) == 0) {             index++;         }         if (index < this.data.size()) {             this.data.add( index, item );         } else {             this.data.add( item );         }     } else {         throw new org.jfree.data.general.SeriesException( \"X-value already exists.\" );     } }
SDL_37:131:void_add(org.jfree.data.xy.XYDataItem,boolean): if (this.allowDuplicateXValues) {     int size = this.data.size();     while (index < size && item.compareTo( this.data.get( index ) ) == 0) {         index++;     }     if (index < this.data.size()) {         this.data.add( index, item );     } else {         this.data.add( item );     } } else {     throw new org.jfree.data.general.SeriesException( \"X-value already exists.\" ); }  =>  
SDL_38:138:void_add(org.jfree.data.xy.XYDataItem,boolean): int size = this.data.size(); while (index < size && item.compareTo( this.data.get( index ) ) == 0) {     index++; } if (index < this.data.size()) {     this.data.add( index, item ); } else {     this.data.add( item ); }  =>   int size = this.data.size(); if (index < this.data.size()) {     this.data.add( index, item ); } else {     this.data.add( item ); }
SDL_39:136:void_add(org.jfree.data.xy.XYDataItem,boolean): int size = this.data.size(); while (index < size && item.compareTo( this.data.get( index ) ) == 0) {     index++; } if (index < this.data.size()) {     this.data.add( index, item ); } else {     this.data.add( item ); }  =>   int size = this.data.size(); while (index < size && item.compareTo( this.data.get( index ) ) == 0) {     index++; }
SDL_40:144:void_add(org.jfree.data.xy.XYDataItem,boolean): if (this.allowDuplicateXValues) {     int size = this.data.size();     while (index < size && item.compareTo( this.data.get( index ) ) == 0) {         index++;     }     if (index < this.data.size()) {         this.data.add( index, item );     } else {         this.data.add( item );     } } else {     throw new org.jfree.data.general.SeriesException( \"X-value already exists.\" ); }  =>   if (true) {     int size = this.data.size();     while (index < size && item.compareTo( this.data.get( index ) ) == 0) {         index++;     }     if (index < this.data.size()) {         this.data.add( index, item );     } else {         this.data.add( item );     } } else {     throw new org.jfree.data.general.SeriesException( \"X-value already exists.\" ); }
SDL_41:142:void_add(org.jfree.data.xy.XYDataItem,boolean): throw new org.jfree.data.general.SeriesException( \"X-value already exists.\" );  =>  
SDL_42:134:void_add(org.jfree.data.xy.XYDataItem,boolean): index++;  =>  
SDL_43:136:void_add(org.jfree.data.xy.XYDataItem,boolean): while (index < size && item.compareTo( this.data.get( index ) ) == 0) {     index++; }  =>   while (true) {     index++; }
SDL_44:137:void_add(org.jfree.data.xy.XYDataItem,boolean): this.data.add( index, item );  =>  
SDL_45:141:void_add(org.jfree.data.xy.XYDataItem,boolean): if (index < this.data.size()) {     this.data.add( index, item ); } else {     this.data.add( item ); }  =>   if (true) {     this.data.add( index, item ); } else {     this.data.add( item ); }
SDL_46:139:void_add(org.jfree.data.xy.XYDataItem,boolean): this.data.add( item );  =>  
SDL_47:148:void_add(org.jfree.data.xy.XYDataItem,boolean): int index = indexOf( item.getX() ); if (index >= 0) {     throw new org.jfree.data.general.SeriesException( \"X-value already exists.\" ); }  =>   int index = indexOf( item.getX() );
SDL_48:152:void_add(org.jfree.data.xy.XYDataItem,boolean): if (!this.allowDuplicateXValues) {     int index = indexOf( item.getX() );     if (index >= 0) {         throw new org.jfree.data.general.SeriesException( \"X-value already exists.\" );     } }  =>   if (true) {     int index = indexOf( item.getX() );     if (index >= 0) {         throw new org.jfree.data.general.SeriesException( \"X-value already exists.\" );     } }
SDL_49:149:void_add(org.jfree.data.xy.XYDataItem,boolean): throw new org.jfree.data.general.SeriesException( \"X-value already exists.\" );  =>  
SDL_50:151:void_add(org.jfree.data.xy.XYDataItem,boolean): if (index >= 0) {     throw new org.jfree.data.general.SeriesException( \"X-value already exists.\" ); }  =>   if (true) {     throw new org.jfree.data.general.SeriesException( \"X-value already exists.\" ); }
SDL_51:155:void_add(org.jfree.data.xy.XYDataItem,boolean): this.data.remove( 0 );  =>  
SDL_52:157:void_add(org.jfree.data.xy.XYDataItem,boolean): if (getItemCount() > this.maximumItemCount) {     this.data.remove( 0 ); }  =>   if (true) {     this.data.remove( 0 ); }
SDL_53:158:void_add(org.jfree.data.xy.XYDataItem,boolean): fireSeriesChanged();  =>  
SDL_54:160:void_add(org.jfree.data.xy.XYDataItem,boolean): if (notify) {     fireSeriesChanged(); }  =>   if (true) {     fireSeriesChanged(); }
SDL_55:165:void_delete(int,int): for (int i = start; i <= end; i++) {     this.data.remove( start ); } fireSeriesChanged();  =>   fireSeriesChanged();
SDL_56:167:void_delete(int,int): for (int i = start; i <= end; i++) {     this.data.remove( start ); } fireSeriesChanged();  =>   for (int i = start; i <= end; i++) {     this.data.remove( start ); }
SDL_57:165:void_delete(int,int): this.data.remove( start );  =>  
SDL_58:167:void_delete(int,int): for (int i = start; i <= end; i++) {     this.data.remove( start ); }  =>   for (int i = start;; i++) {     this.data.remove( start ); }
SDL_59:167:void_delete(int,int): for (int i = start; i <= end; i++) {     this.data.remove( start ); }  =>   for (int i = start; i <= end;) {     this.data.remove( start ); }
SDL_60:174:org.jfree.data.xy.XYDataItem_remove(int): org.jfree.data.xy.XYDataItem result = (org.jfree.data.xy.XYDataItem) this.data.remove( index ); fireSeriesChanged(); return result;  =>   org.jfree.data.xy.XYDataItem result = (org.jfree.data.xy.XYDataItem) this.data.remove( index ); return result;
SDL_61:184:void_clear(): if (this.data.size() > 0) {     this.data.clear();     fireSeriesChanged(); }  =>  
SDL_62:186:void_clear(): this.data.clear(); fireSeriesChanged();  =>   fireSeriesChanged();
SDL_63:186:void_clear(): this.data.clear(); fireSeriesChanged();  =>   this.data.clear();
SDL_64:188:void_clear(): if (this.data.size() > 0) {     this.data.clear();     fireSeriesChanged(); }  =>   if (true) {     this.data.clear();     fireSeriesChanged(); }
SDL_65:209:void_updateByIndex(int,java.lang.Number): org.jfree.data.xy.XYDataItem item = getDataItem( index ); item.setY( y ); fireSeriesChanged();  =>   org.jfree.data.xy.XYDataItem item = getDataItem( index ); fireSeriesChanged();
SDL_66:209:void_updateByIndex(int,java.lang.Number): org.jfree.data.xy.XYDataItem item = getDataItem( index ); item.setY( y ); fireSeriesChanged();  =>   org.jfree.data.xy.XYDataItem item = getDataItem( index ); item.setY( y );
SDL_67:215:void_update(java.lang.Number,java.lang.Number): int index = indexOf( x ); if (index < 0) {     throw new org.jfree.data.general.SeriesException( \"No observation for x = \" + x ); } else {     org.jfree.data.xy.XYDataItem item = getDataItem( index );     item.setY( y );     fireSeriesChanged(); }  =>   int index = indexOf( x );
SDL_68:216:void_update(java.lang.Number,java.lang.Number): throw new org.jfree.data.general.SeriesException( \"No observation for x = \" + x );  =>  
SDL_69:222:void_update(java.lang.Number,java.lang.Number): if (index < 0) {     throw new org.jfree.data.general.SeriesException( \"No observation for x = \" + x ); } else {     org.jfree.data.xy.XYDataItem item = getDataItem( index );     item.setY( y );     fireSeriesChanged(); }  =>   if (true) {     throw new org.jfree.data.general.SeriesException( \"No observation for x = \" + x ); } else {     org.jfree.data.xy.XYDataItem item = getDataItem( index );     item.setY( y );     fireSeriesChanged(); }
SDL_70:220:void_update(java.lang.Number,java.lang.Number): org.jfree.data.xy.XYDataItem item = getDataItem( index ); item.setY( y ); fireSeriesChanged();  =>   org.jfree.data.xy.XYDataItem item = getDataItem( index ); fireSeriesChanged();
SDL_71:220:void_update(java.lang.Number,java.lang.Number): org.jfree.data.xy.XYDataItem item = getDataItem( index ); item.setY( y ); fireSeriesChanged();  =>   org.jfree.data.xy.XYDataItem item = getDataItem( index ); item.setY( y );
SDL_72:253:org.jfree.data.xy.XYDataItem_addOrUpdate(java.lang.Number,java.lang.Number): if (x == null) {     throw new java.lang.IllegalArgumentException( \"Null 'x' argument.\" ); } org.jfree.data.xy.XYDataItem overwritten = null; int index = indexOf( x ); if (index >= 0 && !this.allowDuplicateXValues) {     org.jfree.data.xy.XYDataItem existing = (org.jfree.data.xy.XYDataItem) this.data.get( index );     try {         overwritten = (org.jfree.data.xy.XYDataItem) existing.clone();     } catch ( java.lang.CloneNotSupportedException e ) {         throw new org.jfree.data.general.SeriesException( \"Couldn't clone XYDataItem!\" );     }     existing.setY( y ); } else {     if (this.autoSort) {         this.data.add( -index - 1, new org.jfree.data.xy.XYDataItem( x, y ) );     } else {         this.data.add( new org.jfree.data.xy.XYDataItem( x, y ) );     }     if (getItemCount() > this.maximumItemCount) {         this.data.remove( 0 );     } } fireSeriesChanged(); return overwritten;  =>   org.jfree.data.xy.XYDataItem overwritten = null; int index = indexOf( x ); if (index >= 0 && !this.allowDuplicateXValues) {     org.jfree.data.xy.XYDataItem existing = (org.jfree.data.xy.XYDataItem) this.data.get( index );     try {         overwritten = (org.jfree.data.xy.XYDataItem) existing.clone();     } catch ( java.lang.CloneNotSupportedException e ) {         throw new org.jfree.data.general.SeriesException( \"Couldn't clone XYDataItem!\" );     }     existing.setY( y ); } else {     if (this.autoSort) {         this.data.add( -index - 1, new org.jfree.data.xy.XYDataItem( x, y ) );     } else {         this.data.add( new org.jfree.data.xy.XYDataItem( x, y ) );     }     if (getItemCount() > this.maximumItemCount) {         this.data.remove( 0 );     } } fireSeriesChanged(); return overwritten;
SDL_73:238:org.jfree.data.xy.XYDataItem_addOrUpdate(java.lang.Number,java.lang.Number): if (x == null) {     throw new java.lang.IllegalArgumentException( \"Null 'x' argument.\" ); } org.jfree.data.xy.XYDataItem overwritten = null; int index = indexOf( x ); if (index >= 0 && !this.allowDuplicateXValues) {     org.jfree.data.xy.XYDataItem existing = (org.jfree.data.xy.XYDataItem) this.data.get( index );     try {         overwritten = (org.jfree.data.xy.XYDataItem) existing.clone();     } catch ( java.lang.CloneNotSupportedException e ) {         throw new org.jfree.data.general.SeriesException( \"Couldn't clone XYDataItem!\" );     }     existing.setY( y ); } else {     if (this.autoSort) {         this.data.add( -index - 1, new org.jfree.data.xy.XYDataItem( x, y ) );     } else {         this.data.add( new org.jfree.data.xy.XYDataItem( x, y ) );     }     if (getItemCount() > this.maximumItemCount) {         this.data.remove( 0 );     } } fireSeriesChanged(); return overwritten;  =>   if (x == null) {     throw new java.lang.IllegalArgumentException( \"Null 'x' argument.\" ); } org.jfree.data.xy.XYDataItem overwritten = null; int index = indexOf( x ); fireSeriesChanged(); return overwritten;
SDL_74:255:org.jfree.data.xy.XYDataItem_addOrUpdate(java.lang.Number,java.lang.Number): if (x == null) {     throw new java.lang.IllegalArgumentException( \"Null 'x' argument.\" ); } org.jfree.data.xy.XYDataItem overwritten = null; int index = indexOf( x ); if (index >= 0 && !this.allowDuplicateXValues) {     org.jfree.data.xy.XYDataItem existing = (org.jfree.data.xy.XYDataItem) this.data.get( index );     try {         overwritten = (org.jfree.data.xy.XYDataItem) existing.clone();     } catch ( java.lang.CloneNotSupportedException e ) {         throw new org.jfree.data.general.SeriesException( \"Couldn't clone XYDataItem!\" );     }     existing.setY( y ); } else {     if (this.autoSort) {         this.data.add( -index - 1, new org.jfree.data.xy.XYDataItem( x, y ) );     } else {         this.data.add( new org.jfree.data.xy.XYDataItem( x, y ) );     }     if (getItemCount() > this.maximumItemCount) {         this.data.remove( 0 );     } } fireSeriesChanged(); return overwritten;  =>   if (x == null) {     throw new java.lang.IllegalArgumentException( \"Null 'x' argument.\" ); } org.jfree.data.xy.XYDataItem overwritten = null; int index = indexOf( x ); if (index >= 0 && !this.allowDuplicateXValues) {     org.jfree.data.xy.XYDataItem existing = (org.jfree.data.xy.XYDataItem) this.data.get( index );     try {         overwritten = (org.jfree.data.xy.XYDataItem) existing.clone();     } catch ( java.lang.CloneNotSupportedException e ) {         throw new org.jfree.data.general.SeriesException( \"Couldn't clone XYDataItem!\" );     }     existing.setY( y ); } else {     if (this.autoSort) {         this.data.add( -index - 1, new org.jfree.data.xy.XYDataItem( x, y ) );     } else {         this.data.add( new org.jfree.data.xy.XYDataItem( x, y ) );     }     if (getItemCount() > this.maximumItemCount) {         this.data.remove( 0 );     } } return overwritten;
SDL_75:232:org.jfree.data.xy.XYDataItem_addOrUpdate(java.lang.Number,java.lang.Number): throw new java.lang.IllegalArgumentException( \"Null 'x' argument.\" );  =>  
SDL_76:234:org.jfree.data.xy.XYDataItem_addOrUpdate(java.lang.Number,java.lang.Number): if (x == null) {     throw new java.lang.IllegalArgumentException( \"Null 'x' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'x' argument.\" ); }
SDL_77:243:org.jfree.data.xy.XYDataItem_addOrUpdate(java.lang.Number,java.lang.Number): org.jfree.data.xy.XYDataItem existing = (org.jfree.data.xy.XYDataItem) this.data.get( index ); try {     overwritten = (org.jfree.data.xy.XYDataItem) existing.clone(); } catch ( java.lang.CloneNotSupportedException e ) {     throw new org.jfree.data.general.SeriesException( \"Couldn't clone XYDataItem!\" ); } existing.setY( y );  =>   org.jfree.data.xy.XYDataItem existing = (org.jfree.data.xy.XYDataItem) this.data.get( index ); try {     overwritten = (org.jfree.data.xy.XYDataItem) existing.clone(); } catch ( java.lang.CloneNotSupportedException e ) {     throw new org.jfree.data.general.SeriesException( \"Couldn't clone XYDataItem!\" ); }
SDL_78:254:org.jfree.data.xy.XYDataItem_addOrUpdate(java.lang.Number,java.lang.Number): if (index >= 0 && !this.allowDuplicateXValues) {     org.jfree.data.xy.XYDataItem existing = (org.jfree.data.xy.XYDataItem) this.data.get( index );     try {         overwritten = (org.jfree.data.xy.XYDataItem) existing.clone();     } catch ( java.lang.CloneNotSupportedException e ) {         throw new org.jfree.data.general.SeriesException( \"Couldn't clone XYDataItem!\" );     }     existing.setY( y ); } else {     if (this.autoSort) {         this.data.add( -index - 1, new org.jfree.data.xy.XYDataItem( x, y ) );     } else {         this.data.add( new org.jfree.data.xy.XYDataItem( x, y ) );     }     if (getItemCount() > this.maximumItemCount) {         this.data.remove( 0 );     } }  =>   if (true) {     org.jfree.data.xy.XYDataItem existing = (org.jfree.data.xy.XYDataItem) this.data.get( index );     try {         overwritten = (org.jfree.data.xy.XYDataItem) existing.clone();     } catch ( java.lang.CloneNotSupportedException e ) {         throw new org.jfree.data.general.SeriesException( \"Couldn't clone XYDataItem!\" );     }     existing.setY( y ); } else {     if (this.autoSort) {         this.data.add( -index - 1, new org.jfree.data.xy.XYDataItem( x, y ) );     } else {         this.data.add( new org.jfree.data.xy.XYDataItem( x, y ) );     }     if (getItemCount() > this.maximumItemCount) {         this.data.remove( 0 );     } }
SDL_79:248:org.jfree.data.xy.XYDataItem_addOrUpdate(java.lang.Number,java.lang.Number): if (this.autoSort) {     this.data.add( -index - 1, new org.jfree.data.xy.XYDataItem( x, y ) ); } else {     this.data.add( new org.jfree.data.xy.XYDataItem( x, y ) ); } if (getItemCount() > this.maximumItemCount) {     this.data.remove( 0 ); }  =>   if (getItemCount() > this.maximumItemCount) {     this.data.remove( 0 ); }
SDL_80:250:org.jfree.data.xy.XYDataItem_addOrUpdate(java.lang.Number,java.lang.Number): if (this.autoSort) {     this.data.add( -index - 1, new org.jfree.data.xy.XYDataItem( x, y ) ); } else {     this.data.add( new org.jfree.data.xy.XYDataItem( x, y ) ); } if (getItemCount() > this.maximumItemCount) {     this.data.remove( 0 ); }  =>   if (this.autoSort) {     this.data.add( -index - 1, new org.jfree.data.xy.XYDataItem( x, y ) ); } else {     this.data.add( new org.jfree.data.xy.XYDataItem( x, y ) ); }
SDL_81:240:org.jfree.data.xy.XYDataItem_addOrUpdate(java.lang.Number,java.lang.Number): try {     overwritten = (org.jfree.data.xy.XYDataItem) existing.clone(); } catch ( java.lang.CloneNotSupportedException e ) {     throw new org.jfree.data.general.SeriesException( \"Couldn't clone XYDataItem!\" ); }  =>   try { }
SDL_82:246:org.jfree.data.xy.XYDataItem_addOrUpdate(java.lang.Number,java.lang.Number): this.data.add( -index - 1, new org.jfree.data.xy.XYDataItem( x, y ) );  =>  
SDL_83:250:org.jfree.data.xy.XYDataItem_addOrUpdate(java.lang.Number,java.lang.Number): if (this.autoSort) {     this.data.add( -index - 1, new org.jfree.data.xy.XYDataItem( x, y ) ); } else {     this.data.add( new org.jfree.data.xy.XYDataItem( x, y ) ); }  =>   if (true) {     this.data.add( -index - 1, new org.jfree.data.xy.XYDataItem( x, y ) ); } else {     this.data.add( new org.jfree.data.xy.XYDataItem( x, y ) ); }
SDL_84:248:org.jfree.data.xy.XYDataItem_addOrUpdate(java.lang.Number,java.lang.Number): this.data.add( new org.jfree.data.xy.XYDataItem( x, y ) );  =>  
SDL_85:251:org.jfree.data.xy.XYDataItem_addOrUpdate(java.lang.Number,java.lang.Number): this.data.remove( 0 );  =>  
SDL_86:253:org.jfree.data.xy.XYDataItem_addOrUpdate(java.lang.Number,java.lang.Number): if (getItemCount() > this.maximumItemCount) {     this.data.remove( 0 ); }  =>   if (true) {     this.data.remove( 0 ); }
SDL_87:260:int_indexOf(java.lang.Number): if (this.autoSort) {     return Collections.binarySearch( this.data, new org.jfree.data.xy.XYDataItem( x, null ) ); } else {     for (int i = 0; i < this.data.size(); i++) {         org.jfree.data.xy.XYDataItem item = (org.jfree.data.xy.XYDataItem) this.data.get( i );         if (item.getX().equals( x )) {             return i;         }     }     return -1; }  =>  
SDL_88:271:int_indexOf(java.lang.Number): if (this.autoSort) {     return Collections.binarySearch( this.data, new org.jfree.data.xy.XYDataItem( x, null ) ); } else {     for (int i = 0; i < this.data.size(); i++) {         org.jfree.data.xy.XYDataItem item = (org.jfree.data.xy.XYDataItem) this.data.get( i );         if (item.getX().equals( x )) {             return i;         }     }     return -1; }  =>   if (true) {     return Collections.binarySearch( this.data, new org.jfree.data.xy.XYDataItem( x, null ) ); } else {     for (int i = 0; i < this.data.size(); i++) {         org.jfree.data.xy.XYDataItem item = (org.jfree.data.xy.XYDataItem) this.data.get( i );         if (item.getX().equals( x )) {             return i;         }     }     return -1; }
SDL_89:264:int_indexOf(java.lang.Number): for (int i = 0; i < this.data.size(); i++) {     org.jfree.data.xy.XYDataItem item = (org.jfree.data.xy.XYDataItem) this.data.get( i );     if (item.getX().equals( x )) {         return i;     } } return -1;  =>   return -1;
SDL_90:262:int_indexOf(java.lang.Number): return Collections.binarySearch( this.data, new org.jfree.data.xy.XYDataItem( x, null ) );  =>   return 0;
SDL_91:265:int_indexOf(java.lang.Number): org.jfree.data.xy.XYDataItem item = (org.jfree.data.xy.XYDataItem) this.data.get( i ); if (item.getX().equals( x )) {     return i; }  =>   org.jfree.data.xy.XYDataItem item = (org.jfree.data.xy.XYDataItem) this.data.get( i );
SDL_92:269:int_indexOf(java.lang.Number): for (int i = 0; i < this.data.size(); i++) {     org.jfree.data.xy.XYDataItem item = (org.jfree.data.xy.XYDataItem) this.data.get( i );     if (item.getX().equals( x )) {         return i;     } }  =>   for (int i = 0;; i++) {     org.jfree.data.xy.XYDataItem item = (org.jfree.data.xy.XYDataItem) this.data.get( i );     if (item.getX().equals( x )) {         return i;     } }
SDL_93:269:int_indexOf(java.lang.Number): for (int i = 0; i < this.data.size(); i++) {     org.jfree.data.xy.XYDataItem item = (org.jfree.data.xy.XYDataItem) this.data.get( i );     if (item.getX().equals( x )) {         return i;     } }  =>   for (int i = 0; i < this.data.size();) {     org.jfree.data.xy.XYDataItem item = (org.jfree.data.xy.XYDataItem) this.data.get( i );     if (item.getX().equals( x )) {         return i;     } }
SDL_94:268:int_indexOf(java.lang.Number): if (item.getX().equals( x )) {     return i; }  =>   if (true) {     return i; }
SDL_95:267:int_indexOf(java.lang.Number): return i;  =>   return 0;
SDL_96:270:int_indexOf(java.lang.Number): return -1;  =>   return 0;
SDL_97:278:double_toArray(): int itemCount = getItemCount(); double[][] result = new double[2][itemCount]; for (int i = 0; i < itemCount; i++) {     result[0][i] = this.getX( i ).doubleValue();     java.lang.Number y = getY( i );     if (y != null) {         result[1][i] = y.doubleValue();     } else {         result[1][i] = Double.NaN;     } } return result;  =>   int itemCount = getItemCount(); double[][] result = new double[2][itemCount]; return result;
SDL_98:284:double_toArray(): result[0][i] = this.getX( i ).doubleValue(); java.lang.Number y = getY( i ); if (y != null) {     result[1][i] = y.doubleValue(); } else {     result[1][i] = Double.NaN; }  =>   java.lang.Number y = getY( i ); if (y != null) {     result[1][i] = y.doubleValue(); } else {     result[1][i] = Double.NaN; }
SDL_99:280:double_toArray(): result[0][i] = this.getX( i ).doubleValue(); java.lang.Number y = getY( i ); if (y != null) {     result[1][i] = y.doubleValue(); } else {     result[1][i] = Double.NaN; }  =>   result[0][i] = this.getX( i ).doubleValue(); java.lang.Number y = getY( i );
SDL_100:286:double_toArray(): for (int i = 0; i < itemCount; i++) {     result[0][i] = this.getX( i ).doubleValue();     java.lang.Number y = getY( i );     if (y != null) {         result[1][i] = y.doubleValue();     } else {         result[1][i] = Double.NaN;     } }  =>   for (int i = 0;; i++) {     result[0][i] = this.getX( i ).doubleValue();     java.lang.Number y = getY( i );     if (y != null) {         result[1][i] = y.doubleValue();     } else {         result[1][i] = Double.NaN;     } }
SDL_101:286:double_toArray(): for (int i = 0; i < itemCount; i++) {     result[0][i] = this.getX( i ).doubleValue();     java.lang.Number y = getY( i );     if (y != null) {         result[1][i] = y.doubleValue();     } else {         result[1][i] = Double.NaN;     } }  =>   for (int i = 0; i < itemCount;) {     result[0][i] = this.getX( i ).doubleValue();     java.lang.Number y = getY( i );     if (y != null) {         result[1][i] = y.doubleValue();     } else {         result[1][i] = Double.NaN;     } }
SDL_102:281:double_toArray(): result[1][i] = y.doubleValue();  =>  
SDL_103:285:double_toArray(): if (y != null) {     result[1][i] = y.doubleValue(); } else {     result[1][i] = Double.NaN; }  =>   if (true) {     result[1][i] = y.doubleValue(); } else {     result[1][i] = Double.NaN; }
SDL_104:283:double_toArray(): result[1][i] = Double.NaN;  =>  
SDL_105:287:double_toArray(): return result;  =>   return 0;
SDL_106:294:java.lang.Object_clone(): org.jfree.data.xy.XYSeries clone = (org.jfree.data.xy.XYSeries) super.clone(); clone.data = (java.util.List) ObjectUtilities.deepClone( this.data ); return clone;  =>   org.jfree.data.xy.XYSeries clone = (org.jfree.data.xy.XYSeries) super.clone(); return clone;
SDL_107:313:org.jfree.data.xy.XYSeries_createCopy(int,int): org.jfree.data.xy.XYSeries copy = (org.jfree.data.xy.XYSeries) super.clone(); copy.data = new java.util.ArrayList(); if (this.data.size() > 0) {     for (int index = start; index <= end; index++) {         org.jfree.data.xy.XYDataItem item = (org.jfree.data.xy.XYDataItem) this.data.get( index );         org.jfree.data.xy.XYDataItem clone = (org.jfree.data.xy.XYDataItem) item.clone();         try {             copy.add( clone );         } catch ( org.jfree.data.general.SeriesException e ) {             System.err.println( \"Unable to add cloned data item.\" );         }     } } return copy;  =>   org.jfree.data.xy.XYSeries copy = (org.jfree.data.xy.XYSeries) super.clone(); if (this.data.size() > 0) {     for (int index = start; index <= end; index++) {         org.jfree.data.xy.XYDataItem item = (org.jfree.data.xy.XYDataItem) this.data.get( index );         org.jfree.data.xy.XYDataItem clone = (org.jfree.data.xy.XYDataItem) item.clone();         try {             copy.add( clone );         } catch ( org.jfree.data.general.SeriesException e ) {             System.err.println( \"Unable to add cloned data item.\" );         }     } } return copy;
SDL_108:303:org.jfree.data.xy.XYSeries_createCopy(int,int): org.jfree.data.xy.XYSeries copy = (org.jfree.data.xy.XYSeries) super.clone(); copy.data = new java.util.ArrayList(); if (this.data.size() > 0) {     for (int index = start; index <= end; index++) {         org.jfree.data.xy.XYDataItem item = (org.jfree.data.xy.XYDataItem) this.data.get( index );         org.jfree.data.xy.XYDataItem clone = (org.jfree.data.xy.XYDataItem) item.clone();         try {             copy.add( clone );         } catch ( org.jfree.data.general.SeriesException e ) {             System.err.println( \"Unable to add cloned data item.\" );         }     } } return copy;  =>   org.jfree.data.xy.XYSeries copy = (org.jfree.data.xy.XYSeries) super.clone(); copy.data = new java.util.ArrayList(); return copy;
SDL_109:303:org.jfree.data.xy.XYSeries_createCopy(int,int): for (int index = start; index <= end; index++) {     org.jfree.data.xy.XYDataItem item = (org.jfree.data.xy.XYDataItem) this.data.get( index );     org.jfree.data.xy.XYDataItem clone = (org.jfree.data.xy.XYDataItem) item.clone();     try {         copy.add( clone );     } catch ( org.jfree.data.general.SeriesException e ) {         System.err.println( \"Unable to add cloned data item.\" );     } }  =>  
SDL_110:313:org.jfree.data.xy.XYSeries_createCopy(int,int): if (this.data.size() > 0) {     for (int index = start; index <= end; index++) {         org.jfree.data.xy.XYDataItem item = (org.jfree.data.xy.XYDataItem) this.data.get( index );         org.jfree.data.xy.XYDataItem clone = (org.jfree.data.xy.XYDataItem) item.clone();         try {             copy.add( clone );         } catch ( org.jfree.data.general.SeriesException e ) {             System.err.println( \"Unable to add cloned data item.\" );         }     } }  =>   if (true) {     for (int index = start; index <= end; index++) {         org.jfree.data.xy.XYDataItem item = (org.jfree.data.xy.XYDataItem) this.data.get( index );         org.jfree.data.xy.XYDataItem clone = (org.jfree.data.xy.XYDataItem) item.clone();         try {             copy.add( clone );         } catch ( org.jfree.data.general.SeriesException e ) {             System.err.println( \"Unable to add cloned data item.\" );         }     } }
SDL_111:312:org.jfree.data.xy.XYSeries_createCopy(int,int): for (int index = start; index <= end; index++) {     org.jfree.data.xy.XYDataItem item = (org.jfree.data.xy.XYDataItem) this.data.get( index );     org.jfree.data.xy.XYDataItem clone = (org.jfree.data.xy.XYDataItem) item.clone();     try {         copy.add( clone );     } catch ( org.jfree.data.general.SeriesException e ) {         System.err.println( \"Unable to add cloned data item.\" );     } }  =>   for (int index = start;; index++) {     org.jfree.data.xy.XYDataItem item = (org.jfree.data.xy.XYDataItem) this.data.get( index );     org.jfree.data.xy.XYDataItem clone = (org.jfree.data.xy.XYDataItem) item.clone();     try {         copy.add( clone );     } catch ( org.jfree.data.general.SeriesException e ) {         System.err.println( \"Unable to add cloned data item.\" );     } }
SDL_112:312:org.jfree.data.xy.XYSeries_createCopy(int,int): for (int index = start; index <= end; index++) {     org.jfree.data.xy.XYDataItem item = (org.jfree.data.xy.XYDataItem) this.data.get( index );     org.jfree.data.xy.XYDataItem clone = (org.jfree.data.xy.XYDataItem) item.clone();     try {         copy.add( clone );     } catch ( org.jfree.data.general.SeriesException e ) {         System.err.println( \"Unable to add cloned data item.\" );     } }  =>   for (int index = start; index <= end;) {     org.jfree.data.xy.XYDataItem item = (org.jfree.data.xy.XYDataItem) this.data.get( index );     org.jfree.data.xy.XYDataItem clone = (org.jfree.data.xy.XYDataItem) item.clone();     try {         copy.add( clone );     } catch ( org.jfree.data.general.SeriesException e ) {         System.err.println( \"Unable to add cloned data item.\" );     } }
SDL_113:308:org.jfree.data.xy.XYSeries_createCopy(int,int): try {     copy.add( clone ); } catch ( org.jfree.data.general.SeriesException e ) {     System.err.println( \"Unable to add cloned data item.\" ); }  =>   try { }
SDL_114:338:boolean_equals(java.lang.Object): if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.xy.XYSeries)) {     return false; } if (!super.equals( obj )) {     return false; } org.jfree.data.xy.XYSeries that = (org.jfree.data.xy.XYSeries) obj; if (this.maximumItemCount != that.maximumItemCount) {     return false; } if (this.autoSort != that.autoSort) {     return false; } if (this.allowDuplicateXValues != that.allowDuplicateXValues) {     return false; } if (!ObjectUtilities.equal( this.data, that.data )) {     return false; } return true;  =>   if (!(obj instanceof org.jfree.data.xy.XYSeries)) {     return false; } if (!super.equals( obj )) {     return false; } org.jfree.data.xy.XYSeries that = (org.jfree.data.xy.XYSeries) obj; if (this.maximumItemCount != that.maximumItemCount) {     return false; } if (this.autoSort != that.autoSort) {     return false; } if (this.allowDuplicateXValues != that.allowDuplicateXValues) {     return false; } if (!ObjectUtilities.equal( this.data, that.data )) {     return false; } return true;
SDL_115:338:boolean_equals(java.lang.Object): if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.xy.XYSeries)) {     return false; } if (!super.equals( obj )) {     return false; } org.jfree.data.xy.XYSeries that = (org.jfree.data.xy.XYSeries) obj; if (this.maximumItemCount != that.maximumItemCount) {     return false; } if (this.autoSort != that.autoSort) {     return false; } if (this.allowDuplicateXValues != that.allowDuplicateXValues) {     return false; } if (!ObjectUtilities.equal( this.data, that.data )) {     return false; } return true;  =>   if (obj == this) {     return true; } if (!super.equals( obj )) {     return false; } org.jfree.data.xy.XYSeries that = (org.jfree.data.xy.XYSeries) obj; if (this.maximumItemCount != that.maximumItemCount) {     return false; } if (this.autoSort != that.autoSort) {     return false; } if (this.allowDuplicateXValues != that.allowDuplicateXValues) {     return false; } if (!ObjectUtilities.equal( this.data, that.data )) {     return false; } return true;
SDL_116:338:boolean_equals(java.lang.Object): if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.xy.XYSeries)) {     return false; } if (!super.equals( obj )) {     return false; } org.jfree.data.xy.XYSeries that = (org.jfree.data.xy.XYSeries) obj; if (this.maximumItemCount != that.maximumItemCount) {     return false; } if (this.autoSort != that.autoSort) {     return false; } if (this.allowDuplicateXValues != that.allowDuplicateXValues) {     return false; } if (!ObjectUtilities.equal( this.data, that.data )) {     return false; } return true;  =>   if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.xy.XYSeries)) {     return false; } org.jfree.data.xy.XYSeries that = (org.jfree.data.xy.XYSeries) obj; if (this.maximumItemCount != that.maximumItemCount) {     return false; } if (this.autoSort != that.autoSort) {     return false; } if (this.allowDuplicateXValues != that.allowDuplicateXValues) {     return false; } if (!ObjectUtilities.equal( this.data, that.data )) {     return false; } return true;
SDL_117:338:boolean_equals(java.lang.Object): if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.xy.XYSeries)) {     return false; } if (!super.equals( obj )) {     return false; } org.jfree.data.xy.XYSeries that = (org.jfree.data.xy.XYSeries) obj; if (this.maximumItemCount != that.maximumItemCount) {     return false; } if (this.autoSort != that.autoSort) {     return false; } if (this.allowDuplicateXValues != that.allowDuplicateXValues) {     return false; } if (!ObjectUtilities.equal( this.data, that.data )) {     return false; } return true;  =>   if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.xy.XYSeries)) {     return false; } if (!super.equals( obj )) {     return false; } org.jfree.data.xy.XYSeries that = (org.jfree.data.xy.XYSeries) obj; if (this.autoSort != that.autoSort) {     return false; } if (this.allowDuplicateXValues != that.allowDuplicateXValues) {     return false; } if (!ObjectUtilities.equal( this.data, that.data )) {     return false; } return true;
SDL_118:338:boolean_equals(java.lang.Object): if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.xy.XYSeries)) {     return false; } if (!super.equals( obj )) {     return false; } org.jfree.data.xy.XYSeries that = (org.jfree.data.xy.XYSeries) obj; if (this.maximumItemCount != that.maximumItemCount) {     return false; } if (this.autoSort != that.autoSort) {     return false; } if (this.allowDuplicateXValues != that.allowDuplicateXValues) {     return false; } if (!ObjectUtilities.equal( this.data, that.data )) {     return false; } return true;  =>   if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.xy.XYSeries)) {     return false; } if (!super.equals( obj )) {     return false; } org.jfree.data.xy.XYSeries that = (org.jfree.data.xy.XYSeries) obj; if (this.maximumItemCount != that.maximumItemCount) {     return false; } if (this.allowDuplicateXValues != that.allowDuplicateXValues) {     return false; } if (!ObjectUtilities.equal( this.data, that.data )) {     return false; } return true;
SDL_119:338:boolean_equals(java.lang.Object): if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.xy.XYSeries)) {     return false; } if (!super.equals( obj )) {     return false; } org.jfree.data.xy.XYSeries that = (org.jfree.data.xy.XYSeries) obj; if (this.maximumItemCount != that.maximumItemCount) {     return false; } if (this.autoSort != that.autoSort) {     return false; } if (this.allowDuplicateXValues != that.allowDuplicateXValues) {     return false; } if (!ObjectUtilities.equal( this.data, that.data )) {     return false; } return true;  =>   if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.xy.XYSeries)) {     return false; } if (!super.equals( obj )) {     return false; } org.jfree.data.xy.XYSeries that = (org.jfree.data.xy.XYSeries) obj; if (this.maximumItemCount != that.maximumItemCount) {     return false; } if (this.autoSort != that.autoSort) {     return false; } if (!ObjectUtilities.equal( this.data, that.data )) {     return false; } return true;
SDL_120:338:boolean_equals(java.lang.Object): if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.xy.XYSeries)) {     return false; } if (!super.equals( obj )) {     return false; } org.jfree.data.xy.XYSeries that = (org.jfree.data.xy.XYSeries) obj; if (this.maximumItemCount != that.maximumItemCount) {     return false; } if (this.autoSort != that.autoSort) {     return false; } if (this.allowDuplicateXValues != that.allowDuplicateXValues) {     return false; } if (!ObjectUtilities.equal( this.data, that.data )) {     return false; } return true;  =>   if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.xy.XYSeries)) {     return false; } if (!super.equals( obj )) {     return false; } org.jfree.data.xy.XYSeries that = (org.jfree.data.xy.XYSeries) obj; if (this.maximumItemCount != that.maximumItemCount) {     return false; } if (this.autoSort != that.autoSort) {     return false; } if (this.allowDuplicateXValues != that.allowDuplicateXValues) {     return false; } return true;
SDL_121:321:boolean_equals(java.lang.Object): if (obj == this) {     return true; }  =>   if (true) {     return true; }
SDL_122:320:boolean_equals(java.lang.Object): return true;  =>   return false;
SDL_123:324:boolean_equals(java.lang.Object): if (!(obj instanceof org.jfree.data.xy.XYSeries)) {     return false; }  =>   if (true) {     return false; }
SDL_124:323:boolean_equals(java.lang.Object): return false;  =>   return true;
SDL_125:327:boolean_equals(java.lang.Object): if (!super.equals( obj )) {     return false; }  =>   if (true) {     return false; }
SDL_126:326:boolean_equals(java.lang.Object): return false;  =>   return true;
SDL_127:331:boolean_equals(java.lang.Object): if (this.maximumItemCount != that.maximumItemCount) {     return false; }  =>   if (true) {     return false; }
SDL_128:330:boolean_equals(java.lang.Object): return false;  =>   return true;
SDL_129:334:boolean_equals(java.lang.Object): if (this.autoSort != that.autoSort) {     return false; }  =>   if (true) {     return false; }
SDL_130:333:boolean_equals(java.lang.Object): return false;  =>   return true;
SDL_131:337:boolean_equals(java.lang.Object): if (this.allowDuplicateXValues != that.allowDuplicateXValues) {     return false; }  =>   if (true) {     return false; }
SDL_132:336:boolean_equals(java.lang.Object): return false;  =>   return true;
SDL_133:340:boolean_equals(java.lang.Object): if (!ObjectUtilities.equal( this.data, that.data )) {     return false; }  =>   if (true) {     return false; }
SDL_134:339:boolean_equals(java.lang.Object): return false;  =>   return true;
SDL_135:341:boolean_equals(java.lang.Object): return true;  =>   return false;
SDL_136:359:int_hashCode(): int result = super.hashCode(); int count = getItemCount(); if (count > 0) {     org.jfree.data.xy.XYDataItem item = getDataItem( 0 );     result = 29 * result + item.hashCode(); } if (count > 1) {     org.jfree.data.xy.XYDataItem item = getDataItem( count - 1 );     result = 29 * result + item.hashCode(); } if (count > 2) {     org.jfree.data.xy.XYDataItem item = getDataItem( count / 2 );     result = 29 * result + item.hashCode(); } result = 29 * result + this.maximumItemCount; result = 29 * result + (this.autoSort ? 1 : 0); result = 29 * result + (this.allowDuplicateXValues ? 1 : 0); return result;  =>   int result = super.hashCode(); int count = getItemCount(); if (count > 1) {     org.jfree.data.xy.XYDataItem item = getDataItem( count - 1 );     result = 29 * result + item.hashCode(); } if (count > 2) {     org.jfree.data.xy.XYDataItem item = getDataItem( count / 2 );     result = 29 * result + item.hashCode(); } result = 29 * result + this.maximumItemCount; result = 29 * result + (this.autoSort ? 1 : 0); result = 29 * result + (this.allowDuplicateXValues ? 1 : 0); return result;
SDL_137:359:int_hashCode(): int result = super.hashCode(); int count = getItemCount(); if (count > 0) {     org.jfree.data.xy.XYDataItem item = getDataItem( 0 );     result = 29 * result + item.hashCode(); } if (count > 1) {     org.jfree.data.xy.XYDataItem item = getDataItem( count - 1 );     result = 29 * result + item.hashCode(); } if (count > 2) {     org.jfree.data.xy.XYDataItem item = getDataItem( count / 2 );     result = 29 * result + item.hashCode(); } result = 29 * result + this.maximumItemCount; result = 29 * result + (this.autoSort ? 1 : 0); result = 29 * result + (this.allowDuplicateXValues ? 1 : 0); return result;  =>   int result = super.hashCode(); int count = getItemCount(); if (count > 0) {     org.jfree.data.xy.XYDataItem item = getDataItem( 0 );     result = 29 * result + item.hashCode(); } if (count > 2) {     org.jfree.data.xy.XYDataItem item = getDataItem( count / 2 );     result = 29 * result + item.hashCode(); } result = 29 * result + this.maximumItemCount; result = 29 * result + (this.autoSort ? 1 : 0); result = 29 * result + (this.allowDuplicateXValues ? 1 : 0); return result;
SDL_138:359:int_hashCode(): int result = super.hashCode(); int count = getItemCount(); if (count > 0) {     org.jfree.data.xy.XYDataItem item = getDataItem( 0 );     result = 29 * result + item.hashCode(); } if (count > 1) {     org.jfree.data.xy.XYDataItem item = getDataItem( count - 1 );     result = 29 * result + item.hashCode(); } if (count > 2) {     org.jfree.data.xy.XYDataItem item = getDataItem( count / 2 );     result = 29 * result + item.hashCode(); } result = 29 * result + this.maximumItemCount; result = 29 * result + (this.autoSort ? 1 : 0); result = 29 * result + (this.allowDuplicateXValues ? 1 : 0); return result;  =>   int result = super.hashCode(); int count = getItemCount(); if (count > 0) {     org.jfree.data.xy.XYDataItem item = getDataItem( 0 );     result = 29 * result + item.hashCode(); } if (count > 1) {     org.jfree.data.xy.XYDataItem item = getDataItem( count - 1 );     result = 29 * result + item.hashCode(); } result = 29 * result + this.maximumItemCount; result = 29 * result + (this.autoSort ? 1 : 0); result = 29 * result + (this.allowDuplicateXValues ? 1 : 0); return result;
SDL_139:362:int_hashCode(): int result = super.hashCode(); int count = getItemCount(); if (count > 0) {     org.jfree.data.xy.XYDataItem item = getDataItem( 0 );     result = 29 * result + item.hashCode(); } if (count > 1) {     org.jfree.data.xy.XYDataItem item = getDataItem( count - 1 );     result = 29 * result + item.hashCode(); } if (count > 2) {     org.jfree.data.xy.XYDataItem item = getDataItem( count / 2 );     result = 29 * result + item.hashCode(); } result = 29 * result + this.maximumItemCount; result = 29 * result + (this.autoSort ? 1 : 0); result = 29 * result + (this.allowDuplicateXValues ? 1 : 0); return result;  =>   int result = super.hashCode(); int count = getItemCount(); if (count > 0) {     org.jfree.data.xy.XYDataItem item = getDataItem( 0 );     result = 29 * result + item.hashCode(); } if (count > 1) {     org.jfree.data.xy.XYDataItem item = getDataItem( count - 1 );     result = 29 * result + item.hashCode(); } if (count > 2) {     org.jfree.data.xy.XYDataItem item = getDataItem( count / 2 );     result = 29 * result + item.hashCode(); } result = 29 * result + (this.autoSort ? 1 : 0); result = 29 * result + (this.allowDuplicateXValues ? 1 : 0); return result;
SDL_140:362:int_hashCode(): int result = super.hashCode(); int count = getItemCount(); if (count > 0) {     org.jfree.data.xy.XYDataItem item = getDataItem( 0 );     result = 29 * result + item.hashCode(); } if (count > 1) {     org.jfree.data.xy.XYDataItem item = getDataItem( count - 1 );     result = 29 * result + item.hashCode(); } if (count > 2) {     org.jfree.data.xy.XYDataItem item = getDataItem( count / 2 );     result = 29 * result + item.hashCode(); } result = 29 * result + this.maximumItemCount; result = 29 * result + (this.autoSort ? 1 : 0); result = 29 * result + (this.allowDuplicateXValues ? 1 : 0); return result;  =>   int result = super.hashCode(); int count = getItemCount(); if (count > 0) {     org.jfree.data.xy.XYDataItem item = getDataItem( 0 );     result = 29 * result + item.hashCode(); } if (count > 1) {     org.jfree.data.xy.XYDataItem item = getDataItem( count - 1 );     result = 29 * result + item.hashCode(); } if (count > 2) {     org.jfree.data.xy.XYDataItem item = getDataItem( count / 2 );     result = 29 * result + item.hashCode(); } result = 29 * result + this.maximumItemCount; result = 29 * result + (this.allowDuplicateXValues ? 1 : 0); return result;
SDL_141:362:int_hashCode(): int result = super.hashCode(); int count = getItemCount(); if (count > 0) {     org.jfree.data.xy.XYDataItem item = getDataItem( 0 );     result = 29 * result + item.hashCode(); } if (count > 1) {     org.jfree.data.xy.XYDataItem item = getDataItem( count - 1 );     result = 29 * result + item.hashCode(); } if (count > 2) {     org.jfree.data.xy.XYDataItem item = getDataItem( count / 2 );     result = 29 * result + item.hashCode(); } result = 29 * result + this.maximumItemCount; result = 29 * result + (this.autoSort ? 1 : 0); result = 29 * result + (this.allowDuplicateXValues ? 1 : 0); return result;  =>   int result = super.hashCode(); int count = getItemCount(); if (count > 0) {     org.jfree.data.xy.XYDataItem item = getDataItem( 0 );     result = 29 * result + item.hashCode(); } if (count > 1) {     org.jfree.data.xy.XYDataItem item = getDataItem( count - 1 );     result = 29 * result + item.hashCode(); } if (count > 2) {     org.jfree.data.xy.XYDataItem item = getDataItem( count / 2 );     result = 29 * result + item.hashCode(); } result = 29 * result + this.maximumItemCount; result = 29 * result + (this.autoSort ? 1 : 0); return result;
SDL_142:349:int_hashCode(): org.jfree.data.xy.XYDataItem item = getDataItem( 0 ); result = 29 * result + item.hashCode();  =>   org.jfree.data.xy.XYDataItem item = getDataItem( 0 );
SDL_143:351:int_hashCode(): if (count > 0) {     org.jfree.data.xy.XYDataItem item = getDataItem( 0 );     result = 29 * result + item.hashCode(); }  =>   if (true) {     org.jfree.data.xy.XYDataItem item = getDataItem( 0 );     result = 29 * result + item.hashCode(); }
SDL_144:353:int_hashCode(): org.jfree.data.xy.XYDataItem item = getDataItem( count - 1 ); result = 29 * result + item.hashCode();  =>   org.jfree.data.xy.XYDataItem item = getDataItem( count - 1 );
SDL_145:355:int_hashCode(): if (count > 1) {     org.jfree.data.xy.XYDataItem item = getDataItem( count - 1 );     result = 29 * result + item.hashCode(); }  =>   if (true) {     org.jfree.data.xy.XYDataItem item = getDataItem( count - 1 );     result = 29 * result + item.hashCode(); }
SDL_146:357:int_hashCode(): org.jfree.data.xy.XYDataItem item = getDataItem( count / 2 ); result = 29 * result + item.hashCode();  =>   org.jfree.data.xy.XYDataItem item = getDataItem( count / 2 );
SDL_147:359:int_hashCode(): if (count > 2) {     org.jfree.data.xy.XYDataItem item = getDataItem( count / 2 );     result = 29 * result + item.hashCode(); }  =>   if (true) {     org.jfree.data.xy.XYDataItem item = getDataItem( count / 2 );     result = 29 * result + item.hashCode(); }
SDL_148:363:int_hashCode(): return result;  =>   return 0;
