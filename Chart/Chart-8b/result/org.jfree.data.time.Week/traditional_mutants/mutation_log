AORB_1:82:Week(java.util.Date,java.util.TimeZone,java.util.Locale):calendar.get( Calendar.YEAR ) + 1 => calendar.get( Calendar.YEAR ) * 1
AORB_2:82:Week(java.util.Date,java.util.TimeZone,java.util.Locale):calendar.get( Calendar.YEAR ) + 1 => calendar.get( Calendar.YEAR ) / 1
AORB_3:82:Week(java.util.Date,java.util.TimeZone,java.util.Locale):calendar.get( Calendar.YEAR ) + 1 => calendar.get( Calendar.YEAR ) % 1
AORB_4:82:Week(java.util.Date,java.util.TimeZone,java.util.Locale):calendar.get( Calendar.YEAR ) + 1 => calendar.get( Calendar.YEAR ) - 1
AORB_5:129:org.jfree.data.time.RegularTimePeriod_previous():this.week - 1 => this.week * 1
AORB_6:129:org.jfree.data.time.RegularTimePeriod_previous():this.week - 1 => this.week / 1
AORB_7:129:org.jfree.data.time.RegularTimePeriod_previous():this.week - 1 => this.week % 1
AORB_8:129:org.jfree.data.time.RegularTimePeriod_previous():this.week - 1 => this.week + 1
AORB_9:132:org.jfree.data.time.RegularTimePeriod_previous():this.year - 1 => this.year * 1
AORB_10:132:org.jfree.data.time.RegularTimePeriod_previous():this.year - 1 => this.year / 1
AORB_11:132:org.jfree.data.time.RegularTimePeriod_previous():this.year - 1 => this.year % 1
AORB_12:132:org.jfree.data.time.RegularTimePeriod_previous():this.year - 1 => this.year + 1
AORB_13:147:org.jfree.data.time.RegularTimePeriod_next():this.week + 1 => this.week * 1
AORB_14:147:org.jfree.data.time.RegularTimePeriod_next():this.week + 1 => this.week / 1
AORB_15:147:org.jfree.data.time.RegularTimePeriod_next():this.week + 1 => this.week % 1
AORB_16:147:org.jfree.data.time.RegularTimePeriod_next():this.week + 1 => this.week - 1
AORB_17:153:org.jfree.data.time.RegularTimePeriod_next():this.week + 1 => this.week * 1
AORB_18:153:org.jfree.data.time.RegularTimePeriod_next():this.week + 1 => this.week / 1
AORB_19:153:org.jfree.data.time.RegularTimePeriod_next():this.week + 1 => this.week % 1
AORB_20:153:org.jfree.data.time.RegularTimePeriod_next():this.week + 1 => this.week - 1
AORB_21:156:org.jfree.data.time.RegularTimePeriod_next():this.year + 1 => this.year * 1
AORB_22:156:org.jfree.data.time.RegularTimePeriod_next():this.year + 1 => this.year / 1
AORB_23:156:org.jfree.data.time.RegularTimePeriod_next():this.year + 1 => this.year % 1
AORB_24:156:org.jfree.data.time.RegularTimePeriod_next():this.year + 1 => this.year - 1
AORB_25:167:long_getSerialIndex():this.year * 53L => this.year / 53L
AORB_26:167:long_getSerialIndex():this.year * 53L => this.year % 53L
AORB_27:167:long_getSerialIndex():this.year * 53L => this.year + 53L
AORB_28:167:long_getSerialIndex():this.year * 53L => this.year - 53L
AORB_29:167:long_getSerialIndex():this.year * 53L + this.week => this.year * 53L * this.week
AORB_30:167:long_getSerialIndex():this.year * 53L + this.week => this.year * 53L / this.week
AORB_31:167:long_getSerialIndex():this.year * 53L + this.week => this.year * 53L % this.week
AORB_32:167:long_getSerialIndex():this.year * 53L + this.week => this.year * 53L - this.week
AORB_33:189:long_getLastMillisecond(java.util.Calendar):this.week + 1 => this.week * 1
AORB_34:189:long_getLastMillisecond(java.util.Calendar):this.week + 1 => this.week / 1
AORB_35:189:long_getLastMillisecond(java.util.Calendar):this.week + 1 => this.week % 1
AORB_36:189:long_getLastMillisecond(java.util.Calendar):this.week + 1 => this.week - 1
AORB_37:195:long_getLastMillisecond(java.util.Calendar):c.getTime().getTime() - 1 => c.getTime().getTime() * 1
AORB_38:195:long_getLastMillisecond(java.util.Calendar):c.getTime().getTime() - 1 => c.getTime().getTime() / 1
AORB_39:195:long_getLastMillisecond(java.util.Calendar):c.getTime().getTime() - 1 => c.getTime().getTime() % 1
AORB_40:195:long_getLastMillisecond(java.util.Calendar):c.getTime().getTime() - 1 => c.getTime().getTime() + 1
AORB_41:224:int_hashCode():37 * result => 37 / result
AORB_42:224:int_hashCode():37 * result => 37 % result
AORB_43:224:int_hashCode():37 * result => 37 + result
AORB_44:224:int_hashCode():37 * result => 37 - result
AORB_45:224:int_hashCode():37 * result + this.week => 37 * result * this.week
AORB_46:224:int_hashCode():37 * result + this.week => 37 * result / this.week
AORB_47:224:int_hashCode():37 * result + this.week => 37 * result % this.week
AORB_48:224:int_hashCode():37 * result + this.week => 37 * result - this.week
AORB_49:225:int_hashCode():37 * result => 37 / result
AORB_50:225:int_hashCode():37 * result => 37 % result
AORB_51:225:int_hashCode():37 * result => 37 + result
AORB_52:225:int_hashCode():37 * result => 37 - result
AORB_53:225:int_hashCode():37 * result + this.year => 37 * result * this.year
AORB_54:225:int_hashCode():37 * result + this.year => 37 * result / this.year
AORB_55:225:int_hashCode():37 * result + this.year => 37 * result % this.year
AORB_56:225:int_hashCode():37 * result + this.year => 37 * result - this.year
AORB_57:234:int_compareTo(java.lang.Object):this.year - w.getYear().getYear() => this.year * w.getYear().getYear()
AORB_58:234:int_compareTo(java.lang.Object):this.year - w.getYear().getYear() => this.year / w.getYear().getYear()
AORB_59:234:int_compareTo(java.lang.Object):this.year - w.getYear().getYear() => this.year % w.getYear().getYear()
AORB_60:234:int_compareTo(java.lang.Object):this.year - w.getYear().getYear() => this.year + w.getYear().getYear()
AORB_61:236:int_compareTo(java.lang.Object):this.week - w.getWeek() => this.week * w.getWeek()
AORB_62:236:int_compareTo(java.lang.Object):this.week - w.getWeek() => this.week / w.getWeek()
AORB_63:236:int_compareTo(java.lang.Object):this.week - w.getWeek() => this.week % w.getWeek()
AORB_64:236:int_compareTo(java.lang.Object):this.week - w.getWeek() => this.week + w.getWeek()
AORB_65:256:org.jfree.data.time.Week_parseWeek(java.lang.String):i + 1 => i * 1
AORB_66:256:org.jfree.data.time.Week_parseWeek(java.lang.String):i + 1 => i / 1
AORB_67:256:org.jfree.data.time.Week_parseWeek(java.lang.String):i + 1 => i % 1
AORB_68:256:org.jfree.data.time.Week_parseWeek(java.lang.String):i + 1 => i - 1
ROR_1:38:Week(int,int): week < FIRST_WEEK_IN_YEAR  =>   week > FIRST_WEEK_IN_YEAR
ROR_2:38:Week(int,int): week < FIRST_WEEK_IN_YEAR  =>   week >= FIRST_WEEK_IN_YEAR
ROR_3:38:Week(int,int): week < FIRST_WEEK_IN_YEAR  =>   week <= FIRST_WEEK_IN_YEAR
ROR_4:38:Week(int,int): week < FIRST_WEEK_IN_YEAR  =>   week == FIRST_WEEK_IN_YEAR
ROR_5:38:Week(int,int): week < FIRST_WEEK_IN_YEAR  =>   week != FIRST_WEEK_IN_YEAR
ROR_6:38:Week(int,int): week < FIRST_WEEK_IN_YEAR  =>   true
ROR_7:38:Week(int,int): week < FIRST_WEEK_IN_YEAR  =>   false
ROR_8:38:Week(int,int): week > LAST_WEEK_IN_YEAR  =>   week >= LAST_WEEK_IN_YEAR
ROR_9:38:Week(int,int): week > LAST_WEEK_IN_YEAR  =>   week < LAST_WEEK_IN_YEAR
ROR_10:38:Week(int,int): week > LAST_WEEK_IN_YEAR  =>   week <= LAST_WEEK_IN_YEAR
ROR_11:38:Week(int,int): week > LAST_WEEK_IN_YEAR  =>   week == LAST_WEEK_IN_YEAR
ROR_12:38:Week(int,int): week > LAST_WEEK_IN_YEAR  =>   week != LAST_WEEK_IN_YEAR
ROR_13:38:Week(int,int): week > LAST_WEEK_IN_YEAR  =>   true
ROR_14:38:Week(int,int): week > LAST_WEEK_IN_YEAR  =>   false
ROR_15:48:Week(int,org.jfree.data.time.Year): week < FIRST_WEEK_IN_YEAR  =>   week > FIRST_WEEK_IN_YEAR
ROR_16:48:Week(int,org.jfree.data.time.Year): week < FIRST_WEEK_IN_YEAR  =>   week >= FIRST_WEEK_IN_YEAR
ROR_17:48:Week(int,org.jfree.data.time.Year): week < FIRST_WEEK_IN_YEAR  =>   week <= FIRST_WEEK_IN_YEAR
ROR_18:48:Week(int,org.jfree.data.time.Year): week < FIRST_WEEK_IN_YEAR  =>   week == FIRST_WEEK_IN_YEAR
ROR_19:48:Week(int,org.jfree.data.time.Year): week < FIRST_WEEK_IN_YEAR  =>   week != FIRST_WEEK_IN_YEAR
ROR_20:48:Week(int,org.jfree.data.time.Year): week < FIRST_WEEK_IN_YEAR  =>   true
ROR_21:48:Week(int,org.jfree.data.time.Year): week < FIRST_WEEK_IN_YEAR  =>   false
ROR_22:48:Week(int,org.jfree.data.time.Year): week > LAST_WEEK_IN_YEAR  =>   week >= LAST_WEEK_IN_YEAR
ROR_23:48:Week(int,org.jfree.data.time.Year): week > LAST_WEEK_IN_YEAR  =>   week < LAST_WEEK_IN_YEAR
ROR_24:48:Week(int,org.jfree.data.time.Year): week > LAST_WEEK_IN_YEAR  =>   week <= LAST_WEEK_IN_YEAR
ROR_25:48:Week(int,org.jfree.data.time.Year): week > LAST_WEEK_IN_YEAR  =>   week == LAST_WEEK_IN_YEAR
ROR_26:48:Week(int,org.jfree.data.time.Year): week > LAST_WEEK_IN_YEAR  =>   week != LAST_WEEK_IN_YEAR
ROR_27:48:Week(int,org.jfree.data.time.Year): week > LAST_WEEK_IN_YEAR  =>   true
ROR_28:48:Week(int,org.jfree.data.time.Year): week > LAST_WEEK_IN_YEAR  =>   false
ROR_29:68:Week(java.util.Date,java.util.TimeZone,java.util.Locale): time == null  =>   time != null
ROR_30:71:Week(java.util.Date,java.util.TimeZone,java.util.Locale): zone == null  =>   zone != null
ROR_31:74:Week(java.util.Date,java.util.TimeZone,java.util.Locale): locale == null  =>   locale != null
ROR_32:80:Week(java.util.Date,java.util.TimeZone,java.util.Locale): tempWeek == 1  =>   tempWeek > 1
ROR_33:80:Week(java.util.Date,java.util.TimeZone,java.util.Locale): tempWeek == 1  =>   tempWeek >= 1
ROR_34:80:Week(java.util.Date,java.util.TimeZone,java.util.Locale): tempWeek == 1  =>   tempWeek < 1
ROR_35:80:Week(java.util.Date,java.util.TimeZone,java.util.Locale): tempWeek == 1  =>   tempWeek <= 1
ROR_36:80:Week(java.util.Date,java.util.TimeZone,java.util.Locale): tempWeek == 1  =>   tempWeek != 1
ROR_37:80:Week(java.util.Date,java.util.TimeZone,java.util.Locale): tempWeek == 1  =>   true
ROR_38:80:Week(java.util.Date,java.util.TimeZone,java.util.Locale): tempWeek == 1  =>   false
ROR_39:80:Week(java.util.Date,java.util.TimeZone,java.util.Locale): calendar.get( Calendar.MONTH ) == Calendar.DECEMBER  =>   calendar.get( Calendar.MONTH ) > Calendar.DECEMBER
ROR_40:80:Week(java.util.Date,java.util.TimeZone,java.util.Locale): calendar.get( Calendar.MONTH ) == Calendar.DECEMBER  =>   calendar.get( Calendar.MONTH ) >= Calendar.DECEMBER
ROR_41:80:Week(java.util.Date,java.util.TimeZone,java.util.Locale): calendar.get( Calendar.MONTH ) == Calendar.DECEMBER  =>   calendar.get( Calendar.MONTH ) < Calendar.DECEMBER
ROR_42:80:Week(java.util.Date,java.util.TimeZone,java.util.Locale): calendar.get( Calendar.MONTH ) == Calendar.DECEMBER  =>   calendar.get( Calendar.MONTH ) <= Calendar.DECEMBER
ROR_43:80:Week(java.util.Date,java.util.TimeZone,java.util.Locale): calendar.get( Calendar.MONTH ) == Calendar.DECEMBER  =>   calendar.get( Calendar.MONTH ) != Calendar.DECEMBER
ROR_44:80:Week(java.util.Date,java.util.TimeZone,java.util.Locale): calendar.get( Calendar.MONTH ) == Calendar.DECEMBER  =>   true
ROR_45:80:Week(java.util.Date,java.util.TimeZone,java.util.Locale): calendar.get( Calendar.MONTH ) == Calendar.DECEMBER  =>   false
ROR_46:86:Week(java.util.Date,java.util.TimeZone,java.util.Locale): calendar.get( Calendar.MONTH ) == Calendar.JANUARY  =>   calendar.get( Calendar.MONTH ) > Calendar.JANUARY
ROR_47:86:Week(java.util.Date,java.util.TimeZone,java.util.Locale): calendar.get( Calendar.MONTH ) == Calendar.JANUARY  =>   calendar.get( Calendar.MONTH ) >= Calendar.JANUARY
ROR_48:86:Week(java.util.Date,java.util.TimeZone,java.util.Locale): calendar.get( Calendar.MONTH ) == Calendar.JANUARY  =>   calendar.get( Calendar.MONTH ) < Calendar.JANUARY
ROR_49:86:Week(java.util.Date,java.util.TimeZone,java.util.Locale): calendar.get( Calendar.MONTH ) == Calendar.JANUARY  =>   calendar.get( Calendar.MONTH ) <= Calendar.JANUARY
ROR_50:86:Week(java.util.Date,java.util.TimeZone,java.util.Locale): calendar.get( Calendar.MONTH ) == Calendar.JANUARY  =>   calendar.get( Calendar.MONTH ) != Calendar.JANUARY
ROR_51:86:Week(java.util.Date,java.util.TimeZone,java.util.Locale): calendar.get( Calendar.MONTH ) == Calendar.JANUARY  =>   true
ROR_52:86:Week(java.util.Date,java.util.TimeZone,java.util.Locale): calendar.get( Calendar.MONTH ) == Calendar.JANUARY  =>   false
ROR_53:86:Week(java.util.Date,java.util.TimeZone,java.util.Locale): this.week >= 52  =>   this.week > 52
ROR_54:86:Week(java.util.Date,java.util.TimeZone,java.util.Locale): this.week >= 52  =>   this.week < 52
ROR_55:86:Week(java.util.Date,java.util.TimeZone,java.util.Locale): this.week >= 52  =>   this.week <= 52
ROR_56:86:Week(java.util.Date,java.util.TimeZone,java.util.Locale): this.week >= 52  =>   this.week == 52
ROR_57:86:Week(java.util.Date,java.util.TimeZone,java.util.Locale): this.week >= 52  =>   this.week != 52
ROR_58:86:Week(java.util.Date,java.util.TimeZone,java.util.Locale): this.week >= 52  =>   true
ROR_59:86:Week(java.util.Date,java.util.TimeZone,java.util.Locale): this.week >= 52  =>   false
ROR_60:128:org.jfree.data.time.RegularTimePeriod_previous(): this.week != FIRST_WEEK_IN_YEAR  =>   this.week > FIRST_WEEK_IN_YEAR
ROR_61:128:org.jfree.data.time.RegularTimePeriod_previous(): this.week != FIRST_WEEK_IN_YEAR  =>   this.week >= FIRST_WEEK_IN_YEAR
ROR_62:128:org.jfree.data.time.RegularTimePeriod_previous(): this.week != FIRST_WEEK_IN_YEAR  =>   this.week < FIRST_WEEK_IN_YEAR
ROR_63:128:org.jfree.data.time.RegularTimePeriod_previous(): this.week != FIRST_WEEK_IN_YEAR  =>   this.week <= FIRST_WEEK_IN_YEAR
ROR_64:128:org.jfree.data.time.RegularTimePeriod_previous(): this.week != FIRST_WEEK_IN_YEAR  =>   this.week == FIRST_WEEK_IN_YEAR
ROR_65:128:org.jfree.data.time.RegularTimePeriod_previous(): this.week != FIRST_WEEK_IN_YEAR  =>   true
ROR_66:128:org.jfree.data.time.RegularTimePeriod_previous(): this.week != FIRST_WEEK_IN_YEAR  =>   false
ROR_67:131:org.jfree.data.time.RegularTimePeriod_previous(): this.year > 1900  =>   this.year >= 1900
ROR_68:131:org.jfree.data.time.RegularTimePeriod_previous(): this.year > 1900  =>   this.year < 1900
ROR_69:131:org.jfree.data.time.RegularTimePeriod_previous(): this.year > 1900  =>   this.year <= 1900
ROR_70:131:org.jfree.data.time.RegularTimePeriod_previous(): this.year > 1900  =>   this.year == 1900
ROR_71:131:org.jfree.data.time.RegularTimePeriod_previous(): this.year > 1900  =>   this.year != 1900
ROR_72:131:org.jfree.data.time.RegularTimePeriod_previous(): this.year > 1900  =>   true
ROR_73:131:org.jfree.data.time.RegularTimePeriod_previous(): this.year > 1900  =>   false
ROR_74:146:org.jfree.data.time.RegularTimePeriod_next(): this.week < 52  =>   this.week > 52
ROR_75:146:org.jfree.data.time.RegularTimePeriod_next(): this.week < 52  =>   this.week >= 52
ROR_76:146:org.jfree.data.time.RegularTimePeriod_next(): this.week < 52  =>   this.week <= 52
ROR_77:146:org.jfree.data.time.RegularTimePeriod_next(): this.week < 52  =>   this.week == 52
ROR_78:146:org.jfree.data.time.RegularTimePeriod_next(): this.week < 52  =>   this.week != 52
ROR_79:146:org.jfree.data.time.RegularTimePeriod_next(): this.week < 52  =>   true
ROR_80:146:org.jfree.data.time.RegularTimePeriod_next(): this.week < 52  =>   false
ROR_81:152:org.jfree.data.time.RegularTimePeriod_next(): this.week < actualMaxWeek  =>   this.week > actualMaxWeek
ROR_82:152:org.jfree.data.time.RegularTimePeriod_next(): this.week < actualMaxWeek  =>   this.week >= actualMaxWeek
ROR_83:152:org.jfree.data.time.RegularTimePeriod_next(): this.week < actualMaxWeek  =>   this.week <= actualMaxWeek
ROR_84:152:org.jfree.data.time.RegularTimePeriod_next(): this.week < actualMaxWeek  =>   this.week == actualMaxWeek
ROR_85:152:org.jfree.data.time.RegularTimePeriod_next(): this.week < actualMaxWeek  =>   this.week != actualMaxWeek
ROR_86:152:org.jfree.data.time.RegularTimePeriod_next(): this.week < actualMaxWeek  =>   true
ROR_87:152:org.jfree.data.time.RegularTimePeriod_next(): this.week < actualMaxWeek  =>   false
ROR_88:155:org.jfree.data.time.RegularTimePeriod_next(): this.year < 9999  =>   this.year > 9999
ROR_89:155:org.jfree.data.time.RegularTimePeriod_next(): this.year < 9999  =>   this.year >= 9999
ROR_90:155:org.jfree.data.time.RegularTimePeriod_next(): this.year < 9999  =>   this.year <= 9999
ROR_91:155:org.jfree.data.time.RegularTimePeriod_next(): this.year < 9999  =>   this.year == 9999
ROR_92:155:org.jfree.data.time.RegularTimePeriod_next(): this.year < 9999  =>   this.year != 9999
ROR_93:155:org.jfree.data.time.RegularTimePeriod_next(): this.year < 9999  =>   true
ROR_94:155:org.jfree.data.time.RegularTimePeriod_next(): this.year < 9999  =>   false
ROR_95:205:boolean_equals(java.lang.Object): obj == this  =>   obj != this
ROR_96:212:boolean_equals(java.lang.Object): this.week != that.week  =>   this.week > that.week
ROR_97:212:boolean_equals(java.lang.Object): this.week != that.week  =>   this.week >= that.week
ROR_98:212:boolean_equals(java.lang.Object): this.week != that.week  =>   this.week < that.week
ROR_99:212:boolean_equals(java.lang.Object): this.week != that.week  =>   this.week <= that.week
ROR_100:212:boolean_equals(java.lang.Object): this.week != that.week  =>   this.week == that.week
ROR_101:212:boolean_equals(java.lang.Object): this.week != that.week  =>   true
ROR_102:212:boolean_equals(java.lang.Object): this.week != that.week  =>   false
ROR_103:215:boolean_equals(java.lang.Object): this.year != that.year  =>   this.year > that.year
ROR_104:215:boolean_equals(java.lang.Object): this.year != that.year  =>   this.year >= that.year
ROR_105:215:boolean_equals(java.lang.Object): this.year != that.year  =>   this.year < that.year
ROR_106:215:boolean_equals(java.lang.Object): this.year != that.year  =>   this.year <= that.year
ROR_107:215:boolean_equals(java.lang.Object): this.year != that.year  =>   this.year == that.year
ROR_108:215:boolean_equals(java.lang.Object): this.year != that.year  =>   true
ROR_109:215:boolean_equals(java.lang.Object): this.year != that.year  =>   false
ROR_110:235:int_compareTo(java.lang.Object): result == 0  =>   result > 0
ROR_111:235:int_compareTo(java.lang.Object): result == 0  =>   result >= 0
ROR_112:235:int_compareTo(java.lang.Object): result == 0  =>   result < 0
ROR_113:235:int_compareTo(java.lang.Object): result == 0  =>   result <= 0
ROR_114:235:int_compareTo(java.lang.Object): result == 0  =>   result != 0
ROR_115:235:int_compareTo(java.lang.Object): result == 0  =>   true
ROR_116:235:int_compareTo(java.lang.Object): result == 0  =>   false
ROR_117:251:org.jfree.data.time.Week_parseWeek(java.lang.String): s != null  =>   s == null
ROR_118:254:org.jfree.data.time.Week_parseWeek(java.lang.String): i != -1  =>   i > -1
ROR_119:254:org.jfree.data.time.Week_parseWeek(java.lang.String): i != -1  =>   i >= -1
ROR_120:254:org.jfree.data.time.Week_parseWeek(java.lang.String): i != -1  =>   i < -1
ROR_121:254:org.jfree.data.time.Week_parseWeek(java.lang.String): i != -1  =>   i <= -1
ROR_122:254:org.jfree.data.time.Week_parseWeek(java.lang.String): i != -1  =>   i == -1
ROR_123:254:org.jfree.data.time.Week_parseWeek(java.lang.String): i != -1  =>   true
ROR_124:254:org.jfree.data.time.Week_parseWeek(java.lang.String): i != -1  =>   false
ROR_125:259:org.jfree.data.time.Week_parseWeek(java.lang.String): y != null  =>   y == null
ROR_126:261:org.jfree.data.time.Week_parseWeek(java.lang.String): w == -1  =>   w > -1
ROR_127:261:org.jfree.data.time.Week_parseWeek(java.lang.String): w == -1  =>   w >= -1
ROR_128:261:org.jfree.data.time.Week_parseWeek(java.lang.String): w == -1  =>   w < -1
ROR_129:261:org.jfree.data.time.Week_parseWeek(java.lang.String): w == -1  =>   w <= -1
ROR_130:261:org.jfree.data.time.Week_parseWeek(java.lang.String): w == -1  =>   w != -1
ROR_131:261:org.jfree.data.time.Week_parseWeek(java.lang.String): w == -1  =>   true
ROR_132:261:org.jfree.data.time.Week_parseWeek(java.lang.String): w == -1  =>   false
ROR_133:267:org.jfree.data.time.Week_parseWeek(java.lang.String): y != null  =>   y == null
ROR_134:269:org.jfree.data.time.Week_parseWeek(java.lang.String): w == -1  =>   w > -1
ROR_135:269:org.jfree.data.time.Week_parseWeek(java.lang.String): w == -1  =>   w >= -1
ROR_136:269:org.jfree.data.time.Week_parseWeek(java.lang.String): w == -1  =>   w < -1
ROR_137:269:org.jfree.data.time.Week_parseWeek(java.lang.String): w == -1  =>   w <= -1
ROR_138:269:org.jfree.data.time.Week_parseWeek(java.lang.String): w == -1  =>   w != -1
ROR_139:269:org.jfree.data.time.Week_parseWeek(java.lang.String): w == -1  =>   true
ROR_140:269:org.jfree.data.time.Week_parseWeek(java.lang.String): w == -1  =>   false
ROR_141:287:int_findSeparator(java.lang.String): result == -1  =>   result > -1
ROR_142:287:int_findSeparator(java.lang.String): result == -1  =>   result >= -1
ROR_143:287:int_findSeparator(java.lang.String): result == -1  =>   result < -1
ROR_144:287:int_findSeparator(java.lang.String): result == -1  =>   result <= -1
ROR_145:287:int_findSeparator(java.lang.String): result == -1  =>   result != -1
ROR_146:287:int_findSeparator(java.lang.String): result == -1  =>   true
ROR_147:287:int_findSeparator(java.lang.String): result == -1  =>   false
ROR_148:290:int_findSeparator(java.lang.String): result == -1  =>   result > -1
ROR_149:290:int_findSeparator(java.lang.String): result == -1  =>   result >= -1
ROR_150:290:int_findSeparator(java.lang.String): result == -1  =>   result < -1
ROR_151:290:int_findSeparator(java.lang.String): result == -1  =>   result <= -1
ROR_152:290:int_findSeparator(java.lang.String): result == -1  =>   result != -1
ROR_153:290:int_findSeparator(java.lang.String): result == -1  =>   true
ROR_154:290:int_findSeparator(java.lang.String): result == -1  =>   false
ROR_155:293:int_findSeparator(java.lang.String): result == -1  =>   result > -1
ROR_156:293:int_findSeparator(java.lang.String): result == -1  =>   result >= -1
ROR_157:293:int_findSeparator(java.lang.String): result == -1  =>   result < -1
ROR_158:293:int_findSeparator(java.lang.String): result == -1  =>   result <= -1
ROR_159:293:int_findSeparator(java.lang.String): result == -1  =>   result != -1
ROR_160:293:int_findSeparator(java.lang.String): result == -1  =>   true
ROR_161:293:int_findSeparator(java.lang.String): result == -1  =>   false
ROR_162:316:int_stringToWeek(java.lang.String): result < 1  =>   result > 1
ROR_163:316:int_stringToWeek(java.lang.String): result < 1  =>   result >= 1
ROR_164:316:int_stringToWeek(java.lang.String): result < 1  =>   result <= 1
ROR_165:316:int_stringToWeek(java.lang.String): result < 1  =>   result == 1
ROR_166:316:int_stringToWeek(java.lang.String): result < 1  =>   result != 1
ROR_167:316:int_stringToWeek(java.lang.String): result < 1  =>   true
ROR_168:316:int_stringToWeek(java.lang.String): result < 1  =>   false
ROR_169:316:int_stringToWeek(java.lang.String): result > LAST_WEEK_IN_YEAR  =>   result >= LAST_WEEK_IN_YEAR
ROR_170:316:int_stringToWeek(java.lang.String): result > LAST_WEEK_IN_YEAR  =>   result < LAST_WEEK_IN_YEAR
ROR_171:316:int_stringToWeek(java.lang.String): result > LAST_WEEK_IN_YEAR  =>   result <= LAST_WEEK_IN_YEAR
ROR_172:316:int_stringToWeek(java.lang.String): result > LAST_WEEK_IN_YEAR  =>   result == LAST_WEEK_IN_YEAR
ROR_173:316:int_stringToWeek(java.lang.String): result > LAST_WEEK_IN_YEAR  =>   result != LAST_WEEK_IN_YEAR
ROR_174:316:int_stringToWeek(java.lang.String): result > LAST_WEEK_IN_YEAR  =>   true
ROR_175:316:int_stringToWeek(java.lang.String): result > LAST_WEEK_IN_YEAR  =>   false
COR_1:38:Week(int,int): week < FIRST_WEEK_IN_YEAR && week > LAST_WEEK_IN_YEAR  =>   week < FIRST_WEEK_IN_YEAR || week > LAST_WEEK_IN_YEAR
COR_2:38:Week(int,int): week < FIRST_WEEK_IN_YEAR && week > LAST_WEEK_IN_YEAR  =>   week < FIRST_WEEK_IN_YEAR ^ week > LAST_WEEK_IN_YEAR
COR_3:48:Week(int,org.jfree.data.time.Year): week < FIRST_WEEK_IN_YEAR && week > LAST_WEEK_IN_YEAR  =>   week < FIRST_WEEK_IN_YEAR || week > LAST_WEEK_IN_YEAR
COR_4:48:Week(int,org.jfree.data.time.Year): week < FIRST_WEEK_IN_YEAR && week > LAST_WEEK_IN_YEAR  =>   week < FIRST_WEEK_IN_YEAR ^ week > LAST_WEEK_IN_YEAR
COR_5:80:Week(java.util.Date,java.util.TimeZone,java.util.Locale): tempWeek == 1 && calendar.get( Calendar.MONTH ) == Calendar.DECEMBER  =>   tempWeek == 1 || calendar.get( Calendar.MONTH ) == Calendar.DECEMBER
COR_6:80:Week(java.util.Date,java.util.TimeZone,java.util.Locale): tempWeek == 1 && calendar.get( Calendar.MONTH ) == Calendar.DECEMBER  =>   tempWeek == 1 ^ calendar.get( Calendar.MONTH ) == Calendar.DECEMBER
COR_7:86:Week(java.util.Date,java.util.TimeZone,java.util.Locale): calendar.get( Calendar.MONTH ) == Calendar.JANUARY && this.week >= 52  =>   calendar.get( Calendar.MONTH ) == Calendar.JANUARY || this.week >= 52
COR_8:86:Week(java.util.Date,java.util.TimeZone,java.util.Locale): calendar.get( Calendar.MONTH ) == Calendar.JANUARY && this.week >= 52  =>   calendar.get( Calendar.MONTH ) == Calendar.JANUARY ^ this.week >= 52
COR_9:316:int_stringToWeek(java.lang.String): result < 1 || result > LAST_WEEK_IN_YEAR  =>   result < 1 && result > LAST_WEEK_IN_YEAR
COR_10:316:int_stringToWeek(java.lang.String): result < 1 || result > LAST_WEEK_IN_YEAR  =>   result < 1 ^ result > LAST_WEEK_IN_YEAR
SDL_1:41:Week(int,int): if (week < FIRST_WEEK_IN_YEAR && week > LAST_WEEK_IN_YEAR) {     throw new java.lang.IllegalArgumentException( \"The 'week' argument must be in the range 1 - 53.\" ); } this.week = (byte) week; this.year = (short) year; peg( Calendar.getInstance() );  =>   this.week = (byte) week; this.year = (short) year; peg( Calendar.getInstance() );
SDL_2:43:Week(int,int): if (week < FIRST_WEEK_IN_YEAR && week > LAST_WEEK_IN_YEAR) {     throw new java.lang.IllegalArgumentException( \"The 'week' argument must be in the range 1 - 53.\" ); } this.week = (byte) week; this.year = (short) year; peg( Calendar.getInstance() );  =>   if (week < FIRST_WEEK_IN_YEAR && week > LAST_WEEK_IN_YEAR) {     throw new java.lang.IllegalArgumentException( \"The 'week' argument must be in the range 1 - 53.\" ); } this.year = (short) year; peg( Calendar.getInstance() );
SDL_3:43:Week(int,int): if (week < FIRST_WEEK_IN_YEAR && week > LAST_WEEK_IN_YEAR) {     throw new java.lang.IllegalArgumentException( \"The 'week' argument must be in the range 1 - 53.\" ); } this.week = (byte) week; this.year = (short) year; peg( Calendar.getInstance() );  =>   if (week < FIRST_WEEK_IN_YEAR && week > LAST_WEEK_IN_YEAR) {     throw new java.lang.IllegalArgumentException( \"The 'week' argument must be in the range 1 - 53.\" ); } this.week = (byte) week; peg( Calendar.getInstance() );
SDL_4:43:Week(int,int): if (week < FIRST_WEEK_IN_YEAR && week > LAST_WEEK_IN_YEAR) {     throw new java.lang.IllegalArgumentException( \"The 'week' argument must be in the range 1 - 53.\" ); } this.week = (byte) week; this.year = (short) year; peg( Calendar.getInstance() );  =>   if (week < FIRST_WEEK_IN_YEAR && week > LAST_WEEK_IN_YEAR) {     throw new java.lang.IllegalArgumentException( \"The 'week' argument must be in the range 1 - 53.\" ); } this.week = (byte) week; this.year = (short) year;
SDL_5:39:Week(int,int): throw new java.lang.IllegalArgumentException( \"The 'week' argument must be in the range 1 - 53.\" );  =>  
SDL_6:41:Week(int,int): if (week < FIRST_WEEK_IN_YEAR && week > LAST_WEEK_IN_YEAR) {     throw new java.lang.IllegalArgumentException( \"The 'week' argument must be in the range 1 - 53.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The 'week' argument must be in the range 1 - 53.\" ); }
SDL_7:51:Week(int,org.jfree.data.time.Year): if (week < FIRST_WEEK_IN_YEAR && week > LAST_WEEK_IN_YEAR) {     throw new java.lang.IllegalArgumentException( \"The 'week' argument must be in the range 1 - 53.\" ); } this.week = (byte) week; this.year = (short) year.getYear(); peg( Calendar.getInstance() );  =>   this.week = (byte) week; this.year = (short) year.getYear(); peg( Calendar.getInstance() );
SDL_8:53:Week(int,org.jfree.data.time.Year): if (week < FIRST_WEEK_IN_YEAR && week > LAST_WEEK_IN_YEAR) {     throw new java.lang.IllegalArgumentException( \"The 'week' argument must be in the range 1 - 53.\" ); } this.week = (byte) week; this.year = (short) year.getYear(); peg( Calendar.getInstance() );  =>   if (week < FIRST_WEEK_IN_YEAR && week > LAST_WEEK_IN_YEAR) {     throw new java.lang.IllegalArgumentException( \"The 'week' argument must be in the range 1 - 53.\" ); } this.year = (short) year.getYear(); peg( Calendar.getInstance() );
SDL_9:53:Week(int,org.jfree.data.time.Year): if (week < FIRST_WEEK_IN_YEAR && week > LAST_WEEK_IN_YEAR) {     throw new java.lang.IllegalArgumentException( \"The 'week' argument must be in the range 1 - 53.\" ); } this.week = (byte) week; this.year = (short) year.getYear(); peg( Calendar.getInstance() );  =>   if (week < FIRST_WEEK_IN_YEAR && week > LAST_WEEK_IN_YEAR) {     throw new java.lang.IllegalArgumentException( \"The 'week' argument must be in the range 1 - 53.\" ); } this.week = (byte) week; peg( Calendar.getInstance() );
SDL_10:53:Week(int,org.jfree.data.time.Year): if (week < FIRST_WEEK_IN_YEAR && week > LAST_WEEK_IN_YEAR) {     throw new java.lang.IllegalArgumentException( \"The 'week' argument must be in the range 1 - 53.\" ); } this.week = (byte) week; this.year = (short) year.getYear(); peg( Calendar.getInstance() );  =>   if (week < FIRST_WEEK_IN_YEAR && week > LAST_WEEK_IN_YEAR) {     throw new java.lang.IllegalArgumentException( \"The 'week' argument must be in the range 1 - 53.\" ); } this.week = (byte) week; this.year = (short) year.getYear();
SDL_11:49:Week(int,org.jfree.data.time.Year): throw new java.lang.IllegalArgumentException( \"The 'week' argument must be in the range 1 - 53.\" );  =>  
SDL_12:51:Week(int,org.jfree.data.time.Year): if (week < FIRST_WEEK_IN_YEAR && week > LAST_WEEK_IN_YEAR) {     throw new java.lang.IllegalArgumentException( \"The 'week' argument must be in the range 1 - 53.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The 'week' argument must be in the range 1 - 53.\" ); }
SDL_13:89:Week(java.util.Date,java.util.TimeZone,java.util.Locale): if (time == null) {     throw new java.lang.IllegalArgumentException( \"Null 'time' argument.\" ); } if (zone == null) {     throw new java.lang.IllegalArgumentException( \"Null 'zone' argument.\" ); } if (locale == null) {     throw new java.lang.IllegalArgumentException( \"Null 'locale' argument.\" ); } java.util.Calendar calendar = Calendar.getInstance( zone, locale ); calendar.setTime( time ); int tempWeek = calendar.get( Calendar.WEEK_OF_YEAR ); if (tempWeek == 1 && calendar.get( Calendar.MONTH ) == Calendar.DECEMBER) {     this.week = 1;     this.year = (short) (calendar.get( Calendar.YEAR ) + 1); } else {     this.week = (byte) Math.min( tempWeek, LAST_WEEK_IN_YEAR );     int yyyy = calendar.get( Calendar.YEAR );     if (calendar.get( Calendar.MONTH ) == Calendar.JANUARY && this.week >= 52) {         yyyy--;     }     this.year = (short) yyyy; } peg( calendar );  =>   if (zone == null) {     throw new java.lang.IllegalArgumentException( \"Null 'zone' argument.\" ); } if (locale == null) {     throw new java.lang.IllegalArgumentException( \"Null 'locale' argument.\" ); } java.util.Calendar calendar = Calendar.getInstance( zone, locale ); calendar.setTime( time ); int tempWeek = calendar.get( Calendar.WEEK_OF_YEAR ); if (tempWeek == 1 && calendar.get( Calendar.MONTH ) == Calendar.DECEMBER) {     this.week = 1;     this.year = (short) (calendar.get( Calendar.YEAR ) + 1); } else {     this.week = (byte) Math.min( tempWeek, LAST_WEEK_IN_YEAR );     int yyyy = calendar.get( Calendar.YEAR );     if (calendar.get( Calendar.MONTH ) == Calendar.JANUARY && this.week >= 52) {         yyyy--;     }     this.year = (short) yyyy; } peg( calendar );
SDL_14:89:Week(java.util.Date,java.util.TimeZone,java.util.Locale): if (time == null) {     throw new java.lang.IllegalArgumentException( \"Null 'time' argument.\" ); } if (zone == null) {     throw new java.lang.IllegalArgumentException( \"Null 'zone' argument.\" ); } if (locale == null) {     throw new java.lang.IllegalArgumentException( \"Null 'locale' argument.\" ); } java.util.Calendar calendar = Calendar.getInstance( zone, locale ); calendar.setTime( time ); int tempWeek = calendar.get( Calendar.WEEK_OF_YEAR ); if (tempWeek == 1 && calendar.get( Calendar.MONTH ) == Calendar.DECEMBER) {     this.week = 1;     this.year = (short) (calendar.get( Calendar.YEAR ) + 1); } else {     this.week = (byte) Math.min( tempWeek, LAST_WEEK_IN_YEAR );     int yyyy = calendar.get( Calendar.YEAR );     if (calendar.get( Calendar.MONTH ) == Calendar.JANUARY && this.week >= 52) {         yyyy--;     }     this.year = (short) yyyy; } peg( calendar );  =>   if (time == null) {     throw new java.lang.IllegalArgumentException( \"Null 'time' argument.\" ); } if (locale == null) {     throw new java.lang.IllegalArgumentException( \"Null 'locale' argument.\" ); } java.util.Calendar calendar = Calendar.getInstance( zone, locale ); calendar.setTime( time ); int tempWeek = calendar.get( Calendar.WEEK_OF_YEAR ); if (tempWeek == 1 && calendar.get( Calendar.MONTH ) == Calendar.DECEMBER) {     this.week = 1;     this.year = (short) (calendar.get( Calendar.YEAR ) + 1); } else {     this.week = (byte) Math.min( tempWeek, LAST_WEEK_IN_YEAR );     int yyyy = calendar.get( Calendar.YEAR );     if (calendar.get( Calendar.MONTH ) == Calendar.JANUARY && this.week >= 52) {         yyyy--;     }     this.year = (short) yyyy; } peg( calendar );
SDL_15:89:Week(java.util.Date,java.util.TimeZone,java.util.Locale): if (time == null) {     throw new java.lang.IllegalArgumentException( \"Null 'time' argument.\" ); } if (zone == null) {     throw new java.lang.IllegalArgumentException( \"Null 'zone' argument.\" ); } if (locale == null) {     throw new java.lang.IllegalArgumentException( \"Null 'locale' argument.\" ); } java.util.Calendar calendar = Calendar.getInstance( zone, locale ); calendar.setTime( time ); int tempWeek = calendar.get( Calendar.WEEK_OF_YEAR ); if (tempWeek == 1 && calendar.get( Calendar.MONTH ) == Calendar.DECEMBER) {     this.week = 1;     this.year = (short) (calendar.get( Calendar.YEAR ) + 1); } else {     this.week = (byte) Math.min( tempWeek, LAST_WEEK_IN_YEAR );     int yyyy = calendar.get( Calendar.YEAR );     if (calendar.get( Calendar.MONTH ) == Calendar.JANUARY && this.week >= 52) {         yyyy--;     }     this.year = (short) yyyy; } peg( calendar );  =>   if (time == null) {     throw new java.lang.IllegalArgumentException( \"Null 'time' argument.\" ); } if (zone == null) {     throw new java.lang.IllegalArgumentException( \"Null 'zone' argument.\" ); } java.util.Calendar calendar = Calendar.getInstance( zone, locale ); calendar.setTime( time ); int tempWeek = calendar.get( Calendar.WEEK_OF_YEAR ); if (tempWeek == 1 && calendar.get( Calendar.MONTH ) == Calendar.DECEMBER) {     this.week = 1;     this.year = (short) (calendar.get( Calendar.YEAR ) + 1); } else {     this.week = (byte) Math.min( tempWeek, LAST_WEEK_IN_YEAR );     int yyyy = calendar.get( Calendar.YEAR );     if (calendar.get( Calendar.MONTH ) == Calendar.JANUARY && this.week >= 52) {         yyyy--;     }     this.year = (short) yyyy; } peg( calendar );
SDL_16:91:Week(java.util.Date,java.util.TimeZone,java.util.Locale): if (time == null) {     throw new java.lang.IllegalArgumentException( \"Null 'time' argument.\" ); } if (zone == null) {     throw new java.lang.IllegalArgumentException( \"Null 'zone' argument.\" ); } if (locale == null) {     throw new java.lang.IllegalArgumentException( \"Null 'locale' argument.\" ); } java.util.Calendar calendar = Calendar.getInstance( zone, locale ); calendar.setTime( time ); int tempWeek = calendar.get( Calendar.WEEK_OF_YEAR ); if (tempWeek == 1 && calendar.get( Calendar.MONTH ) == Calendar.DECEMBER) {     this.week = 1;     this.year = (short) (calendar.get( Calendar.YEAR ) + 1); } else {     this.week = (byte) Math.min( tempWeek, LAST_WEEK_IN_YEAR );     int yyyy = calendar.get( Calendar.YEAR );     if (calendar.get( Calendar.MONTH ) == Calendar.JANUARY && this.week >= 52) {         yyyy--;     }     this.year = (short) yyyy; } peg( calendar );  =>   if (time == null) {     throw new java.lang.IllegalArgumentException( \"Null 'time' argument.\" ); } if (zone == null) {     throw new java.lang.IllegalArgumentException( \"Null 'zone' argument.\" ); } if (locale == null) {     throw new java.lang.IllegalArgumentException( \"Null 'locale' argument.\" ); } java.util.Calendar calendar = Calendar.getInstance( zone, locale ); int tempWeek = calendar.get( Calendar.WEEK_OF_YEAR ); if (tempWeek == 1 && calendar.get( Calendar.MONTH ) == Calendar.DECEMBER) {     this.week = 1;     this.year = (short) (calendar.get( Calendar.YEAR ) + 1); } else {     this.week = (byte) Math.min( tempWeek, LAST_WEEK_IN_YEAR );     int yyyy = calendar.get( Calendar.YEAR );     if (calendar.get( Calendar.MONTH ) == Calendar.JANUARY && this.week >= 52) {         yyyy--;     }     this.year = (short) yyyy; } peg( calendar );
SDL_17:81:Week(java.util.Date,java.util.TimeZone,java.util.Locale): if (time == null) {     throw new java.lang.IllegalArgumentException( \"Null 'time' argument.\" ); } if (zone == null) {     throw new java.lang.IllegalArgumentException( \"Null 'zone' argument.\" ); } if (locale == null) {     throw new java.lang.IllegalArgumentException( \"Null 'locale' argument.\" ); } java.util.Calendar calendar = Calendar.getInstance( zone, locale ); calendar.setTime( time ); int tempWeek = calendar.get( Calendar.WEEK_OF_YEAR ); if (tempWeek == 1 && calendar.get( Calendar.MONTH ) == Calendar.DECEMBER) {     this.week = 1;     this.year = (short) (calendar.get( Calendar.YEAR ) + 1); } else {     this.week = (byte) Math.min( tempWeek, LAST_WEEK_IN_YEAR );     int yyyy = calendar.get( Calendar.YEAR );     if (calendar.get( Calendar.MONTH ) == Calendar.JANUARY && this.week >= 52) {         yyyy--;     }     this.year = (short) yyyy; } peg( calendar );  =>   if (time == null) {     throw new java.lang.IllegalArgumentException( \"Null 'time' argument.\" ); } if (zone == null) {     throw new java.lang.IllegalArgumentException( \"Null 'zone' argument.\" ); } if (locale == null) {     throw new java.lang.IllegalArgumentException( \"Null 'locale' argument.\" ); } java.util.Calendar calendar = Calendar.getInstance( zone, locale ); calendar.setTime( time ); int tempWeek = calendar.get( Calendar.WEEK_OF_YEAR ); peg( calendar );
SDL_18:91:Week(java.util.Date,java.util.TimeZone,java.util.Locale): if (time == null) {     throw new java.lang.IllegalArgumentException( \"Null 'time' argument.\" ); } if (zone == null) {     throw new java.lang.IllegalArgumentException( \"Null 'zone' argument.\" ); } if (locale == null) {     throw new java.lang.IllegalArgumentException( \"Null 'locale' argument.\" ); } java.util.Calendar calendar = Calendar.getInstance( zone, locale ); calendar.setTime( time ); int tempWeek = calendar.get( Calendar.WEEK_OF_YEAR ); if (tempWeek == 1 && calendar.get( Calendar.MONTH ) == Calendar.DECEMBER) {     this.week = 1;     this.year = (short) (calendar.get( Calendar.YEAR ) + 1); } else {     this.week = (byte) Math.min( tempWeek, LAST_WEEK_IN_YEAR );     int yyyy = calendar.get( Calendar.YEAR );     if (calendar.get( Calendar.MONTH ) == Calendar.JANUARY && this.week >= 52) {         yyyy--;     }     this.year = (short) yyyy; } peg( calendar );  =>   if (time == null) {     throw new java.lang.IllegalArgumentException( \"Null 'time' argument.\" ); } if (zone == null) {     throw new java.lang.IllegalArgumentException( \"Null 'zone' argument.\" ); } if (locale == null) {     throw new java.lang.IllegalArgumentException( \"Null 'locale' argument.\" ); } java.util.Calendar calendar = Calendar.getInstance( zone, locale ); calendar.setTime( time ); int tempWeek = calendar.get( Calendar.WEEK_OF_YEAR ); if (tempWeek == 1 && calendar.get( Calendar.MONTH ) == Calendar.DECEMBER) {     this.week = 1;     this.year = (short) (calendar.get( Calendar.YEAR ) + 1); } else {     this.week = (byte) Math.min( tempWeek, LAST_WEEK_IN_YEAR );     int yyyy = calendar.get( Calendar.YEAR );     if (calendar.get( Calendar.MONTH ) == Calendar.JANUARY && this.week >= 52) {         yyyy--;     }     this.year = (short) yyyy; }
SDL_19:69:Week(java.util.Date,java.util.TimeZone,java.util.Locale): throw new java.lang.IllegalArgumentException( \"Null 'time' argument.\" );  =>  
SDL_20:71:Week(java.util.Date,java.util.TimeZone,java.util.Locale): if (time == null) {     throw new java.lang.IllegalArgumentException( \"Null 'time' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'time' argument.\" ); }
SDL_21:72:Week(java.util.Date,java.util.TimeZone,java.util.Locale): throw new java.lang.IllegalArgumentException( \"Null 'zone' argument.\" );  =>  
SDL_22:74:Week(java.util.Date,java.util.TimeZone,java.util.Locale): if (zone == null) {     throw new java.lang.IllegalArgumentException( \"Null 'zone' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'zone' argument.\" ); }
SDL_23:75:Week(java.util.Date,java.util.TimeZone,java.util.Locale): throw new java.lang.IllegalArgumentException( \"Null 'locale' argument.\" );  =>  
SDL_24:77:Week(java.util.Date,java.util.TimeZone,java.util.Locale): if (locale == null) {     throw new java.lang.IllegalArgumentException( \"Null 'locale' argument.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Null 'locale' argument.\" ); }
SDL_25:82:Week(java.util.Date,java.util.TimeZone,java.util.Locale): this.week = 1; this.year = (short) (calendar.get( Calendar.YEAR ) + 1);  =>   this.year = (short) (calendar.get( Calendar.YEAR ) + 1);
SDL_26:82:Week(java.util.Date,java.util.TimeZone,java.util.Locale): this.week = 1; this.year = (short) (calendar.get( Calendar.YEAR ) + 1);  =>   this.week = 1;
SDL_27:91:Week(java.util.Date,java.util.TimeZone,java.util.Locale): if (tempWeek == 1 && calendar.get( Calendar.MONTH ) == Calendar.DECEMBER) {     this.week = 1;     this.year = (short) (calendar.get( Calendar.YEAR ) + 1); } else {     this.week = (byte) Math.min( tempWeek, LAST_WEEK_IN_YEAR );     int yyyy = calendar.get( Calendar.YEAR );     if (calendar.get( Calendar.MONTH ) == Calendar.JANUARY && this.week >= 52) {         yyyy--;     }     this.year = (short) yyyy; }  =>   if (true) {     this.week = 1;     this.year = (short) (calendar.get( Calendar.YEAR ) + 1); } else {     this.week = (byte) Math.min( tempWeek, LAST_WEEK_IN_YEAR );     int yyyy = calendar.get( Calendar.YEAR );     if (calendar.get( Calendar.MONTH ) == Calendar.JANUARY && this.week >= 52) {         yyyy--;     }     this.year = (short) yyyy; }
SDL_28:89:Week(java.util.Date,java.util.TimeZone,java.util.Locale): this.week = (byte) Math.min( tempWeek, LAST_WEEK_IN_YEAR ); int yyyy = calendar.get( Calendar.YEAR ); if (calendar.get( Calendar.MONTH ) == Calendar.JANUARY && this.week >= 52) {     yyyy--; } this.year = (short) yyyy;  =>   int yyyy = calendar.get( Calendar.YEAR ); if (calendar.get( Calendar.MONTH ) == Calendar.JANUARY && this.week >= 52) {     yyyy--; } this.year = (short) yyyy;
SDL_29:87:Week(java.util.Date,java.util.TimeZone,java.util.Locale): this.week = (byte) Math.min( tempWeek, LAST_WEEK_IN_YEAR ); int yyyy = calendar.get( Calendar.YEAR ); if (calendar.get( Calendar.MONTH ) == Calendar.JANUARY && this.week >= 52) {     yyyy--; } this.year = (short) yyyy;  =>   this.week = (byte) Math.min( tempWeek, LAST_WEEK_IN_YEAR ); int yyyy = calendar.get( Calendar.YEAR ); this.year = (short) yyyy;
SDL_30:89:Week(java.util.Date,java.util.TimeZone,java.util.Locale): this.week = (byte) Math.min( tempWeek, LAST_WEEK_IN_YEAR ); int yyyy = calendar.get( Calendar.YEAR ); if (calendar.get( Calendar.MONTH ) == Calendar.JANUARY && this.week >= 52) {     yyyy--; } this.year = (short) yyyy;  =>   this.week = (byte) Math.min( tempWeek, LAST_WEEK_IN_YEAR ); int yyyy = calendar.get( Calendar.YEAR ); if (calendar.get( Calendar.MONTH ) == Calendar.JANUARY && this.week >= 52) {     yyyy--; }
SDL_31:87:Week(java.util.Date,java.util.TimeZone,java.util.Locale): yyyy--;  =>  
SDL_32:89:Week(java.util.Date,java.util.TimeZone,java.util.Locale): if (calendar.get( Calendar.MONTH ) == Calendar.JANUARY && this.week >= 52) {     yyyy--; }  =>   if (true) {     yyyy--; }
SDL_33:102:int_getYearValue(): return this.year;  =>   return 0;
SDL_34:107:int_getWeek(): return this.week;  =>   return 0;
SDL_35:112:long_getFirstMillisecond(): return this.firstMillisecond;  =>   return 0;
SDL_36:117:long_getLastMillisecond(): return this.lastMillisecond;  =>   return 0;
SDL_37:122:void_peg(java.util.Calendar): this.firstMillisecond = getFirstMillisecond( calendar ); this.lastMillisecond = getLastMillisecond( calendar );  =>   this.lastMillisecond = getLastMillisecond( calendar );
SDL_38:122:void_peg(java.util.Calendar): this.firstMillisecond = getFirstMillisecond( calendar ); this.lastMillisecond = getLastMillisecond( calendar );  =>   this.firstMillisecond = getFirstMillisecond( calendar );
SDL_39:129:org.jfree.data.time.RegularTimePeriod_previous(): org.jfree.data.time.Week result; if (this.week != FIRST_WEEK_IN_YEAR) {     result = new org.jfree.data.time.Week( this.week - 1, this.year ); } else {     if (this.year > 1900) {         int yy = this.year - 1;         java.util.Calendar prevYearCalendar = Calendar.getInstance();         prevYearCalendar.set( yy, Calendar.DECEMBER, 31 );         result = new org.jfree.data.time.Week( prevYearCalendar.getActualMaximum( Calendar.WEEK_OF_YEAR ), yy );     } else {         result = null;     } } return result;  =>   org.jfree.data.time.Week result; return result;
SDL_40:129:org.jfree.data.time.RegularTimePeriod_previous(): result = new org.jfree.data.time.Week( this.week - 1, this.year );  =>  
SDL_41:140:org.jfree.data.time.RegularTimePeriod_previous(): if (this.week != FIRST_WEEK_IN_YEAR) {     result = new org.jfree.data.time.Week( this.week - 1, this.year ); } else {     if (this.year > 1900) {         int yy = this.year - 1;         java.util.Calendar prevYearCalendar = Calendar.getInstance();         prevYearCalendar.set( yy, Calendar.DECEMBER, 31 );         result = new org.jfree.data.time.Week( prevYearCalendar.getActualMaximum( Calendar.WEEK_OF_YEAR ), yy );     } else {         result = null;     } }  =>   if (true) {     result = new org.jfree.data.time.Week( this.week - 1, this.year ); } else {     if (this.year > 1900) {         int yy = this.year - 1;         java.util.Calendar prevYearCalendar = Calendar.getInstance();         prevYearCalendar.set( yy, Calendar.DECEMBER, 31 );         result = new org.jfree.data.time.Week( prevYearCalendar.getActualMaximum( Calendar.WEEK_OF_YEAR ), yy );     } else {         result = null;     } }
SDL_42:131:org.jfree.data.time.RegularTimePeriod_previous(): if (this.year > 1900) {     int yy = this.year - 1;     java.util.Calendar prevYearCalendar = Calendar.getInstance();     prevYearCalendar.set( yy, Calendar.DECEMBER, 31 );     result = new org.jfree.data.time.Week( prevYearCalendar.getActualMaximum( Calendar.WEEK_OF_YEAR ), yy ); } else {     result = null; }  =>  
SDL_43:135:org.jfree.data.time.RegularTimePeriod_previous(): int yy = this.year - 1; java.util.Calendar prevYearCalendar = Calendar.getInstance(); prevYearCalendar.set( yy, Calendar.DECEMBER, 31 ); result = new org.jfree.data.time.Week( prevYearCalendar.getActualMaximum( Calendar.WEEK_OF_YEAR ), yy );  =>   int yy = this.year - 1; java.util.Calendar prevYearCalendar = Calendar.getInstance(); result = new org.jfree.data.time.Week( prevYearCalendar.getActualMaximum( Calendar.WEEK_OF_YEAR ), yy );
SDL_44:135:org.jfree.data.time.RegularTimePeriod_previous(): int yy = this.year - 1; java.util.Calendar prevYearCalendar = Calendar.getInstance(); prevYearCalendar.set( yy, Calendar.DECEMBER, 31 ); result = new org.jfree.data.time.Week( prevYearCalendar.getActualMaximum( Calendar.WEEK_OF_YEAR ), yy );  =>   int yy = this.year - 1; java.util.Calendar prevYearCalendar = Calendar.getInstance(); prevYearCalendar.set( yy, Calendar.DECEMBER, 31 );
SDL_45:139:org.jfree.data.time.RegularTimePeriod_previous(): if (this.year > 1900) {     int yy = this.year - 1;     java.util.Calendar prevYearCalendar = Calendar.getInstance();     prevYearCalendar.set( yy, Calendar.DECEMBER, 31 );     result = new org.jfree.data.time.Week( prevYearCalendar.getActualMaximum( Calendar.WEEK_OF_YEAR ), yy ); } else {     result = null; }  =>   if (true) {     int yy = this.year - 1;     java.util.Calendar prevYearCalendar = Calendar.getInstance();     prevYearCalendar.set( yy, Calendar.DECEMBER, 31 );     result = new org.jfree.data.time.Week( prevYearCalendar.getActualMaximum( Calendar.WEEK_OF_YEAR ), yy ); } else {     result = null; }
SDL_46:137:org.jfree.data.time.RegularTimePeriod_previous(): result = null;  =>  
SDL_47:147:org.jfree.data.time.RegularTimePeriod_next(): org.jfree.data.time.Week result; if (this.week < 52) {     result = new org.jfree.data.time.Week( this.week + 1, this.year ); } else {     java.util.Calendar calendar = Calendar.getInstance();     calendar.set( this.year, Calendar.DECEMBER, 31 );     int actualMaxWeek = calendar.getActualMaximum( Calendar.WEEK_OF_YEAR );     if (this.week < actualMaxWeek) {         result = new org.jfree.data.time.Week( this.week + 1, this.year );     } else {         if (this.year < 9999) {             result = new org.jfree.data.time.Week( FIRST_WEEK_IN_YEAR, this.year + 1 );         } else {             result = null;         }     } } return result;  =>   org.jfree.data.time.Week result; return result;
SDL_48:147:org.jfree.data.time.RegularTimePeriod_next(): result = new org.jfree.data.time.Week( this.week + 1, this.year );  =>  
SDL_49:162:org.jfree.data.time.RegularTimePeriod_next(): if (this.week < 52) {     result = new org.jfree.data.time.Week( this.week + 1, this.year ); } else {     java.util.Calendar calendar = Calendar.getInstance();     calendar.set( this.year, Calendar.DECEMBER, 31 );     int actualMaxWeek = calendar.getActualMaximum( Calendar.WEEK_OF_YEAR );     if (this.week < actualMaxWeek) {         result = new org.jfree.data.time.Week( this.week + 1, this.year );     } else {         if (this.year < 9999) {             result = new org.jfree.data.time.Week( FIRST_WEEK_IN_YEAR, this.year + 1 );         } else {             result = null;         }     } }  =>   if (true) {     result = new org.jfree.data.time.Week( this.week + 1, this.year ); } else {     java.util.Calendar calendar = Calendar.getInstance();     calendar.set( this.year, Calendar.DECEMBER, 31 );     int actualMaxWeek = calendar.getActualMaximum( Calendar.WEEK_OF_YEAR );     if (this.week < actualMaxWeek) {         result = new org.jfree.data.time.Week( this.week + 1, this.year );     } else {         if (this.year < 9999) {             result = new org.jfree.data.time.Week( FIRST_WEEK_IN_YEAR, this.year + 1 );         } else {             result = null;         }     } }
SDL_50:160:org.jfree.data.time.RegularTimePeriod_next(): java.util.Calendar calendar = Calendar.getInstance(); calendar.set( this.year, Calendar.DECEMBER, 31 ); int actualMaxWeek = calendar.getActualMaximum( Calendar.WEEK_OF_YEAR ); if (this.week < actualMaxWeek) {     result = new org.jfree.data.time.Week( this.week + 1, this.year ); } else {     if (this.year < 9999) {         result = new org.jfree.data.time.Week( FIRST_WEEK_IN_YEAR, this.year + 1 );     } else {         result = null;     } }  =>   java.util.Calendar calendar = Calendar.getInstance(); int actualMaxWeek = calendar.getActualMaximum( Calendar.WEEK_OF_YEAR ); if (this.week < actualMaxWeek) {     result = new org.jfree.data.time.Week( this.week + 1, this.year ); } else {     if (this.year < 9999) {         result = new org.jfree.data.time.Week( FIRST_WEEK_IN_YEAR, this.year + 1 );     } else {         result = null;     } }
SDL_51:152:org.jfree.data.time.RegularTimePeriod_next(): java.util.Calendar calendar = Calendar.getInstance(); calendar.set( this.year, Calendar.DECEMBER, 31 ); int actualMaxWeek = calendar.getActualMaximum( Calendar.WEEK_OF_YEAR ); if (this.week < actualMaxWeek) {     result = new org.jfree.data.time.Week( this.week + 1, this.year ); } else {     if (this.year < 9999) {         result = new org.jfree.data.time.Week( FIRST_WEEK_IN_YEAR, this.year + 1 );     } else {         result = null;     } }  =>   java.util.Calendar calendar = Calendar.getInstance(); calendar.set( this.year, Calendar.DECEMBER, 31 ); int actualMaxWeek = calendar.getActualMaximum( Calendar.WEEK_OF_YEAR );
SDL_52:153:org.jfree.data.time.RegularTimePeriod_next(): result = new org.jfree.data.time.Week( this.week + 1, this.year );  =>  
SDL_53:161:org.jfree.data.time.RegularTimePeriod_next(): if (this.week < actualMaxWeek) {     result = new org.jfree.data.time.Week( this.week + 1, this.year ); } else {     if (this.year < 9999) {         result = new org.jfree.data.time.Week( FIRST_WEEK_IN_YEAR, this.year + 1 );     } else {         result = null;     } }  =>   if (true) {     result = new org.jfree.data.time.Week( this.week + 1, this.year ); } else {     if (this.year < 9999) {         result = new org.jfree.data.time.Week( FIRST_WEEK_IN_YEAR, this.year + 1 );     } else {         result = null;     } }
SDL_54:155:org.jfree.data.time.RegularTimePeriod_next(): if (this.year < 9999) {     result = new org.jfree.data.time.Week( FIRST_WEEK_IN_YEAR, this.year + 1 ); } else {     result = null; }  =>  
SDL_55:156:org.jfree.data.time.RegularTimePeriod_next(): result = new org.jfree.data.time.Week( FIRST_WEEK_IN_YEAR, this.year + 1 );  =>  
SDL_56:160:org.jfree.data.time.RegularTimePeriod_next(): if (this.year < 9999) {     result = new org.jfree.data.time.Week( FIRST_WEEK_IN_YEAR, this.year + 1 ); } else {     result = null; }  =>   if (true) {     result = new org.jfree.data.time.Week( FIRST_WEEK_IN_YEAR, this.year + 1 ); } else {     result = null; }
SDL_57:158:org.jfree.data.time.RegularTimePeriod_next(): result = null;  =>  
SDL_58:168:long_getSerialIndex(): return this.year * 53L + this.week;  =>   return 0;
SDL_59:181:long_getFirstMillisecond(java.util.Calendar): java.util.Calendar c = (java.util.Calendar) calendar.clone(); c.clear(); c.set( Calendar.YEAR, this.year ); c.set( Calendar.WEEK_OF_YEAR, this.week ); c.set( Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek() ); c.set( Calendar.HOUR, 0 ); c.set( Calendar.MINUTE, 0 ); c.set( Calendar.SECOND, 0 ); c.set( Calendar.MILLISECOND, 0 ); return c.getTime().getTime();  =>   java.util.Calendar c = (java.util.Calendar) calendar.clone(); c.set( Calendar.YEAR, this.year ); c.set( Calendar.WEEK_OF_YEAR, this.week ); c.set( Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek() ); c.set( Calendar.HOUR, 0 ); c.set( Calendar.MINUTE, 0 ); c.set( Calendar.SECOND, 0 ); c.set( Calendar.MILLISECOND, 0 ); return c.getTime().getTime();
SDL_60:181:long_getFirstMillisecond(java.util.Calendar): java.util.Calendar c = (java.util.Calendar) calendar.clone(); c.clear(); c.set( Calendar.YEAR, this.year ); c.set( Calendar.WEEK_OF_YEAR, this.week ); c.set( Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek() ); c.set( Calendar.HOUR, 0 ); c.set( Calendar.MINUTE, 0 ); c.set( Calendar.SECOND, 0 ); c.set( Calendar.MILLISECOND, 0 ); return c.getTime().getTime();  =>   java.util.Calendar c = (java.util.Calendar) calendar.clone(); c.clear(); c.set( Calendar.WEEK_OF_YEAR, this.week ); c.set( Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek() ); c.set( Calendar.HOUR, 0 ); c.set( Calendar.MINUTE, 0 ); c.set( Calendar.SECOND, 0 ); c.set( Calendar.MILLISECOND, 0 ); return c.getTime().getTime();
SDL_61:181:long_getFirstMillisecond(java.util.Calendar): java.util.Calendar c = (java.util.Calendar) calendar.clone(); c.clear(); c.set( Calendar.YEAR, this.year ); c.set( Calendar.WEEK_OF_YEAR, this.week ); c.set( Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek() ); c.set( Calendar.HOUR, 0 ); c.set( Calendar.MINUTE, 0 ); c.set( Calendar.SECOND, 0 ); c.set( Calendar.MILLISECOND, 0 ); return c.getTime().getTime();  =>   java.util.Calendar c = (java.util.Calendar) calendar.clone(); c.clear(); c.set( Calendar.YEAR, this.year ); c.set( Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek() ); c.set( Calendar.HOUR, 0 ); c.set( Calendar.MINUTE, 0 ); c.set( Calendar.SECOND, 0 ); c.set( Calendar.MILLISECOND, 0 ); return c.getTime().getTime();
SDL_62:181:long_getFirstMillisecond(java.util.Calendar): java.util.Calendar c = (java.util.Calendar) calendar.clone(); c.clear(); c.set( Calendar.YEAR, this.year ); c.set( Calendar.WEEK_OF_YEAR, this.week ); c.set( Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek() ); c.set( Calendar.HOUR, 0 ); c.set( Calendar.MINUTE, 0 ); c.set( Calendar.SECOND, 0 ); c.set( Calendar.MILLISECOND, 0 ); return c.getTime().getTime();  =>   java.util.Calendar c = (java.util.Calendar) calendar.clone(); c.clear(); c.set( Calendar.YEAR, this.year ); c.set( Calendar.WEEK_OF_YEAR, this.week ); c.set( Calendar.HOUR, 0 ); c.set( Calendar.MINUTE, 0 ); c.set( Calendar.SECOND, 0 ); c.set( Calendar.MILLISECOND, 0 ); return c.getTime().getTime();
SDL_63:181:long_getFirstMillisecond(java.util.Calendar): java.util.Calendar c = (java.util.Calendar) calendar.clone(); c.clear(); c.set( Calendar.YEAR, this.year ); c.set( Calendar.WEEK_OF_YEAR, this.week ); c.set( Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek() ); c.set( Calendar.HOUR, 0 ); c.set( Calendar.MINUTE, 0 ); c.set( Calendar.SECOND, 0 ); c.set( Calendar.MILLISECOND, 0 ); return c.getTime().getTime();  =>   java.util.Calendar c = (java.util.Calendar) calendar.clone(); c.clear(); c.set( Calendar.YEAR, this.year ); c.set( Calendar.WEEK_OF_YEAR, this.week ); c.set( Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek() ); c.set( Calendar.MINUTE, 0 ); c.set( Calendar.SECOND, 0 ); c.set( Calendar.MILLISECOND, 0 ); return c.getTime().getTime();
SDL_64:181:long_getFirstMillisecond(java.util.Calendar): java.util.Calendar c = (java.util.Calendar) calendar.clone(); c.clear(); c.set( Calendar.YEAR, this.year ); c.set( Calendar.WEEK_OF_YEAR, this.week ); c.set( Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek() ); c.set( Calendar.HOUR, 0 ); c.set( Calendar.MINUTE, 0 ); c.set( Calendar.SECOND, 0 ); c.set( Calendar.MILLISECOND, 0 ); return c.getTime().getTime();  =>   java.util.Calendar c = (java.util.Calendar) calendar.clone(); c.clear(); c.set( Calendar.YEAR, this.year ); c.set( Calendar.WEEK_OF_YEAR, this.week ); c.set( Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek() ); c.set( Calendar.HOUR, 0 ); c.set( Calendar.SECOND, 0 ); c.set( Calendar.MILLISECOND, 0 ); return c.getTime().getTime();
SDL_65:181:long_getFirstMillisecond(java.util.Calendar): java.util.Calendar c = (java.util.Calendar) calendar.clone(); c.clear(); c.set( Calendar.YEAR, this.year ); c.set( Calendar.WEEK_OF_YEAR, this.week ); c.set( Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek() ); c.set( Calendar.HOUR, 0 ); c.set( Calendar.MINUTE, 0 ); c.set( Calendar.SECOND, 0 ); c.set( Calendar.MILLISECOND, 0 ); return c.getTime().getTime();  =>   java.util.Calendar c = (java.util.Calendar) calendar.clone(); c.clear(); c.set( Calendar.YEAR, this.year ); c.set( Calendar.WEEK_OF_YEAR, this.week ); c.set( Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek() ); c.set( Calendar.HOUR, 0 ); c.set( Calendar.MINUTE, 0 ); c.set( Calendar.MILLISECOND, 0 ); return c.getTime().getTime();
SDL_66:181:long_getFirstMillisecond(java.util.Calendar): java.util.Calendar c = (java.util.Calendar) calendar.clone(); c.clear(); c.set( Calendar.YEAR, this.year ); c.set( Calendar.WEEK_OF_YEAR, this.week ); c.set( Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek() ); c.set( Calendar.HOUR, 0 ); c.set( Calendar.MINUTE, 0 ); c.set( Calendar.SECOND, 0 ); c.set( Calendar.MILLISECOND, 0 ); return c.getTime().getTime();  =>   java.util.Calendar c = (java.util.Calendar) calendar.clone(); c.clear(); c.set( Calendar.YEAR, this.year ); c.set( Calendar.WEEK_OF_YEAR, this.week ); c.set( Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek() ); c.set( Calendar.HOUR, 0 ); c.set( Calendar.MINUTE, 0 ); c.set( Calendar.SECOND, 0 ); return c.getTime().getTime();
SDL_67:182:long_getFirstMillisecond(java.util.Calendar): return c.getTime().getTime();  =>   return 0;
SDL_68:195:long_getLastMillisecond(java.util.Calendar): java.util.Calendar c = (java.util.Calendar) calendar.clone(); c.clear(); c.set( Calendar.YEAR, this.year ); c.set( Calendar.WEEK_OF_YEAR, this.week + 1 ); c.set( Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek() ); c.set( Calendar.HOUR, 0 ); c.set( Calendar.MINUTE, 0 ); c.set( Calendar.SECOND, 0 ); c.set( Calendar.MILLISECOND, 0 ); return c.getTime().getTime() - 1;  =>   java.util.Calendar c = (java.util.Calendar) calendar.clone(); c.set( Calendar.YEAR, this.year ); c.set( Calendar.WEEK_OF_YEAR, this.week + 1 ); c.set( Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek() ); c.set( Calendar.HOUR, 0 ); c.set( Calendar.MINUTE, 0 ); c.set( Calendar.SECOND, 0 ); c.set( Calendar.MILLISECOND, 0 ); return c.getTime().getTime() - 1;
SDL_69:195:long_getLastMillisecond(java.util.Calendar): java.util.Calendar c = (java.util.Calendar) calendar.clone(); c.clear(); c.set( Calendar.YEAR, this.year ); c.set( Calendar.WEEK_OF_YEAR, this.week + 1 ); c.set( Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek() ); c.set( Calendar.HOUR, 0 ); c.set( Calendar.MINUTE, 0 ); c.set( Calendar.SECOND, 0 ); c.set( Calendar.MILLISECOND, 0 ); return c.getTime().getTime() - 1;  =>   java.util.Calendar c = (java.util.Calendar) calendar.clone(); c.clear(); c.set( Calendar.WEEK_OF_YEAR, this.week + 1 ); c.set( Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek() ); c.set( Calendar.HOUR, 0 ); c.set( Calendar.MINUTE, 0 ); c.set( Calendar.SECOND, 0 ); c.set( Calendar.MILLISECOND, 0 ); return c.getTime().getTime() - 1;
SDL_70:195:long_getLastMillisecond(java.util.Calendar): java.util.Calendar c = (java.util.Calendar) calendar.clone(); c.clear(); c.set( Calendar.YEAR, this.year ); c.set( Calendar.WEEK_OF_YEAR, this.week + 1 ); c.set( Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek() ); c.set( Calendar.HOUR, 0 ); c.set( Calendar.MINUTE, 0 ); c.set( Calendar.SECOND, 0 ); c.set( Calendar.MILLISECOND, 0 ); return c.getTime().getTime() - 1;  =>   java.util.Calendar c = (java.util.Calendar) calendar.clone(); c.clear(); c.set( Calendar.YEAR, this.year ); c.set( Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek() ); c.set( Calendar.HOUR, 0 ); c.set( Calendar.MINUTE, 0 ); c.set( Calendar.SECOND, 0 ); c.set( Calendar.MILLISECOND, 0 ); return c.getTime().getTime() - 1;
SDL_71:195:long_getLastMillisecond(java.util.Calendar): java.util.Calendar c = (java.util.Calendar) calendar.clone(); c.clear(); c.set( Calendar.YEAR, this.year ); c.set( Calendar.WEEK_OF_YEAR, this.week + 1 ); c.set( Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek() ); c.set( Calendar.HOUR, 0 ); c.set( Calendar.MINUTE, 0 ); c.set( Calendar.SECOND, 0 ); c.set( Calendar.MILLISECOND, 0 ); return c.getTime().getTime() - 1;  =>   java.util.Calendar c = (java.util.Calendar) calendar.clone(); c.clear(); c.set( Calendar.YEAR, this.year ); c.set( Calendar.WEEK_OF_YEAR, this.week + 1 ); c.set( Calendar.HOUR, 0 ); c.set( Calendar.MINUTE, 0 ); c.set( Calendar.SECOND, 0 ); c.set( Calendar.MILLISECOND, 0 ); return c.getTime().getTime() - 1;
SDL_72:195:long_getLastMillisecond(java.util.Calendar): java.util.Calendar c = (java.util.Calendar) calendar.clone(); c.clear(); c.set( Calendar.YEAR, this.year ); c.set( Calendar.WEEK_OF_YEAR, this.week + 1 ); c.set( Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek() ); c.set( Calendar.HOUR, 0 ); c.set( Calendar.MINUTE, 0 ); c.set( Calendar.SECOND, 0 ); c.set( Calendar.MILLISECOND, 0 ); return c.getTime().getTime() - 1;  =>   java.util.Calendar c = (java.util.Calendar) calendar.clone(); c.clear(); c.set( Calendar.YEAR, this.year ); c.set( Calendar.WEEK_OF_YEAR, this.week + 1 ); c.set( Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek() ); c.set( Calendar.MINUTE, 0 ); c.set( Calendar.SECOND, 0 ); c.set( Calendar.MILLISECOND, 0 ); return c.getTime().getTime() - 1;
SDL_73:195:long_getLastMillisecond(java.util.Calendar): java.util.Calendar c = (java.util.Calendar) calendar.clone(); c.clear(); c.set( Calendar.YEAR, this.year ); c.set( Calendar.WEEK_OF_YEAR, this.week + 1 ); c.set( Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek() ); c.set( Calendar.HOUR, 0 ); c.set( Calendar.MINUTE, 0 ); c.set( Calendar.SECOND, 0 ); c.set( Calendar.MILLISECOND, 0 ); return c.getTime().getTime() - 1;  =>   java.util.Calendar c = (java.util.Calendar) calendar.clone(); c.clear(); c.set( Calendar.YEAR, this.year ); c.set( Calendar.WEEK_OF_YEAR, this.week + 1 ); c.set( Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek() ); c.set( Calendar.HOUR, 0 ); c.set( Calendar.SECOND, 0 ); c.set( Calendar.MILLISECOND, 0 ); return c.getTime().getTime() - 1;
SDL_74:195:long_getLastMillisecond(java.util.Calendar): java.util.Calendar c = (java.util.Calendar) calendar.clone(); c.clear(); c.set( Calendar.YEAR, this.year ); c.set( Calendar.WEEK_OF_YEAR, this.week + 1 ); c.set( Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek() ); c.set( Calendar.HOUR, 0 ); c.set( Calendar.MINUTE, 0 ); c.set( Calendar.SECOND, 0 ); c.set( Calendar.MILLISECOND, 0 ); return c.getTime().getTime() - 1;  =>   java.util.Calendar c = (java.util.Calendar) calendar.clone(); c.clear(); c.set( Calendar.YEAR, this.year ); c.set( Calendar.WEEK_OF_YEAR, this.week + 1 ); c.set( Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek() ); c.set( Calendar.HOUR, 0 ); c.set( Calendar.MINUTE, 0 ); c.set( Calendar.MILLISECOND, 0 ); return c.getTime().getTime() - 1;
SDL_75:195:long_getLastMillisecond(java.util.Calendar): java.util.Calendar c = (java.util.Calendar) calendar.clone(); c.clear(); c.set( Calendar.YEAR, this.year ); c.set( Calendar.WEEK_OF_YEAR, this.week + 1 ); c.set( Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek() ); c.set( Calendar.HOUR, 0 ); c.set( Calendar.MINUTE, 0 ); c.set( Calendar.SECOND, 0 ); c.set( Calendar.MILLISECOND, 0 ); return c.getTime().getTime() - 1;  =>   java.util.Calendar c = (java.util.Calendar) calendar.clone(); c.clear(); c.set( Calendar.YEAR, this.year ); c.set( Calendar.WEEK_OF_YEAR, this.week + 1 ); c.set( Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek() ); c.set( Calendar.HOUR, 0 ); c.set( Calendar.MINUTE, 0 ); c.set( Calendar.SECOND, 0 ); return c.getTime().getTime() - 1;
SDL_76:196:long_getLastMillisecond(java.util.Calendar): return c.getTime().getTime() - 1;  =>   return 0;
SDL_77:201:java.lang.String_toString(): return \"Week \" + this.week + \", \" + this.year;  =>   return \"\";
SDL_78:216:boolean_equals(java.lang.Object): if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.time.Week)) {     return false; } org.jfree.data.time.Week that = (org.jfree.data.time.Week) obj; if (this.week != that.week) {     return false; } if (this.year != that.year) {     return false; } return true;  =>   if (!(obj instanceof org.jfree.data.time.Week)) {     return false; } org.jfree.data.time.Week that = (org.jfree.data.time.Week) obj; if (this.week != that.week) {     return false; } if (this.year != that.year) {     return false; } return true;
SDL_79:216:boolean_equals(java.lang.Object): if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.time.Week)) {     return false; } org.jfree.data.time.Week that = (org.jfree.data.time.Week) obj; if (this.week != that.week) {     return false; } if (this.year != that.year) {     return false; } return true;  =>   if (obj == this) {     return true; } org.jfree.data.time.Week that = (org.jfree.data.time.Week) obj; if (this.week != that.week) {     return false; } if (this.year != that.year) {     return false; } return true;
SDL_80:216:boolean_equals(java.lang.Object): if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.time.Week)) {     return false; } org.jfree.data.time.Week that = (org.jfree.data.time.Week) obj; if (this.week != that.week) {     return false; } if (this.year != that.year) {     return false; } return true;  =>   if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.time.Week)) {     return false; } org.jfree.data.time.Week that = (org.jfree.data.time.Week) obj; if (this.year != that.year) {     return false; } return true;
SDL_81:216:boolean_equals(java.lang.Object): if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.time.Week)) {     return false; } org.jfree.data.time.Week that = (org.jfree.data.time.Week) obj; if (this.week != that.week) {     return false; } if (this.year != that.year) {     return false; } return true;  =>   if (obj == this) {     return true; } if (!(obj instanceof org.jfree.data.time.Week)) {     return false; } org.jfree.data.time.Week that = (org.jfree.data.time.Week) obj; if (this.week != that.week) {     return false; } return true;
SDL_82:208:boolean_equals(java.lang.Object): if (obj == this) {     return true; }  =>   if (true) {     return true; }
SDL_83:207:boolean_equals(java.lang.Object): return true;  =>   return false;
SDL_84:211:boolean_equals(java.lang.Object): if (!(obj instanceof org.jfree.data.time.Week)) {     return false; }  =>   if (true) {     return false; }
SDL_85:210:boolean_equals(java.lang.Object): return false;  =>   return true;
SDL_86:215:boolean_equals(java.lang.Object): if (this.week != that.week) {     return false; }  =>   if (true) {     return false; }
SDL_87:214:boolean_equals(java.lang.Object): return false;  =>   return true;
SDL_88:218:boolean_equals(java.lang.Object): if (this.year != that.year) {     return false; }  =>   if (true) {     return false; }
SDL_89:217:boolean_equals(java.lang.Object): return false;  =>   return true;
SDL_90:219:boolean_equals(java.lang.Object): return true;  =>   return false;
SDL_91:226:int_hashCode(): int result = 17; result = 37 * result + this.week; result = 37 * result + this.year; return result;  =>   int result = 17; result = 37 * result + this.year; return result;
SDL_92:226:int_hashCode(): int result = 17; result = 37 * result + this.week; result = 37 * result + this.year; return result;  =>   int result = 17; result = 37 * result + this.week; return result;
SDL_93:227:int_hashCode(): return result;  =>   return 0;
SDL_94:233:int_compareTo(java.lang.Object): int result; if (o1 instanceof org.jfree.data.time.Week) {     org.jfree.data.time.Week w = (org.jfree.data.time.Week) o1;     result = this.year - w.getYear().getYear();     if (result == 0) {         result = this.week - w.getWeek();     } } else {     if (o1 instanceof org.jfree.data.time.RegularTimePeriod) {         result = 0;     } else {         result = 1;     } } return result;  =>   int result; return result;
SDL_95:237:int_compareTo(java.lang.Object): org.jfree.data.time.Week w = (org.jfree.data.time.Week) o1; result = this.year - w.getYear().getYear(); if (result == 0) {     result = this.week - w.getWeek(); }  =>   org.jfree.data.time.Week w = (org.jfree.data.time.Week) o1; if (result == 0) {     result = this.week - w.getWeek(); }
SDL_96:235:int_compareTo(java.lang.Object): org.jfree.data.time.Week w = (org.jfree.data.time.Week) o1; result = this.year - w.getYear().getYear(); if (result == 0) {     result = this.week - w.getWeek(); }  =>   org.jfree.data.time.Week w = (org.jfree.data.time.Week) o1; result = this.year - w.getYear().getYear();
SDL_97:245:int_compareTo(java.lang.Object): if (o1 instanceof org.jfree.data.time.Week) {     org.jfree.data.time.Week w = (org.jfree.data.time.Week) o1;     result = this.year - w.getYear().getYear();     if (result == 0) {         result = this.week - w.getWeek();     } } else {     if (o1 instanceof org.jfree.data.time.RegularTimePeriod) {         result = 0;     } else {         result = 1;     } }  =>   if (true) {     org.jfree.data.time.Week w = (org.jfree.data.time.Week) o1;     result = this.year - w.getYear().getYear();     if (result == 0) {         result = this.week - w.getWeek();     } } else {     if (o1 instanceof org.jfree.data.time.RegularTimePeriod) {         result = 0;     } else {         result = 1;     } }
SDL_98:239:int_compareTo(java.lang.Object): if (o1 instanceof org.jfree.data.time.RegularTimePeriod) {     result = 0; } else {     result = 1; }  =>  
SDL_99:236:int_compareTo(java.lang.Object): result = this.week - w.getWeek();  =>  
SDL_100:238:int_compareTo(java.lang.Object): if (result == 0) {     result = this.week - w.getWeek(); }  =>   if (true) {     result = this.week - w.getWeek(); }
SDL_101:240:int_compareTo(java.lang.Object): result = 0;  =>  
SDL_102:244:int_compareTo(java.lang.Object): if (o1 instanceof org.jfree.data.time.RegularTimePeriod) {     result = 0; } else {     result = 1; }  =>   if (true) {     result = 0; } else {     result = 1; }
SDL_103:242:int_compareTo(java.lang.Object): result = 1;  =>  
SDL_104:246:int_compareTo(java.lang.Object): return result;  =>   return 0;
SDL_105:252:org.jfree.data.time.Week_parseWeek(java.lang.String): org.jfree.data.time.Week result = null; if (s != null) {     s = s.trim();     int i = Week.findSeparator( s );     if (i != -1) {         java.lang.String s1 = s.substring( 0, i ).trim();         java.lang.String s2 = s.substring( i + 1, s.length() ).trim();         org.jfree.data.time.Year y = Week.evaluateAsYear( s1 );         int w;         if (y != null) {             w = Week.stringToWeek( s2 );             if (w == -1) {                 throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" );             }             result = new org.jfree.data.time.Week( w, y );         } else {             y = Week.evaluateAsYear( s2 );             if (y != null) {                 w = Week.stringToWeek( s1 );                 if (w == -1) {                     throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" );                 }                 result = new org.jfree.data.time.Week( w, y );             } else {                 throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the year.\" );             }         }     } else {         throw new org.jfree.data.time.TimePeriodFormatException( \"Could not find separator.\" );     } } return result;  =>   org.jfree.data.time.Week result = null; return result;
SDL_106:279:org.jfree.data.time.Week_parseWeek(java.lang.String): s = s.trim(); int i = Week.findSeparator( s ); if (i != -1) {     java.lang.String s1 = s.substring( 0, i ).trim();     java.lang.String s2 = s.substring( i + 1, s.length() ).trim();     org.jfree.data.time.Year y = Week.evaluateAsYear( s1 );     int w;     if (y != null) {         w = Week.stringToWeek( s2 );         if (w == -1) {             throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" );         }         result = new org.jfree.data.time.Week( w, y );     } else {         y = Week.evaluateAsYear( s2 );         if (y != null) {             w = Week.stringToWeek( s1 );             if (w == -1) {                 throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" );             }             result = new org.jfree.data.time.Week( w, y );         } else {             throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the year.\" );         }     } } else {     throw new org.jfree.data.time.TimePeriodFormatException( \"Could not find separator.\" ); }  =>   int i = Week.findSeparator( s ); if (i != -1) {     java.lang.String s1 = s.substring( 0, i ).trim();     java.lang.String s2 = s.substring( i + 1, s.length() ).trim();     org.jfree.data.time.Year y = Week.evaluateAsYear( s1 );     int w;     if (y != null) {         w = Week.stringToWeek( s2 );         if (w == -1) {             throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" );         }         result = new org.jfree.data.time.Week( w, y );     } else {         y = Week.evaluateAsYear( s2 );         if (y != null) {             w = Week.stringToWeek( s1 );             if (w == -1) {                 throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" );             }             result = new org.jfree.data.time.Week( w, y );         } else {             throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the year.\" );         }     } } else {     throw new org.jfree.data.time.TimePeriodFormatException( \"Could not find separator.\" ); }
SDL_107:254:org.jfree.data.time.Week_parseWeek(java.lang.String): s = s.trim(); int i = Week.findSeparator( s ); if (i != -1) {     java.lang.String s1 = s.substring( 0, i ).trim();     java.lang.String s2 = s.substring( i + 1, s.length() ).trim();     org.jfree.data.time.Year y = Week.evaluateAsYear( s1 );     int w;     if (y != null) {         w = Week.stringToWeek( s2 );         if (w == -1) {             throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" );         }         result = new org.jfree.data.time.Week( w, y );     } else {         y = Week.evaluateAsYear( s2 );         if (y != null) {             w = Week.stringToWeek( s1 );             if (w == -1) {                 throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" );             }             result = new org.jfree.data.time.Week( w, y );         } else {             throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the year.\" );         }     } } else {     throw new org.jfree.data.time.TimePeriodFormatException( \"Could not find separator.\" ); }  =>   s = s.trim(); int i = Week.findSeparator( s );
SDL_108:281:org.jfree.data.time.Week_parseWeek(java.lang.String): if (s != null) {     s = s.trim();     int i = Week.findSeparator( s );     if (i != -1) {         java.lang.String s1 = s.substring( 0, i ).trim();         java.lang.String s2 = s.substring( i + 1, s.length() ).trim();         org.jfree.data.time.Year y = Week.evaluateAsYear( s1 );         int w;         if (y != null) {             w = Week.stringToWeek( s2 );             if (w == -1) {                 throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" );             }             result = new org.jfree.data.time.Week( w, y );         } else {             y = Week.evaluateAsYear( s2 );             if (y != null) {                 w = Week.stringToWeek( s1 );                 if (w == -1) {                     throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" );                 }                 result = new org.jfree.data.time.Week( w, y );             } else {                 throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the year.\" );             }         }     } else {         throw new org.jfree.data.time.TimePeriodFormatException( \"Could not find separator.\" );     } }  =>   if (true) {     s = s.trim();     int i = Week.findSeparator( s );     if (i != -1) {         java.lang.String s1 = s.substring( 0, i ).trim();         java.lang.String s2 = s.substring( i + 1, s.length() ).trim();         org.jfree.data.time.Year y = Week.evaluateAsYear( s1 );         int w;         if (y != null) {             w = Week.stringToWeek( s2 );             if (w == -1) {                 throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" );             }             result = new org.jfree.data.time.Week( w, y );         } else {             y = Week.evaluateAsYear( s2 );             if (y != null) {                 w = Week.stringToWeek( s1 );                 if (w == -1) {                     throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" );                 }                 result = new org.jfree.data.time.Week( w, y );             } else {                 throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the year.\" );             }         }     } else {         throw new org.jfree.data.time.TimePeriodFormatException( \"Could not find separator.\" );     } }
SDL_109:259:org.jfree.data.time.Week_parseWeek(java.lang.String): java.lang.String s1 = s.substring( 0, i ).trim(); java.lang.String s2 = s.substring( i + 1, s.length() ).trim(); org.jfree.data.time.Year y = Week.evaluateAsYear( s1 ); int w; if (y != null) {     w = Week.stringToWeek( s2 );     if (w == -1) {         throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" );     }     result = new org.jfree.data.time.Week( w, y ); } else {     y = Week.evaluateAsYear( s2 );     if (y != null) {         w = Week.stringToWeek( s1 );         if (w == -1) {             throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" );         }         result = new org.jfree.data.time.Week( w, y );     } else {         throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the year.\" );     } }  =>   java.lang.String s1 = s.substring( 0, i ).trim(); java.lang.String s2 = s.substring( i + 1, s.length() ).trim(); org.jfree.data.time.Year y = Week.evaluateAsYear( s1 ); int w;
SDL_110:280:org.jfree.data.time.Week_parseWeek(java.lang.String): if (i != -1) {     java.lang.String s1 = s.substring( 0, i ).trim();     java.lang.String s2 = s.substring( i + 1, s.length() ).trim();     org.jfree.data.time.Year y = Week.evaluateAsYear( s1 );     int w;     if (y != null) {         w = Week.stringToWeek( s2 );         if (w == -1) {             throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" );         }         result = new org.jfree.data.time.Week( w, y );     } else {         y = Week.evaluateAsYear( s2 );         if (y != null) {             w = Week.stringToWeek( s1 );             if (w == -1) {                 throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" );             }             result = new org.jfree.data.time.Week( w, y );         } else {             throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the year.\" );         }     } } else {     throw new org.jfree.data.time.TimePeriodFormatException( \"Could not find separator.\" ); }  =>   if (true) {     java.lang.String s1 = s.substring( 0, i ).trim();     java.lang.String s2 = s.substring( i + 1, s.length() ).trim();     org.jfree.data.time.Year y = Week.evaluateAsYear( s1 );     int w;     if (y != null) {         w = Week.stringToWeek( s2 );         if (w == -1) {             throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" );         }         result = new org.jfree.data.time.Week( w, y );     } else {         y = Week.evaluateAsYear( s2 );         if (y != null) {             w = Week.stringToWeek( s1 );             if (w == -1) {                 throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" );             }             result = new org.jfree.data.time.Week( w, y );         } else {             throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the year.\" );         }     } } else {     throw new org.jfree.data.time.TimePeriodFormatException( \"Could not find separator.\" ); }
SDL_111:278:org.jfree.data.time.Week_parseWeek(java.lang.String): throw new org.jfree.data.time.TimePeriodFormatException( \"Could not find separator.\" );  =>  
SDL_112:264:org.jfree.data.time.Week_parseWeek(java.lang.String): w = Week.stringToWeek( s2 ); if (w == -1) {     throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" ); } result = new org.jfree.data.time.Week( w, y );  =>   if (w == -1) {     throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" ); } result = new org.jfree.data.time.Week( w, y );
SDL_113:262:org.jfree.data.time.Week_parseWeek(java.lang.String): w = Week.stringToWeek( s2 ); if (w == -1) {     throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" ); } result = new org.jfree.data.time.Week( w, y );  =>   w = Week.stringToWeek( s2 ); result = new org.jfree.data.time.Week( w, y );
SDL_114:264:org.jfree.data.time.Week_parseWeek(java.lang.String): w = Week.stringToWeek( s2 ); if (w == -1) {     throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" ); } result = new org.jfree.data.time.Week( w, y );  =>   w = Week.stringToWeek( s2 ); if (w == -1) {     throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" ); }
SDL_115:277:org.jfree.data.time.Week_parseWeek(java.lang.String): if (y != null) {     w = Week.stringToWeek( s2 );     if (w == -1) {         throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" );     }     result = new org.jfree.data.time.Week( w, y ); } else {     y = Week.evaluateAsYear( s2 );     if (y != null) {         w = Week.stringToWeek( s1 );         if (w == -1) {             throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" );         }         result = new org.jfree.data.time.Week( w, y );     } else {         throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the year.\" );     } }  =>   if (true) {     w = Week.stringToWeek( s2 );     if (w == -1) {         throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" );     }     result = new org.jfree.data.time.Week( w, y ); } else {     y = Week.evaluateAsYear( s2 );     if (y != null) {         w = Week.stringToWeek( s1 );         if (w == -1) {             throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" );         }         result = new org.jfree.data.time.Week( w, y );     } else {         throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the year.\" );     } }
SDL_116:275:org.jfree.data.time.Week_parseWeek(java.lang.String): y = Week.evaluateAsYear( s2 ); if (y != null) {     w = Week.stringToWeek( s1 );     if (w == -1) {         throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" );     }     result = new org.jfree.data.time.Week( w, y ); } else {     throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the year.\" ); }  =>   if (y != null) {     w = Week.stringToWeek( s1 );     if (w == -1) {         throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" );     }     result = new org.jfree.data.time.Week( w, y ); } else {     throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the year.\" ); }
SDL_117:267:org.jfree.data.time.Week_parseWeek(java.lang.String): y = Week.evaluateAsYear( s2 ); if (y != null) {     w = Week.stringToWeek( s1 );     if (w == -1) {         throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" );     }     result = new org.jfree.data.time.Week( w, y ); } else {     throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the year.\" ); }  =>   y = Week.evaluateAsYear( s2 );
SDL_118:262:org.jfree.data.time.Week_parseWeek(java.lang.String): throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" );  =>  
SDL_119:264:org.jfree.data.time.Week_parseWeek(java.lang.String): if (w == -1) {     throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" ); }  =>   if (true) {     throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" ); }
SDL_120:272:org.jfree.data.time.Week_parseWeek(java.lang.String): w = Week.stringToWeek( s1 ); if (w == -1) {     throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" ); } result = new org.jfree.data.time.Week( w, y );  =>   if (w == -1) {     throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" ); } result = new org.jfree.data.time.Week( w, y );
SDL_121:270:org.jfree.data.time.Week_parseWeek(java.lang.String): w = Week.stringToWeek( s1 ); if (w == -1) {     throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" ); } result = new org.jfree.data.time.Week( w, y );  =>   w = Week.stringToWeek( s1 ); result = new org.jfree.data.time.Week( w, y );
SDL_122:272:org.jfree.data.time.Week_parseWeek(java.lang.String): w = Week.stringToWeek( s1 ); if (w == -1) {     throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" ); } result = new org.jfree.data.time.Week( w, y );  =>   w = Week.stringToWeek( s1 ); if (w == -1) {     throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" ); }
SDL_123:276:org.jfree.data.time.Week_parseWeek(java.lang.String): if (y != null) {     w = Week.stringToWeek( s1 );     if (w == -1) {         throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" );     }     result = new org.jfree.data.time.Week( w, y ); } else {     throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the year.\" ); }  =>   if (true) {     w = Week.stringToWeek( s1 );     if (w == -1) {         throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" );     }     result = new org.jfree.data.time.Week( w, y ); } else {     throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the year.\" ); }
SDL_124:274:org.jfree.data.time.Week_parseWeek(java.lang.String): throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the year.\" );  =>  
SDL_125:270:org.jfree.data.time.Week_parseWeek(java.lang.String): throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" );  =>  
SDL_126:272:org.jfree.data.time.Week_parseWeek(java.lang.String): if (w == -1) {     throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" ); }  =>   if (true) {     throw new org.jfree.data.time.TimePeriodFormatException( \"Can't evaluate the week.\" ); }
SDL_127:294:int_findSeparator(java.lang.String): int result = s.indexOf( '-' ); if (result == -1) {     result = s.indexOf( ',' ); } if (result == -1) {     result = s.indexOf( ' ' ); } if (result == -1) {     result = s.indexOf( '.' ); } return result;  =>   int result = s.indexOf( '-' ); if (result == -1) {     result = s.indexOf( ' ' ); } if (result == -1) {     result = s.indexOf( '.' ); } return result;
SDL_128:294:int_findSeparator(java.lang.String): int result = s.indexOf( '-' ); if (result == -1) {     result = s.indexOf( ',' ); } if (result == -1) {     result = s.indexOf( ' ' ); } if (result == -1) {     result = s.indexOf( '.' ); } return result;  =>   int result = s.indexOf( '-' ); if (result == -1) {     result = s.indexOf( ',' ); } if (result == -1) {     result = s.indexOf( '.' ); } return result;
SDL_129:294:int_findSeparator(java.lang.String): int result = s.indexOf( '-' ); if (result == -1) {     result = s.indexOf( ',' ); } if (result == -1) {     result = s.indexOf( ' ' ); } if (result == -1) {     result = s.indexOf( '.' ); } return result;  =>   int result = s.indexOf( '-' ); if (result == -1) {     result = s.indexOf( ',' ); } if (result == -1) {     result = s.indexOf( ' ' ); } return result;
SDL_130:288:int_findSeparator(java.lang.String): result = s.indexOf( ',' );  =>  
SDL_131:290:int_findSeparator(java.lang.String): if (result == -1) {     result = s.indexOf( ',' ); }  =>   if (true) {     result = s.indexOf( ',' ); }
SDL_132:291:int_findSeparator(java.lang.String): result = s.indexOf( ' ' );  =>  
SDL_133:293:int_findSeparator(java.lang.String): if (result == -1) {     result = s.indexOf( ' ' ); }  =>   if (true) {     result = s.indexOf( ' ' ); }
SDL_134:294:int_findSeparator(java.lang.String): result = s.indexOf( '.' );  =>  
SDL_135:296:int_findSeparator(java.lang.String): if (result == -1) {     result = s.indexOf( '.' ); }  =>   if (true) {     result = s.indexOf( '.' ); }
SDL_136:297:int_findSeparator(java.lang.String): return result;  =>   return 0;
SDL_137:304:org.jfree.data.time.Year_evaluateAsYear(java.lang.String): try {     result = Year.parseYear( s ); } catch ( org.jfree.data.time.TimePeriodFormatException e ) { }  =>   try { }
SDL_138:321:int_stringToWeek(java.lang.String): int result = -1; s = s.replace( 'W', ' ' ); s = s.trim(); try {     result = Integer.parseInt( s );     if (result < 1 || result > LAST_WEEK_IN_YEAR) {         result = -1;     } } catch ( java.lang.NumberFormatException e ) { } return result;  =>   int result = -1; s = s.trim(); try {     result = Integer.parseInt( s );     if (result < 1 || result > LAST_WEEK_IN_YEAR) {         result = -1;     } } catch ( java.lang.NumberFormatException e ) { } return result;
SDL_139:321:int_stringToWeek(java.lang.String): int result = -1; s = s.replace( 'W', ' ' ); s = s.trim(); try {     result = Integer.parseInt( s );     if (result < 1 || result > LAST_WEEK_IN_YEAR) {         result = -1;     } } catch ( java.lang.NumberFormatException e ) { } return result;  =>   int result = -1; s = s.replace( 'W', ' ' ); try {     result = Integer.parseInt( s );     if (result < 1 || result > LAST_WEEK_IN_YEAR) {         result = -1;     } } catch ( java.lang.NumberFormatException e ) { } return result;
SDL_140:319:int_stringToWeek(java.lang.String): try {     result = Integer.parseInt( s );     if (result < 1 || result > LAST_WEEK_IN_YEAR) {         result = -1;     } } catch ( java.lang.NumberFormatException e ) { }  =>   try {     if (result < 1 || result > LAST_WEEK_IN_YEAR) {         result = -1;     } }
SDL_141:317:int_stringToWeek(java.lang.String): try {     result = Integer.parseInt( s );     if (result < 1 || result > LAST_WEEK_IN_YEAR) {         result = -1;     } } catch ( java.lang.NumberFormatException e ) { }  =>   try {     result = Integer.parseInt( s ); }
SDL_142:317:int_stringToWeek(java.lang.String): result = -1;  =>  
SDL_143:319:int_stringToWeek(java.lang.String): if (result < 1 || result > LAST_WEEK_IN_YEAR) {     result = -1; }  =>   if (true) {     result = -1; }
SDL_144:322:int_stringToWeek(java.lang.String): return result;  =>   return 0;
