AORB_1:73:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random):'z' + 1 => 'z' * 1
AORB_2:73:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random):'z' + 1 => 'z' / 1
AORB_3:73:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random):'z' + 1 => 'z' % 1
AORB_4:73:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random):'z' + 1 => 'z' - 1
AORB_5:78:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random):end - start => end * start
AORB_6:78:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random):end - start => end / start
AORB_7:78:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random):end - start => end % start
AORB_8:78:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random):end - start => end + start
AORB_9:82:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random):random.nextInt( gap ) + start => random.nextInt( gap ) * start
AORB_10:82:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random):random.nextInt( gap ) + start => random.nextInt( gap ) / start
AORB_11:82:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random):random.nextInt( gap ) + start => random.nextInt( gap ) % start
AORB_12:82:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random):random.nextInt( gap ) + start => random.nextInt( gap ) - start
AORB_13:84:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random):random.nextInt( gap ) + start => random.nextInt( gap ) * start
AORB_14:84:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random):random.nextInt( gap ) + start => random.nextInt( gap ) / start
AORB_15:84:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random):random.nextInt( gap ) + start => random.nextInt( gap ) % start
AORB_16:84:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random):random.nextInt( gap ) + start => random.nextInt( gap ) - start
AORB_17:93:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random):55296 + random.nextInt( 128 ) => 55296 * random.nextInt( 128 )
AORB_18:93:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random):55296 + random.nextInt( 128 ) => 55296 / random.nextInt( 128 )
AORB_19:93:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random):55296 + random.nextInt( 128 ) => 55296 % random.nextInt( 128 )
AORB_20:93:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random):55296 + random.nextInt( 128 ) => 55296 - random.nextInt( 128 )
AORB_21:100:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random):56320 + random.nextInt( 128 ) => 56320 * random.nextInt( 128 )
AORB_22:100:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random):56320 + random.nextInt( 128 ) => 56320 / random.nextInt( 128 )
AORB_23:100:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random):56320 + random.nextInt( 128 ) => 56320 % random.nextInt( 128 )
AORB_24:100:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random):56320 + random.nextInt( 128 ) => 56320 - random.nextInt( 128 )
ROR_1:62:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count == 0  =>   count > 0
ROR_2:62:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count == 0  =>   count >= 0
ROR_3:62:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count == 0  =>   count < 0
ROR_4:62:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count == 0  =>   count <= 0
ROR_5:62:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count == 0  =>   count != 0
ROR_6:62:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count == 0  =>   true
ROR_7:62:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count == 0  =>   false
ROR_8:65:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count < 0  =>   count > 0
ROR_9:65:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count < 0  =>   count >= 0
ROR_10:65:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count < 0  =>   count <= 0
ROR_11:65:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count < 0  =>   count == 0
ROR_12:65:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count < 0  =>   count != 0
ROR_13:65:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count < 0  =>   true
ROR_14:65:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count < 0  =>   false
ROR_15:69:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): start == 0  =>   start > 0
ROR_16:69:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): start == 0  =>   start >= 0
ROR_17:69:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): start == 0  =>   start < 0
ROR_18:69:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): start == 0  =>   start <= 0
ROR_19:69:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): start == 0  =>   start != 0
ROR_20:69:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): start == 0  =>   true
ROR_21:69:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): start == 0  =>   false
ROR_22:69:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): end == 0  =>   end > 0
ROR_23:69:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): end == 0  =>   end >= 0
ROR_24:69:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): end == 0  =>   end < 0
ROR_25:69:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): end == 0  =>   end <= 0
ROR_26:69:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): end == 0  =>   end != 0
ROR_27:69:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): end == 0  =>   true
ROR_28:69:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): end == 0  =>   false
ROR_29:79:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count-- != 0  =>   count-- > 0
ROR_30:79:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count-- != 0  =>   count-- >= 0
ROR_31:79:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count-- != 0  =>   count-- < 0
ROR_32:79:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count-- != 0  =>   count-- <= 0
ROR_33:79:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count-- != 0  =>   count-- == 0
ROR_34:79:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count-- != 0  =>   true
ROR_35:79:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count-- != 0  =>   false
ROR_36:81:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): chars == null  =>   chars != null
ROR_37:87:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch >= 56320  =>   ch > 56320
ROR_38:87:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch >= 56320  =>   ch < 56320
ROR_39:87:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch >= 56320  =>   ch <= 56320
ROR_40:87:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch >= 56320  =>   ch == 56320
ROR_41:87:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch >= 56320  =>   ch != 56320
ROR_42:87:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch >= 56320  =>   true
ROR_43:87:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch >= 56320  =>   false
ROR_44:87:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch <= 57343  =>   ch > 57343
ROR_45:87:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch <= 57343  =>   ch >= 57343
ROR_46:87:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch <= 57343  =>   ch < 57343
ROR_47:87:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch <= 57343  =>   ch == 57343
ROR_48:87:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch <= 57343  =>   ch != 57343
ROR_49:87:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch <= 57343  =>   true
ROR_50:87:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch <= 57343  =>   false
ROR_51:88:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count == 0  =>   count > 0
ROR_52:88:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count == 0  =>   count >= 0
ROR_53:88:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count == 0  =>   count < 0
ROR_54:88:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count == 0  =>   count <= 0
ROR_55:88:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count == 0  =>   count != 0
ROR_56:88:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count == 0  =>   true
ROR_57:88:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count == 0  =>   false
ROR_58:96:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch >= 55296  =>   ch > 55296
ROR_59:96:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch >= 55296  =>   ch < 55296
ROR_60:96:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch >= 55296  =>   ch <= 55296
ROR_61:96:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch >= 55296  =>   ch == 55296
ROR_62:96:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch >= 55296  =>   ch != 55296
ROR_63:96:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch >= 55296  =>   true
ROR_64:96:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch >= 55296  =>   false
ROR_65:96:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch <= 56191  =>   ch > 56191
ROR_66:96:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch <= 56191  =>   ch >= 56191
ROR_67:96:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch <= 56191  =>   ch < 56191
ROR_68:96:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch <= 56191  =>   ch == 56191
ROR_69:96:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch <= 56191  =>   ch != 56191
ROR_70:96:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch <= 56191  =>   true
ROR_71:96:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch <= 56191  =>   false
ROR_72:97:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count == 0  =>   count > 0
ROR_73:97:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count == 0  =>   count >= 0
ROR_74:97:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count == 0  =>   count < 0
ROR_75:97:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count == 0  =>   count <= 0
ROR_76:97:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count == 0  =>   count != 0
ROR_77:97:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count == 0  =>   true
ROR_78:97:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count == 0  =>   false
ROR_79:105:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch >= 56192  =>   ch > 56192
ROR_80:105:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch >= 56192  =>   ch < 56192
ROR_81:105:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch >= 56192  =>   ch <= 56192
ROR_82:105:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch >= 56192  =>   ch == 56192
ROR_83:105:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch >= 56192  =>   ch != 56192
ROR_84:105:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch >= 56192  =>   true
ROR_85:105:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch >= 56192  =>   false
ROR_86:105:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch <= 56319  =>   ch > 56319
ROR_87:105:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch <= 56319  =>   ch >= 56319
ROR_88:105:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch <= 56319  =>   ch < 56319
ROR_89:105:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch <= 56319  =>   ch == 56319
ROR_90:105:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch <= 56319  =>   ch != 56319
ROR_91:105:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch <= 56319  =>   true
ROR_92:105:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch <= 56319  =>   false
ROR_93:121:java.lang.String_random(int,java.lang.String): chars == null  =>   chars != null
ROR_94:129:java.lang.String_random(int,char): chars == null  =>   chars != null
COR_1:69:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): start == 0 && end == 0  =>   start == 0 || end == 0
COR_2:69:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): start == 0 && end == 0  =>   start == 0 ^ end == 0
COR_3:70:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): !letters && !numbers  =>   !letters || !numbers
COR_4:70:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): !letters && !numbers  =>   !letters ^ !numbers
COR_5:86:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): letters && Character.isLetter( ch )  =>   letters || Character.isLetter( ch )
COR_6:86:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): letters && Character.isLetter( ch )  =>   letters ^ Character.isLetter( ch )
COR_7:86:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): numbers && Character.isDigit( ch )  =>   numbers || Character.isDigit( ch )
COR_8:86:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): numbers && Character.isDigit( ch )  =>   numbers ^ Character.isDigit( ch )
COR_9:86:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): letters && Character.isLetter( ch ) || numbers && Character.isDigit( ch )  =>   letters && Character.isLetter( ch ) && (numbers && Character.isDigit( ch ))
COR_10:86:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): letters && Character.isLetter( ch ) || numbers && Character.isDigit( ch )  =>   (letters && Character.isLetter( ch )) ^ (numbers && Character.isDigit( ch ))
COR_11:86:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): !letters && !numbers  =>   !letters || !numbers
COR_12:86:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): !letters && !numbers  =>   !letters ^ !numbers
COR_13:86:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): letters && Character.isLetter( ch ) || numbers && Character.isDigit( ch ) || !letters && !numbers  =>   (letters && Character.isLetter( ch ) || numbers && Character.isDigit( ch )) && (!letters && !numbers)
COR_14:86:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): letters && Character.isLetter( ch ) || numbers && Character.isDigit( ch ) || !letters && !numbers  =>   (letters && Character.isLetter( ch ) || numbers && Character.isDigit( ch )) ^ (!letters && !numbers)
COR_15:87:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch >= 56320 && ch <= 57343  =>   ch >= 56320 || ch <= 57343
COR_16:87:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch >= 56320 && ch <= 57343  =>   ch >= 56320 ^ ch <= 57343
COR_17:96:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch >= 55296 && ch <= 56191  =>   ch >= 55296 || ch <= 56191
COR_18:96:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch >= 55296 && ch <= 56191  =>   ch >= 55296 ^ ch <= 56191
COR_19:105:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch >= 56192 && ch <= 56319  =>   ch >= 56192 || ch <= 56319
COR_20:105:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch >= 56192 && ch <= 56319  =>   ch >= 56192 ^ ch <= 56319
SDL_1:23:java.lang.String_random(int): return random( count, false, false );  =>   return \"\";
SDL_2:28:java.lang.String_randomAscii(int): return random( count, 32, 127, false, false );  =>   return \"\";
SDL_3:33:java.lang.String_randomAlphabetic(int): return random( count, true, false );  =>   return \"\";
SDL_4:38:java.lang.String_randomAlphanumeric(int): return random( count, true, true );  =>   return \"\";
SDL_5:43:java.lang.String_randomNumeric(int): return random( count, false, true );  =>   return \"\";
SDL_6:48:java.lang.String_random(int,boolean,boolean): return random( count, 0, 0, letters, numbers );  =>   return \"\";
SDL_7:53:java.lang.String_random(int,int,int,boolean,boolean): return random( count, start, end, letters, numbers, null, RANDOM );  =>   return \"\";
SDL_8:58:java.lang.String_random(int,int,int,boolean,boolean,char): return random( count, start, end, letters, numbers, chars, RANDOM );  =>   return \"\";
SDL_9:110:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): if (count == 0) {     return \"\"; } else {     if (count < 0) {         throw new java.lang.IllegalArgumentException( \"Requested random string length \" + count + \" is less than 0.\" );     } } if (start == 0 && end == 0) {     if (!letters && !numbers) {         end = Integer.MAX_VALUE;     } else {         end = 'z' + 1;         start = ' ';     } } char[] buffer = new char[count]; int gap = end - start; while (count-- != 0) {     char ch;     if (chars == null) {         ch = (char) (random.nextInt( gap ) + start);     } else {         ch = chars[random.nextInt( gap ) + start];     }     if (letters && Character.isLetter( ch ) || numbers && Character.isDigit( ch ) || !letters && !numbers) {         if (ch >= 56320 && ch <= 57343) {             if (count == 0) {                 count++;             } else {                 buffer[count] = ch;                 count--;                 buffer[count] = (char) (55296 + random.nextInt( 128 ));             }         } else {             if (ch >= 55296 && ch <= 56191) {                 if (count == 0) {                     count++;                 } else {                     buffer[count] = (char) (56320 + random.nextInt( 128 ));                     count--;                     buffer[count] = ch;                 }             } else {                 if (ch >= 56192 && ch <= 56319) {                     count++;                 } else {                     buffer[count] = ch;                 }             }         }     } else {         count++;     } } return new java.lang.String( buffer );  =>   if (start == 0 && end == 0) {     if (!letters && !numbers) {         end = Integer.MAX_VALUE;     } else {         end = 'z' + 1;         start = ' ';     } } char[] buffer = new char[count]; int gap = end - start; while (count-- != 0) {     char ch;     if (chars == null) {         ch = (char) (random.nextInt( gap ) + start);     } else {         ch = chars[random.nextInt( gap ) + start];     }     if (letters && Character.isLetter( ch ) || numbers && Character.isDigit( ch ) || !letters && !numbers) {         if (ch >= 56320 && ch <= 57343) {             if (count == 0) {                 count++;             } else {                 buffer[count] = ch;                 count--;                 buffer[count] = (char) (55296 + random.nextInt( 128 ));             }         } else {             if (ch >= 55296 && ch <= 56191) {                 if (count == 0) {                     count++;                 } else {                     buffer[count] = (char) (56320 + random.nextInt( 128 ));                     count--;                     buffer[count] = ch;                 }             } else {                 if (ch >= 56192 && ch <= 56319) {                     count++;                 } else {                     buffer[count] = ch;                 }             }         }     } else {         count++;     } } return new java.lang.String( buffer );
SDL_10:109:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): if (count == 0) {     return \"\"; } else {     if (count < 0) {         throw new java.lang.IllegalArgumentException( \"Requested random string length \" + count + \" is less than 0.\" );     } } if (start == 0 && end == 0) {     if (!letters && !numbers) {         end = Integer.MAX_VALUE;     } else {         end = 'z' + 1;         start = ' ';     } } char[] buffer = new char[count]; int gap = end - start; while (count-- != 0) {     char ch;     if (chars == null) {         ch = (char) (random.nextInt( gap ) + start);     } else {         ch = chars[random.nextInt( gap ) + start];     }     if (letters && Character.isLetter( ch ) || numbers && Character.isDigit( ch ) || !letters && !numbers) {         if (ch >= 56320 && ch <= 57343) {             if (count == 0) {                 count++;             } else {                 buffer[count] = ch;                 count--;                 buffer[count] = (char) (55296 + random.nextInt( 128 ));             }         } else {             if (ch >= 55296 && ch <= 56191) {                 if (count == 0) {                     count++;                 } else {                     buffer[count] = (char) (56320 + random.nextInt( 128 ));                     count--;                     buffer[count] = ch;                 }             } else {                 if (ch >= 56192 && ch <= 56319) {                     count++;                 } else {                     buffer[count] = ch;                 }             }         }     } else {         count++;     } } return new java.lang.String( buffer );  =>   if (count == 0) {     return \"\"; } else {     if (count < 0) {         throw new java.lang.IllegalArgumentException( \"Requested random string length \" + count + \" is less than 0.\" );     } } char[] buffer = new char[count]; int gap = end - start; while (count-- != 0) {     char ch;     if (chars == null) {         ch = (char) (random.nextInt( gap ) + start);     } else {         ch = chars[random.nextInt( gap ) + start];     }     if (letters && Character.isLetter( ch ) || numbers && Character.isDigit( ch ) || !letters && !numbers) {         if (ch >= 56320 && ch <= 57343) {             if (count == 0) {                 count++;             } else {                 buffer[count] = ch;                 count--;                 buffer[count] = (char) (55296 + random.nextInt( 128 ));             }         } else {             if (ch >= 55296 && ch <= 56191) {                 if (count == 0) {                     count++;                 } else {                     buffer[count] = (char) (56320 + random.nextInt( 128 ));                     count--;                     buffer[count] = ch;                 }             } else {                 if (ch >= 56192 && ch <= 56319) {                     count++;                 } else {                     buffer[count] = ch;                 }             }         }     } else {         count++;     } } return new java.lang.String( buffer );
SDL_11:80:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): if (count == 0) {     return \"\"; } else {     if (count < 0) {         throw new java.lang.IllegalArgumentException( \"Requested random string length \" + count + \" is less than 0.\" );     } } if (start == 0 && end == 0) {     if (!letters && !numbers) {         end = Integer.MAX_VALUE;     } else {         end = 'z' + 1;         start = ' ';     } } char[] buffer = new char[count]; int gap = end - start; while (count-- != 0) {     char ch;     if (chars == null) {         ch = (char) (random.nextInt( gap ) + start);     } else {         ch = chars[random.nextInt( gap ) + start];     }     if (letters && Character.isLetter( ch ) || numbers && Character.isDigit( ch ) || !letters && !numbers) {         if (ch >= 56320 && ch <= 57343) {             if (count == 0) {                 count++;             } else {                 buffer[count] = ch;                 count--;                 buffer[count] = (char) (55296 + random.nextInt( 128 ));             }         } else {             if (ch >= 55296 && ch <= 56191) {                 if (count == 0) {                     count++;                 } else {                     buffer[count] = (char) (56320 + random.nextInt( 128 ));                     count--;                     buffer[count] = ch;                 }             } else {                 if (ch >= 56192 && ch <= 56319) {                     count++;                 } else {                     buffer[count] = ch;                 }             }         }     } else {         count++;     } } return new java.lang.String( buffer );  =>   if (count == 0) {     return \"\"; } else {     if (count < 0) {         throw new java.lang.IllegalArgumentException( \"Requested random string length \" + count + \" is less than 0.\" );     } } if (start == 0 && end == 0) {     if (!letters && !numbers) {         end = Integer.MAX_VALUE;     } else {         end = 'z' + 1;         start = ' ';     } } char[] buffer = new char[count]; int gap = end - start; return new java.lang.String( buffer );
SDL_12:69:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): if (count == 0) {     return \"\"; } else {     if (count < 0) {         throw new java.lang.IllegalArgumentException( \"Requested random string length \" + count + \" is less than 0.\" );     } }  =>   if (true) {     return \"\"; } else {     if (count < 0) {         throw new java.lang.IllegalArgumentException( \"Requested random string length \" + count + \" is less than 0.\" );     } }
SDL_13:65:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): if (count < 0) {     throw new java.lang.IllegalArgumentException( \"Requested random string length \" + count + \" is less than 0.\" ); }  =>  
SDL_14:66:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): throw new java.lang.IllegalArgumentException( \"Requested random string length \" + count + \" is less than 0.\" );  =>  
SDL_15:68:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): if (count < 0) {     throw new java.lang.IllegalArgumentException( \"Requested random string length \" + count + \" is less than 0.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Requested random string length \" + count + \" is less than 0.\" ); }
SDL_16:70:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): if (!letters && !numbers) {     end = Integer.MAX_VALUE; } else {     end = 'z' + 1;     start = ' '; }  =>  
SDL_17:77:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): if (start == 0 && end == 0) {     if (!letters && !numbers) {         end = Integer.MAX_VALUE;     } else {         end = 'z' + 1;         start = ' ';     } }  =>   if (true) {     if (!letters && !numbers) {         end = Integer.MAX_VALUE;     } else {         end = 'z' + 1;         start = ' ';     } }
SDL_18:71:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): end = Integer.MAX_VALUE;  =>  
SDL_19:76:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): if (!letters && !numbers) {     end = Integer.MAX_VALUE; } else {     end = 'z' + 1;     start = ' '; }  =>   if (true) {     end = Integer.MAX_VALUE; } else {     end = 'z' + 1;     start = ' '; }
SDL_20:74:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): end = 'z' + 1; start = ' ';  =>   start = ' ';
SDL_21:74:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): end = 'z' + 1; start = ' ';  =>   end = 'z' + 1;
SDL_22:110:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): char ch; if (chars == null) {     ch = (char) (random.nextInt( gap ) + start); } else {     ch = chars[random.nextInt( gap ) + start]; } if (letters && Character.isLetter( ch ) || numbers && Character.isDigit( ch ) || !letters && !numbers) {     if (ch >= 56320 && ch <= 57343) {         if (count == 0) {             count++;         } else {             buffer[count] = ch;             count--;             buffer[count] = (char) (55296 + random.nextInt( 128 ));         }     } else {         if (ch >= 55296 && ch <= 56191) {             if (count == 0) {                 count++;             } else {                 buffer[count] = (char) (56320 + random.nextInt( 128 ));                 count--;                 buffer[count] = ch;             }         } else {             if (ch >= 56192 && ch <= 56319) {                 count++;             } else {                 buffer[count] = ch;             }         }     } } else {     count++; }  =>   char ch; if (letters && Character.isLetter( ch ) || numbers && Character.isDigit( ch ) || !letters && !numbers) {     if (ch >= 56320 && ch <= 57343) {         if (count == 0) {             count++;         } else {             buffer[count] = ch;             count--;             buffer[count] = (char) (55296 + random.nextInt( 128 ));         }     } else {         if (ch >= 55296 && ch <= 56191) {             if (count == 0) {                 count++;             } else {                 buffer[count] = (char) (56320 + random.nextInt( 128 ));                 count--;                 buffer[count] = ch;             }         } else {             if (ch >= 56192 && ch <= 56319) {                 count++;             } else {                 buffer[count] = ch;             }         }     } } else {     count++; }
SDL_23:86:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): char ch; if (chars == null) {     ch = (char) (random.nextInt( gap ) + start); } else {     ch = chars[random.nextInt( gap ) + start]; } if (letters && Character.isLetter( ch ) || numbers && Character.isDigit( ch ) || !letters && !numbers) {     if (ch >= 56320 && ch <= 57343) {         if (count == 0) {             count++;         } else {             buffer[count] = ch;             count--;             buffer[count] = (char) (55296 + random.nextInt( 128 ));         }     } else {         if (ch >= 55296 && ch <= 56191) {             if (count == 0) {                 count++;             } else {                 buffer[count] = (char) (56320 + random.nextInt( 128 ));                 count--;                 buffer[count] = ch;             }         } else {             if (ch >= 56192 && ch <= 56319) {                 count++;             } else {                 buffer[count] = ch;             }         }     } } else {     count++; }  =>   char ch; if (chars == null) {     ch = (char) (random.nextInt( gap ) + start); } else {     ch = chars[random.nextInt( gap ) + start]; }
SDL_24:116:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): while (count-- != 0) {     char ch;     if (chars == null) {         ch = (char) (random.nextInt( gap ) + start);     } else {         ch = chars[random.nextInt( gap ) + start];     }     if (letters && Character.isLetter( ch ) || numbers && Character.isDigit( ch ) || !letters && !numbers) {         if (ch >= 56320 && ch <= 57343) {             if (count == 0) {                 count++;             } else {                 buffer[count] = ch;                 count--;                 buffer[count] = (char) (55296 + random.nextInt( 128 ));             }         } else {             if (ch >= 55296 && ch <= 56191) {                 if (count == 0) {                     count++;                 } else {                     buffer[count] = (char) (56320 + random.nextInt( 128 ));                     count--;                     buffer[count] = ch;                 }             } else {                 if (ch >= 56192 && ch <= 56319) {                     count++;                 } else {                     buffer[count] = ch;                 }             }         }     } else {         count++;     } }  =>   while (true) {     char ch;     if (chars == null) {         ch = (char) (random.nextInt( gap ) + start);     } else {         ch = chars[random.nextInt( gap ) + start];     }     if (letters && Character.isLetter( ch ) || numbers && Character.isDigit( ch ) || !letters && !numbers) {         if (ch >= 56320 && ch <= 57343) {             if (count == 0) {                 count++;             } else {                 buffer[count] = ch;                 count--;                 buffer[count] = (char) (55296 + random.nextInt( 128 ));             }         } else {             if (ch >= 55296 && ch <= 56191) {                 if (count == 0) {                     count++;                 } else {                     buffer[count] = (char) (56320 + random.nextInt( 128 ));                     count--;                     buffer[count] = ch;                 }             } else {                 if (ch >= 56192 && ch <= 56319) {                     count++;                 } else {                     buffer[count] = ch;                 }             }         }     } else {         count++;     } }
SDL_25:82:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch = (char) (random.nextInt( gap ) + start);  =>  
SDL_26:86:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): if (chars == null) {     ch = (char) (random.nextInt( gap ) + start); } else {     ch = chars[random.nextInt( gap ) + start]; }  =>   if (true) {     ch = (char) (random.nextInt( gap ) + start); } else {     ch = chars[random.nextInt( gap ) + start]; }
SDL_27:84:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): ch = chars[random.nextInt( gap ) + start];  =>  
SDL_28:87:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): if (ch >= 56320 && ch <= 57343) {     if (count == 0) {         count++;     } else {         buffer[count] = ch;         count--;         buffer[count] = (char) (55296 + random.nextInt( 128 ));     } } else {     if (ch >= 55296 && ch <= 56191) {         if (count == 0) {             count++;         } else {             buffer[count] = (char) (56320 + random.nextInt( 128 ));             count--;             buffer[count] = ch;         }     } else {         if (ch >= 56192 && ch <= 56319) {             count++;         } else {             buffer[count] = ch;         }     } }  =>  
SDL_29:115:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): if (letters && Character.isLetter( ch ) || numbers && Character.isDigit( ch ) || !letters && !numbers) {     if (ch >= 56320 && ch <= 57343) {         if (count == 0) {             count++;         } else {             buffer[count] = ch;             count--;             buffer[count] = (char) (55296 + random.nextInt( 128 ));         }     } else {         if (ch >= 55296 && ch <= 56191) {             if (count == 0) {                 count++;             } else {                 buffer[count] = (char) (56320 + random.nextInt( 128 ));                 count--;                 buffer[count] = ch;             }         } else {             if (ch >= 56192 && ch <= 56319) {                 count++;             } else {                 buffer[count] = ch;             }         }     } } else {     count++; }  =>   if (true) {     if (ch >= 56320 && ch <= 57343) {         if (count == 0) {             count++;         } else {             buffer[count] = ch;             count--;             buffer[count] = (char) (55296 + random.nextInt( 128 ));         }     } else {         if (ch >= 55296 && ch <= 56191) {             if (count == 0) {                 count++;             } else {                 buffer[count] = (char) (56320 + random.nextInt( 128 ));                 count--;                 buffer[count] = ch;             }         } else {             if (ch >= 56192 && ch <= 56319) {                 count++;             } else {                 buffer[count] = ch;             }         }     } } else {     count++; }
SDL_30:113:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count++;  =>  
SDL_31:88:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): if (count == 0) {     count++; } else {     buffer[count] = ch;     count--;     buffer[count] = (char) (55296 + random.nextInt( 128 )); }  =>  
SDL_32:112:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): if (ch >= 56320 && ch <= 57343) {     if (count == 0) {         count++;     } else {         buffer[count] = ch;         count--;         buffer[count] = (char) (55296 + random.nextInt( 128 ));     } } else {     if (ch >= 55296 && ch <= 56191) {         if (count == 0) {             count++;         } else {             buffer[count] = (char) (56320 + random.nextInt( 128 ));             count--;             buffer[count] = ch;         }     } else {         if (ch >= 56192 && ch <= 56319) {             count++;         } else {             buffer[count] = ch;         }     } }  =>   if (true) {     if (count == 0) {         count++;     } else {         buffer[count] = ch;         count--;         buffer[count] = (char) (55296 + random.nextInt( 128 ));     } } else {     if (ch >= 55296 && ch <= 56191) {         if (count == 0) {             count++;         } else {             buffer[count] = (char) (56320 + random.nextInt( 128 ));             count--;             buffer[count] = ch;         }     } else {         if (ch >= 56192 && ch <= 56319) {             count++;         } else {             buffer[count] = ch;         }     } }
SDL_33:96:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): if (ch >= 55296 && ch <= 56191) {     if (count == 0) {         count++;     } else {         buffer[count] = (char) (56320 + random.nextInt( 128 ));         count--;         buffer[count] = ch;     } } else {     if (ch >= 56192 && ch <= 56319) {         count++;     } else {         buffer[count] = ch;     } }  =>  
SDL_34:89:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count++;  =>  
SDL_35:95:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): if (count == 0) {     count++; } else {     buffer[count] = ch;     count--;     buffer[count] = (char) (55296 + random.nextInt( 128 )); }  =>   if (true) {     count++; } else {     buffer[count] = ch;     count--;     buffer[count] = (char) (55296 + random.nextInt( 128 )); }
SDL_36:93:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): buffer[count] = ch; count--; buffer[count] = (char) (55296 + random.nextInt( 128 ));  =>   count--; buffer[count] = (char) (55296 + random.nextInt( 128 ));
SDL_37:93:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): buffer[count] = ch; count--; buffer[count] = (char) (55296 + random.nextInt( 128 ));  =>   buffer[count] = ch; buffer[count] = (char) (55296 + random.nextInt( 128 ));
SDL_38:93:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): buffer[count] = ch; count--; buffer[count] = (char) (55296 + random.nextInt( 128 ));  =>   buffer[count] = ch; count--;
SDL_39:97:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): if (count == 0) {     count++; } else {     buffer[count] = (char) (56320 + random.nextInt( 128 ));     count--;     buffer[count] = ch; }  =>  
SDL_40:111:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): if (ch >= 55296 && ch <= 56191) {     if (count == 0) {         count++;     } else {         buffer[count] = (char) (56320 + random.nextInt( 128 ));         count--;         buffer[count] = ch;     } } else {     if (ch >= 56192 && ch <= 56319) {         count++;     } else {         buffer[count] = ch;     } }  =>   if (true) {     if (count == 0) {         count++;     } else {         buffer[count] = (char) (56320 + random.nextInt( 128 ));         count--;         buffer[count] = ch;     } } else {     if (ch >= 56192 && ch <= 56319) {         count++;     } else {         buffer[count] = ch;     } }
SDL_41:105:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): if (ch >= 56192 && ch <= 56319) {     count++; } else {     buffer[count] = ch; }  =>  
SDL_42:98:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count++;  =>  
SDL_43:104:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): if (count == 0) {     count++; } else {     buffer[count] = (char) (56320 + random.nextInt( 128 ));     count--;     buffer[count] = ch; }  =>   if (true) {     count++; } else {     buffer[count] = (char) (56320 + random.nextInt( 128 ));     count--;     buffer[count] = ch; }
SDL_44:102:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): buffer[count] = (char) (56320 + random.nextInt( 128 )); count--; buffer[count] = ch;  =>   count--; buffer[count] = ch;
SDL_45:102:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): buffer[count] = (char) (56320 + random.nextInt( 128 )); count--; buffer[count] = ch;  =>   buffer[count] = (char) (56320 + random.nextInt( 128 )); buffer[count] = ch;
SDL_46:102:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): buffer[count] = (char) (56320 + random.nextInt( 128 )); count--; buffer[count] = ch;  =>   buffer[count] = (char) (56320 + random.nextInt( 128 )); count--;
SDL_47:106:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): count++;  =>  
SDL_48:110:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): if (ch >= 56192 && ch <= 56319) {     count++; } else {     buffer[count] = ch; }  =>   if (true) {     count++; } else {     buffer[count] = ch; }
SDL_49:108:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): buffer[count] = ch;  =>  
SDL_50:117:java.lang.String_random(int,int,int,boolean,boolean,char,java.util.Random): return new java.lang.String( buffer );  =>   return \"\";
SDL_51:122:java.lang.String_random(int,java.lang.String): if (chars == null) {     return random( count, 0, 0, false, false, null, RANDOM ); } return random( count, chars.toCharArray() );  =>   return random( count, chars.toCharArray() );
SDL_52:124:java.lang.String_random(int,java.lang.String): if (chars == null) {     return random( count, 0, 0, false, false, null, RANDOM ); }  =>   if (true) {     return random( count, 0, 0, false, false, null, RANDOM ); }
SDL_53:123:java.lang.String_random(int,java.lang.String): return random( count, 0, 0, false, false, null, RANDOM );  =>   return \"\";
SDL_54:125:java.lang.String_random(int,java.lang.String): return random( count, chars.toCharArray() );  =>   return \"\";
SDL_55:130:java.lang.String_random(int,char): if (chars == null) {     return random( count, 0, 0, false, false, null, RANDOM ); } return random( count, 0, chars.length, false, false, chars, RANDOM );  =>   return random( count, 0, chars.length, false, false, chars, RANDOM );
SDL_56:132:java.lang.String_random(int,char): if (chars == null) {     return random( count, 0, 0, false, false, null, RANDOM ); }  =>   if (true) {     return random( count, 0, 0, false, false, null, RANDOM ); }
SDL_57:131:java.lang.String_random(int,char): return random( count, 0, 0, false, false, null, RANDOM );  =>   return \"\";
SDL_58:133:java.lang.String_random(int,char): return random( count, 0, chars.length, false, false, chars, RANDOM );  =>   return \"\";
