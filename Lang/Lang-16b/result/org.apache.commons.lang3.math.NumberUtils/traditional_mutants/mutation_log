AORB_1:173:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() * 1
AORB_2:173:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() / 1
AORB_3:173:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() % 1
AORB_4:173:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() + 1
AORB_5:178:java.lang.Number_createNumber(java.lang.String):str.indexOf( 'e' ) + str.indexOf( 'E' ) => str.indexOf( 'e' ) * str.indexOf( 'E' )
AORB_6:178:java.lang.Number_createNumber(java.lang.String):str.indexOf( 'e' ) + str.indexOf( 'E' ) => str.indexOf( 'e' ) / str.indexOf( 'E' )
AORB_7:178:java.lang.Number_createNumber(java.lang.String):str.indexOf( 'e' ) + str.indexOf( 'E' ) => str.indexOf( 'e' ) % str.indexOf( 'E' )
AORB_8:178:java.lang.Number_createNumber(java.lang.String):str.indexOf( 'e' ) + str.indexOf( 'E' ) => str.indexOf( 'e' ) - str.indexOf( 'E' )
AORB_9:178:java.lang.Number_createNumber(java.lang.String):str.indexOf( 'e' ) + str.indexOf( 'E' ) + 1 => (str.indexOf( 'e' ) + str.indexOf( 'E' )) * 1
AORB_10:178:java.lang.Number_createNumber(java.lang.String):str.indexOf( 'e' ) + str.indexOf( 'E' ) + 1 => (str.indexOf( 'e' ) + str.indexOf( 'E' )) / 1
AORB_11:178:java.lang.Number_createNumber(java.lang.String):str.indexOf( 'e' ) + str.indexOf( 'E' ) + 1 => (str.indexOf( 'e' ) + str.indexOf( 'E' )) % 1
AORB_12:178:java.lang.Number_createNumber(java.lang.String):str.indexOf( 'e' ) + str.indexOf( 'E' ) + 1 => str.indexOf( 'e' ) + str.indexOf( 'E' ) - 1
AORB_13:184:java.lang.Number_createNumber(java.lang.String):decPos + 1 => decPos * 1
AORB_14:184:java.lang.Number_createNumber(java.lang.String):decPos + 1 => decPos / 1
AORB_15:184:java.lang.Number_createNumber(java.lang.String):decPos + 1 => decPos % 1
AORB_16:184:java.lang.Number_createNumber(java.lang.String):decPos + 1 => decPos - 1
AORB_17:186:java.lang.Number_createNumber(java.lang.String):decPos + 1 => decPos * 1
AORB_18:186:java.lang.Number_createNumber(java.lang.String):decPos + 1 => decPos / 1
AORB_19:186:java.lang.Number_createNumber(java.lang.String):decPos + 1 => decPos % 1
AORB_20:186:java.lang.Number_createNumber(java.lang.String):decPos + 1 => decPos - 1
AORB_21:201:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() * 1
AORB_22:201:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() / 1
AORB_23:201:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() % 1
AORB_24:201:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() + 1
AORB_25:202:java.lang.Number_createNumber(java.lang.String):expPos + 1 => expPos * 1
AORB_26:202:java.lang.Number_createNumber(java.lang.String):expPos + 1 => expPos / 1
AORB_27:202:java.lang.Number_createNumber(java.lang.String):expPos + 1 => expPos % 1
AORB_28:202:java.lang.Number_createNumber(java.lang.String):expPos + 1 => expPos - 1
AORB_29:202:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() * 1
AORB_30:202:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() / 1
AORB_31:202:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() % 1
AORB_32:202:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() + 1
AORB_33:206:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() * 1
AORB_34:206:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() / 1
AORB_35:206:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() % 1
AORB_36:206:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() + 1
AORB_37:249:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() * 1
AORB_38:249:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() / 1
AORB_39:249:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() % 1
AORB_40:249:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() + 1
AORB_41:250:java.lang.Number_createNumber(java.lang.String):expPos + 1 => expPos * 1
AORB_42:250:java.lang.Number_createNumber(java.lang.String):expPos + 1 => expPos / 1
AORB_43:250:java.lang.Number_createNumber(java.lang.String):expPos + 1 => expPos % 1
AORB_44:250:java.lang.Number_createNumber(java.lang.String):expPos + 1 => expPos - 1
AORB_45:290:boolean_isAllZeros(java.lang.String):str.length() - 1 => str.length() * 1
AORB_46:290:boolean_isAllZeros(java.lang.String):str.length() - 1 => str.length() / 1
AORB_47:290:boolean_isAllZeros(java.lang.String):str.length() - 1 => str.length() % 1
AORB_48:290:boolean_isAllZeros(java.lang.String):str.length() - 1 => str.length() + 1
AORB_49:710:boolean_isNumber(java.lang.String):start + 1 => start * 1
AORB_50:710:boolean_isNumber(java.lang.String):start + 1 => start / 1
AORB_51:710:boolean_isNumber(java.lang.String):start + 1 => start % 1
AORB_52:710:boolean_isNumber(java.lang.String):start + 1 => start - 1
AORB_53:710:boolean_isNumber(java.lang.String):start + 1 => start * 1
AORB_54:710:boolean_isNumber(java.lang.String):start + 1 => start / 1
AORB_55:710:boolean_isNumber(java.lang.String):start + 1 => start % 1
AORB_56:710:boolean_isNumber(java.lang.String):start + 1 => start - 1
AORB_57:711:boolean_isNumber(java.lang.String):start + 2 => start * 2
AORB_58:711:boolean_isNumber(java.lang.String):start + 2 => start / 2
AORB_59:711:boolean_isNumber(java.lang.String):start + 2 => start % 2
AORB_60:711:boolean_isNumber(java.lang.String):start + 2 => start - 2
AORB_61:724:boolean_isNumber(java.lang.String):sz + 1 => sz * 1
AORB_62:724:boolean_isNumber(java.lang.String):sz + 1 => sz / 1
AORB_63:724:boolean_isNumber(java.lang.String):sz + 1 => sz % 1
AORB_64:724:boolean_isNumber(java.lang.String):sz + 1 => sz - 1
ROR_1:63:int_toInt(java.lang.String,int): str == null  =>   str != null
ROR_2:80:long_toLong(java.lang.String,long): str == null  =>   str != null
ROR_3:97:float_toFloat(java.lang.String,float): str == null  =>   str != null
ROR_4:114:double_toDouble(java.lang.String,double): str == null  =>   str != null
ROR_5:131:byte_toByte(java.lang.String,byte): str == null  =>   str != null
ROR_6:148:short_toShort(java.lang.String,short): str == null  =>   str != null
ROR_7:161:java.lang.Number_createNumber(java.lang.String): str == null  =>   str != null
ROR_8:179:java.lang.Number_createNumber(java.lang.String): decPos > -1  =>   decPos >= -1
ROR_9:179:java.lang.Number_createNumber(java.lang.String): decPos > -1  =>   decPos < -1
ROR_10:179:java.lang.Number_createNumber(java.lang.String): decPos > -1  =>   decPos <= -1
ROR_11:179:java.lang.Number_createNumber(java.lang.String): decPos > -1  =>   decPos == -1
ROR_12:179:java.lang.Number_createNumber(java.lang.String): decPos > -1  =>   decPos != -1
ROR_13:179:java.lang.Number_createNumber(java.lang.String): decPos > -1  =>   true
ROR_14:179:java.lang.Number_createNumber(java.lang.String): decPos > -1  =>   false
ROR_15:180:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos >= -1
ROR_16:180:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos < -1
ROR_17:180:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos <= -1
ROR_18:180:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos == -1
ROR_19:180:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos != -1
ROR_20:180:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   true
ROR_21:180:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   false
ROR_22:181:java.lang.Number_createNumber(java.lang.String): expPos < decPos  =>   expPos > decPos
ROR_23:181:java.lang.Number_createNumber(java.lang.String): expPos < decPos  =>   expPos >= decPos
ROR_24:181:java.lang.Number_createNumber(java.lang.String): expPos < decPos  =>   expPos <= decPos
ROR_25:181:java.lang.Number_createNumber(java.lang.String): expPos < decPos  =>   expPos == decPos
ROR_26:181:java.lang.Number_createNumber(java.lang.String): expPos < decPos  =>   expPos != decPos
ROR_27:181:java.lang.Number_createNumber(java.lang.String): expPos < decPos  =>   true
ROR_28:181:java.lang.Number_createNumber(java.lang.String): expPos < decPos  =>   false
ROR_29:181:java.lang.Number_createNumber(java.lang.String): expPos > str.length()  =>   expPos >= str.length()
ROR_30:181:java.lang.Number_createNumber(java.lang.String): expPos > str.length()  =>   expPos < str.length()
ROR_31:181:java.lang.Number_createNumber(java.lang.String): expPos > str.length()  =>   expPos <= str.length()
ROR_32:181:java.lang.Number_createNumber(java.lang.String): expPos > str.length()  =>   expPos == str.length()
ROR_33:181:java.lang.Number_createNumber(java.lang.String): expPos > str.length()  =>   expPos != str.length()
ROR_34:181:java.lang.Number_createNumber(java.lang.String): expPos > str.length()  =>   true
ROR_35:181:java.lang.Number_createNumber(java.lang.String): expPos > str.length()  =>   false
ROR_36:190:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos >= -1
ROR_37:190:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos < -1
ROR_38:190:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos <= -1
ROR_39:190:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos == -1
ROR_40:190:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos != -1
ROR_41:190:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   true
ROR_42:190:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   false
ROR_43:191:java.lang.Number_createNumber(java.lang.String): expPos > str.length()  =>   expPos >= str.length()
ROR_44:191:java.lang.Number_createNumber(java.lang.String): expPos > str.length()  =>   expPos < str.length()
ROR_45:191:java.lang.Number_createNumber(java.lang.String): expPos > str.length()  =>   expPos <= str.length()
ROR_46:191:java.lang.Number_createNumber(java.lang.String): expPos > str.length()  =>   expPos == str.length()
ROR_47:191:java.lang.Number_createNumber(java.lang.String): expPos > str.length()  =>   expPos != str.length()
ROR_48:191:java.lang.Number_createNumber(java.lang.String): expPos > str.length()  =>   true
ROR_49:191:java.lang.Number_createNumber(java.lang.String): expPos > str.length()  =>   false
ROR_50:200:java.lang.Number_createNumber(java.lang.String): lastChar != '.'  =>   lastChar > '.'
ROR_51:200:java.lang.Number_createNumber(java.lang.String): lastChar != '.'  =>   lastChar >= '.'
ROR_52:200:java.lang.Number_createNumber(java.lang.String): lastChar != '.'  =>   lastChar < '.'
ROR_53:200:java.lang.Number_createNumber(java.lang.String): lastChar != '.'  =>   lastChar <= '.'
ROR_54:200:java.lang.Number_createNumber(java.lang.String): lastChar != '.'  =>   lastChar == '.'
ROR_55:200:java.lang.Number_createNumber(java.lang.String): lastChar != '.'  =>   true
ROR_56:200:java.lang.Number_createNumber(java.lang.String): lastChar != '.'  =>   false
ROR_57:201:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos >= -1
ROR_58:201:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos < -1
ROR_59:201:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos <= -1
ROR_60:201:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos == -1
ROR_61:201:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos != -1
ROR_62:201:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   true
ROR_63:201:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   false
ROR_64:201:java.lang.Number_createNumber(java.lang.String): expPos < str.length() - 1  =>   expPos > str.length() - 1
ROR_65:201:java.lang.Number_createNumber(java.lang.String): expPos < str.length() - 1  =>   expPos >= str.length() - 1
ROR_66:201:java.lang.Number_createNumber(java.lang.String): expPos < str.length() - 1  =>   expPos <= str.length() - 1
ROR_67:201:java.lang.Number_createNumber(java.lang.String): expPos < str.length() - 1  =>   expPos == str.length() - 1
ROR_68:201:java.lang.Number_createNumber(java.lang.String): expPos < str.length() - 1  =>   expPos != str.length() - 1
ROR_69:201:java.lang.Number_createNumber(java.lang.String): expPos < str.length() - 1  =>   true
ROR_70:201:java.lang.Number_createNumber(java.lang.String): expPos < str.length() - 1  =>   false
ROR_71:211:java.lang.Number_createNumber(java.lang.String): dec == null  =>   dec != null
ROR_72:211:java.lang.Number_createNumber(java.lang.String): exp == null  =>   exp != null
ROR_73:211:java.lang.Number_createNumber(java.lang.String): numeric.charAt( 0 ) == '-'  =>   numeric.charAt( 0 ) > '-'
ROR_74:211:java.lang.Number_createNumber(java.lang.String): numeric.charAt( 0 ) == '-'  =>   numeric.charAt( 0 ) >= '-'
ROR_75:211:java.lang.Number_createNumber(java.lang.String): numeric.charAt( 0 ) == '-'  =>   numeric.charAt( 0 ) < '-'
ROR_76:211:java.lang.Number_createNumber(java.lang.String): numeric.charAt( 0 ) == '-'  =>   numeric.charAt( 0 ) <= '-'
ROR_77:211:java.lang.Number_createNumber(java.lang.String): numeric.charAt( 0 ) == '-'  =>   numeric.charAt( 0 ) != '-'
ROR_78:211:java.lang.Number_createNumber(java.lang.String): numeric.charAt( 0 ) == '-'  =>   true
ROR_79:211:java.lang.Number_createNumber(java.lang.String): numeric.charAt( 0 ) == '-'  =>   false
ROR_80:224:java.lang.Number_createNumber(java.lang.String): f.floatValue() == 0.0F  =>   f.floatValue() > 0.0F
ROR_81:224:java.lang.Number_createNumber(java.lang.String): f.floatValue() == 0.0F  =>   f.floatValue() >= 0.0F
ROR_82:224:java.lang.Number_createNumber(java.lang.String): f.floatValue() == 0.0F  =>   f.floatValue() < 0.0F
ROR_83:224:java.lang.Number_createNumber(java.lang.String): f.floatValue() == 0.0F  =>   f.floatValue() <= 0.0F
ROR_84:224:java.lang.Number_createNumber(java.lang.String): f.floatValue() == 0.0F  =>   f.floatValue() != 0.0F
ROR_85:224:java.lang.Number_createNumber(java.lang.String): f.floatValue() == 0.0F  =>   true
ROR_86:224:java.lang.Number_createNumber(java.lang.String): f.floatValue() == 0.0F  =>   false
ROR_87:234:java.lang.Number_createNumber(java.lang.String): d.floatValue() == 0.0D  =>   d.floatValue() > 0.0D
ROR_88:234:java.lang.Number_createNumber(java.lang.String): d.floatValue() == 0.0D  =>   d.floatValue() >= 0.0D
ROR_89:234:java.lang.Number_createNumber(java.lang.String): d.floatValue() == 0.0D  =>   d.floatValue() < 0.0D
ROR_90:234:java.lang.Number_createNumber(java.lang.String): d.floatValue() == 0.0D  =>   d.floatValue() <= 0.0D
ROR_91:234:java.lang.Number_createNumber(java.lang.String): d.floatValue() == 0.0D  =>   d.floatValue() != 0.0D
ROR_92:234:java.lang.Number_createNumber(java.lang.String): d.floatValue() == 0.0D  =>   true
ROR_93:234:java.lang.Number_createNumber(java.lang.String): d.floatValue() == 0.0D  =>   false
ROR_94:249:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos >= -1
ROR_95:249:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos < -1
ROR_96:249:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos <= -1
ROR_97:249:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos == -1
ROR_98:249:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos != -1
ROR_99:249:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   true
ROR_100:249:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   false
ROR_101:249:java.lang.Number_createNumber(java.lang.String): expPos < str.length() - 1  =>   expPos > str.length() - 1
ROR_102:249:java.lang.Number_createNumber(java.lang.String): expPos < str.length() - 1  =>   expPos >= str.length() - 1
ROR_103:249:java.lang.Number_createNumber(java.lang.String): expPos < str.length() - 1  =>   expPos <= str.length() - 1
ROR_104:249:java.lang.Number_createNumber(java.lang.String): expPos < str.length() - 1  =>   expPos == str.length() - 1
ROR_105:249:java.lang.Number_createNumber(java.lang.String): expPos < str.length() - 1  =>   expPos != str.length() - 1
ROR_106:249:java.lang.Number_createNumber(java.lang.String): expPos < str.length() - 1  =>   true
ROR_107:249:java.lang.Number_createNumber(java.lang.String): expPos < str.length() - 1  =>   false
ROR_108:254:java.lang.Number_createNumber(java.lang.String): dec == null  =>   dec != null
ROR_109:254:java.lang.Number_createNumber(java.lang.String): exp == null  =>   exp != null
ROR_110:268:java.lang.Number_createNumber(java.lang.String): f.floatValue() == 0.0F  =>   f.floatValue() > 0.0F
ROR_111:268:java.lang.Number_createNumber(java.lang.String): f.floatValue() == 0.0F  =>   f.floatValue() >= 0.0F
ROR_112:268:java.lang.Number_createNumber(java.lang.String): f.floatValue() == 0.0F  =>   f.floatValue() < 0.0F
ROR_113:268:java.lang.Number_createNumber(java.lang.String): f.floatValue() == 0.0F  =>   f.floatValue() <= 0.0F
ROR_114:268:java.lang.Number_createNumber(java.lang.String): f.floatValue() == 0.0F  =>   f.floatValue() != 0.0F
ROR_115:268:java.lang.Number_createNumber(java.lang.String): f.floatValue() == 0.0F  =>   true
ROR_116:268:java.lang.Number_createNumber(java.lang.String): f.floatValue() == 0.0F  =>   false
ROR_117:275:java.lang.Number_createNumber(java.lang.String): d.doubleValue() == 0.0D  =>   d.doubleValue() > 0.0D
ROR_118:275:java.lang.Number_createNumber(java.lang.String): d.doubleValue() == 0.0D  =>   d.doubleValue() >= 0.0D
ROR_119:275:java.lang.Number_createNumber(java.lang.String): d.doubleValue() == 0.0D  =>   d.doubleValue() < 0.0D
ROR_120:275:java.lang.Number_createNumber(java.lang.String): d.doubleValue() == 0.0D  =>   d.doubleValue() <= 0.0D
ROR_121:275:java.lang.Number_createNumber(java.lang.String): d.doubleValue() == 0.0D  =>   d.doubleValue() != 0.0D
ROR_122:275:java.lang.Number_createNumber(java.lang.String): d.doubleValue() == 0.0D  =>   true
ROR_123:275:java.lang.Number_createNumber(java.lang.String): d.doubleValue() == 0.0D  =>   false
ROR_124:287:boolean_isAllZeros(java.lang.String): str == null  =>   str != null
ROR_125:290:boolean_isAllZeros(java.lang.String): i >= 0  =>   i > 0
ROR_126:290:boolean_isAllZeros(java.lang.String): i >= 0  =>   i < 0
ROR_127:290:boolean_isAllZeros(java.lang.String): i >= 0  =>   i <= 0
ROR_128:290:boolean_isAllZeros(java.lang.String): i >= 0  =>   i == 0
ROR_129:290:boolean_isAllZeros(java.lang.String): i >= 0  =>   i != 0
ROR_130:290:boolean_isAllZeros(java.lang.String): i >= 0  =>   true
ROR_131:290:boolean_isAllZeros(java.lang.String): i >= 0  =>   false
ROR_132:291:boolean_isAllZeros(java.lang.String): str.charAt( i ) != '0'  =>   str.charAt( i ) > '0'
ROR_133:291:boolean_isAllZeros(java.lang.String): str.charAt( i ) != '0'  =>   str.charAt( i ) >= '0'
ROR_134:291:boolean_isAllZeros(java.lang.String): str.charAt( i ) != '0'  =>   str.charAt( i ) < '0'
ROR_135:291:boolean_isAllZeros(java.lang.String): str.charAt( i ) != '0'  =>   str.charAt( i ) <= '0'
ROR_136:291:boolean_isAllZeros(java.lang.String): str.charAt( i ) != '0'  =>   str.charAt( i ) == '0'
ROR_137:291:boolean_isAllZeros(java.lang.String): str.charAt( i ) != '0'  =>   true
ROR_138:291:boolean_isAllZeros(java.lang.String): str.charAt( i ) != '0'  =>   false
ROR_139:295:boolean_isAllZeros(java.lang.String): str.length() > 0  =>   str.length() >= 0
ROR_140:295:boolean_isAllZeros(java.lang.String): str.length() > 0  =>   str.length() < 0
ROR_141:295:boolean_isAllZeros(java.lang.String): str.length() > 0  =>   str.length() <= 0
ROR_142:295:boolean_isAllZeros(java.lang.String): str.length() > 0  =>   str.length() == 0
ROR_143:295:boolean_isAllZeros(java.lang.String): str.length() > 0  =>   str.length() != 0
ROR_144:295:boolean_isAllZeros(java.lang.String): str.length() > 0  =>   true
ROR_145:295:boolean_isAllZeros(java.lang.String): str.length() > 0  =>   false
ROR_146:300:java.lang.Float_createFloat(java.lang.String): str == null  =>   str != null
ROR_147:308:java.lang.Double_createDouble(java.lang.String): str == null  =>   str != null
ROR_148:316:java.lang.Integer_createInteger(java.lang.String): str == null  =>   str != null
ROR_149:324:java.lang.Long_createLong(java.lang.String): str == null  =>   str != null
ROR_150:332:java.math.BigInteger_createBigInteger(java.lang.String): str == null  =>   str != null
ROR_151:340:java.math.BigDecimal_createBigDecimal(java.lang.String): str == null  =>   str != null
ROR_152:351:long_min(long): array == null  =>   array != null
ROR_153:354:long_min(long): array.length == 0  =>   array.length > 0
ROR_154:354:long_min(long): array.length == 0  =>   array.length >= 0
ROR_155:354:long_min(long): array.length == 0  =>   array.length < 0
ROR_156:354:long_min(long): array.length == 0  =>   array.length <= 0
ROR_157:354:long_min(long): array.length == 0  =>   array.length != 0
ROR_158:354:long_min(long): array.length == 0  =>   true
ROR_159:354:long_min(long): array.length == 0  =>   false
ROR_160:359:long_min(long): i < array.length  =>   i > array.length
ROR_161:359:long_min(long): i < array.length  =>   i >= array.length
ROR_162:359:long_min(long): i < array.length  =>   i <= array.length
ROR_163:359:long_min(long): i < array.length  =>   i == array.length
ROR_164:359:long_min(long): i < array.length  =>   i != array.length
ROR_165:359:long_min(long): i < array.length  =>   true
ROR_166:359:long_min(long): i < array.length  =>   false
ROR_167:360:long_min(long): array[i] < min  =>   array[i] > min
ROR_168:360:long_min(long): array[i] < min  =>   array[i] >= min
ROR_169:360:long_min(long): array[i] < min  =>   array[i] <= min
ROR_170:360:long_min(long): array[i] < min  =>   array[i] == min
ROR_171:360:long_min(long): array[i] < min  =>   array[i] != min
ROR_172:360:long_min(long): array[i] < min  =>   true
ROR_173:360:long_min(long): array[i] < min  =>   false
ROR_174:369:int_min(int): array == null  =>   array != null
ROR_175:372:int_min(int): array.length == 0  =>   array.length > 0
ROR_176:372:int_min(int): array.length == 0  =>   array.length >= 0
ROR_177:372:int_min(int): array.length == 0  =>   array.length < 0
ROR_178:372:int_min(int): array.length == 0  =>   array.length <= 0
ROR_179:372:int_min(int): array.length == 0  =>   array.length != 0
ROR_180:372:int_min(int): array.length == 0  =>   true
ROR_181:372:int_min(int): array.length == 0  =>   false
ROR_182:377:int_min(int): j < array.length  =>   j > array.length
ROR_183:377:int_min(int): j < array.length  =>   j >= array.length
ROR_184:377:int_min(int): j < array.length  =>   j <= array.length
ROR_185:377:int_min(int): j < array.length  =>   j == array.length
ROR_186:377:int_min(int): j < array.length  =>   j != array.length
ROR_187:377:int_min(int): j < array.length  =>   true
ROR_188:377:int_min(int): j < array.length  =>   false
ROR_189:378:int_min(int): array[j] < min  =>   array[j] > min
ROR_190:378:int_min(int): array[j] < min  =>   array[j] >= min
ROR_191:378:int_min(int): array[j] < min  =>   array[j] <= min
ROR_192:378:int_min(int): array[j] < min  =>   array[j] == min
ROR_193:378:int_min(int): array[j] < min  =>   array[j] != min
ROR_194:378:int_min(int): array[j] < min  =>   true
ROR_195:378:int_min(int): array[j] < min  =>   false
ROR_196:387:short_min(short): array == null  =>   array != null
ROR_197:390:short_min(short): array.length == 0  =>   array.length > 0
ROR_198:390:short_min(short): array.length == 0  =>   array.length >= 0
ROR_199:390:short_min(short): array.length == 0  =>   array.length < 0
ROR_200:390:short_min(short): array.length == 0  =>   array.length <= 0
ROR_201:390:short_min(short): array.length == 0  =>   array.length != 0
ROR_202:390:short_min(short): array.length == 0  =>   true
ROR_203:390:short_min(short): array.length == 0  =>   false
ROR_204:395:short_min(short): i < array.length  =>   i > array.length
ROR_205:395:short_min(short): i < array.length  =>   i >= array.length
ROR_206:395:short_min(short): i < array.length  =>   i <= array.length
ROR_207:395:short_min(short): i < array.length  =>   i == array.length
ROR_208:395:short_min(short): i < array.length  =>   i != array.length
ROR_209:395:short_min(short): i < array.length  =>   true
ROR_210:395:short_min(short): i < array.length  =>   false
ROR_211:396:short_min(short): array[i] < min  =>   array[i] > min
ROR_212:396:short_min(short): array[i] < min  =>   array[i] >= min
ROR_213:396:short_min(short): array[i] < min  =>   array[i] <= min
ROR_214:396:short_min(short): array[i] < min  =>   array[i] == min
ROR_215:396:short_min(short): array[i] < min  =>   array[i] != min
ROR_216:396:short_min(short): array[i] < min  =>   true
ROR_217:396:short_min(short): array[i] < min  =>   false
ROR_218:405:byte_min(byte): array == null  =>   array != null
ROR_219:408:byte_min(byte): array.length == 0  =>   array.length > 0
ROR_220:408:byte_min(byte): array.length == 0  =>   array.length >= 0
ROR_221:408:byte_min(byte): array.length == 0  =>   array.length < 0
ROR_222:408:byte_min(byte): array.length == 0  =>   array.length <= 0
ROR_223:408:byte_min(byte): array.length == 0  =>   array.length != 0
ROR_224:408:byte_min(byte): array.length == 0  =>   true
ROR_225:408:byte_min(byte): array.length == 0  =>   false
ROR_226:413:byte_min(byte): i < array.length  =>   i > array.length
ROR_227:413:byte_min(byte): i < array.length  =>   i >= array.length
ROR_228:413:byte_min(byte): i < array.length  =>   i <= array.length
ROR_229:413:byte_min(byte): i < array.length  =>   i == array.length
ROR_230:413:byte_min(byte): i < array.length  =>   i != array.length
ROR_231:413:byte_min(byte): i < array.length  =>   true
ROR_232:413:byte_min(byte): i < array.length  =>   false
ROR_233:414:byte_min(byte): array[i] < min  =>   array[i] > min
ROR_234:414:byte_min(byte): array[i] < min  =>   array[i] >= min
ROR_235:414:byte_min(byte): array[i] < min  =>   array[i] <= min
ROR_236:414:byte_min(byte): array[i] < min  =>   array[i] == min
ROR_237:414:byte_min(byte): array[i] < min  =>   array[i] != min
ROR_238:414:byte_min(byte): array[i] < min  =>   true
ROR_239:414:byte_min(byte): array[i] < min  =>   false
ROR_240:423:double_min(double): array == null  =>   array != null
ROR_241:426:double_min(double): array.length == 0  =>   array.length > 0
ROR_242:426:double_min(double): array.length == 0  =>   array.length >= 0
ROR_243:426:double_min(double): array.length == 0  =>   array.length < 0
ROR_244:426:double_min(double): array.length == 0  =>   array.length <= 0
ROR_245:426:double_min(double): array.length == 0  =>   array.length != 0
ROR_246:426:double_min(double): array.length == 0  =>   true
ROR_247:426:double_min(double): array.length == 0  =>   false
ROR_248:431:double_min(double): i < array.length  =>   i > array.length
ROR_249:431:double_min(double): i < array.length  =>   i >= array.length
ROR_250:431:double_min(double): i < array.length  =>   i <= array.length
ROR_251:431:double_min(double): i < array.length  =>   i == array.length
ROR_252:431:double_min(double): i < array.length  =>   i != array.length
ROR_253:431:double_min(double): i < array.length  =>   true
ROR_254:431:double_min(double): i < array.length  =>   false
ROR_255:435:double_min(double): array[i] < min  =>   array[i] > min
ROR_256:435:double_min(double): array[i] < min  =>   array[i] >= min
ROR_257:435:double_min(double): array[i] < min  =>   array[i] <= min
ROR_258:435:double_min(double): array[i] < min  =>   array[i] == min
ROR_259:435:double_min(double): array[i] < min  =>   array[i] != min
ROR_260:435:double_min(double): array[i] < min  =>   true
ROR_261:435:double_min(double): array[i] < min  =>   false
ROR_262:444:float_min(float): array == null  =>   array != null
ROR_263:447:float_min(float): array.length == 0  =>   array.length > 0
ROR_264:447:float_min(float): array.length == 0  =>   array.length >= 0
ROR_265:447:float_min(float): array.length == 0  =>   array.length < 0
ROR_266:447:float_min(float): array.length == 0  =>   array.length <= 0
ROR_267:447:float_min(float): array.length == 0  =>   array.length != 0
ROR_268:447:float_min(float): array.length == 0  =>   true
ROR_269:447:float_min(float): array.length == 0  =>   false
ROR_270:452:float_min(float): i < array.length  =>   i > array.length
ROR_271:452:float_min(float): i < array.length  =>   i >= array.length
ROR_272:452:float_min(float): i < array.length  =>   i <= array.length
ROR_273:452:float_min(float): i < array.length  =>   i == array.length
ROR_274:452:float_min(float): i < array.length  =>   i != array.length
ROR_275:452:float_min(float): i < array.length  =>   true
ROR_276:452:float_min(float): i < array.length  =>   false
ROR_277:456:float_min(float): array[i] < min  =>   array[i] > min
ROR_278:456:float_min(float): array[i] < min  =>   array[i] >= min
ROR_279:456:float_min(float): array[i] < min  =>   array[i] <= min
ROR_280:456:float_min(float): array[i] < min  =>   array[i] == min
ROR_281:456:float_min(float): array[i] < min  =>   array[i] != min
ROR_282:456:float_min(float): array[i] < min  =>   true
ROR_283:456:float_min(float): array[i] < min  =>   false
ROR_284:465:long_max(long): array == null  =>   array != null
ROR_285:468:long_max(long): array.length == 0  =>   array.length > 0
ROR_286:468:long_max(long): array.length == 0  =>   array.length >= 0
ROR_287:468:long_max(long): array.length == 0  =>   array.length < 0
ROR_288:468:long_max(long): array.length == 0  =>   array.length <= 0
ROR_289:468:long_max(long): array.length == 0  =>   array.length != 0
ROR_290:468:long_max(long): array.length == 0  =>   true
ROR_291:468:long_max(long): array.length == 0  =>   false
ROR_292:473:long_max(long): j < array.length  =>   j > array.length
ROR_293:473:long_max(long): j < array.length  =>   j >= array.length
ROR_294:473:long_max(long): j < array.length  =>   j <= array.length
ROR_295:473:long_max(long): j < array.length  =>   j == array.length
ROR_296:473:long_max(long): j < array.length  =>   j != array.length
ROR_297:473:long_max(long): j < array.length  =>   true
ROR_298:473:long_max(long): j < array.length  =>   false
ROR_299:474:long_max(long): array[j] > max  =>   array[j] >= max
ROR_300:474:long_max(long): array[j] > max  =>   array[j] < max
ROR_301:474:long_max(long): array[j] > max  =>   array[j] <= max
ROR_302:474:long_max(long): array[j] > max  =>   array[j] == max
ROR_303:474:long_max(long): array[j] > max  =>   array[j] != max
ROR_304:474:long_max(long): array[j] > max  =>   true
ROR_305:474:long_max(long): array[j] > max  =>   false
ROR_306:483:int_max(int): array == null  =>   array != null
ROR_307:486:int_max(int): array.length == 0  =>   array.length > 0
ROR_308:486:int_max(int): array.length == 0  =>   array.length >= 0
ROR_309:486:int_max(int): array.length == 0  =>   array.length < 0
ROR_310:486:int_max(int): array.length == 0  =>   array.length <= 0
ROR_311:486:int_max(int): array.length == 0  =>   array.length != 0
ROR_312:486:int_max(int): array.length == 0  =>   true
ROR_313:486:int_max(int): array.length == 0  =>   false
ROR_314:491:int_max(int): j < array.length  =>   j > array.length
ROR_315:491:int_max(int): j < array.length  =>   j >= array.length
ROR_316:491:int_max(int): j < array.length  =>   j <= array.length
ROR_317:491:int_max(int): j < array.length  =>   j == array.length
ROR_318:491:int_max(int): j < array.length  =>   j != array.length
ROR_319:491:int_max(int): j < array.length  =>   true
ROR_320:491:int_max(int): j < array.length  =>   false
ROR_321:492:int_max(int): array[j] > max  =>   array[j] >= max
ROR_322:492:int_max(int): array[j] > max  =>   array[j] < max
ROR_323:492:int_max(int): array[j] > max  =>   array[j] <= max
ROR_324:492:int_max(int): array[j] > max  =>   array[j] == max
ROR_325:492:int_max(int): array[j] > max  =>   array[j] != max
ROR_326:492:int_max(int): array[j] > max  =>   true
ROR_327:492:int_max(int): array[j] > max  =>   false
ROR_328:501:short_max(short): array == null  =>   array != null
ROR_329:504:short_max(short): array.length == 0  =>   array.length > 0
ROR_330:504:short_max(short): array.length == 0  =>   array.length >= 0
ROR_331:504:short_max(short): array.length == 0  =>   array.length < 0
ROR_332:504:short_max(short): array.length == 0  =>   array.length <= 0
ROR_333:504:short_max(short): array.length == 0  =>   array.length != 0
ROR_334:504:short_max(short): array.length == 0  =>   true
ROR_335:504:short_max(short): array.length == 0  =>   false
ROR_336:509:short_max(short): i < array.length  =>   i > array.length
ROR_337:509:short_max(short): i < array.length  =>   i >= array.length
ROR_338:509:short_max(short): i < array.length  =>   i <= array.length
ROR_339:509:short_max(short): i < array.length  =>   i == array.length
ROR_340:509:short_max(short): i < array.length  =>   i != array.length
ROR_341:509:short_max(short): i < array.length  =>   true
ROR_342:509:short_max(short): i < array.length  =>   false
ROR_343:510:short_max(short): array[i] > max  =>   array[i] >= max
ROR_344:510:short_max(short): array[i] > max  =>   array[i] < max
ROR_345:510:short_max(short): array[i] > max  =>   array[i] <= max
ROR_346:510:short_max(short): array[i] > max  =>   array[i] == max
ROR_347:510:short_max(short): array[i] > max  =>   array[i] != max
ROR_348:510:short_max(short): array[i] > max  =>   true
ROR_349:510:short_max(short): array[i] > max  =>   false
ROR_350:519:byte_max(byte): array == null  =>   array != null
ROR_351:522:byte_max(byte): array.length == 0  =>   array.length > 0
ROR_352:522:byte_max(byte): array.length == 0  =>   array.length >= 0
ROR_353:522:byte_max(byte): array.length == 0  =>   array.length < 0
ROR_354:522:byte_max(byte): array.length == 0  =>   array.length <= 0
ROR_355:522:byte_max(byte): array.length == 0  =>   array.length != 0
ROR_356:522:byte_max(byte): array.length == 0  =>   true
ROR_357:522:byte_max(byte): array.length == 0  =>   false
ROR_358:527:byte_max(byte): i < array.length  =>   i > array.length
ROR_359:527:byte_max(byte): i < array.length  =>   i >= array.length
ROR_360:527:byte_max(byte): i < array.length  =>   i <= array.length
ROR_361:527:byte_max(byte): i < array.length  =>   i == array.length
ROR_362:527:byte_max(byte): i < array.length  =>   i != array.length
ROR_363:527:byte_max(byte): i < array.length  =>   true
ROR_364:527:byte_max(byte): i < array.length  =>   false
ROR_365:528:byte_max(byte): array[i] > max  =>   array[i] >= max
ROR_366:528:byte_max(byte): array[i] > max  =>   array[i] < max
ROR_367:528:byte_max(byte): array[i] > max  =>   array[i] <= max
ROR_368:528:byte_max(byte): array[i] > max  =>   array[i] == max
ROR_369:528:byte_max(byte): array[i] > max  =>   array[i] != max
ROR_370:528:byte_max(byte): array[i] > max  =>   true
ROR_371:528:byte_max(byte): array[i] > max  =>   false
ROR_372:537:double_max(double): array == null  =>   array != null
ROR_373:540:double_max(double): array.length == 0  =>   array.length > 0
ROR_374:540:double_max(double): array.length == 0  =>   array.length >= 0
ROR_375:540:double_max(double): array.length == 0  =>   array.length < 0
ROR_376:540:double_max(double): array.length == 0  =>   array.length <= 0
ROR_377:540:double_max(double): array.length == 0  =>   array.length != 0
ROR_378:540:double_max(double): array.length == 0  =>   true
ROR_379:540:double_max(double): array.length == 0  =>   false
ROR_380:545:double_max(double): j < array.length  =>   j > array.length
ROR_381:545:double_max(double): j < array.length  =>   j >= array.length
ROR_382:545:double_max(double): j < array.length  =>   j <= array.length
ROR_383:545:double_max(double): j < array.length  =>   j == array.length
ROR_384:545:double_max(double): j < array.length  =>   j != array.length
ROR_385:545:double_max(double): j < array.length  =>   true
ROR_386:545:double_max(double): j < array.length  =>   false
ROR_387:549:double_max(double): array[j] > max  =>   array[j] >= max
ROR_388:549:double_max(double): array[j] > max  =>   array[j] < max
ROR_389:549:double_max(double): array[j] > max  =>   array[j] <= max
ROR_390:549:double_max(double): array[j] > max  =>   array[j] == max
ROR_391:549:double_max(double): array[j] > max  =>   array[j] != max
ROR_392:549:double_max(double): array[j] > max  =>   true
ROR_393:549:double_max(double): array[j] > max  =>   false
ROR_394:558:float_max(float): array == null  =>   array != null
ROR_395:561:float_max(float): array.length == 0  =>   array.length > 0
ROR_396:561:float_max(float): array.length == 0  =>   array.length >= 0
ROR_397:561:float_max(float): array.length == 0  =>   array.length < 0
ROR_398:561:float_max(float): array.length == 0  =>   array.length <= 0
ROR_399:561:float_max(float): array.length == 0  =>   array.length != 0
ROR_400:561:float_max(float): array.length == 0  =>   true
ROR_401:561:float_max(float): array.length == 0  =>   false
ROR_402:566:float_max(float): j < array.length  =>   j > array.length
ROR_403:566:float_max(float): j < array.length  =>   j >= array.length
ROR_404:566:float_max(float): j < array.length  =>   j <= array.length
ROR_405:566:float_max(float): j < array.length  =>   j == array.length
ROR_406:566:float_max(float): j < array.length  =>   j != array.length
ROR_407:566:float_max(float): j < array.length  =>   true
ROR_408:566:float_max(float): j < array.length  =>   false
ROR_409:570:float_max(float): array[j] > max  =>   array[j] >= max
ROR_410:570:float_max(float): array[j] > max  =>   array[j] < max
ROR_411:570:float_max(float): array[j] > max  =>   array[j] <= max
ROR_412:570:float_max(float): array[j] > max  =>   array[j] == max
ROR_413:570:float_max(float): array[j] > max  =>   array[j] != max
ROR_414:570:float_max(float): array[j] > max  =>   true
ROR_415:570:float_max(float): array[j] > max  =>   false
ROR_416:579:long_min(long,long,long): b < a  =>   b > a
ROR_417:579:long_min(long,long,long): b < a  =>   b >= a
ROR_418:579:long_min(long,long,long): b < a  =>   b <= a
ROR_419:579:long_min(long,long,long): b < a  =>   b == a
ROR_420:579:long_min(long,long,long): b < a  =>   b != a
ROR_421:579:long_min(long,long,long): b < a  =>   true
ROR_422:579:long_min(long,long,long): b < a  =>   false
ROR_423:582:long_min(long,long,long): c < a  =>   c > a
ROR_424:582:long_min(long,long,long): c < a  =>   c >= a
ROR_425:582:long_min(long,long,long): c < a  =>   c <= a
ROR_426:582:long_min(long,long,long): c < a  =>   c == a
ROR_427:582:long_min(long,long,long): c < a  =>   c != a
ROR_428:582:long_min(long,long,long): c < a  =>   true
ROR_429:582:long_min(long,long,long): c < a  =>   false
ROR_430:590:int_min(int,int,int): b < a  =>   b > a
ROR_431:590:int_min(int,int,int): b < a  =>   b >= a
ROR_432:590:int_min(int,int,int): b < a  =>   b <= a
ROR_433:590:int_min(int,int,int): b < a  =>   b == a
ROR_434:590:int_min(int,int,int): b < a  =>   b != a
ROR_435:590:int_min(int,int,int): b < a  =>   true
ROR_436:590:int_min(int,int,int): b < a  =>   false
ROR_437:593:int_min(int,int,int): c < a  =>   c > a
ROR_438:593:int_min(int,int,int): c < a  =>   c >= a
ROR_439:593:int_min(int,int,int): c < a  =>   c <= a
ROR_440:593:int_min(int,int,int): c < a  =>   c == a
ROR_441:593:int_min(int,int,int): c < a  =>   c != a
ROR_442:593:int_min(int,int,int): c < a  =>   true
ROR_443:593:int_min(int,int,int): c < a  =>   false
ROR_444:601:short_min(short,short,short): b < a  =>   b > a
ROR_445:601:short_min(short,short,short): b < a  =>   b >= a
ROR_446:601:short_min(short,short,short): b < a  =>   b <= a
ROR_447:601:short_min(short,short,short): b < a  =>   b == a
ROR_448:601:short_min(short,short,short): b < a  =>   b != a
ROR_449:601:short_min(short,short,short): b < a  =>   true
ROR_450:601:short_min(short,short,short): b < a  =>   false
ROR_451:604:short_min(short,short,short): c < a  =>   c > a
ROR_452:604:short_min(short,short,short): c < a  =>   c >= a
ROR_453:604:short_min(short,short,short): c < a  =>   c <= a
ROR_454:604:short_min(short,short,short): c < a  =>   c == a
ROR_455:604:short_min(short,short,short): c < a  =>   c != a
ROR_456:604:short_min(short,short,short): c < a  =>   true
ROR_457:604:short_min(short,short,short): c < a  =>   false
ROR_458:612:byte_min(byte,byte,byte): b < a  =>   b > a
ROR_459:612:byte_min(byte,byte,byte): b < a  =>   b >= a
ROR_460:612:byte_min(byte,byte,byte): b < a  =>   b <= a
ROR_461:612:byte_min(byte,byte,byte): b < a  =>   b == a
ROR_462:612:byte_min(byte,byte,byte): b < a  =>   b != a
ROR_463:612:byte_min(byte,byte,byte): b < a  =>   true
ROR_464:612:byte_min(byte,byte,byte): b < a  =>   false
ROR_465:615:byte_min(byte,byte,byte): c < a  =>   c > a
ROR_466:615:byte_min(byte,byte,byte): c < a  =>   c >= a
ROR_467:615:byte_min(byte,byte,byte): c < a  =>   c <= a
ROR_468:615:byte_min(byte,byte,byte): c < a  =>   c == a
ROR_469:615:byte_min(byte,byte,byte): c < a  =>   c != a
ROR_470:615:byte_min(byte,byte,byte): c < a  =>   true
ROR_471:615:byte_min(byte,byte,byte): c < a  =>   false
ROR_472:633:long_max(long,long,long): b > a  =>   b >= a
ROR_473:633:long_max(long,long,long): b > a  =>   b < a
ROR_474:633:long_max(long,long,long): b > a  =>   b <= a
ROR_475:633:long_max(long,long,long): b > a  =>   b == a
ROR_476:633:long_max(long,long,long): b > a  =>   b != a
ROR_477:633:long_max(long,long,long): b > a  =>   true
ROR_478:633:long_max(long,long,long): b > a  =>   false
ROR_479:636:long_max(long,long,long): c > a  =>   c >= a
ROR_480:636:long_max(long,long,long): c > a  =>   c < a
ROR_481:636:long_max(long,long,long): c > a  =>   c <= a
ROR_482:636:long_max(long,long,long): c > a  =>   c == a
ROR_483:636:long_max(long,long,long): c > a  =>   c != a
ROR_484:636:long_max(long,long,long): c > a  =>   true
ROR_485:636:long_max(long,long,long): c > a  =>   false
ROR_486:644:int_max(int,int,int): b > a  =>   b >= a
ROR_487:644:int_max(int,int,int): b > a  =>   b < a
ROR_488:644:int_max(int,int,int): b > a  =>   b <= a
ROR_489:644:int_max(int,int,int): b > a  =>   b == a
ROR_490:644:int_max(int,int,int): b > a  =>   b != a
ROR_491:644:int_max(int,int,int): b > a  =>   true
ROR_492:644:int_max(int,int,int): b > a  =>   false
ROR_493:647:int_max(int,int,int): c > a  =>   c >= a
ROR_494:647:int_max(int,int,int): c > a  =>   c < a
ROR_495:647:int_max(int,int,int): c > a  =>   c <= a
ROR_496:647:int_max(int,int,int): c > a  =>   c == a
ROR_497:647:int_max(int,int,int): c > a  =>   c != a
ROR_498:647:int_max(int,int,int): c > a  =>   true
ROR_499:647:int_max(int,int,int): c > a  =>   false
ROR_500:655:short_max(short,short,short): b > a  =>   b >= a
ROR_501:655:short_max(short,short,short): b > a  =>   b < a
ROR_502:655:short_max(short,short,short): b > a  =>   b <= a
ROR_503:655:short_max(short,short,short): b > a  =>   b == a
ROR_504:655:short_max(short,short,short): b > a  =>   b != a
ROR_505:655:short_max(short,short,short): b > a  =>   true
ROR_506:655:short_max(short,short,short): b > a  =>   false
ROR_507:658:short_max(short,short,short): c > a  =>   c >= a
ROR_508:658:short_max(short,short,short): c > a  =>   c < a
ROR_509:658:short_max(short,short,short): c > a  =>   c <= a
ROR_510:658:short_max(short,short,short): c > a  =>   c == a
ROR_511:658:short_max(short,short,short): c > a  =>   c != a
ROR_512:658:short_max(short,short,short): c > a  =>   true
ROR_513:658:short_max(short,short,short): c > a  =>   false
ROR_514:666:byte_max(byte,byte,byte): b > a  =>   b >= a
ROR_515:666:byte_max(byte,byte,byte): b > a  =>   b < a
ROR_516:666:byte_max(byte,byte,byte): b > a  =>   b <= a
ROR_517:666:byte_max(byte,byte,byte): b > a  =>   b == a
ROR_518:666:byte_max(byte,byte,byte): b > a  =>   b != a
ROR_519:666:byte_max(byte,byte,byte): b > a  =>   true
ROR_520:666:byte_max(byte,byte,byte): b > a  =>   false
ROR_521:669:byte_max(byte,byte,byte): c > a  =>   c >= a
ROR_522:669:byte_max(byte,byte,byte): c > a  =>   c < a
ROR_523:669:byte_max(byte,byte,byte): c > a  =>   c <= a
ROR_524:669:byte_max(byte,byte,byte): c > a  =>   c == a
ROR_525:669:byte_max(byte,byte,byte): c > a  =>   c != a
ROR_526:669:byte_max(byte,byte,byte): c > a  =>   true
ROR_527:669:byte_max(byte,byte,byte): c > a  =>   false
ROR_528:690:boolean_isDigits(java.lang.String): i < str.length()  =>   i > str.length()
ROR_529:690:boolean_isDigits(java.lang.String): i < str.length()  =>   i >= str.length()
ROR_530:690:boolean_isDigits(java.lang.String): i < str.length()  =>   i <= str.length()
ROR_531:690:boolean_isDigits(java.lang.String): i < str.length()  =>   i == str.length()
ROR_532:690:boolean_isDigits(java.lang.String): i < str.length()  =>   i != str.length()
ROR_533:690:boolean_isDigits(java.lang.String): i < str.length()  =>   true
ROR_534:690:boolean_isDigits(java.lang.String): i < str.length()  =>   false
ROR_535:709:boolean_isNumber(java.lang.String): chars[0] == '-'  =>   chars[0] > '-'
ROR_536:709:boolean_isNumber(java.lang.String): chars[0] == '-'  =>   chars[0] >= '-'
ROR_537:709:boolean_isNumber(java.lang.String): chars[0] == '-'  =>   chars[0] < '-'
ROR_538:709:boolean_isNumber(java.lang.String): chars[0] == '-'  =>   chars[0] <= '-'
ROR_539:709:boolean_isNumber(java.lang.String): chars[0] == '-'  =>   chars[0] != '-'
ROR_540:709:boolean_isNumber(java.lang.String): chars[0] == '-'  =>   true
ROR_541:709:boolean_isNumber(java.lang.String): chars[0] == '-'  =>   false
ROR_542:710:boolean_isNumber(java.lang.String): sz > start + 1  =>   sz >= start + 1
ROR_543:710:boolean_isNumber(java.lang.String): sz > start + 1  =>   sz < start + 1
ROR_544:710:boolean_isNumber(java.lang.String): sz > start + 1  =>   sz <= start + 1
ROR_545:710:boolean_isNumber(java.lang.String): sz > start + 1  =>   sz == start + 1
ROR_546:710:boolean_isNumber(java.lang.String): sz > start + 1  =>   sz != start + 1
ROR_547:710:boolean_isNumber(java.lang.String): sz > start + 1  =>   true
ROR_548:710:boolean_isNumber(java.lang.String): sz > start + 1  =>   false
ROR_549:710:boolean_isNumber(java.lang.String): chars[start] == '0'  =>   chars[start] > '0'
ROR_550:710:boolean_isNumber(java.lang.String): chars[start] == '0'  =>   chars[start] >= '0'
ROR_551:710:boolean_isNumber(java.lang.String): chars[start] == '0'  =>   chars[start] < '0'
ROR_552:710:boolean_isNumber(java.lang.String): chars[start] == '0'  =>   chars[start] <= '0'
ROR_553:710:boolean_isNumber(java.lang.String): chars[start] == '0'  =>   chars[start] != '0'
ROR_554:710:boolean_isNumber(java.lang.String): chars[start] == '0'  =>   true
ROR_555:710:boolean_isNumber(java.lang.String): chars[start] == '0'  =>   false
ROR_556:710:boolean_isNumber(java.lang.String): chars[start + 1] == 'x'  =>   chars[start + 1] > 'x'
ROR_557:710:boolean_isNumber(java.lang.String): chars[start + 1] == 'x'  =>   chars[start + 1] >= 'x'
ROR_558:710:boolean_isNumber(java.lang.String): chars[start + 1] == 'x'  =>   chars[start + 1] < 'x'
ROR_559:710:boolean_isNumber(java.lang.String): chars[start + 1] == 'x'  =>   chars[start + 1] <= 'x'
ROR_560:710:boolean_isNumber(java.lang.String): chars[start + 1] == 'x'  =>   chars[start + 1] != 'x'
ROR_561:710:boolean_isNumber(java.lang.String): chars[start + 1] == 'x'  =>   true
ROR_562:710:boolean_isNumber(java.lang.String): chars[start + 1] == 'x'  =>   false
ROR_563:712:boolean_isNumber(java.lang.String): i == sz  =>   i > sz
ROR_564:712:boolean_isNumber(java.lang.String): i == sz  =>   i >= sz
ROR_565:712:boolean_isNumber(java.lang.String): i == sz  =>   i < sz
ROR_566:712:boolean_isNumber(java.lang.String): i == sz  =>   i <= sz
ROR_567:712:boolean_isNumber(java.lang.String): i == sz  =>   i != sz
ROR_568:712:boolean_isNumber(java.lang.String): i == sz  =>   true
ROR_569:712:boolean_isNumber(java.lang.String): i == sz  =>   false
ROR_570:715:boolean_isNumber(java.lang.String): i < chars.length  =>   i > chars.length
ROR_571:715:boolean_isNumber(java.lang.String): i < chars.length  =>   i >= chars.length
ROR_572:715:boolean_isNumber(java.lang.String): i < chars.length  =>   i <= chars.length
ROR_573:715:boolean_isNumber(java.lang.String): i < chars.length  =>   i == chars.length
ROR_574:715:boolean_isNumber(java.lang.String): i < chars.length  =>   i != chars.length
ROR_575:715:boolean_isNumber(java.lang.String): i < chars.length  =>   true
ROR_576:715:boolean_isNumber(java.lang.String): i < chars.length  =>   false
ROR_577:716:boolean_isNumber(java.lang.String): chars[i] < '0'  =>   chars[i] > '0'
ROR_578:716:boolean_isNumber(java.lang.String): chars[i] < '0'  =>   chars[i] >= '0'
ROR_579:716:boolean_isNumber(java.lang.String): chars[i] < '0'  =>   chars[i] <= '0'
ROR_580:716:boolean_isNumber(java.lang.String): chars[i] < '0'  =>   chars[i] == '0'
ROR_581:716:boolean_isNumber(java.lang.String): chars[i] < '0'  =>   chars[i] != '0'
ROR_582:716:boolean_isNumber(java.lang.String): chars[i] < '0'  =>   true
ROR_583:716:boolean_isNumber(java.lang.String): chars[i] < '0'  =>   false
ROR_584:716:boolean_isNumber(java.lang.String): chars[i] > '9'  =>   chars[i] >= '9'
ROR_585:716:boolean_isNumber(java.lang.String): chars[i] > '9'  =>   chars[i] < '9'
ROR_586:716:boolean_isNumber(java.lang.String): chars[i] > '9'  =>   chars[i] <= '9'
ROR_587:716:boolean_isNumber(java.lang.String): chars[i] > '9'  =>   chars[i] == '9'
ROR_588:716:boolean_isNumber(java.lang.String): chars[i] > '9'  =>   chars[i] != '9'
ROR_589:716:boolean_isNumber(java.lang.String): chars[i] > '9'  =>   true
ROR_590:716:boolean_isNumber(java.lang.String): chars[i] > '9'  =>   false
ROR_591:716:boolean_isNumber(java.lang.String): chars[i] < 'a'  =>   chars[i] > 'a'
ROR_592:716:boolean_isNumber(java.lang.String): chars[i] < 'a'  =>   chars[i] >= 'a'
ROR_593:716:boolean_isNumber(java.lang.String): chars[i] < 'a'  =>   chars[i] <= 'a'
ROR_594:716:boolean_isNumber(java.lang.String): chars[i] < 'a'  =>   chars[i] == 'a'
ROR_595:716:boolean_isNumber(java.lang.String): chars[i] < 'a'  =>   chars[i] != 'a'
ROR_596:716:boolean_isNumber(java.lang.String): chars[i] < 'a'  =>   true
ROR_597:716:boolean_isNumber(java.lang.String): chars[i] < 'a'  =>   false
ROR_598:716:boolean_isNumber(java.lang.String): chars[i] > 'f'  =>   chars[i] >= 'f'
ROR_599:716:boolean_isNumber(java.lang.String): chars[i] > 'f'  =>   chars[i] < 'f'
ROR_600:716:boolean_isNumber(java.lang.String): chars[i] > 'f'  =>   chars[i] <= 'f'
ROR_601:716:boolean_isNumber(java.lang.String): chars[i] > 'f'  =>   chars[i] == 'f'
ROR_602:716:boolean_isNumber(java.lang.String): chars[i] > 'f'  =>   chars[i] != 'f'
ROR_603:716:boolean_isNumber(java.lang.String): chars[i] > 'f'  =>   true
ROR_604:716:boolean_isNumber(java.lang.String): chars[i] > 'f'  =>   false
ROR_605:716:boolean_isNumber(java.lang.String): chars[i] < 'A'  =>   chars[i] > 'A'
ROR_606:716:boolean_isNumber(java.lang.String): chars[i] < 'A'  =>   chars[i] >= 'A'
ROR_607:716:boolean_isNumber(java.lang.String): chars[i] < 'A'  =>   chars[i] <= 'A'
ROR_608:716:boolean_isNumber(java.lang.String): chars[i] < 'A'  =>   chars[i] == 'A'
ROR_609:716:boolean_isNumber(java.lang.String): chars[i] < 'A'  =>   chars[i] != 'A'
ROR_610:716:boolean_isNumber(java.lang.String): chars[i] < 'A'  =>   true
ROR_611:716:boolean_isNumber(java.lang.String): chars[i] < 'A'  =>   false
ROR_612:716:boolean_isNumber(java.lang.String): chars[i] > 'F'  =>   chars[i] >= 'F'
ROR_613:716:boolean_isNumber(java.lang.String): chars[i] > 'F'  =>   chars[i] < 'F'
ROR_614:716:boolean_isNumber(java.lang.String): chars[i] > 'F'  =>   chars[i] <= 'F'
ROR_615:716:boolean_isNumber(java.lang.String): chars[i] > 'F'  =>   chars[i] == 'F'
ROR_616:716:boolean_isNumber(java.lang.String): chars[i] > 'F'  =>   chars[i] != 'F'
ROR_617:716:boolean_isNumber(java.lang.String): chars[i] > 'F'  =>   true
ROR_618:716:boolean_isNumber(java.lang.String): chars[i] > 'F'  =>   false
ROR_619:724:boolean_isNumber(java.lang.String): i < sz  =>   i > sz
ROR_620:724:boolean_isNumber(java.lang.String): i < sz  =>   i >= sz
ROR_621:724:boolean_isNumber(java.lang.String): i < sz  =>   i <= sz
ROR_622:724:boolean_isNumber(java.lang.String): i < sz  =>   i == sz
ROR_623:724:boolean_isNumber(java.lang.String): i < sz  =>   i != sz
ROR_624:724:boolean_isNumber(java.lang.String): i < sz  =>   true
ROR_625:724:boolean_isNumber(java.lang.String): i < sz  =>   false
ROR_626:724:boolean_isNumber(java.lang.String): i < sz + 1  =>   i > sz + 1
ROR_627:724:boolean_isNumber(java.lang.String): i < sz + 1  =>   i >= sz + 1
ROR_628:724:boolean_isNumber(java.lang.String): i < sz + 1  =>   i <= sz + 1
ROR_629:724:boolean_isNumber(java.lang.String): i < sz + 1  =>   i == sz + 1
ROR_630:724:boolean_isNumber(java.lang.String): i < sz + 1  =>   i != sz + 1
ROR_631:724:boolean_isNumber(java.lang.String): i < sz + 1  =>   true
ROR_632:724:boolean_isNumber(java.lang.String): i < sz + 1  =>   false
ROR_633:725:boolean_isNumber(java.lang.String): chars[i] >= '0'  =>   chars[i] > '0'
ROR_634:725:boolean_isNumber(java.lang.String): chars[i] >= '0'  =>   chars[i] < '0'
ROR_635:725:boolean_isNumber(java.lang.String): chars[i] >= '0'  =>   chars[i] <= '0'
ROR_636:725:boolean_isNumber(java.lang.String): chars[i] >= '0'  =>   chars[i] == '0'
ROR_637:725:boolean_isNumber(java.lang.String): chars[i] >= '0'  =>   chars[i] != '0'
ROR_638:725:boolean_isNumber(java.lang.String): chars[i] >= '0'  =>   true
ROR_639:725:boolean_isNumber(java.lang.String): chars[i] >= '0'  =>   false
ROR_640:725:boolean_isNumber(java.lang.String): chars[i] <= '9'  =>   chars[i] > '9'
ROR_641:725:boolean_isNumber(java.lang.String): chars[i] <= '9'  =>   chars[i] >= '9'
ROR_642:725:boolean_isNumber(java.lang.String): chars[i] <= '9'  =>   chars[i] < '9'
ROR_643:725:boolean_isNumber(java.lang.String): chars[i] <= '9'  =>   chars[i] == '9'
ROR_644:725:boolean_isNumber(java.lang.String): chars[i] <= '9'  =>   chars[i] != '9'
ROR_645:725:boolean_isNumber(java.lang.String): chars[i] <= '9'  =>   true
ROR_646:725:boolean_isNumber(java.lang.String): chars[i] <= '9'  =>   false
ROR_647:729:boolean_isNumber(java.lang.String): chars[i] == '.'  =>   chars[i] > '.'
ROR_648:729:boolean_isNumber(java.lang.String): chars[i] == '.'  =>   chars[i] >= '.'
ROR_649:729:boolean_isNumber(java.lang.String): chars[i] == '.'  =>   chars[i] < '.'
ROR_650:729:boolean_isNumber(java.lang.String): chars[i] == '.'  =>   chars[i] <= '.'
ROR_651:729:boolean_isNumber(java.lang.String): chars[i] == '.'  =>   chars[i] != '.'
ROR_652:729:boolean_isNumber(java.lang.String): chars[i] == '.'  =>   true
ROR_653:729:boolean_isNumber(java.lang.String): chars[i] == '.'  =>   false
ROR_654:735:boolean_isNumber(java.lang.String): chars[i] == 'e'  =>   chars[i] > 'e'
ROR_655:735:boolean_isNumber(java.lang.String): chars[i] == 'e'  =>   chars[i] >= 'e'
ROR_656:735:boolean_isNumber(java.lang.String): chars[i] == 'e'  =>   chars[i] < 'e'
ROR_657:735:boolean_isNumber(java.lang.String): chars[i] == 'e'  =>   chars[i] <= 'e'
ROR_658:735:boolean_isNumber(java.lang.String): chars[i] == 'e'  =>   chars[i] != 'e'
ROR_659:735:boolean_isNumber(java.lang.String): chars[i] == 'e'  =>   true
ROR_660:735:boolean_isNumber(java.lang.String): chars[i] == 'e'  =>   false
ROR_661:735:boolean_isNumber(java.lang.String): chars[i] == 'E'  =>   chars[i] > 'E'
ROR_662:735:boolean_isNumber(java.lang.String): chars[i] == 'E'  =>   chars[i] >= 'E'
ROR_663:735:boolean_isNumber(java.lang.String): chars[i] == 'E'  =>   chars[i] < 'E'
ROR_664:735:boolean_isNumber(java.lang.String): chars[i] == 'E'  =>   chars[i] <= 'E'
ROR_665:735:boolean_isNumber(java.lang.String): chars[i] == 'E'  =>   chars[i] != 'E'
ROR_666:735:boolean_isNumber(java.lang.String): chars[i] == 'E'  =>   true
ROR_667:735:boolean_isNumber(java.lang.String): chars[i] == 'E'  =>   false
ROR_668:745:boolean_isNumber(java.lang.String): chars[i] == '+'  =>   chars[i] > '+'
ROR_669:745:boolean_isNumber(java.lang.String): chars[i] == '+'  =>   chars[i] >= '+'
ROR_670:745:boolean_isNumber(java.lang.String): chars[i] == '+'  =>   chars[i] < '+'
ROR_671:745:boolean_isNumber(java.lang.String): chars[i] == '+'  =>   chars[i] <= '+'
ROR_672:745:boolean_isNumber(java.lang.String): chars[i] == '+'  =>   chars[i] != '+'
ROR_673:745:boolean_isNumber(java.lang.String): chars[i] == '+'  =>   true
ROR_674:745:boolean_isNumber(java.lang.String): chars[i] == '+'  =>   false
ROR_675:745:boolean_isNumber(java.lang.String): chars[i] == '-'  =>   chars[i] > '-'
ROR_676:745:boolean_isNumber(java.lang.String): chars[i] == '-'  =>   chars[i] >= '-'
ROR_677:745:boolean_isNumber(java.lang.String): chars[i] == '-'  =>   chars[i] < '-'
ROR_678:745:boolean_isNumber(java.lang.String): chars[i] == '-'  =>   chars[i] <= '-'
ROR_679:745:boolean_isNumber(java.lang.String): chars[i] == '-'  =>   chars[i] != '-'
ROR_680:745:boolean_isNumber(java.lang.String): chars[i] == '-'  =>   true
ROR_681:745:boolean_isNumber(java.lang.String): chars[i] == '-'  =>   false
ROR_682:759:boolean_isNumber(java.lang.String): i < chars.length  =>   i > chars.length
ROR_683:759:boolean_isNumber(java.lang.String): i < chars.length  =>   i >= chars.length
ROR_684:759:boolean_isNumber(java.lang.String): i < chars.length  =>   i <= chars.length
ROR_685:759:boolean_isNumber(java.lang.String): i < chars.length  =>   i == chars.length
ROR_686:759:boolean_isNumber(java.lang.String): i < chars.length  =>   i != chars.length
ROR_687:759:boolean_isNumber(java.lang.String): i < chars.length  =>   true
ROR_688:759:boolean_isNumber(java.lang.String): i < chars.length  =>   false
ROR_689:760:boolean_isNumber(java.lang.String): chars[i] >= '0'  =>   chars[i] > '0'
ROR_690:760:boolean_isNumber(java.lang.String): chars[i] >= '0'  =>   chars[i] < '0'
ROR_691:760:boolean_isNumber(java.lang.String): chars[i] >= '0'  =>   chars[i] <= '0'
ROR_692:760:boolean_isNumber(java.lang.String): chars[i] >= '0'  =>   chars[i] == '0'
ROR_693:760:boolean_isNumber(java.lang.String): chars[i] >= '0'  =>   chars[i] != '0'
ROR_694:760:boolean_isNumber(java.lang.String): chars[i] >= '0'  =>   true
ROR_695:760:boolean_isNumber(java.lang.String): chars[i] >= '0'  =>   false
ROR_696:760:boolean_isNumber(java.lang.String): chars[i] <= '9'  =>   chars[i] > '9'
ROR_697:760:boolean_isNumber(java.lang.String): chars[i] <= '9'  =>   chars[i] >= '9'
ROR_698:760:boolean_isNumber(java.lang.String): chars[i] <= '9'  =>   chars[i] < '9'
ROR_699:760:boolean_isNumber(java.lang.String): chars[i] <= '9'  =>   chars[i] == '9'
ROR_700:760:boolean_isNumber(java.lang.String): chars[i] <= '9'  =>   chars[i] != '9'
ROR_701:760:boolean_isNumber(java.lang.String): chars[i] <= '9'  =>   true
ROR_702:760:boolean_isNumber(java.lang.String): chars[i] <= '9'  =>   false
ROR_703:763:boolean_isNumber(java.lang.String): chars[i] == 'e'  =>   chars[i] > 'e'
ROR_704:763:boolean_isNumber(java.lang.String): chars[i] == 'e'  =>   chars[i] >= 'e'
ROR_705:763:boolean_isNumber(java.lang.String): chars[i] == 'e'  =>   chars[i] < 'e'
ROR_706:763:boolean_isNumber(java.lang.String): chars[i] == 'e'  =>   chars[i] <= 'e'
ROR_707:763:boolean_isNumber(java.lang.String): chars[i] == 'e'  =>   chars[i] != 'e'
ROR_708:763:boolean_isNumber(java.lang.String): chars[i] == 'e'  =>   true
ROR_709:763:boolean_isNumber(java.lang.String): chars[i] == 'e'  =>   false
ROR_710:763:boolean_isNumber(java.lang.String): chars[i] == 'E'  =>   chars[i] > 'E'
ROR_711:763:boolean_isNumber(java.lang.String): chars[i] == 'E'  =>   chars[i] >= 'E'
ROR_712:763:boolean_isNumber(java.lang.String): chars[i] == 'E'  =>   chars[i] < 'E'
ROR_713:763:boolean_isNumber(java.lang.String): chars[i] == 'E'  =>   chars[i] <= 'E'
ROR_714:763:boolean_isNumber(java.lang.String): chars[i] == 'E'  =>   chars[i] != 'E'
ROR_715:763:boolean_isNumber(java.lang.String): chars[i] == 'E'  =>   true
ROR_716:763:boolean_isNumber(java.lang.String): chars[i] == 'E'  =>   false
ROR_717:766:boolean_isNumber(java.lang.String): chars[i] == '.'  =>   chars[i] > '.'
ROR_718:766:boolean_isNumber(java.lang.String): chars[i] == '.'  =>   chars[i] >= '.'
ROR_719:766:boolean_isNumber(java.lang.String): chars[i] == '.'  =>   chars[i] < '.'
ROR_720:766:boolean_isNumber(java.lang.String): chars[i] == '.'  =>   chars[i] <= '.'
ROR_721:766:boolean_isNumber(java.lang.String): chars[i] == '.'  =>   chars[i] != '.'
ROR_722:766:boolean_isNumber(java.lang.String): chars[i] == '.'  =>   true
ROR_723:766:boolean_isNumber(java.lang.String): chars[i] == '.'  =>   false
ROR_724:772:boolean_isNumber(java.lang.String): chars[i] == 'd'  =>   chars[i] > 'd'
ROR_725:772:boolean_isNumber(java.lang.String): chars[i] == 'd'  =>   chars[i] >= 'd'
ROR_726:772:boolean_isNumber(java.lang.String): chars[i] == 'd'  =>   chars[i] < 'd'
ROR_727:772:boolean_isNumber(java.lang.String): chars[i] == 'd'  =>   chars[i] <= 'd'
ROR_728:772:boolean_isNumber(java.lang.String): chars[i] == 'd'  =>   chars[i] != 'd'
ROR_729:772:boolean_isNumber(java.lang.String): chars[i] == 'd'  =>   true
ROR_730:772:boolean_isNumber(java.lang.String): chars[i] == 'd'  =>   false
ROR_731:772:boolean_isNumber(java.lang.String): chars[i] == 'D'  =>   chars[i] > 'D'
ROR_732:772:boolean_isNumber(java.lang.String): chars[i] == 'D'  =>   chars[i] >= 'D'
ROR_733:772:boolean_isNumber(java.lang.String): chars[i] == 'D'  =>   chars[i] < 'D'
ROR_734:772:boolean_isNumber(java.lang.String): chars[i] == 'D'  =>   chars[i] <= 'D'
ROR_735:772:boolean_isNumber(java.lang.String): chars[i] == 'D'  =>   chars[i] != 'D'
ROR_736:772:boolean_isNumber(java.lang.String): chars[i] == 'D'  =>   true
ROR_737:772:boolean_isNumber(java.lang.String): chars[i] == 'D'  =>   false
ROR_738:772:boolean_isNumber(java.lang.String): chars[i] == 'f'  =>   chars[i] > 'f'
ROR_739:772:boolean_isNumber(java.lang.String): chars[i] == 'f'  =>   chars[i] >= 'f'
ROR_740:772:boolean_isNumber(java.lang.String): chars[i] == 'f'  =>   chars[i] < 'f'
ROR_741:772:boolean_isNumber(java.lang.String): chars[i] == 'f'  =>   chars[i] <= 'f'
ROR_742:772:boolean_isNumber(java.lang.String): chars[i] == 'f'  =>   chars[i] != 'f'
ROR_743:772:boolean_isNumber(java.lang.String): chars[i] == 'f'  =>   true
ROR_744:772:boolean_isNumber(java.lang.String): chars[i] == 'f'  =>   false
ROR_745:772:boolean_isNumber(java.lang.String): chars[i] == 'F'  =>   chars[i] > 'F'
ROR_746:772:boolean_isNumber(java.lang.String): chars[i] == 'F'  =>   chars[i] >= 'F'
ROR_747:772:boolean_isNumber(java.lang.String): chars[i] == 'F'  =>   chars[i] < 'F'
ROR_748:772:boolean_isNumber(java.lang.String): chars[i] == 'F'  =>   chars[i] <= 'F'
ROR_749:772:boolean_isNumber(java.lang.String): chars[i] == 'F'  =>   chars[i] != 'F'
ROR_750:772:boolean_isNumber(java.lang.String): chars[i] == 'F'  =>   true
ROR_751:772:boolean_isNumber(java.lang.String): chars[i] == 'F'  =>   false
ROR_752:775:boolean_isNumber(java.lang.String): chars[i] == 'l'  =>   chars[i] > 'l'
ROR_753:775:boolean_isNumber(java.lang.String): chars[i] == 'l'  =>   chars[i] >= 'l'
ROR_754:775:boolean_isNumber(java.lang.String): chars[i] == 'l'  =>   chars[i] < 'l'
ROR_755:775:boolean_isNumber(java.lang.String): chars[i] == 'l'  =>   chars[i] <= 'l'
ROR_756:775:boolean_isNumber(java.lang.String): chars[i] == 'l'  =>   chars[i] != 'l'
ROR_757:775:boolean_isNumber(java.lang.String): chars[i] == 'l'  =>   true
ROR_758:775:boolean_isNumber(java.lang.String): chars[i] == 'l'  =>   false
ROR_759:775:boolean_isNumber(java.lang.String): chars[i] == 'L'  =>   chars[i] > 'L'
ROR_760:775:boolean_isNumber(java.lang.String): chars[i] == 'L'  =>   chars[i] >= 'L'
ROR_761:775:boolean_isNumber(java.lang.String): chars[i] == 'L'  =>   chars[i] < 'L'
ROR_762:775:boolean_isNumber(java.lang.String): chars[i] == 'L'  =>   chars[i] <= 'L'
ROR_763:775:boolean_isNumber(java.lang.String): chars[i] == 'L'  =>   chars[i] != 'L'
ROR_764:775:boolean_isNumber(java.lang.String): chars[i] == 'L'  =>   true
ROR_765:775:boolean_isNumber(java.lang.String): chars[i] == 'L'  =>   false
COR_1:170:java.lang.Number_createNumber(java.lang.String): str.startsWith( \"0x\" ) || str.startsWith( \"-0x\" )  =>   str.startsWith( \"0x\" ) && str.startsWith( \"-0x\" )
COR_2:170:java.lang.Number_createNumber(java.lang.String): str.startsWith( \"0x\" ) || str.startsWith( \"-0x\" )  =>   str.startsWith( \"0x\" ) ^ str.startsWith( \"-0x\" )
COR_3:181:java.lang.Number_createNumber(java.lang.String): expPos < decPos || expPos > str.length()  =>   expPos < decPos && expPos > str.length()
COR_4:181:java.lang.Number_createNumber(java.lang.String): expPos < decPos || expPos > str.length()  =>   expPos < decPos ^ expPos > str.length()
COR_5:200:java.lang.Number_createNumber(java.lang.String): !Character.isDigit( lastChar ) && lastChar != '.'  =>   !Character.isDigit( lastChar ) || lastChar != '.'
COR_6:200:java.lang.Number_createNumber(java.lang.String): !Character.isDigit( lastChar ) && lastChar != '.'  =>   !Character.isDigit( lastChar ) ^ lastChar != '.'
COR_7:201:java.lang.Number_createNumber(java.lang.String): expPos > -1 && expPos < str.length() - 1  =>   expPos > -1 || expPos < str.length() - 1
COR_8:201:java.lang.Number_createNumber(java.lang.String): expPos > -1 && expPos < str.length() - 1  =>   expPos > -1 ^ expPos < str.length() - 1
COR_9:207:java.lang.Number_createNumber(java.lang.String): isAllZeros( mant ) && isAllZeros( exp )  =>   isAllZeros( mant ) || isAllZeros( exp )
COR_10:207:java.lang.Number_createNumber(java.lang.String): isAllZeros( mant ) && isAllZeros( exp )  =>   isAllZeros( mant ) ^ isAllZeros( exp )
COR_11:211:java.lang.Number_createNumber(java.lang.String): dec == null && exp == null  =>   dec == null || exp == null
COR_12:211:java.lang.Number_createNumber(java.lang.String): dec == null && exp == null  =>   dec == null ^ exp == null
COR_13:211:java.lang.Number_createNumber(java.lang.String): numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) )  =>   numeric.charAt( 0 ) == '-' || isDigits( numeric.substring( 1 ) )
COR_14:211:java.lang.Number_createNumber(java.lang.String): numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) )  =>   numeric.charAt( 0 ) == '-' ^ isDigits( numeric.substring( 1 ) )
COR_15:211:java.lang.Number_createNumber(java.lang.String): numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric )  =>   numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) && isDigits( numeric )
COR_16:211:java.lang.Number_createNumber(java.lang.String): numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric )  =>   (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) )) ^ isDigits( numeric )
COR_17:211:java.lang.Number_createNumber(java.lang.String): dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))  =>   dec == null && exp == null || (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))
COR_18:211:java.lang.Number_createNumber(java.lang.String): dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))  =>   (dec == null && exp == null) ^ (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))
COR_19:224:java.lang.Number_createNumber(java.lang.String): f.floatValue() == 0.0F && !allZeros  =>   f.floatValue() == 0.0F || !allZeros
COR_20:224:java.lang.Number_createNumber(java.lang.String): f.floatValue() == 0.0F && !allZeros  =>   f.floatValue() == 0.0F ^ !allZeros
COR_21:224:java.lang.Number_createNumber(java.lang.String): f.isInfinite() || f.floatValue() == 0.0F && !allZeros  =>   f.isInfinite() && (f.floatValue() == 0.0F && !allZeros)
COR_22:224:java.lang.Number_createNumber(java.lang.String): f.isInfinite() || f.floatValue() == 0.0F && !allZeros  =>   f.isInfinite() ^ (f.floatValue() == 0.0F && !allZeros)
COR_23:234:java.lang.Number_createNumber(java.lang.String): d.floatValue() == 0.0D && !allZeros  =>   d.floatValue() == 0.0D || !allZeros
COR_24:234:java.lang.Number_createNumber(java.lang.String): d.floatValue() == 0.0D && !allZeros  =>   d.floatValue() == 0.0D ^ !allZeros
COR_25:234:java.lang.Number_createNumber(java.lang.String): d.isInfinite() || d.floatValue() == 0.0D && !allZeros  =>   d.isInfinite() && (d.floatValue() == 0.0D && !allZeros)
COR_26:234:java.lang.Number_createNumber(java.lang.String): d.isInfinite() || d.floatValue() == 0.0D && !allZeros  =>   d.isInfinite() ^ (d.floatValue() == 0.0D && !allZeros)
COR_27:249:java.lang.Number_createNumber(java.lang.String): expPos > -1 && expPos < str.length() - 1  =>   expPos > -1 || expPos < str.length() - 1
COR_28:249:java.lang.Number_createNumber(java.lang.String): expPos > -1 && expPos < str.length() - 1  =>   expPos > -1 ^ expPos < str.length() - 1
COR_29:254:java.lang.Number_createNumber(java.lang.String): dec == null && exp == null  =>   dec == null || exp == null
COR_30:254:java.lang.Number_createNumber(java.lang.String): dec == null && exp == null  =>   dec == null ^ exp == null
COR_31:265:java.lang.Number_createNumber(java.lang.String): isAllZeros( mant ) && isAllZeros( exp )  =>   isAllZeros( mant ) || isAllZeros( exp )
COR_32:265:java.lang.Number_createNumber(java.lang.String): isAllZeros( mant ) && isAllZeros( exp )  =>   isAllZeros( mant ) ^ isAllZeros( exp )
COR_33:268:java.lang.Number_createNumber(java.lang.String): f.floatValue() == 0.0F && !allZeros  =>   f.floatValue() == 0.0F || !allZeros
COR_34:268:java.lang.Number_createNumber(java.lang.String): f.floatValue() == 0.0F && !allZeros  =>   f.floatValue() == 0.0F ^ !allZeros
COR_35:268:java.lang.Number_createNumber(java.lang.String): f.isInfinite() || f.floatValue() == 0.0F && !allZeros  =>   f.isInfinite() && (f.floatValue() == 0.0F && !allZeros)
COR_36:268:java.lang.Number_createNumber(java.lang.String): f.isInfinite() || f.floatValue() == 0.0F && !allZeros  =>   f.isInfinite() ^ (f.floatValue() == 0.0F && !allZeros)
COR_37:275:java.lang.Number_createNumber(java.lang.String): d.doubleValue() == 0.0D && !allZeros  =>   d.doubleValue() == 0.0D || !allZeros
COR_38:275:java.lang.Number_createNumber(java.lang.String): d.doubleValue() == 0.0D && !allZeros  =>   d.doubleValue() == 0.0D ^ !allZeros
COR_39:275:java.lang.Number_createNumber(java.lang.String): d.isInfinite() || d.doubleValue() == 0.0D && !allZeros  =>   d.isInfinite() && (d.doubleValue() == 0.0D && !allZeros)
COR_40:275:java.lang.Number_createNumber(java.lang.String): d.isInfinite() || d.doubleValue() == 0.0D && !allZeros  =>   d.isInfinite() ^ (d.doubleValue() == 0.0D && !allZeros)
COR_41:710:boolean_isNumber(java.lang.String): sz > start + 1 && chars[start] == '0'  =>   sz > start + 1 || chars[start] == '0'
COR_42:710:boolean_isNumber(java.lang.String): sz > start + 1 && chars[start] == '0'  =>   sz > start + 1 ^ chars[start] == '0'
COR_43:710:boolean_isNumber(java.lang.String): sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x'  =>   sz > start + 1 && chars[start] == '0' || chars[start + 1] == 'x'
COR_44:710:boolean_isNumber(java.lang.String): sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x'  =>   (sz > start + 1 && chars[start] == '0') ^ chars[start + 1] == 'x'
COR_45:716:boolean_isNumber(java.lang.String): chars[i] < '0' || chars[i] > '9'  =>   chars[i] < '0' && chars[i] > '9'
COR_46:716:boolean_isNumber(java.lang.String): chars[i] < '0' || chars[i] > '9'  =>   chars[i] < '0' ^ chars[i] > '9'
COR_47:716:boolean_isNumber(java.lang.String): chars[i] < 'a' || chars[i] > 'f'  =>   chars[i] < 'a' && chars[i] > 'f'
COR_48:716:boolean_isNumber(java.lang.String): chars[i] < 'a' || chars[i] > 'f'  =>   chars[i] < 'a' ^ chars[i] > 'f'
COR_49:716:boolean_isNumber(java.lang.String): (chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f')  =>   chars[i] < '0' || chars[i] > '9' || (chars[i] < 'a' || chars[i] > 'f')
COR_50:716:boolean_isNumber(java.lang.String): (chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f')  =>   (chars[i] < '0' || chars[i] > '9') ^ (chars[i] < 'a' || chars[i] > 'f')
COR_51:716:boolean_isNumber(java.lang.String): chars[i] < 'A' || chars[i] > 'F'  =>   chars[i] < 'A' && chars[i] > 'F'
COR_52:716:boolean_isNumber(java.lang.String): chars[i] < 'A' || chars[i] > 'F'  =>   chars[i] < 'A' ^ chars[i] > 'F'
COR_53:716:boolean_isNumber(java.lang.String): (chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')  =>   (chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') || (chars[i] < 'A' || chars[i] > 'F')
COR_54:716:boolean_isNumber(java.lang.String): (chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')  =>   ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f')) ^ (chars[i] < 'A' || chars[i] > 'F')
COR_55:724:boolean_isNumber(java.lang.String): i < sz + 1 && allowSigns  =>   i < sz + 1 || allowSigns
COR_56:724:boolean_isNumber(java.lang.String): i < sz + 1 && allowSigns  =>   i < sz + 1 ^ allowSigns
COR_57:724:boolean_isNumber(java.lang.String): i < sz + 1 && allowSigns && !foundDigit  =>   i < sz + 1 && allowSigns || !foundDigit
COR_58:724:boolean_isNumber(java.lang.String): i < sz + 1 && allowSigns && !foundDigit  =>   (i < sz + 1 && allowSigns) ^ !foundDigit
COR_59:724:boolean_isNumber(java.lang.String): i < sz || i < sz + 1 && allowSigns && !foundDigit  =>   i < sz && (i < sz + 1 && allowSigns && !foundDigit)
COR_60:724:boolean_isNumber(java.lang.String): i < sz || i < sz + 1 && allowSigns && !foundDigit  =>   i < sz ^ (i < sz + 1 && allowSigns && !foundDigit)
COR_61:725:boolean_isNumber(java.lang.String): chars[i] >= '0' && chars[i] <= '9'  =>   chars[i] >= '0' || chars[i] <= '9'
COR_62:725:boolean_isNumber(java.lang.String): chars[i] >= '0' && chars[i] <= '9'  =>   chars[i] >= '0' ^ chars[i] <= '9'
COR_63:730:boolean_isNumber(java.lang.String): hasDecPoint || hasExp  =>   hasDecPoint && hasExp
COR_64:730:boolean_isNumber(java.lang.String): hasDecPoint || hasExp  =>   hasDecPoint ^ hasExp
COR_65:735:boolean_isNumber(java.lang.String): chars[i] == 'e' || chars[i] == 'E'  =>   chars[i] == 'e' && chars[i] == 'E'
COR_66:735:boolean_isNumber(java.lang.String): chars[i] == 'e' || chars[i] == 'E'  =>   chars[i] == 'e' ^ chars[i] == 'E'
COR_67:745:boolean_isNumber(java.lang.String): chars[i] == '+' || chars[i] == '-'  =>   chars[i] == '+' && chars[i] == '-'
COR_68:745:boolean_isNumber(java.lang.String): chars[i] == '+' || chars[i] == '-'  =>   chars[i] == '+' ^ chars[i] == '-'
COR_69:760:boolean_isNumber(java.lang.String): chars[i] >= '0' && chars[i] <= '9'  =>   chars[i] >= '0' || chars[i] <= '9'
COR_70:760:boolean_isNumber(java.lang.String): chars[i] >= '0' && chars[i] <= '9'  =>   chars[i] >= '0' ^ chars[i] <= '9'
COR_71:763:boolean_isNumber(java.lang.String): chars[i] == 'e' || chars[i] == 'E'  =>   chars[i] == 'e' && chars[i] == 'E'
COR_72:763:boolean_isNumber(java.lang.String): chars[i] == 'e' || chars[i] == 'E'  =>   chars[i] == 'e' ^ chars[i] == 'E'
COR_73:767:boolean_isNumber(java.lang.String): hasDecPoint || hasExp  =>   hasDecPoint && hasExp
COR_74:767:boolean_isNumber(java.lang.String): hasDecPoint || hasExp  =>   hasDecPoint ^ hasExp
COR_75:772:boolean_isNumber(java.lang.String): chars[i] == 'd' || chars[i] == 'D'  =>   chars[i] == 'd' && chars[i] == 'D'
COR_76:772:boolean_isNumber(java.lang.String): chars[i] == 'd' || chars[i] == 'D'  =>   chars[i] == 'd' ^ chars[i] == 'D'
COR_77:772:boolean_isNumber(java.lang.String): chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f'  =>   (chars[i] == 'd' || chars[i] == 'D') && chars[i] == 'f'
COR_78:772:boolean_isNumber(java.lang.String): chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f'  =>   (chars[i] == 'd' || chars[i] == 'D') ^ chars[i] == 'f'
COR_79:772:boolean_isNumber(java.lang.String): chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F'  =>   (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f') && chars[i] == 'F'
COR_80:772:boolean_isNumber(java.lang.String): chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F'  =>   (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f') ^ chars[i] == 'F'
COR_81:772:boolean_isNumber(java.lang.String): !allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')  =>   !allowSigns || (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')
COR_82:772:boolean_isNumber(java.lang.String): !allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')  =>   !allowSigns ^ (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')
COR_83:775:boolean_isNumber(java.lang.String): chars[i] == 'l' || chars[i] == 'L'  =>   chars[i] == 'l' && chars[i] == 'L'
COR_84:775:boolean_isNumber(java.lang.String): chars[i] == 'l' || chars[i] == 'L'  =>   chars[i] == 'l' ^ chars[i] == 'L'
COR_85:776:boolean_isNumber(java.lang.String): foundDigit && !hasExp  =>   foundDigit || !hasExp
COR_86:776:boolean_isNumber(java.lang.String): foundDigit && !hasExp  =>   foundDigit ^ !hasExp
COR_87:776:boolean_isNumber(java.lang.String): foundDigit && !hasExp && !hasDecPoint  =>   foundDigit && !hasExp || !hasDecPoint
COR_88:776:boolean_isNumber(java.lang.String): foundDigit && !hasExp && !hasDecPoint  =>   (foundDigit && !hasExp) ^ !hasDecPoint
COR_89:780:boolean_isNumber(java.lang.String): !allowSigns && foundDigit  =>   !allowSigns || foundDigit
COR_90:780:boolean_isNumber(java.lang.String): !allowSigns && foundDigit  =>   !allowSigns ^ foundDigit
SDL_1:59:int_toInt(java.lang.String): return toInt( str, 0 );  =>   return 0;
SDL_2:68:int_toInt(java.lang.String,int): if (str == null) {     return defaultValue; } try {     return Integer.parseInt( str ); } catch ( java.lang.NumberFormatException nfe ) {     return defaultValue; }  =>   try {     return Integer.parseInt( str ); } catch ( java.lang.NumberFormatException nfe ) {     return defaultValue; }
SDL_3:66:int_toInt(java.lang.String,int): if (str == null) {     return defaultValue; }  =>   if (true) {     return defaultValue; }
SDL_4:65:int_toInt(java.lang.String,int): return defaultValue;  =>   return 0;
SDL_5:68:int_toInt(java.lang.String,int): return Integer.parseInt( str );  =>   return 0;
SDL_6:76:long_toLong(java.lang.String): return toLong( str, 0L );  =>   return 0;
SDL_7:85:long_toLong(java.lang.String,long): if (str == null) {     return defaultValue; } try {     return Long.parseLong( str ); } catch ( java.lang.NumberFormatException nfe ) {     return defaultValue; }  =>   try {     return Long.parseLong( str ); } catch ( java.lang.NumberFormatException nfe ) {     return defaultValue; }
SDL_8:83:long_toLong(java.lang.String,long): if (str == null) {     return defaultValue; }  =>   if (true) {     return defaultValue; }
SDL_9:82:long_toLong(java.lang.String,long): return defaultValue;  =>   return 0;
SDL_10:85:long_toLong(java.lang.String,long): return Long.parseLong( str );  =>   return 0;
SDL_11:93:float_toFloat(java.lang.String): return toFloat( str, 0.0f );  =>   return 0;
SDL_12:102:float_toFloat(java.lang.String,float): if (str == null) {     return defaultValue; } try {     return Float.parseFloat( str ); } catch ( java.lang.NumberFormatException nfe ) {     return defaultValue; }  =>   try {     return Float.parseFloat( str ); } catch ( java.lang.NumberFormatException nfe ) {     return defaultValue; }
SDL_13:100:float_toFloat(java.lang.String,float): if (str == null) {     return defaultValue; }  =>   if (true) {     return defaultValue; }
SDL_14:99:float_toFloat(java.lang.String,float): return defaultValue;  =>   return 0;
SDL_15:102:float_toFloat(java.lang.String,float): return Float.parseFloat( str );  =>   return 0;
SDL_16:110:double_toDouble(java.lang.String): return toDouble( str, 0.0d );  =>   return 0;
SDL_17:119:double_toDouble(java.lang.String,double): if (str == null) {     return defaultValue; } try {     return Double.parseDouble( str ); } catch ( java.lang.NumberFormatException nfe ) {     return defaultValue; }  =>   try {     return Double.parseDouble( str ); } catch ( java.lang.NumberFormatException nfe ) {     return defaultValue; }
SDL_18:117:double_toDouble(java.lang.String,double): if (str == null) {     return defaultValue; }  =>   if (true) {     return defaultValue; }
SDL_19:116:double_toDouble(java.lang.String,double): return defaultValue;  =>   return 0;
SDL_20:119:double_toDouble(java.lang.String,double): return Double.parseDouble( str );  =>   return 0;
SDL_21:136:byte_toByte(java.lang.String,byte): if (str == null) {     return defaultValue; } try {     return Byte.parseByte( str ); } catch ( java.lang.NumberFormatException nfe ) {     return defaultValue; }  =>   try {     return Byte.parseByte( str ); } catch ( java.lang.NumberFormatException nfe ) {     return defaultValue; }
SDL_22:134:byte_toByte(java.lang.String,byte): if (str == null) {     return defaultValue; }  =>   if (true) {     return defaultValue; }
SDL_23:144:short_toShort(java.lang.String): return toShort( str, (short) 0 );  =>   return 0;
SDL_24:153:short_toShort(java.lang.String,short): if (str == null) {     return defaultValue; } try {     return Short.parseShort( str ); } catch ( java.lang.NumberFormatException nfe ) {     return defaultValue; }  =>   try {     return Short.parseShort( str ); } catch ( java.lang.NumberFormatException nfe ) {     return defaultValue; }
SDL_25:151:short_toShort(java.lang.String,short): if (str == null) {     return defaultValue; }  =>   if (true) {     return defaultValue; }
SDL_26:150:short_toShort(java.lang.String,short): return defaultValue;  =>   return 0;
SDL_27:153:short_toShort(java.lang.String,short): return Short.parseShort( str );  =>   return 0;
SDL_28:280:java.lang.Number_createNumber(java.lang.String): if (str == null) {     return null; } if (StringUtils.isBlank( str )) {     throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" ); } if (str.startsWith( \"--\" )) {     return null; } if (str.startsWith( \"0x\" ) || str.startsWith( \"-0x\" )) {     return createInteger( str ); } char lastChar = str.charAt( str.length() - 1 ); java.lang.String mant; java.lang.String dec; java.lang.String exp; int decPos = str.indexOf( '.' ); int expPos = str.indexOf( 'e' ) + str.indexOf( 'E' ) + 1; if (decPos > -1) {     if (expPos > -1) {         if (expPos < decPos || expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         dec = str.substring( decPos + 1, expPos );     } else {         dec = str.substring( decPos + 1 );     }     mant = str.substring( 0, decPos ); } else {     if (expPos > -1) {         if (expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         mant = str.substring( 0, expPos );     } else {         mant = str;     }     dec = null; } if (!Character.isDigit( lastChar ) && lastChar != '.') {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() - 1 );     } else {         exp = null;     }     java.lang.String numeric = str.substring( 0, str.length() - 1 );     boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );     switch (lastChar) {     case 'l' :     case 'L' :         if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {             try {                 return createLong( numeric );             } catch ( java.lang.NumberFormatException nfe ) {             }             return createBigInteger( numeric );         }         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     case 'f' :     case 'F' :         try {             java.lang.Float f = NumberUtils.createFloat( numeric );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }     case 'd' :     case 'D' :         try {             java.lang.Double d = NumberUtils.createDouble( numeric );             if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createBigDecimal( numeric );         } catch ( java.lang.NumberFormatException e ) {         }     default  :         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     } } else {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() );     } else {         exp = null;     }     if (dec == null && exp == null) {         try {             return createInteger( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createLong( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( str );     } else {         boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );         try {             java.lang.Float f = createFloat( str );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             java.lang.Double d = createDouble( str );             if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigDecimal( str );     } }  =>   if (StringUtils.isBlank( str )) {     throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" ); } if (str.startsWith( \"--\" )) {     return null; } if (str.startsWith( \"0x\" ) || str.startsWith( \"-0x\" )) {     return createInteger( str ); } char lastChar = str.charAt( str.length() - 1 ); java.lang.String mant; java.lang.String dec; java.lang.String exp; int decPos = str.indexOf( '.' ); int expPos = str.indexOf( 'e' ) + str.indexOf( 'E' ) + 1; if (decPos > -1) {     if (expPos > -1) {         if (expPos < decPos || expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         dec = str.substring( decPos + 1, expPos );     } else {         dec = str.substring( decPos + 1 );     }     mant = str.substring( 0, decPos ); } else {     if (expPos > -1) {         if (expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         mant = str.substring( 0, expPos );     } else {         mant = str;     }     dec = null; } if (!Character.isDigit( lastChar ) && lastChar != '.') {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() - 1 );     } else {         exp = null;     }     java.lang.String numeric = str.substring( 0, str.length() - 1 );     boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );     switch (lastChar) {     case 'l' :     case 'L' :         if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {             try {                 return createLong( numeric );             } catch ( java.lang.NumberFormatException nfe ) {             }             return createBigInteger( numeric );         }         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     case 'f' :     case 'F' :         try {             java.lang.Float f = NumberUtils.createFloat( numeric );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }     case 'd' :     case 'D' :         try {             java.lang.Double d = NumberUtils.createDouble( numeric );             if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createBigDecimal( numeric );         } catch ( java.lang.NumberFormatException e ) {         }     default  :         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     } } else {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() );     } else {         exp = null;     }     if (dec == null && exp == null) {         try {             return createInteger( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createLong( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( str );     } else {         boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );         try {             java.lang.Float f = createFloat( str );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             java.lang.Double d = createDouble( str );             if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigDecimal( str );     } }
SDL_29:280:java.lang.Number_createNumber(java.lang.String): if (str == null) {     return null; } if (StringUtils.isBlank( str )) {     throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" ); } if (str.startsWith( \"--\" )) {     return null; } if (str.startsWith( \"0x\" ) || str.startsWith( \"-0x\" )) {     return createInteger( str ); } char lastChar = str.charAt( str.length() - 1 ); java.lang.String mant; java.lang.String dec; java.lang.String exp; int decPos = str.indexOf( '.' ); int expPos = str.indexOf( 'e' ) + str.indexOf( 'E' ) + 1; if (decPos > -1) {     if (expPos > -1) {         if (expPos < decPos || expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         dec = str.substring( decPos + 1, expPos );     } else {         dec = str.substring( decPos + 1 );     }     mant = str.substring( 0, decPos ); } else {     if (expPos > -1) {         if (expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         mant = str.substring( 0, expPos );     } else {         mant = str;     }     dec = null; } if (!Character.isDigit( lastChar ) && lastChar != '.') {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() - 1 );     } else {         exp = null;     }     java.lang.String numeric = str.substring( 0, str.length() - 1 );     boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );     switch (lastChar) {     case 'l' :     case 'L' :         if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {             try {                 return createLong( numeric );             } catch ( java.lang.NumberFormatException nfe ) {             }             return createBigInteger( numeric );         }         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     case 'f' :     case 'F' :         try {             java.lang.Float f = NumberUtils.createFloat( numeric );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }     case 'd' :     case 'D' :         try {             java.lang.Double d = NumberUtils.createDouble( numeric );             if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createBigDecimal( numeric );         } catch ( java.lang.NumberFormatException e ) {         }     default  :         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     } } else {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() );     } else {         exp = null;     }     if (dec == null && exp == null) {         try {             return createInteger( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createLong( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( str );     } else {         boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );         try {             java.lang.Float f = createFloat( str );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             java.lang.Double d = createDouble( str );             if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigDecimal( str );     } }  =>   if (str == null) {     return null; } if (str.startsWith( \"--\" )) {     return null; } if (str.startsWith( \"0x\" ) || str.startsWith( \"-0x\" )) {     return createInteger( str ); } char lastChar = str.charAt( str.length() - 1 ); java.lang.String mant; java.lang.String dec; java.lang.String exp; int decPos = str.indexOf( '.' ); int expPos = str.indexOf( 'e' ) + str.indexOf( 'E' ) + 1; if (decPos > -1) {     if (expPos > -1) {         if (expPos < decPos || expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         dec = str.substring( decPos + 1, expPos );     } else {         dec = str.substring( decPos + 1 );     }     mant = str.substring( 0, decPos ); } else {     if (expPos > -1) {         if (expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         mant = str.substring( 0, expPos );     } else {         mant = str;     }     dec = null; } if (!Character.isDigit( lastChar ) && lastChar != '.') {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() - 1 );     } else {         exp = null;     }     java.lang.String numeric = str.substring( 0, str.length() - 1 );     boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );     switch (lastChar) {     case 'l' :     case 'L' :         if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {             try {                 return createLong( numeric );             } catch ( java.lang.NumberFormatException nfe ) {             }             return createBigInteger( numeric );         }         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     case 'f' :     case 'F' :         try {             java.lang.Float f = NumberUtils.createFloat( numeric );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }     case 'd' :     case 'D' :         try {             java.lang.Double d = NumberUtils.createDouble( numeric );             if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createBigDecimal( numeric );         } catch ( java.lang.NumberFormatException e ) {         }     default  :         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     } } else {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() );     } else {         exp = null;     }     if (dec == null && exp == null) {         try {             return createInteger( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createLong( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( str );     } else {         boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );         try {             java.lang.Float f = createFloat( str );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             java.lang.Double d = createDouble( str );             if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigDecimal( str );     } }
SDL_30:280:java.lang.Number_createNumber(java.lang.String): if (str == null) {     return null; } if (StringUtils.isBlank( str )) {     throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" ); } if (str.startsWith( \"--\" )) {     return null; } if (str.startsWith( \"0x\" ) || str.startsWith( \"-0x\" )) {     return createInteger( str ); } char lastChar = str.charAt( str.length() - 1 ); java.lang.String mant; java.lang.String dec; java.lang.String exp; int decPos = str.indexOf( '.' ); int expPos = str.indexOf( 'e' ) + str.indexOf( 'E' ) + 1; if (decPos > -1) {     if (expPos > -1) {         if (expPos < decPos || expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         dec = str.substring( decPos + 1, expPos );     } else {         dec = str.substring( decPos + 1 );     }     mant = str.substring( 0, decPos ); } else {     if (expPos > -1) {         if (expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         mant = str.substring( 0, expPos );     } else {         mant = str;     }     dec = null; } if (!Character.isDigit( lastChar ) && lastChar != '.') {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() - 1 );     } else {         exp = null;     }     java.lang.String numeric = str.substring( 0, str.length() - 1 );     boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );     switch (lastChar) {     case 'l' :     case 'L' :         if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {             try {                 return createLong( numeric );             } catch ( java.lang.NumberFormatException nfe ) {             }             return createBigInteger( numeric );         }         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     case 'f' :     case 'F' :         try {             java.lang.Float f = NumberUtils.createFloat( numeric );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }     case 'd' :     case 'D' :         try {             java.lang.Double d = NumberUtils.createDouble( numeric );             if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createBigDecimal( numeric );         } catch ( java.lang.NumberFormatException e ) {         }     default  :         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     } } else {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() );     } else {         exp = null;     }     if (dec == null && exp == null) {         try {             return createInteger( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createLong( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( str );     } else {         boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );         try {             java.lang.Float f = createFloat( str );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             java.lang.Double d = createDouble( str );             if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigDecimal( str );     } }  =>   if (str == null) {     return null; } if (StringUtils.isBlank( str )) {     throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" ); } if (str.startsWith( \"0x\" ) || str.startsWith( \"-0x\" )) {     return createInteger( str ); } char lastChar = str.charAt( str.length() - 1 ); java.lang.String mant; java.lang.String dec; java.lang.String exp; int decPos = str.indexOf( '.' ); int expPos = str.indexOf( 'e' ) + str.indexOf( 'E' ) + 1; if (decPos > -1) {     if (expPos > -1) {         if (expPos < decPos || expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         dec = str.substring( decPos + 1, expPos );     } else {         dec = str.substring( decPos + 1 );     }     mant = str.substring( 0, decPos ); } else {     if (expPos > -1) {         if (expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         mant = str.substring( 0, expPos );     } else {         mant = str;     }     dec = null; } if (!Character.isDigit( lastChar ) && lastChar != '.') {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() - 1 );     } else {         exp = null;     }     java.lang.String numeric = str.substring( 0, str.length() - 1 );     boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );     switch (lastChar) {     case 'l' :     case 'L' :         if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {             try {                 return createLong( numeric );             } catch ( java.lang.NumberFormatException nfe ) {             }             return createBigInteger( numeric );         }         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     case 'f' :     case 'F' :         try {             java.lang.Float f = NumberUtils.createFloat( numeric );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }     case 'd' :     case 'D' :         try {             java.lang.Double d = NumberUtils.createDouble( numeric );             if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createBigDecimal( numeric );         } catch ( java.lang.NumberFormatException e ) {         }     default  :         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     } } else {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() );     } else {         exp = null;     }     if (dec == null && exp == null) {         try {             return createInteger( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createLong( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( str );     } else {         boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );         try {             java.lang.Float f = createFloat( str );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             java.lang.Double d = createDouble( str );             if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigDecimal( str );     } }
SDL_31:280:java.lang.Number_createNumber(java.lang.String): if (str == null) {     return null; } if (StringUtils.isBlank( str )) {     throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" ); } if (str.startsWith( \"--\" )) {     return null; } if (str.startsWith( \"0x\" ) || str.startsWith( \"-0x\" )) {     return createInteger( str ); } char lastChar = str.charAt( str.length() - 1 ); java.lang.String mant; java.lang.String dec; java.lang.String exp; int decPos = str.indexOf( '.' ); int expPos = str.indexOf( 'e' ) + str.indexOf( 'E' ) + 1; if (decPos > -1) {     if (expPos > -1) {         if (expPos < decPos || expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         dec = str.substring( decPos + 1, expPos );     } else {         dec = str.substring( decPos + 1 );     }     mant = str.substring( 0, decPos ); } else {     if (expPos > -1) {         if (expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         mant = str.substring( 0, expPos );     } else {         mant = str;     }     dec = null; } if (!Character.isDigit( lastChar ) && lastChar != '.') {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() - 1 );     } else {         exp = null;     }     java.lang.String numeric = str.substring( 0, str.length() - 1 );     boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );     switch (lastChar) {     case 'l' :     case 'L' :         if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {             try {                 return createLong( numeric );             } catch ( java.lang.NumberFormatException nfe ) {             }             return createBigInteger( numeric );         }         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     case 'f' :     case 'F' :         try {             java.lang.Float f = NumberUtils.createFloat( numeric );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }     case 'd' :     case 'D' :         try {             java.lang.Double d = NumberUtils.createDouble( numeric );             if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createBigDecimal( numeric );         } catch ( java.lang.NumberFormatException e ) {         }     default  :         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     } } else {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() );     } else {         exp = null;     }     if (dec == null && exp == null) {         try {             return createInteger( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createLong( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( str );     } else {         boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );         try {             java.lang.Float f = createFloat( str );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             java.lang.Double d = createDouble( str );             if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigDecimal( str );     } }  =>   if (str == null) {     return null; } if (StringUtils.isBlank( str )) {     throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" ); } if (str.startsWith( \"--\" )) {     return null; } char lastChar = str.charAt( str.length() - 1 ); java.lang.String mant; java.lang.String dec; java.lang.String exp; int decPos = str.indexOf( '.' ); int expPos = str.indexOf( 'e' ) + str.indexOf( 'E' ) + 1; if (decPos > -1) {     if (expPos > -1) {         if (expPos < decPos || expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         dec = str.substring( decPos + 1, expPos );     } else {         dec = str.substring( decPos + 1 );     }     mant = str.substring( 0, decPos ); } else {     if (expPos > -1) {         if (expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         mant = str.substring( 0, expPos );     } else {         mant = str;     }     dec = null; } if (!Character.isDigit( lastChar ) && lastChar != '.') {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() - 1 );     } else {         exp = null;     }     java.lang.String numeric = str.substring( 0, str.length() - 1 );     boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );     switch (lastChar) {     case 'l' :     case 'L' :         if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {             try {                 return createLong( numeric );             } catch ( java.lang.NumberFormatException nfe ) {             }             return createBigInteger( numeric );         }         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     case 'f' :     case 'F' :         try {             java.lang.Float f = NumberUtils.createFloat( numeric );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }     case 'd' :     case 'D' :         try {             java.lang.Double d = NumberUtils.createDouble( numeric );             if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createBigDecimal( numeric );         } catch ( java.lang.NumberFormatException e ) {         }     default  :         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     } } else {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() );     } else {         exp = null;     }     if (dec == null && exp == null) {         try {             return createInteger( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createLong( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( str );     } else {         boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );         try {             java.lang.Float f = createFloat( str );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             java.lang.Double d = createDouble( str );             if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigDecimal( str );     } }
SDL_32:262:java.lang.Number_createNumber(java.lang.String): if (str == null) {     return null; } if (StringUtils.isBlank( str )) {     throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" ); } if (str.startsWith( \"--\" )) {     return null; } if (str.startsWith( \"0x\" ) || str.startsWith( \"-0x\" )) {     return createInteger( str ); } char lastChar = str.charAt( str.length() - 1 ); java.lang.String mant; java.lang.String dec; java.lang.String exp; int decPos = str.indexOf( '.' ); int expPos = str.indexOf( 'e' ) + str.indexOf( 'E' ) + 1; if (decPos > -1) {     if (expPos > -1) {         if (expPos < decPos || expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         dec = str.substring( decPos + 1, expPos );     } else {         dec = str.substring( decPos + 1 );     }     mant = str.substring( 0, decPos ); } else {     if (expPos > -1) {         if (expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         mant = str.substring( 0, expPos );     } else {         mant = str;     }     dec = null; } if (!Character.isDigit( lastChar ) && lastChar != '.') {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() - 1 );     } else {         exp = null;     }     java.lang.String numeric = str.substring( 0, str.length() - 1 );     boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );     switch (lastChar) {     case 'l' :     case 'L' :         if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {             try {                 return createLong( numeric );             } catch ( java.lang.NumberFormatException nfe ) {             }             return createBigInteger( numeric );         }         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     case 'f' :     case 'F' :         try {             java.lang.Float f = NumberUtils.createFloat( numeric );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }     case 'd' :     case 'D' :         try {             java.lang.Double d = NumberUtils.createDouble( numeric );             if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createBigDecimal( numeric );         } catch ( java.lang.NumberFormatException e ) {         }     default  :         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     } } else {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() );     } else {         exp = null;     }     if (dec == null && exp == null) {         try {             return createInteger( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createLong( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( str );     } else {         boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );         try {             java.lang.Float f = createFloat( str );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             java.lang.Double d = createDouble( str );             if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigDecimal( str );     } }  =>   if (str == null) {     return null; } if (StringUtils.isBlank( str )) {     throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" ); } if (str.startsWith( \"--\" )) {     return null; } if (str.startsWith( \"0x\" ) || str.startsWith( \"-0x\" )) {     return createInteger( str ); } char lastChar = str.charAt( str.length() - 1 ); java.lang.String mant; java.lang.String dec; java.lang.String exp; int decPos = str.indexOf( '.' ); int expPos = str.indexOf( 'e' ) + str.indexOf( 'E' ) + 1; if (!Character.isDigit( lastChar ) && lastChar != '.') {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() - 1 );     } else {         exp = null;     }     java.lang.String numeric = str.substring( 0, str.length() - 1 );     boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );     switch (lastChar) {     case 'l' :     case 'L' :         if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {             try {                 return createLong( numeric );             } catch ( java.lang.NumberFormatException nfe ) {             }             return createBigInteger( numeric );         }         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     case 'f' :     case 'F' :         try {             java.lang.Float f = NumberUtils.createFloat( numeric );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }     case 'd' :     case 'D' :         try {             java.lang.Double d = NumberUtils.createDouble( numeric );             if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createBigDecimal( numeric );         } catch ( java.lang.NumberFormatException e ) {         }     default  :         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     } } else {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() );     } else {         exp = null;     }     if (dec == null && exp == null) {         try {             return createInteger( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createLong( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( str );     } else {         boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );         try {             java.lang.Float f = createFloat( str );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             java.lang.Double d = createDouble( str );             if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigDecimal( str );     } }
SDL_33:200:java.lang.Number_createNumber(java.lang.String): if (str == null) {     return null; } if (StringUtils.isBlank( str )) {     throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" ); } if (str.startsWith( \"--\" )) {     return null; } if (str.startsWith( \"0x\" ) || str.startsWith( \"-0x\" )) {     return createInteger( str ); } char lastChar = str.charAt( str.length() - 1 ); java.lang.String mant; java.lang.String dec; java.lang.String exp; int decPos = str.indexOf( '.' ); int expPos = str.indexOf( 'e' ) + str.indexOf( 'E' ) + 1; if (decPos > -1) {     if (expPos > -1) {         if (expPos < decPos || expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         dec = str.substring( decPos + 1, expPos );     } else {         dec = str.substring( decPos + 1 );     }     mant = str.substring( 0, decPos ); } else {     if (expPos > -1) {         if (expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         mant = str.substring( 0, expPos );     } else {         mant = str;     }     dec = null; } if (!Character.isDigit( lastChar ) && lastChar != '.') {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() - 1 );     } else {         exp = null;     }     java.lang.String numeric = str.substring( 0, str.length() - 1 );     boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );     switch (lastChar) {     case 'l' :     case 'L' :         if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {             try {                 return createLong( numeric );             } catch ( java.lang.NumberFormatException nfe ) {             }             return createBigInteger( numeric );         }         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     case 'f' :     case 'F' :         try {             java.lang.Float f = NumberUtils.createFloat( numeric );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }     case 'd' :     case 'D' :         try {             java.lang.Double d = NumberUtils.createDouble( numeric );             if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createBigDecimal( numeric );         } catch ( java.lang.NumberFormatException e ) {         }     default  :         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     } } else {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() );     } else {         exp = null;     }     if (dec == null && exp == null) {         try {             return createInteger( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createLong( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( str );     } else {         boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );         try {             java.lang.Float f = createFloat( str );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             java.lang.Double d = createDouble( str );             if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigDecimal( str );     } }  =>   if (str == null) {     return null; } if (StringUtils.isBlank( str )) {     throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" ); } if (str.startsWith( \"--\" )) {     return null; } if (str.startsWith( \"0x\" ) || str.startsWith( \"-0x\" )) {     return createInteger( str ); } char lastChar = str.charAt( str.length() - 1 ); java.lang.String mant; java.lang.String dec; java.lang.String exp; int decPos = str.indexOf( '.' ); int expPos = str.indexOf( 'e' ) + str.indexOf( 'E' ) + 1; if (decPos > -1) {     if (expPos > -1) {         if (expPos < decPos || expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         dec = str.substring( decPos + 1, expPos );     } else {         dec = str.substring( decPos + 1 );     }     mant = str.substring( 0, decPos ); } else {     if (expPos > -1) {         if (expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         mant = str.substring( 0, expPos );     } else {         mant = str;     }     dec = null; }
SDL_34:164:java.lang.Number_createNumber(java.lang.String): if (str == null) {     return null; }  =>   if (true) {     return null; }
SDL_35:165:java.lang.Number_createNumber(java.lang.String): throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" );  =>  
SDL_36:167:java.lang.Number_createNumber(java.lang.String): if (StringUtils.isBlank( str )) {     throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" ); }  =>   if (true) {     throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" ); }
SDL_37:170:java.lang.Number_createNumber(java.lang.String): if (str.startsWith( \"--\" )) {     return null; }  =>   if (true) {     return null; }
SDL_38:173:java.lang.Number_createNumber(java.lang.String): if (str.startsWith( \"0x\" ) || str.startsWith( \"-0x\" )) {     return createInteger( str ); }  =>   if (true) {     return createInteger( str ); }
SDL_39:181:java.lang.Number_createNumber(java.lang.String): if (expPos > -1) {     if (expPos < decPos || expPos > str.length()) {         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     }     dec = str.substring( decPos + 1, expPos ); } else {     dec = str.substring( decPos + 1 ); } mant = str.substring( 0, decPos );  =>   mant = str.substring( 0, decPos );
SDL_40:188:java.lang.Number_createNumber(java.lang.String): if (expPos > -1) {     if (expPos < decPos || expPos > str.length()) {         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     }     dec = str.substring( decPos + 1, expPos ); } else {     dec = str.substring( decPos + 1 ); } mant = str.substring( 0, decPos );  =>   if (expPos > -1) {     if (expPos < decPos || expPos > str.length()) {         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     }     dec = str.substring( decPos + 1, expPos ); } else {     dec = str.substring( decPos + 1 ); }
SDL_41:200:java.lang.Number_createNumber(java.lang.String): if (decPos > -1) {     if (expPos > -1) {         if (expPos < decPos || expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         dec = str.substring( decPos + 1, expPos );     } else {         dec = str.substring( decPos + 1 );     }     mant = str.substring( 0, decPos ); } else {     if (expPos > -1) {         if (expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         mant = str.substring( 0, expPos );     } else {         mant = str;     }     dec = null; }  =>   if (true) {     if (expPos > -1) {         if (expPos < decPos || expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         dec = str.substring( decPos + 1, expPos );     } else {         dec = str.substring( decPos + 1 );     }     mant = str.substring( 0, decPos ); } else {     if (expPos > -1) {         if (expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         mant = str.substring( 0, expPos );     } else {         mant = str;     }     dec = null; }
SDL_42:191:java.lang.Number_createNumber(java.lang.String): if (expPos > -1) {     if (expPos > str.length()) {         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     }     mant = str.substring( 0, expPos ); } else {     mant = str; } dec = null;  =>   dec = null;
SDL_43:198:java.lang.Number_createNumber(java.lang.String): if (expPos > -1) {     if (expPos > str.length()) {         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     }     mant = str.substring( 0, expPos ); } else {     mant = str; } dec = null;  =>   if (expPos > -1) {     if (expPos > str.length()) {         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     }     mant = str.substring( 0, expPos ); } else {     mant = str; }
SDL_44:182:java.lang.Number_createNumber(java.lang.String): if (expPos < decPos || expPos > str.length()) {     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); } dec = str.substring( decPos + 1, expPos );  =>   dec = str.substring( decPos + 1, expPos );
SDL_45:184:java.lang.Number_createNumber(java.lang.String): if (expPos < decPos || expPos > str.length()) {     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); } dec = str.substring( decPos + 1, expPos );  =>   if (expPos < decPos || expPos > str.length()) {     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); }
SDL_46:188:java.lang.Number_createNumber(java.lang.String): if (expPos > -1) {     if (expPos < decPos || expPos > str.length()) {         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     }     dec = str.substring( decPos + 1, expPos ); } else {     dec = str.substring( decPos + 1 ); }  =>   if (true) {     if (expPos < decPos || expPos > str.length()) {         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     }     dec = str.substring( decPos + 1, expPos ); } else {     dec = str.substring( decPos + 1 ); }
SDL_47:186:java.lang.Number_createNumber(java.lang.String): dec = str.substring( decPos + 1 );  =>  
SDL_48:182:java.lang.Number_createNumber(java.lang.String): throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );  =>  
SDL_49:184:java.lang.Number_createNumber(java.lang.String): if (expPos < decPos || expPos > str.length()) {     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); }  =>   if (true) {     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); }
SDL_50:192:java.lang.Number_createNumber(java.lang.String): if (expPos > str.length()) {     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); } mant = str.substring( 0, expPos );  =>   mant = str.substring( 0, expPos );
SDL_51:194:java.lang.Number_createNumber(java.lang.String): if (expPos > str.length()) {     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); } mant = str.substring( 0, expPos );  =>   if (expPos > str.length()) {     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); }
SDL_52:198:java.lang.Number_createNumber(java.lang.String): if (expPos > -1) {     if (expPos > str.length()) {         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     }     mant = str.substring( 0, expPos ); } else {     mant = str; }  =>   if (true) {     if (expPos > str.length()) {         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     }     mant = str.substring( 0, expPos ); } else {     mant = str; }
SDL_53:196:java.lang.Number_createNumber(java.lang.String): mant = str;  =>  
SDL_54:192:java.lang.Number_createNumber(java.lang.String): throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );  =>  
SDL_55:194:java.lang.Number_createNumber(java.lang.String): if (expPos > str.length()) {     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); }  =>   if (true) {     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); }
SDL_56:243:java.lang.Number_createNumber(java.lang.String): if (expPos > -1 && expPos < str.length() - 1) {     exp = str.substring( expPos + 1, str.length() - 1 ); } else {     exp = null; } java.lang.String numeric = str.substring( 0, str.length() - 1 ); boolean allZeros = isAllZeros( mant ) && isAllZeros( exp ); switch (lastChar) { case 'l' : case 'L' :     if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {         try {             return createLong( numeric );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( numeric );     }     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); case 'f' : case 'F' :     try {         java.lang.Float f = NumberUtils.createFloat( numeric );         if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {             return f;         }     } catch ( java.lang.NumberFormatException nfe ) {     } case 'd' : case 'D' :     try {         java.lang.Double d = NumberUtils.createDouble( numeric );         if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {             return d;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         return createBigDecimal( numeric );     } catch ( java.lang.NumberFormatException e ) {     } default  :     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); }  =>   java.lang.String numeric = str.substring( 0, str.length() - 1 ); boolean allZeros = isAllZeros( mant ) && isAllZeros( exp ); switch (lastChar) { case 'l' : case 'L' :     if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {         try {             return createLong( numeric );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( numeric );     }     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); case 'f' : case 'F' :     try {         java.lang.Float f = NumberUtils.createFloat( numeric );         if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {             return f;         }     } catch ( java.lang.NumberFormatException nfe ) {     } case 'd' : case 'D' :     try {         java.lang.Double d = NumberUtils.createDouble( numeric );         if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {             return d;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         return createBigDecimal( numeric );     } catch ( java.lang.NumberFormatException e ) {     } default  :     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); }
SDL_57:208:java.lang.Number_createNumber(java.lang.String): if (expPos > -1 && expPos < str.length() - 1) {     exp = str.substring( expPos + 1, str.length() - 1 ); } else {     exp = null; } java.lang.String numeric = str.substring( 0, str.length() - 1 ); boolean allZeros = isAllZeros( mant ) && isAllZeros( exp ); switch (lastChar) { case 'l' : case 'L' :     if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {         try {             return createLong( numeric );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( numeric );     }     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); case 'f' : case 'F' :     try {         java.lang.Float f = NumberUtils.createFloat( numeric );         if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {             return f;         }     } catch ( java.lang.NumberFormatException nfe ) {     } case 'd' : case 'D' :     try {         java.lang.Double d = NumberUtils.createDouble( numeric );         if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {             return d;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         return createBigDecimal( numeric );     } catch ( java.lang.NumberFormatException e ) {     } default  :     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); }  =>   if (expPos > -1 && expPos < str.length() - 1) {     exp = str.substring( expPos + 1, str.length() - 1 ); } else {     exp = null; } java.lang.String numeric = str.substring( 0, str.length() - 1 ); boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );
SDL_58:283:java.lang.Number_createNumber(java.lang.String): if (!Character.isDigit( lastChar ) && lastChar != '.') {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() - 1 );     } else {         exp = null;     }     java.lang.String numeric = str.substring( 0, str.length() - 1 );     boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );     switch (lastChar) {     case 'l' :     case 'L' :         if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {             try {                 return createLong( numeric );             } catch ( java.lang.NumberFormatException nfe ) {             }             return createBigInteger( numeric );         }         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     case 'f' :     case 'F' :         try {             java.lang.Float f = NumberUtils.createFloat( numeric );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }     case 'd' :     case 'D' :         try {             java.lang.Double d = NumberUtils.createDouble( numeric );             if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createBigDecimal( numeric );         } catch ( java.lang.NumberFormatException e ) {         }     default  :         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     } } else {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() );     } else {         exp = null;     }     if (dec == null && exp == null) {         try {             return createInteger( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createLong( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( str );     } else {         boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );         try {             java.lang.Float f = createFloat( str );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             java.lang.Double d = createDouble( str );             if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigDecimal( str );     } }  =>   if (true) {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() - 1 );     } else {         exp = null;     }     java.lang.String numeric = str.substring( 0, str.length() - 1 );     boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );     switch (lastChar) {     case 'l' :     case 'L' :         if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {             try {                 return createLong( numeric );             } catch ( java.lang.NumberFormatException nfe ) {             }             return createBigInteger( numeric );         }         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     case 'f' :     case 'F' :         try {             java.lang.Float f = NumberUtils.createFloat( numeric );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }     case 'd' :     case 'D' :         try {             java.lang.Double d = NumberUtils.createDouble( numeric );             if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createBigDecimal( numeric );         } catch ( java.lang.NumberFormatException e ) {         }     default  :         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     } } else {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() );     } else {         exp = null;     }     if (dec == null && exp == null) {         try {             return createInteger( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createLong( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( str );     } else {         boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );         try {             java.lang.Float f = createFloat( str );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             java.lang.Double d = createDouble( str );             if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigDecimal( str );     } }
SDL_59:277:java.lang.Number_createNumber(java.lang.String): if (expPos > -1 && expPos < str.length() - 1) {     exp = str.substring( expPos + 1, str.length() ); } else {     exp = null; } if (dec == null && exp == null) {     try {         return createInteger( str );     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         return createLong( str );     } catch ( java.lang.NumberFormatException nfe ) {     }     return createBigInteger( str ); } else {     boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );     try {         java.lang.Float f = createFloat( str );         if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {             return f;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         java.lang.Double d = createDouble( str );         if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {             return d;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     return createBigDecimal( str ); }  =>   if (dec == null && exp == null) {     try {         return createInteger( str );     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         return createLong( str );     } catch ( java.lang.NumberFormatException nfe ) {     }     return createBigInteger( str ); } else {     boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );     try {         java.lang.Float f = createFloat( str );         if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {             return f;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         java.lang.Double d = createDouble( str );         if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {             return d;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     return createBigDecimal( str ); }
SDL_60:254:java.lang.Number_createNumber(java.lang.String): if (expPos > -1 && expPos < str.length() - 1) {     exp = str.substring( expPos + 1, str.length() ); } else {     exp = null; } if (dec == null && exp == null) {     try {         return createInteger( str );     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         return createLong( str );     } catch ( java.lang.NumberFormatException nfe ) {     }     return createBigInteger( str ); } else {     boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );     try {         java.lang.Float f = createFloat( str );         if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {             return f;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         java.lang.Double d = createDouble( str );         if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {             return d;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     return createBigDecimal( str ); }  =>   if (expPos > -1 && expPos < str.length() - 1) {     exp = str.substring( expPos + 1, str.length() ); } else {     exp = null; }
SDL_61:202:java.lang.Number_createNumber(java.lang.String): exp = str.substring( expPos + 1, str.length() - 1 );  =>  
SDL_62:206:java.lang.Number_createNumber(java.lang.String): if (expPos > -1 && expPos < str.length() - 1) {     exp = str.substring( expPos + 1, str.length() - 1 ); } else {     exp = null; }  =>   if (true) {     exp = str.substring( expPos + 1, str.length() - 1 ); } else {     exp = null; }
SDL_63:204:java.lang.Number_createNumber(java.lang.String): exp = null;  =>  
SDL_64:212:java.lang.Number_createNumber(java.lang.String): if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {     try {         return createLong( numeric );     } catch ( java.lang.NumberFormatException nfe ) {     }     return createBigInteger( numeric ); } throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );  =>   throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );
SDL_65:218:java.lang.Number_createNumber(java.lang.String): if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {     try {         return createLong( numeric );     } catch ( java.lang.NumberFormatException nfe ) {     }     return createBigInteger( numeric ); } throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );  =>   if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {     try {         return createLong( numeric );     } catch ( java.lang.NumberFormatException nfe ) {     }     return createBigInteger( numeric ); }
SDL_66:218:java.lang.Number_createNumber(java.lang.String): if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {     try {         return createLong( numeric );     } catch ( java.lang.NumberFormatException nfe ) {     }     return createBigInteger( numeric ); }  =>   if (true) {     try {         return createLong( numeric );     } catch ( java.lang.NumberFormatException nfe ) {     }     return createBigInteger( numeric ); }
SDL_67:225:java.lang.Number_createNumber(java.lang.String): try {     java.lang.Float f = NumberUtils.createFloat( numeric );     if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {         return f;     } } catch ( java.lang.NumberFormatException nfe ) { }  =>   try {     java.lang.Float f = NumberUtils.createFloat( numeric ); }
SDL_68:227:java.lang.Number_createNumber(java.lang.String): if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {     return f; }  =>   if (true) {     return f; }
SDL_69:235:java.lang.Number_createNumber(java.lang.String): try {     java.lang.Double d = NumberUtils.createDouble( numeric );     if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {         return d;     } } catch ( java.lang.NumberFormatException nfe ) { }  =>   try {     java.lang.Double d = NumberUtils.createDouble( numeric ); }
SDL_70:237:java.lang.Number_createNumber(java.lang.String): if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {     return d; }  =>   if (true) {     return d; }
SDL_71:245:java.lang.Number_createNumber(java.lang.String): throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );  =>  
SDL_72:236:java.lang.Number_createNumber(java.lang.String): case 'l' : case 'L' :     if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {         try {             return createLong( numeric );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( numeric );     }     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); case 'f' : case 'F' :     try {         java.lang.Float f = NumberUtils.createFloat( numeric );         if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {             return f;         }     } catch ( java.lang.NumberFormatException nfe ) {     } case 'd' : case 'D' :     try {         java.lang.Double d = NumberUtils.createDouble( numeric );         if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {             return d;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         return createBigDecimal( numeric );     } catch ( java.lang.NumberFormatException e ) {     } default  :     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );  =>   case 'f' : case 'F' :     try {         java.lang.Float f = NumberUtils.createFloat( numeric );         if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {             return f;         }     } catch ( java.lang.NumberFormatException nfe ) {     } case 'd' : case 'D' :     try {         java.lang.Double d = NumberUtils.createDouble( numeric );         if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {             return d;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         return createBigDecimal( numeric );     } catch ( java.lang.NumberFormatException e ) {     } default  :     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );
SDL_73:237:java.lang.Number_createNumber(java.lang.String): case 'l' : case 'L' :     if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {         try {             return createLong( numeric );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( numeric );     }     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); case 'f' : case 'F' :     try {         java.lang.Float f = NumberUtils.createFloat( numeric );         if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {             return f;         }     } catch ( java.lang.NumberFormatException nfe ) {     } case 'd' : case 'D' :     try {         java.lang.Double d = NumberUtils.createDouble( numeric );         if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {             return d;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         return createBigDecimal( numeric );     } catch ( java.lang.NumberFormatException e ) {     } default  :     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );  =>   case 'l' : case 'L' :     if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {         try {             return createLong( numeric );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( numeric );     }     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); case 'd' : case 'D' :     try {         java.lang.Double d = NumberUtils.createDouble( numeric );         if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {             return d;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         return createBigDecimal( numeric );     } catch ( java.lang.NumberFormatException e ) {     } default  :     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );
SDL_74:233:java.lang.Number_createNumber(java.lang.String): case 'l' : case 'L' :     if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {         try {             return createLong( numeric );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( numeric );     }     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); case 'f' : case 'F' :     try {         java.lang.Float f = NumberUtils.createFloat( numeric );         if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {             return f;         }     } catch ( java.lang.NumberFormatException nfe ) {     } case 'd' : case 'D' :     try {         java.lang.Double d = NumberUtils.createDouble( numeric );         if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {             return d;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         return createBigDecimal( numeric );     } catch ( java.lang.NumberFormatException e ) {     } default  :     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );  =>   case 'l' : case 'L' :     if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {         try {             return createLong( numeric );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( numeric );     }     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); case 'f' : case 'F' :     try {         java.lang.Float f = NumberUtils.createFloat( numeric );         if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {             return f;         }     } catch ( java.lang.NumberFormatException nfe ) {     } default  :     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );
SDL_75:244:java.lang.Number_createNumber(java.lang.String): case 'l' : case 'L' :     if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {         try {             return createLong( numeric );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( numeric );     }     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); case 'f' : case 'F' :     try {         java.lang.Float f = NumberUtils.createFloat( numeric );         if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {             return f;         }     } catch ( java.lang.NumberFormatException nfe ) {     } case 'd' : case 'D' :     try {         java.lang.Double d = NumberUtils.createDouble( numeric );         if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {             return d;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         return createBigDecimal( numeric );     } catch ( java.lang.NumberFormatException e ) {     } default  :     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );  =>   case 'l' : case 'L' :     if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {         try {             return createLong( numeric );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( numeric );     }     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); case 'f' : case 'F' :     try {         java.lang.Float f = NumberUtils.createFloat( numeric );         if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {             return f;         }     } catch ( java.lang.NumberFormatException nfe ) {     } case 'd' : case 'D' :     try {         java.lang.Double d = NumberUtils.createDouble( numeric );         if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {             return d;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         return createBigDecimal( numeric );     } catch ( java.lang.NumberFormatException e ) {     }
SDL_76:250:java.lang.Number_createNumber(java.lang.String): exp = str.substring( expPos + 1, str.length() );  =>  
SDL_77:254:java.lang.Number_createNumber(java.lang.String): if (expPos > -1 && expPos < str.length() - 1) {     exp = str.substring( expPos + 1, str.length() ); } else {     exp = null; }  =>   if (true) {     exp = str.substring( expPos + 1, str.length() ); } else {     exp = null; }
SDL_78:252:java.lang.Number_createNumber(java.lang.String): exp = null;  =>  
SDL_79:282:java.lang.Number_createNumber(java.lang.String): if (dec == null && exp == null) {     try {         return createInteger( str );     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         return createLong( str );     } catch ( java.lang.NumberFormatException nfe ) {     }     return createBigInteger( str ); } else {     boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );     try {         java.lang.Float f = createFloat( str );         if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {             return f;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         java.lang.Double d = createDouble( str );         if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {             return d;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     return createBigDecimal( str ); }  =>   if (true) {     try {         return createInteger( str );     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         return createLong( str );     } catch ( java.lang.NumberFormatException nfe ) {     }     return createBigInteger( str ); } else {     boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );     try {         java.lang.Float f = createFloat( str );         if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {             return f;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         java.lang.Double d = createDouble( str );         if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {             return d;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     return createBigDecimal( str ); }
SDL_80:269:java.lang.Number_createNumber(java.lang.String): try {     java.lang.Float f = createFloat( str );     if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {         return f;     } } catch ( java.lang.NumberFormatException nfe ) { }  =>   try {     java.lang.Float f = createFloat( str ); }
SDL_81:271:java.lang.Number_createNumber(java.lang.String): if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {     return f; }  =>   if (true) {     return f; }
SDL_82:276:java.lang.Number_createNumber(java.lang.String): try {     java.lang.Double d = createDouble( str );     if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {         return d;     } } catch ( java.lang.NumberFormatException nfe ) { }  =>   try {     java.lang.Double d = createDouble( str ); }
SDL_83:278:java.lang.Number_createNumber(java.lang.String): if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {     return d; }  =>   if (true) {     return d; }
SDL_84:293:boolean_isAllZeros(java.lang.String): if (str == null) {     return true; } for (int i = str.length() - 1; i >= 0; i--) {     if (str.charAt( i ) != '0') {         return false;     } } return str.length() > 0;  =>   for (int i = str.length() - 1; i >= 0; i--) {     if (str.charAt( i ) != '0') {         return false;     } } return str.length() > 0;
SDL_85:291:boolean_isAllZeros(java.lang.String): if (str == null) {     return true; } for (int i = str.length() - 1; i >= 0; i--) {     if (str.charAt( i ) != '0') {         return false;     } } return str.length() > 0;  =>   if (str == null) {     return true; } return str.length() > 0;
SDL_86:290:boolean_isAllZeros(java.lang.String): if (str == null) {     return true; }  =>   if (true) {     return true; }
SDL_87:289:boolean_isAllZeros(java.lang.String): return true;  =>   return false;
SDL_88:291:boolean_isAllZeros(java.lang.String): if (str.charAt( i ) != '0') {     return false; }  =>  
SDL_89:295:boolean_isAllZeros(java.lang.String): for (int i = str.length() - 1; i >= 0; i--) {     if (str.charAt( i ) != '0') {         return false;     } }  =>   for (int i = str.length() - 1;; i--) {     if (str.charAt( i ) != '0') {         return false;     } }
SDL_90:295:boolean_isAllZeros(java.lang.String): for (int i = str.length() - 1; i >= 0; i--) {     if (str.charAt( i ) != '0') {         return false;     } }  =>   for (int i = str.length() - 1; i >= 0;) {     if (str.charAt( i ) != '0') {         return false;     } }
SDL_91:294:boolean_isAllZeros(java.lang.String): if (str.charAt( i ) != '0') {     return false; }  =>   if (true) {     return false; }
SDL_92:293:boolean_isAllZeros(java.lang.String): return false;  =>   return true;
SDL_93:296:boolean_isAllZeros(java.lang.String): return str.length() > 0;  =>   return true;
SDL_94:296:boolean_isAllZeros(java.lang.String): return str.length() > 0;  =>   return false;
SDL_95:301:java.lang.Float_createFloat(java.lang.String): if (str == null) {     return null; } return Float.valueOf( str );  =>   return Float.valueOf( str );
SDL_96:303:java.lang.Float_createFloat(java.lang.String): if (str == null) {     return null; }  =>   if (true) {     return null; }
SDL_97:309:java.lang.Double_createDouble(java.lang.String): if (str == null) {     return null; } return Double.valueOf( str );  =>   return Double.valueOf( str );
SDL_98:311:java.lang.Double_createDouble(java.lang.String): if (str == null) {     return null; }  =>   if (true) {     return null; }
SDL_99:317:java.lang.Integer_createInteger(java.lang.String): if (str == null) {     return null; } return Integer.decode( str );  =>   return Integer.decode( str );
SDL_100:319:java.lang.Integer_createInteger(java.lang.String): if (str == null) {     return null; }  =>   if (true) {     return null; }
SDL_101:325:java.lang.Long_createLong(java.lang.String): if (str == null) {     return null; } return Long.valueOf( str );  =>   return Long.valueOf( str );
SDL_102:327:java.lang.Long_createLong(java.lang.String): if (str == null) {     return null; }  =>   if (true) {     return null; }
SDL_103:333:java.math.BigInteger_createBigInteger(java.lang.String): if (str == null) {     return null; } return new java.math.BigInteger( str );  =>   return new java.math.BigInteger( str );
SDL_104:335:java.math.BigInteger_createBigInteger(java.lang.String): if (str == null) {     return null; }  =>   if (true) {     return null; }
SDL_105:344:java.math.BigDecimal_createBigDecimal(java.lang.String): if (str == null) {     return null; } if (StringUtils.isBlank( str )) {     throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" ); } return new java.math.BigDecimal( str );  =>   if (StringUtils.isBlank( str )) {     throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" ); } return new java.math.BigDecimal( str );
SDL_106:344:java.math.BigDecimal_createBigDecimal(java.lang.String): if (str == null) {     return null; } if (StringUtils.isBlank( str )) {     throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" ); } return new java.math.BigDecimal( str );  =>   if (str == null) {     return null; } return new java.math.BigDecimal( str );
SDL_107:343:java.math.BigDecimal_createBigDecimal(java.lang.String): if (str == null) {     return null; }  =>   if (true) {     return null; }
SDL_108:344:java.math.BigDecimal_createBigDecimal(java.lang.String): throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" );  =>  
SDL_109:346:java.math.BigDecimal_createBigDecimal(java.lang.String): if (StringUtils.isBlank( str )) {     throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" ); }  =>   if (true) {     throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" ); }
SDL_110:358:long_min(long): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } long min = array[0]; for (int i = 1; i < array.length; i++) {     if (array[i] < min) {         min = array[i];     } } return min;  =>   long min = array[0]; for (int i = 1; i < array.length; i++) {     if (array[i] < min) {         min = array[i];     } } return min;
SDL_111:360:long_min(long): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } long min = array[0]; for (int i = 1; i < array.length; i++) {     if (array[i] < min) {         min = array[i];     } } return min;  =>   if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } long min = array[0]; return min;
SDL_112:352:long_min(long): throw new java.lang.IllegalArgumentException( \"The Array must not be null\" );  =>  
SDL_113:358:long_min(long): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }
SDL_114:354:long_min(long): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>  
SDL_115:355:long_min(long): throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );  =>  
SDL_116:357:long_min(long): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }
SDL_117:360:long_min(long): if (array[i] < min) {     min = array[i]; }  =>  
SDL_118:364:long_min(long): for (int i = 1; i < array.length; i++) {     if (array[i] < min) {         min = array[i];     } }  =>   for (int i = 1;; i++) {     if (array[i] < min) {         min = array[i];     } }
SDL_119:364:long_min(long): for (int i = 1; i < array.length; i++) {     if (array[i] < min) {         min = array[i];     } }  =>   for (int i = 1; i < array.length;) {     if (array[i] < min) {         min = array[i];     } }
SDL_120:361:long_min(long): min = array[i];  =>  
SDL_121:363:long_min(long): if (array[i] < min) {     min = array[i]; }  =>   if (true) {     min = array[i]; }
SDL_122:365:long_min(long): return min;  =>   return 0;
SDL_123:376:int_min(int): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } int min = array[0]; for (int j = 1; j < array.length; j++) {     if (array[j] < min) {         min = array[j];     } } return min;  =>   int min = array[0]; for (int j = 1; j < array.length; j++) {     if (array[j] < min) {         min = array[j];     } } return min;
SDL_124:378:int_min(int): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } int min = array[0]; for (int j = 1; j < array.length; j++) {     if (array[j] < min) {         min = array[j];     } } return min;  =>   if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } int min = array[0]; return min;
SDL_125:370:int_min(int): throw new java.lang.IllegalArgumentException( \"The Array must not be null\" );  =>  
SDL_126:376:int_min(int): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }
SDL_127:372:int_min(int): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>  
SDL_128:373:int_min(int): throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );  =>  
SDL_129:375:int_min(int): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }
SDL_130:378:int_min(int): if (array[j] < min) {     min = array[j]; }  =>  
SDL_131:382:int_min(int): for (int j = 1; j < array.length; j++) {     if (array[j] < min) {         min = array[j];     } }  =>   for (int j = 1;; j++) {     if (array[j] < min) {         min = array[j];     } }
SDL_132:382:int_min(int): for (int j = 1; j < array.length; j++) {     if (array[j] < min) {         min = array[j];     } }  =>   for (int j = 1; j < array.length;) {     if (array[j] < min) {         min = array[j];     } }
SDL_133:379:int_min(int): min = array[j];  =>  
SDL_134:381:int_min(int): if (array[j] < min) {     min = array[j]; }  =>   if (true) {     min = array[j]; }
SDL_135:383:int_min(int): return min;  =>   return 0;
SDL_136:394:short_min(short): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } short min = array[0]; for (int i = 1; i < array.length; i++) {     if (array[i] < min) {         min = array[i];     } } return min;  =>   short min = array[0]; for (int i = 1; i < array.length; i++) {     if (array[i] < min) {         min = array[i];     } } return min;
SDL_137:396:short_min(short): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } short min = array[0]; for (int i = 1; i < array.length; i++) {     if (array[i] < min) {         min = array[i];     } } return min;  =>   if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } short min = array[0]; return min;
SDL_138:388:short_min(short): throw new java.lang.IllegalArgumentException( \"The Array must not be null\" );  =>  
SDL_139:394:short_min(short): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }
SDL_140:390:short_min(short): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>  
SDL_141:391:short_min(short): throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );  =>  
SDL_142:393:short_min(short): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }
SDL_143:396:short_min(short): if (array[i] < min) {     min = array[i]; }  =>  
SDL_144:400:short_min(short): for (int i = 1; i < array.length; i++) {     if (array[i] < min) {         min = array[i];     } }  =>   for (int i = 1;; i++) {     if (array[i] < min) {         min = array[i];     } }
SDL_145:400:short_min(short): for (int i = 1; i < array.length; i++) {     if (array[i] < min) {         min = array[i];     } }  =>   for (int i = 1; i < array.length;) {     if (array[i] < min) {         min = array[i];     } }
SDL_146:397:short_min(short): min = array[i];  =>  
SDL_147:399:short_min(short): if (array[i] < min) {     min = array[i]; }  =>   if (true) {     min = array[i]; }
SDL_148:401:short_min(short): return min;  =>   return 0;
SDL_149:412:byte_min(byte): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } byte min = array[0]; for (int i = 1; i < array.length; i++) {     if (array[i] < min) {         min = array[i];     } } return min;  =>   byte min = array[0]; for (int i = 1; i < array.length; i++) {     if (array[i] < min) {         min = array[i];     } } return min;
SDL_150:414:byte_min(byte): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } byte min = array[0]; for (int i = 1; i < array.length; i++) {     if (array[i] < min) {         min = array[i];     } } return min;  =>   if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } byte min = array[0]; return min;
SDL_151:406:byte_min(byte): throw new java.lang.IllegalArgumentException( \"The Array must not be null\" );  =>  
SDL_152:412:byte_min(byte): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }
SDL_153:408:byte_min(byte): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>  
SDL_154:409:byte_min(byte): throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );  =>  
SDL_155:411:byte_min(byte): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }
SDL_156:414:byte_min(byte): if (array[i] < min) {     min = array[i]; }  =>  
SDL_157:418:byte_min(byte): for (int i = 1; i < array.length; i++) {     if (array[i] < min) {         min = array[i];     } }  =>   for (int i = 1;; i++) {     if (array[i] < min) {         min = array[i];     } }
SDL_158:418:byte_min(byte): for (int i = 1; i < array.length; i++) {     if (array[i] < min) {         min = array[i];     } }  =>   for (int i = 1; i < array.length;) {     if (array[i] < min) {         min = array[i];     } }
SDL_159:415:byte_min(byte): min = array[i];  =>  
SDL_160:417:byte_min(byte): if (array[i] < min) {     min = array[i]; }  =>   if (true) {     min = array[i]; }
SDL_161:433:double_min(double): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } double min = array[0]; for (int i = 1; i < array.length; i++) {     if (Double.isNaN( array[i] )) {         return Double.NaN;     }     if (array[i] < min) {         min = array[i];     } } return min;  =>   double min = array[0]; for (int i = 1; i < array.length; i++) {     if (Double.isNaN( array[i] )) {         return Double.NaN;     }     if (array[i] < min) {         min = array[i];     } } return min;
SDL_162:432:double_min(double): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } double min = array[0]; for (int i = 1; i < array.length; i++) {     if (Double.isNaN( array[i] )) {         return Double.NaN;     }     if (array[i] < min) {         min = array[i];     } } return min;  =>   if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } double min = array[0]; return min;
SDL_163:424:double_min(double): throw new java.lang.IllegalArgumentException( \"The Array must not be null\" );  =>  
SDL_164:430:double_min(double): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }
SDL_165:426:double_min(double): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>  
SDL_166:427:double_min(double): throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );  =>  
SDL_167:429:double_min(double): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }
SDL_168:435:double_min(double): if (Double.isNaN( array[i] )) {     return Double.NaN; } if (array[i] < min) {     min = array[i]; }  =>   if (array[i] < min) {     min = array[i]; }
SDL_169:435:double_min(double): if (Double.isNaN( array[i] )) {     return Double.NaN; } if (array[i] < min) {     min = array[i]; }  =>   if (Double.isNaN( array[i] )) {     return Double.NaN; }
SDL_170:439:double_min(double): for (int i = 1; i < array.length; i++) {     if (Double.isNaN( array[i] )) {         return Double.NaN;     }     if (array[i] < min) {         min = array[i];     } }  =>   for (int i = 1;; i++) {     if (Double.isNaN( array[i] )) {         return Double.NaN;     }     if (array[i] < min) {         min = array[i];     } }
SDL_171:439:double_min(double): for (int i = 1; i < array.length; i++) {     if (Double.isNaN( array[i] )) {         return Double.NaN;     }     if (array[i] < min) {         min = array[i];     } }  =>   for (int i = 1; i < array.length;) {     if (Double.isNaN( array[i] )) {         return Double.NaN;     }     if (array[i] < min) {         min = array[i];     } }
SDL_172:435:double_min(double): if (Double.isNaN( array[i] )) {     return Double.NaN; }  =>   if (true) {     return Double.NaN; }
SDL_173:434:double_min(double): return Double.NaN;  =>   return 0;
SDL_174:436:double_min(double): min = array[i];  =>  
SDL_175:438:double_min(double): if (array[i] < min) {     min = array[i]; }  =>   if (true) {     min = array[i]; }
SDL_176:440:double_min(double): return min;  =>   return 0;
SDL_177:454:float_min(float): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } float min = array[0]; for (int i = 1; i < array.length; i++) {     if (Float.isNaN( array[i] )) {         return Float.NaN;     }     if (array[i] < min) {         min = array[i];     } } return min;  =>   float min = array[0]; for (int i = 1; i < array.length; i++) {     if (Float.isNaN( array[i] )) {         return Float.NaN;     }     if (array[i] < min) {         min = array[i];     } } return min;
SDL_178:453:float_min(float): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } float min = array[0]; for (int i = 1; i < array.length; i++) {     if (Float.isNaN( array[i] )) {         return Float.NaN;     }     if (array[i] < min) {         min = array[i];     } } return min;  =>   if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } float min = array[0]; return min;
SDL_179:445:float_min(float): throw new java.lang.IllegalArgumentException( \"The Array must not be null\" );  =>  
SDL_180:451:float_min(float): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }
SDL_181:447:float_min(float): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>  
SDL_182:448:float_min(float): throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );  =>  
SDL_183:450:float_min(float): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }
SDL_184:456:float_min(float): if (Float.isNaN( array[i] )) {     return Float.NaN; } if (array[i] < min) {     min = array[i]; }  =>   if (array[i] < min) {     min = array[i]; }
SDL_185:456:float_min(float): if (Float.isNaN( array[i] )) {     return Float.NaN; } if (array[i] < min) {     min = array[i]; }  =>   if (Float.isNaN( array[i] )) {     return Float.NaN; }
SDL_186:460:float_min(float): for (int i = 1; i < array.length; i++) {     if (Float.isNaN( array[i] )) {         return Float.NaN;     }     if (array[i] < min) {         min = array[i];     } }  =>   for (int i = 1;; i++) {     if (Float.isNaN( array[i] )) {         return Float.NaN;     }     if (array[i] < min) {         min = array[i];     } }
SDL_187:460:float_min(float): for (int i = 1; i < array.length; i++) {     if (Float.isNaN( array[i] )) {         return Float.NaN;     }     if (array[i] < min) {         min = array[i];     } }  =>   for (int i = 1; i < array.length;) {     if (Float.isNaN( array[i] )) {         return Float.NaN;     }     if (array[i] < min) {         min = array[i];     } }
SDL_188:456:float_min(float): if (Float.isNaN( array[i] )) {     return Float.NaN; }  =>   if (true) {     return Float.NaN; }
SDL_189:455:float_min(float): return Float.NaN;  =>   return 0;
SDL_190:457:float_min(float): min = array[i];  =>  
SDL_191:459:float_min(float): if (array[i] < min) {     min = array[i]; }  =>   if (true) {     min = array[i]; }
SDL_192:461:float_min(float): return min;  =>   return 0;
SDL_193:472:long_max(long): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } long max = array[0]; for (int j = 1; j < array.length; j++) {     if (array[j] > max) {         max = array[j];     } } return max;  =>   long max = array[0]; for (int j = 1; j < array.length; j++) {     if (array[j] > max) {         max = array[j];     } } return max;
SDL_194:474:long_max(long): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } long max = array[0]; for (int j = 1; j < array.length; j++) {     if (array[j] > max) {         max = array[j];     } } return max;  =>   if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } long max = array[0]; return max;
SDL_195:466:long_max(long): throw new java.lang.IllegalArgumentException( \"The Array must not be null\" );  =>  
SDL_196:472:long_max(long): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }
SDL_197:468:long_max(long): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>  
SDL_198:469:long_max(long): throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );  =>  
SDL_199:471:long_max(long): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }
SDL_200:474:long_max(long): if (array[j] > max) {     max = array[j]; }  =>  
SDL_201:478:long_max(long): for (int j = 1; j < array.length; j++) {     if (array[j] > max) {         max = array[j];     } }  =>   for (int j = 1;; j++) {     if (array[j] > max) {         max = array[j];     } }
SDL_202:478:long_max(long): for (int j = 1; j < array.length; j++) {     if (array[j] > max) {         max = array[j];     } }  =>   for (int j = 1; j < array.length;) {     if (array[j] > max) {         max = array[j];     } }
SDL_203:475:long_max(long): max = array[j];  =>  
SDL_204:477:long_max(long): if (array[j] > max) {     max = array[j]; }  =>   if (true) {     max = array[j]; }
SDL_205:479:long_max(long): return max;  =>   return 0;
SDL_206:490:int_max(int): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } int max = array[0]; for (int j = 1; j < array.length; j++) {     if (array[j] > max) {         max = array[j];     } } return max;  =>   int max = array[0]; for (int j = 1; j < array.length; j++) {     if (array[j] > max) {         max = array[j];     } } return max;
SDL_207:492:int_max(int): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } int max = array[0]; for (int j = 1; j < array.length; j++) {     if (array[j] > max) {         max = array[j];     } } return max;  =>   if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } int max = array[0]; return max;
SDL_208:484:int_max(int): throw new java.lang.IllegalArgumentException( \"The Array must not be null\" );  =>  
SDL_209:490:int_max(int): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }
SDL_210:486:int_max(int): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>  
SDL_211:487:int_max(int): throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );  =>  
SDL_212:489:int_max(int): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }
SDL_213:492:int_max(int): if (array[j] > max) {     max = array[j]; }  =>  
SDL_214:496:int_max(int): for (int j = 1; j < array.length; j++) {     if (array[j] > max) {         max = array[j];     } }  =>   for (int j = 1;; j++) {     if (array[j] > max) {         max = array[j];     } }
SDL_215:496:int_max(int): for (int j = 1; j < array.length; j++) {     if (array[j] > max) {         max = array[j];     } }  =>   for (int j = 1; j < array.length;) {     if (array[j] > max) {         max = array[j];     } }
SDL_216:493:int_max(int): max = array[j];  =>  
SDL_217:495:int_max(int): if (array[j] > max) {     max = array[j]; }  =>   if (true) {     max = array[j]; }
SDL_218:497:int_max(int): return max;  =>   return 0;
SDL_219:508:short_max(short): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } short max = array[0]; for (int i = 1; i < array.length; i++) {     if (array[i] > max) {         max = array[i];     } } return max;  =>   short max = array[0]; for (int i = 1; i < array.length; i++) {     if (array[i] > max) {         max = array[i];     } } return max;
SDL_220:510:short_max(short): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } short max = array[0]; for (int i = 1; i < array.length; i++) {     if (array[i] > max) {         max = array[i];     } } return max;  =>   if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } short max = array[0]; return max;
SDL_221:502:short_max(short): throw new java.lang.IllegalArgumentException( \"The Array must not be null\" );  =>  
SDL_222:508:short_max(short): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }
SDL_223:504:short_max(short): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>  
SDL_224:505:short_max(short): throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );  =>  
SDL_225:507:short_max(short): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }
SDL_226:510:short_max(short): if (array[i] > max) {     max = array[i]; }  =>  
SDL_227:514:short_max(short): for (int i = 1; i < array.length; i++) {     if (array[i] > max) {         max = array[i];     } }  =>   for (int i = 1;; i++) {     if (array[i] > max) {         max = array[i];     } }
SDL_228:514:short_max(short): for (int i = 1; i < array.length; i++) {     if (array[i] > max) {         max = array[i];     } }  =>   for (int i = 1; i < array.length;) {     if (array[i] > max) {         max = array[i];     } }
SDL_229:511:short_max(short): max = array[i];  =>  
SDL_230:513:short_max(short): if (array[i] > max) {     max = array[i]; }  =>   if (true) {     max = array[i]; }
SDL_231:515:short_max(short): return max;  =>   return 0;
SDL_232:526:byte_max(byte): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } byte max = array[0]; for (int i = 1; i < array.length; i++) {     if (array[i] > max) {         max = array[i];     } } return max;  =>   byte max = array[0]; for (int i = 1; i < array.length; i++) {     if (array[i] > max) {         max = array[i];     } } return max;
SDL_233:528:byte_max(byte): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } byte max = array[0]; for (int i = 1; i < array.length; i++) {     if (array[i] > max) {         max = array[i];     } } return max;  =>   if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } byte max = array[0]; return max;
SDL_234:520:byte_max(byte): throw new java.lang.IllegalArgumentException( \"The Array must not be null\" );  =>  
SDL_235:526:byte_max(byte): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }
SDL_236:522:byte_max(byte): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>  
SDL_237:523:byte_max(byte): throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );  =>  
SDL_238:525:byte_max(byte): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }
SDL_239:528:byte_max(byte): if (array[i] > max) {     max = array[i]; }  =>  
SDL_240:532:byte_max(byte): for (int i = 1; i < array.length; i++) {     if (array[i] > max) {         max = array[i];     } }  =>   for (int i = 1;; i++) {     if (array[i] > max) {         max = array[i];     } }
SDL_241:532:byte_max(byte): for (int i = 1; i < array.length; i++) {     if (array[i] > max) {         max = array[i];     } }  =>   for (int i = 1; i < array.length;) {     if (array[i] > max) {         max = array[i];     } }
SDL_242:529:byte_max(byte): max = array[i];  =>  
SDL_243:531:byte_max(byte): if (array[i] > max) {     max = array[i]; }  =>   if (true) {     max = array[i]; }
SDL_244:547:double_max(double): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } double max = array[0]; for (int j = 1; j < array.length; j++) {     if (Double.isNaN( array[j] )) {         return Double.NaN;     }     if (array[j] > max) {         max = array[j];     } } return max;  =>   double max = array[0]; for (int j = 1; j < array.length; j++) {     if (Double.isNaN( array[j] )) {         return Double.NaN;     }     if (array[j] > max) {         max = array[j];     } } return max;
SDL_245:546:double_max(double): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } double max = array[0]; for (int j = 1; j < array.length; j++) {     if (Double.isNaN( array[j] )) {         return Double.NaN;     }     if (array[j] > max) {         max = array[j];     } } return max;  =>   if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } double max = array[0]; return max;
SDL_246:538:double_max(double): throw new java.lang.IllegalArgumentException( \"The Array must not be null\" );  =>  
SDL_247:544:double_max(double): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }
SDL_248:540:double_max(double): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>  
SDL_249:541:double_max(double): throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );  =>  
SDL_250:543:double_max(double): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }
SDL_251:549:double_max(double): if (Double.isNaN( array[j] )) {     return Double.NaN; } if (array[j] > max) {     max = array[j]; }  =>   if (array[j] > max) {     max = array[j]; }
SDL_252:549:double_max(double): if (Double.isNaN( array[j] )) {     return Double.NaN; } if (array[j] > max) {     max = array[j]; }  =>   if (Double.isNaN( array[j] )) {     return Double.NaN; }
SDL_253:553:double_max(double): for (int j = 1; j < array.length; j++) {     if (Double.isNaN( array[j] )) {         return Double.NaN;     }     if (array[j] > max) {         max = array[j];     } }  =>   for (int j = 1;; j++) {     if (Double.isNaN( array[j] )) {         return Double.NaN;     }     if (array[j] > max) {         max = array[j];     } }
SDL_254:553:double_max(double): for (int j = 1; j < array.length; j++) {     if (Double.isNaN( array[j] )) {         return Double.NaN;     }     if (array[j] > max) {         max = array[j];     } }  =>   for (int j = 1; j < array.length;) {     if (Double.isNaN( array[j] )) {         return Double.NaN;     }     if (array[j] > max) {         max = array[j];     } }
SDL_255:549:double_max(double): if (Double.isNaN( array[j] )) {     return Double.NaN; }  =>   if (true) {     return Double.NaN; }
SDL_256:548:double_max(double): return Double.NaN;  =>   return 0;
SDL_257:550:double_max(double): max = array[j];  =>  
SDL_258:552:double_max(double): if (array[j] > max) {     max = array[j]; }  =>   if (true) {     max = array[j]; }
SDL_259:554:double_max(double): return max;  =>   return 0;
SDL_260:568:float_max(float): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } float max = array[0]; for (int j = 1; j < array.length; j++) {     if (Float.isNaN( array[j] )) {         return Float.NaN;     }     if (array[j] > max) {         max = array[j];     } } return max;  =>   float max = array[0]; for (int j = 1; j < array.length; j++) {     if (Float.isNaN( array[j] )) {         return Float.NaN;     }     if (array[j] > max) {         max = array[j];     } } return max;
SDL_261:567:float_max(float): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } float max = array[0]; for (int j = 1; j < array.length; j++) {     if (Float.isNaN( array[j] )) {         return Float.NaN;     }     if (array[j] > max) {         max = array[j];     } } return max;  =>   if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } float max = array[0]; return max;
SDL_262:559:float_max(float): throw new java.lang.IllegalArgumentException( \"The Array must not be null\" );  =>  
SDL_263:565:float_max(float): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }
SDL_264:561:float_max(float): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>  
SDL_265:562:float_max(float): throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );  =>  
SDL_266:564:float_max(float): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }
SDL_267:570:float_max(float): if (Float.isNaN( array[j] )) {     return Float.NaN; } if (array[j] > max) {     max = array[j]; }  =>   if (array[j] > max) {     max = array[j]; }
SDL_268:570:float_max(float): if (Float.isNaN( array[j] )) {     return Float.NaN; } if (array[j] > max) {     max = array[j]; }  =>   if (Float.isNaN( array[j] )) {     return Float.NaN; }
SDL_269:574:float_max(float): for (int j = 1; j < array.length; j++) {     if (Float.isNaN( array[j] )) {         return Float.NaN;     }     if (array[j] > max) {         max = array[j];     } }  =>   for (int j = 1;; j++) {     if (Float.isNaN( array[j] )) {         return Float.NaN;     }     if (array[j] > max) {         max = array[j];     } }
SDL_270:574:float_max(float): for (int j = 1; j < array.length; j++) {     if (Float.isNaN( array[j] )) {         return Float.NaN;     }     if (array[j] > max) {         max = array[j];     } }  =>   for (int j = 1; j < array.length;) {     if (Float.isNaN( array[j] )) {         return Float.NaN;     }     if (array[j] > max) {         max = array[j];     } }
SDL_271:570:float_max(float): if (Float.isNaN( array[j] )) {     return Float.NaN; }  =>   if (true) {     return Float.NaN; }
SDL_272:569:float_max(float): return Float.NaN;  =>   return 0;
SDL_273:571:float_max(float): max = array[j];  =>  
SDL_274:573:float_max(float): if (array[j] > max) {     max = array[j]; }  =>   if (true) {     max = array[j]; }
SDL_275:575:float_max(float): return max;  =>   return 0;
SDL_276:583:long_min(long,long,long): if (b < a) {     a = b; } if (c < a) {     a = c; } return a;  =>   if (c < a) {     a = c; } return a;
SDL_277:583:long_min(long,long,long): if (b < a) {     a = b; } if (c < a) {     a = c; } return a;  =>   if (b < a) {     a = b; } return a;
SDL_278:580:long_min(long,long,long): a = b;  =>  
SDL_279:582:long_min(long,long,long): if (b < a) {     a = b; }  =>   if (true) {     a = b; }
SDL_280:583:long_min(long,long,long): a = c;  =>  
SDL_281:585:long_min(long,long,long): if (c < a) {     a = c; }  =>   if (true) {     a = c; }
SDL_282:586:long_min(long,long,long): return a;  =>   return 0;
SDL_283:594:int_min(int,int,int): if (b < a) {     a = b; } if (c < a) {     a = c; } return a;  =>   if (c < a) {     a = c; } return a;
SDL_284:594:int_min(int,int,int): if (b < a) {     a = b; } if (c < a) {     a = c; } return a;  =>   if (b < a) {     a = b; } return a;
SDL_285:591:int_min(int,int,int): a = b;  =>  
SDL_286:593:int_min(int,int,int): if (b < a) {     a = b; }  =>   if (true) {     a = b; }
SDL_287:594:int_min(int,int,int): a = c;  =>  
SDL_288:596:int_min(int,int,int): if (c < a) {     a = c; }  =>   if (true) {     a = c; }
SDL_289:597:int_min(int,int,int): return a;  =>   return 0;
SDL_290:605:short_min(short,short,short): if (b < a) {     a = b; } if (c < a) {     a = c; } return a;  =>   if (c < a) {     a = c; } return a;
SDL_291:605:short_min(short,short,short): if (b < a) {     a = b; } if (c < a) {     a = c; } return a;  =>   if (b < a) {     a = b; } return a;
SDL_292:602:short_min(short,short,short): a = b;  =>  
SDL_293:604:short_min(short,short,short): if (b < a) {     a = b; }  =>   if (true) {     a = b; }
SDL_294:605:short_min(short,short,short): a = c;  =>  
SDL_295:607:short_min(short,short,short): if (c < a) {     a = c; }  =>   if (true) {     a = c; }
SDL_296:608:short_min(short,short,short): return a;  =>   return 0;
SDL_297:616:byte_min(byte,byte,byte): if (b < a) {     a = b; } if (c < a) {     a = c; } return a;  =>   if (c < a) {     a = c; } return a;
SDL_298:616:byte_min(byte,byte,byte): if (b < a) {     a = b; } if (c < a) {     a = c; } return a;  =>   if (b < a) {     a = b; } return a;
SDL_299:613:byte_min(byte,byte,byte): a = b;  =>  
SDL_300:615:byte_min(byte,byte,byte): if (b < a) {     a = b; }  =>   if (true) {     a = b; }
SDL_301:616:byte_min(byte,byte,byte): a = c;  =>  
SDL_302:618:byte_min(byte,byte,byte): if (c < a) {     a = c; }  =>   if (true) {     a = c; }
SDL_303:624:double_min(double,double,double): return Math.min( Math.min( a, b ), c );  =>   return 0;
SDL_304:629:float_min(float,float,float): return Math.min( Math.min( a, b ), c );  =>   return 0;
SDL_305:637:long_max(long,long,long): if (b > a) {     a = b; } if (c > a) {     a = c; } return a;  =>   if (c > a) {     a = c; } return a;
SDL_306:637:long_max(long,long,long): if (b > a) {     a = b; } if (c > a) {     a = c; } return a;  =>   if (b > a) {     a = b; } return a;
SDL_307:634:long_max(long,long,long): a = b;  =>  
SDL_308:636:long_max(long,long,long): if (b > a) {     a = b; }  =>   if (true) {     a = b; }
SDL_309:637:long_max(long,long,long): a = c;  =>  
SDL_310:639:long_max(long,long,long): if (c > a) {     a = c; }  =>   if (true) {     a = c; }
SDL_311:640:long_max(long,long,long): return a;  =>   return 0;
SDL_312:648:int_max(int,int,int): if (b > a) {     a = b; } if (c > a) {     a = c; } return a;  =>   if (c > a) {     a = c; } return a;
SDL_313:648:int_max(int,int,int): if (b > a) {     a = b; } if (c > a) {     a = c; } return a;  =>   if (b > a) {     a = b; } return a;
SDL_314:645:int_max(int,int,int): a = b;  =>  
SDL_315:647:int_max(int,int,int): if (b > a) {     a = b; }  =>   if (true) {     a = b; }
SDL_316:648:int_max(int,int,int): a = c;  =>  
SDL_317:650:int_max(int,int,int): if (c > a) {     a = c; }  =>   if (true) {     a = c; }
SDL_318:651:int_max(int,int,int): return a;  =>   return 0;
SDL_319:659:short_max(short,short,short): if (b > a) {     a = b; } if (c > a) {     a = c; } return a;  =>   if (c > a) {     a = c; } return a;
SDL_320:659:short_max(short,short,short): if (b > a) {     a = b; } if (c > a) {     a = c; } return a;  =>   if (b > a) {     a = b; } return a;
SDL_321:656:short_max(short,short,short): a = b;  =>  
SDL_322:658:short_max(short,short,short): if (b > a) {     a = b; }  =>   if (true) {     a = b; }
SDL_323:659:short_max(short,short,short): a = c;  =>  
SDL_324:661:short_max(short,short,short): if (c > a) {     a = c; }  =>   if (true) {     a = c; }
SDL_325:662:short_max(short,short,short): return a;  =>   return 0;
SDL_326:670:byte_max(byte,byte,byte): if (b > a) {     a = b; } if (c > a) {     a = c; } return a;  =>   if (c > a) {     a = c; } return a;
SDL_327:670:byte_max(byte,byte,byte): if (b > a) {     a = b; } if (c > a) {     a = c; } return a;  =>   if (b > a) {     a = b; } return a;
SDL_328:667:byte_max(byte,byte,byte): a = b;  =>  
SDL_329:669:byte_max(byte,byte,byte): if (b > a) {     a = b; }  =>   if (true) {     a = b; }
SDL_330:670:byte_max(byte,byte,byte): a = c;  =>  
SDL_331:672:byte_max(byte,byte,byte): if (c > a) {     a = c; }  =>   if (true) {     a = c; }
SDL_332:678:double_max(double,double,double): return Math.max( Math.max( a, b ), c );  =>   return 0;
SDL_333:683:float_max(float,float,float): return Math.max( Math.max( a, b ), c );  =>   return 0;
SDL_334:693:boolean_isDigits(java.lang.String): if (StringUtils.isEmpty( str )) {     return false; } for (int i = 0; i < str.length(); i++) {     if (!Character.isDigit( str.charAt( i ) )) {         return false;     } } return true;  =>   for (int i = 0; i < str.length(); i++) {     if (!Character.isDigit( str.charAt( i ) )) {         return false;     } } return true;
SDL_335:691:boolean_isDigits(java.lang.String): if (StringUtils.isEmpty( str )) {     return false; } for (int i = 0; i < str.length(); i++) {     if (!Character.isDigit( str.charAt( i ) )) {         return false;     } } return true;  =>   if (StringUtils.isEmpty( str )) {     return false; } return true;
SDL_336:690:boolean_isDigits(java.lang.String): if (StringUtils.isEmpty( str )) {     return false; }  =>   if (true) {     return false; }
SDL_337:689:boolean_isDigits(java.lang.String): return false;  =>   return true;
SDL_338:691:boolean_isDigits(java.lang.String): if (!Character.isDigit( str.charAt( i ) )) {     return false; }  =>  
SDL_339:695:boolean_isDigits(java.lang.String): for (int i = 0; i < str.length(); i++) {     if (!Character.isDigit( str.charAt( i ) )) {         return false;     } }  =>   for (int i = 0;; i++) {     if (!Character.isDigit( str.charAt( i ) )) {         return false;     } }
SDL_340:695:boolean_isDigits(java.lang.String): for (int i = 0; i < str.length(); i++) {     if (!Character.isDigit( str.charAt( i ) )) {         return false;     } }  =>   for (int i = 0; i < str.length();) {     if (!Character.isDigit( str.charAt( i ) )) {         return false;     } }
SDL_341:694:boolean_isDigits(java.lang.String): if (!Character.isDigit( str.charAt( i ) )) {     return false; }  =>   if (true) {     return false; }
SDL_342:693:boolean_isDigits(java.lang.String): return false;  =>   return true;
SDL_343:696:boolean_isDigits(java.lang.String): return true;  =>   return false;
SDL_344:778:boolean_isNumber(java.lang.String): if (StringUtils.isEmpty( str )) {     return false; } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false; int start = chars[0] == '-' ? 1 : 0; if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {     int i = start + 2;     if (i == sz) {         return false;     }     for (; i < chars.length; i++) {         if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {             return false;         }     }     return true; } sz--; int i = start; while (i < sz || i < sz + 1 && allowSigns && !foundDigit) {     if (chars[i] >= '0' && chars[i] <= '9') {         foundDigit = true;         allowSigns = false;     } else {         if (chars[i] == '.') {             if (hasDecPoint || hasExp) {                 return false;             }             hasDecPoint = true;         } else {             if (chars[i] == 'e' || chars[i] == 'E') {                 if (hasExp) {                     return false;                 }                 if (!foundDigit) {                     return false;                 }                 hasExp = true;                 allowSigns = true;             } else {                 if (chars[i] == '+' || chars[i] == '-') {                     if (!allowSigns) {                         return false;                     }                     allowSigns = false;                     foundDigit = false;                 } else {                     return false;                 }             }         }     }     i++; } if (i < chars.length) {     if (chars[i] >= '0' && chars[i] <= '9') {         return true;     }     if (chars[i] == 'e' || chars[i] == 'E') {         return false;     }     if (chars[i] == '.') {         if (hasDecPoint || hasExp) {             return false;         }         return foundDigit;     }     if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {         return foundDigit;     }     if (chars[i] == 'l' || chars[i] == 'L') {         return foundDigit && !hasExp && !hasDecPoint;     }     return false; } return !allowSigns && foundDigit;  =>   char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false; int start = chars[0] == '-' ? 1 : 0; if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {     int i = start + 2;     if (i == sz) {         return false;     }     for (; i < chars.length; i++) {         if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {             return false;         }     }     return true; } sz--; int i = start; while (i < sz || i < sz + 1 && allowSigns && !foundDigit) {     if (chars[i] >= '0' && chars[i] <= '9') {         foundDigit = true;         allowSigns = false;     } else {         if (chars[i] == '.') {             if (hasDecPoint || hasExp) {                 return false;             }             hasDecPoint = true;         } else {             if (chars[i] == 'e' || chars[i] == 'E') {                 if (hasExp) {                     return false;                 }                 if (!foundDigit) {                     return false;                 }                 hasExp = true;                 allowSigns = true;             } else {                 if (chars[i] == '+' || chars[i] == '-') {                     if (!allowSigns) {                         return false;                     }                     allowSigns = false;                     foundDigit = false;                 } else {                     return false;                 }             }         }     }     i++; } if (i < chars.length) {     if (chars[i] >= '0' && chars[i] <= '9') {         return true;     }     if (chars[i] == 'e' || chars[i] == 'E') {         return false;     }     if (chars[i] == '.') {         if (hasDecPoint || hasExp) {             return false;         }         return foundDigit;     }     if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {         return foundDigit;     }     if (chars[i] == 'l' || chars[i] == 'L') {         return foundDigit && !hasExp && !hasDecPoint;     }     return false; } return !allowSigns && foundDigit;
SDL_345:769:boolean_isNumber(java.lang.String): if (StringUtils.isEmpty( str )) {     return false; } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false; int start = chars[0] == '-' ? 1 : 0; if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {     int i = start + 2;     if (i == sz) {         return false;     }     for (; i < chars.length; i++) {         if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {             return false;         }     }     return true; } sz--; int i = start; while (i < sz || i < sz + 1 && allowSigns && !foundDigit) {     if (chars[i] >= '0' && chars[i] <= '9') {         foundDigit = true;         allowSigns = false;     } else {         if (chars[i] == '.') {             if (hasDecPoint || hasExp) {                 return false;             }             hasDecPoint = true;         } else {             if (chars[i] == 'e' || chars[i] == 'E') {                 if (hasExp) {                     return false;                 }                 if (!foundDigit) {                     return false;                 }                 hasExp = true;                 allowSigns = true;             } else {                 if (chars[i] == '+' || chars[i] == '-') {                     if (!allowSigns) {                         return false;                     }                     allowSigns = false;                     foundDigit = false;                 } else {                     return false;                 }             }         }     }     i++; } if (i < chars.length) {     if (chars[i] >= '0' && chars[i] <= '9') {         return true;     }     if (chars[i] == 'e' || chars[i] == 'E') {         return false;     }     if (chars[i] == '.') {         if (hasDecPoint || hasExp) {             return false;         }         return foundDigit;     }     if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {         return foundDigit;     }     if (chars[i] == 'l' || chars[i] == 'L') {         return foundDigit && !hasExp && !hasDecPoint;     }     return false; } return !allowSigns && foundDigit;  =>   if (StringUtils.isEmpty( str )) {     return false; } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false; int start = chars[0] == '-' ? 1 : 0; sz--; int i = start; while (i < sz || i < sz + 1 && allowSigns && !foundDigit) {     if (chars[i] >= '0' && chars[i] <= '9') {         foundDigit = true;         allowSigns = false;     } else {         if (chars[i] == '.') {             if (hasDecPoint || hasExp) {                 return false;             }             hasDecPoint = true;         } else {             if (chars[i] == 'e' || chars[i] == 'E') {                 if (hasExp) {                     return false;                 }                 if (!foundDigit) {                     return false;                 }                 hasExp = true;                 allowSigns = true;             } else {                 if (chars[i] == '+' || chars[i] == '-') {                     if (!allowSigns) {                         return false;                     }                     allowSigns = false;                     foundDigit = false;                 } else {                     return false;                 }             }         }     }     i++; } if (i < chars.length) {     if (chars[i] >= '0' && chars[i] <= '9') {         return true;     }     if (chars[i] == 'e' || chars[i] == 'E') {         return false;     }     if (chars[i] == '.') {         if (hasDecPoint || hasExp) {             return false;         }         return foundDigit;     }     if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {         return foundDigit;     }     if (chars[i] == 'l' || chars[i] == 'L') {         return foundDigit && !hasExp && !hasDecPoint;     }     return false; } return !allowSigns && foundDigit;
SDL_346:780:boolean_isNumber(java.lang.String): if (StringUtils.isEmpty( str )) {     return false; } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false; int start = chars[0] == '-' ? 1 : 0; if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {     int i = start + 2;     if (i == sz) {         return false;     }     for (; i < chars.length; i++) {         if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {             return false;         }     }     return true; } sz--; int i = start; while (i < sz || i < sz + 1 && allowSigns && !foundDigit) {     if (chars[i] >= '0' && chars[i] <= '9') {         foundDigit = true;         allowSigns = false;     } else {         if (chars[i] == '.') {             if (hasDecPoint || hasExp) {                 return false;             }             hasDecPoint = true;         } else {             if (chars[i] == 'e' || chars[i] == 'E') {                 if (hasExp) {                     return false;                 }                 if (!foundDigit) {                     return false;                 }                 hasExp = true;                 allowSigns = true;             } else {                 if (chars[i] == '+' || chars[i] == '-') {                     if (!allowSigns) {                         return false;                     }                     allowSigns = false;                     foundDigit = false;                 } else {                     return false;                 }             }         }     }     i++; } if (i < chars.length) {     if (chars[i] >= '0' && chars[i] <= '9') {         return true;     }     if (chars[i] == 'e' || chars[i] == 'E') {         return false;     }     if (chars[i] == '.') {         if (hasDecPoint || hasExp) {             return false;         }         return foundDigit;     }     if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {         return foundDigit;     }     if (chars[i] == 'l' || chars[i] == 'L') {         return foundDigit && !hasExp && !hasDecPoint;     }     return false; } return !allowSigns && foundDigit;  =>   if (StringUtils.isEmpty( str )) {     return false; } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false; int start = chars[0] == '-' ? 1 : 0; if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {     int i = start + 2;     if (i == sz) {         return false;     }     for (; i < chars.length; i++) {         if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {             return false;         }     }     return true; } int i = start; while (i < sz || i < sz + 1 && allowSigns && !foundDigit) {     if (chars[i] >= '0' && chars[i] <= '9') {         foundDigit = true;         allowSigns = false;     } else {         if (chars[i] == '.') {             if (hasDecPoint || hasExp) {                 return false;             }             hasDecPoint = true;         } else {             if (chars[i] == 'e' || chars[i] == 'E') {                 if (hasExp) {                     return false;                 }                 if (!foundDigit) {                     return false;                 }                 hasExp = true;                 allowSigns = true;             } else {                 if (chars[i] == '+' || chars[i] == '-') {                     if (!allowSigns) {                         return false;                     }                     allowSigns = false;                     foundDigit = false;                 } else {                     return false;                 }             }         }     }     i++; } if (i < chars.length) {     if (chars[i] >= '0' && chars[i] <= '9') {         return true;     }     if (chars[i] == 'e' || chars[i] == 'E') {         return false;     }     if (chars[i] == '.') {         if (hasDecPoint || hasExp) {             return false;         }         return foundDigit;     }     if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {         return foundDigit;     }     if (chars[i] == 'l' || chars[i] == 'L') {         return foundDigit && !hasExp && !hasDecPoint;     }     return false; } return !allowSigns && foundDigit;
SDL_347:746:boolean_isNumber(java.lang.String): if (StringUtils.isEmpty( str )) {     return false; } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false; int start = chars[0] == '-' ? 1 : 0; if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {     int i = start + 2;     if (i == sz) {         return false;     }     for (; i < chars.length; i++) {         if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {             return false;         }     }     return true; } sz--; int i = start; while (i < sz || i < sz + 1 && allowSigns && !foundDigit) {     if (chars[i] >= '0' && chars[i] <= '9') {         foundDigit = true;         allowSigns = false;     } else {         if (chars[i] == '.') {             if (hasDecPoint || hasExp) {                 return false;             }             hasDecPoint = true;         } else {             if (chars[i] == 'e' || chars[i] == 'E') {                 if (hasExp) {                     return false;                 }                 if (!foundDigit) {                     return false;                 }                 hasExp = true;                 allowSigns = true;             } else {                 if (chars[i] == '+' || chars[i] == '-') {                     if (!allowSigns) {                         return false;                     }                     allowSigns = false;                     foundDigit = false;                 } else {                     return false;                 }             }         }     }     i++; } if (i < chars.length) {     if (chars[i] >= '0' && chars[i] <= '9') {         return true;     }     if (chars[i] == 'e' || chars[i] == 'E') {         return false;     }     if (chars[i] == '.') {         if (hasDecPoint || hasExp) {             return false;         }         return foundDigit;     }     if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {         return foundDigit;     }     if (chars[i] == 'l' || chars[i] == 'L') {         return foundDigit && !hasExp && !hasDecPoint;     }     return false; } return !allowSigns && foundDigit;  =>   if (StringUtils.isEmpty( str )) {     return false; } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false; int start = chars[0] == '-' ? 1 : 0; if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {     int i = start + 2;     if (i == sz) {         return false;     }     for (; i < chars.length; i++) {         if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {             return false;         }     }     return true; } sz--; int i = start; if (i < chars.length) {     if (chars[i] >= '0' && chars[i] <= '9') {         return true;     }     if (chars[i] == 'e' || chars[i] == 'E') {         return false;     }     if (chars[i] == '.') {         if (hasDecPoint || hasExp) {             return false;         }         return foundDigit;     }     if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {         return foundDigit;     }     if (chars[i] == 'l' || chars[i] == 'L') {         return foundDigit && !hasExp && !hasDecPoint;     }     return false; } return !allowSigns && foundDigit;
SDL_348:760:boolean_isNumber(java.lang.String): if (StringUtils.isEmpty( str )) {     return false; } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false; int start = chars[0] == '-' ? 1 : 0; if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {     int i = start + 2;     if (i == sz) {         return false;     }     for (; i < chars.length; i++) {         if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {             return false;         }     }     return true; } sz--; int i = start; while (i < sz || i < sz + 1 && allowSigns && !foundDigit) {     if (chars[i] >= '0' && chars[i] <= '9') {         foundDigit = true;         allowSigns = false;     } else {         if (chars[i] == '.') {             if (hasDecPoint || hasExp) {                 return false;             }             hasDecPoint = true;         } else {             if (chars[i] == 'e' || chars[i] == 'E') {                 if (hasExp) {                     return false;                 }                 if (!foundDigit) {                     return false;                 }                 hasExp = true;                 allowSigns = true;             } else {                 if (chars[i] == '+' || chars[i] == '-') {                     if (!allowSigns) {                         return false;                     }                     allowSigns = false;                     foundDigit = false;                 } else {                     return false;                 }             }         }     }     i++; } if (i < chars.length) {     if (chars[i] >= '0' && chars[i] <= '9') {         return true;     }     if (chars[i] == 'e' || chars[i] == 'E') {         return false;     }     if (chars[i] == '.') {         if (hasDecPoint || hasExp) {             return false;         }         return foundDigit;     }     if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {         return foundDigit;     }     if (chars[i] == 'l' || chars[i] == 'L') {         return foundDigit && !hasExp && !hasDecPoint;     }     return false; } return !allowSigns && foundDigit;  =>   if (StringUtils.isEmpty( str )) {     return false; } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false; int start = chars[0] == '-' ? 1 : 0; if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {     int i = start + 2;     if (i == sz) {         return false;     }     for (; i < chars.length; i++) {         if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {             return false;         }     }     return true; } sz--; int i = start; while (i < sz || i < sz + 1 && allowSigns && !foundDigit) {     if (chars[i] >= '0' && chars[i] <= '9') {         foundDigit = true;         allowSigns = false;     } else {         if (chars[i] == '.') {             if (hasDecPoint || hasExp) {                 return false;             }             hasDecPoint = true;         } else {             if (chars[i] == 'e' || chars[i] == 'E') {                 if (hasExp) {                     return false;                 }                 if (!foundDigit) {                     return false;                 }                 hasExp = true;                 allowSigns = true;             } else {                 if (chars[i] == '+' || chars[i] == '-') {                     if (!allowSigns) {                         return false;                     }                     allowSigns = false;                     foundDigit = false;                 } else {                     return false;                 }             }         }     }     i++; } return !allowSigns && foundDigit;
SDL_349:703:boolean_isNumber(java.lang.String): if (StringUtils.isEmpty( str )) {     return false; }  =>   if (true) {     return false; }
SDL_350:702:boolean_isNumber(java.lang.String): return false;  =>   return true;
SDL_351:718:boolean_isNumber(java.lang.String): int i = start + 2; if (i == sz) {     return false; } for (; i < chars.length; i++) {     if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {         return false;     } } return true;  =>   int i = start + 2; for (; i < chars.length; i++) {     if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {         return false;     } } return true;
SDL_352:716:boolean_isNumber(java.lang.String): int i = start + 2; if (i == sz) {     return false; } for (; i < chars.length; i++) {     if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {         return false;     } } return true;  =>   int i = start + 2; if (i == sz) {     return false; } return true;
SDL_353:722:boolean_isNumber(java.lang.String): if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {     int i = start + 2;     if (i == sz) {         return false;     }     for (; i < chars.length; i++) {         if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {             return false;         }     }     return true; }  =>   if (true) {     int i = start + 2;     if (i == sz) {         return false;     }     for (; i < chars.length; i++) {         if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {             return false;         }     }     return true; }
SDL_354:715:boolean_isNumber(java.lang.String): if (i == sz) {     return false; }  =>   if (true) {     return false; }
SDL_355:714:boolean_isNumber(java.lang.String): return false;  =>   return true;
SDL_356:716:boolean_isNumber(java.lang.String): if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {     return false; }  =>  
SDL_357:720:boolean_isNumber(java.lang.String): for (; i < chars.length; i++) {     if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {         return false;     } }  =>   for (;; i++) {     if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {         return false;     } }
SDL_358:720:boolean_isNumber(java.lang.String): for (; i < chars.length; i++) {     if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {         return false;     } }  =>   for (; i < chars.length;) {     if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {         return false;     } }
SDL_359:719:boolean_isNumber(java.lang.String): if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {     return false; }  =>   if (true) {     return false; }
SDL_360:718:boolean_isNumber(java.lang.String): return false;  =>   return true;
SDL_361:721:boolean_isNumber(java.lang.String): return true;  =>   return false;
SDL_362:726:boolean_isNumber(java.lang.String): if (chars[i] >= '0' && chars[i] <= '9') {     foundDigit = true;     allowSigns = false; } else {     if (chars[i] == '.') {         if (hasDecPoint || hasExp) {             return false;         }         hasDecPoint = true;     } else {         if (chars[i] == 'e' || chars[i] == 'E') {             if (hasExp) {                 return false;             }             if (!foundDigit) {                 return false;             }             hasExp = true;             allowSigns = true;         } else {             if (chars[i] == '+' || chars[i] == '-') {                 if (!allowSigns) {                     return false;                 }                 allowSigns = false;                 foundDigit = false;             } else {                 return false;             }         }     } } i++;  =>   i++;
SDL_363:757:boolean_isNumber(java.lang.String): if (chars[i] >= '0' && chars[i] <= '9') {     foundDigit = true;     allowSigns = false; } else {     if (chars[i] == '.') {         if (hasDecPoint || hasExp) {             return false;         }         hasDecPoint = true;     } else {         if (chars[i] == 'e' || chars[i] == 'E') {             if (hasExp) {                 return false;             }             if (!foundDigit) {                 return false;             }             hasExp = true;             allowSigns = true;         } else {             if (chars[i] == '+' || chars[i] == '-') {                 if (!allowSigns) {                     return false;                 }                 allowSigns = false;                 foundDigit = false;             } else {                 return false;             }         }     } } i++;  =>   if (chars[i] >= '0' && chars[i] <= '9') {     foundDigit = true;     allowSigns = false; } else {     if (chars[i] == '.') {         if (hasDecPoint || hasExp) {             return false;         }         hasDecPoint = true;     } else {         if (chars[i] == 'e' || chars[i] == 'E') {             if (hasExp) {                 return false;             }             if (!foundDigit) {                 return false;             }             hasExp = true;             allowSigns = true;         } else {             if (chars[i] == '+' || chars[i] == '-') {                 if (!allowSigns) {                     return false;                 }                 allowSigns = false;                 foundDigit = false;             } else {                 return false;             }         }     } }
SDL_364:759:boolean_isNumber(java.lang.String): while (i < sz || i < sz + 1 && allowSigns && !foundDigit) {     if (chars[i] >= '0' && chars[i] <= '9') {         foundDigit = true;         allowSigns = false;     } else {         if (chars[i] == '.') {             if (hasDecPoint || hasExp) {                 return false;             }             hasDecPoint = true;         } else {             if (chars[i] == 'e' || chars[i] == 'E') {                 if (hasExp) {                     return false;                 }                 if (!foundDigit) {                     return false;                 }                 hasExp = true;                 allowSigns = true;             } else {                 if (chars[i] == '+' || chars[i] == '-') {                     if (!allowSigns) {                         return false;                     }                     allowSigns = false;                     foundDigit = false;                 } else {                     return false;                 }             }         }     }     i++; }  =>   while (true) {     if (chars[i] >= '0' && chars[i] <= '9') {         foundDigit = true;         allowSigns = false;     } else {         if (chars[i] == '.') {             if (hasDecPoint || hasExp) {                 return false;             }             hasDecPoint = true;         } else {             if (chars[i] == 'e' || chars[i] == 'E') {                 if (hasExp) {                     return false;                 }                 if (!foundDigit) {                     return false;                 }                 hasExp = true;                 allowSigns = true;             } else {                 if (chars[i] == '+' || chars[i] == '-') {                     if (!allowSigns) {                         return false;                     }                     allowSigns = false;                     foundDigit = false;                 } else {                     return false;                 }             }         }     }     i++; }
SDL_365:727:boolean_isNumber(java.lang.String): foundDigit = true; allowSigns = false;  =>   allowSigns = false;
SDL_366:727:boolean_isNumber(java.lang.String): foundDigit = true; allowSigns = false;  =>   foundDigit = true;
SDL_367:757:boolean_isNumber(java.lang.String): if (chars[i] >= '0' && chars[i] <= '9') {     foundDigit = true;     allowSigns = false; } else {     if (chars[i] == '.') {         if (hasDecPoint || hasExp) {             return false;         }         hasDecPoint = true;     } else {         if (chars[i] == 'e' || chars[i] == 'E') {             if (hasExp) {                 return false;             }             if (!foundDigit) {                 return false;             }             hasExp = true;             allowSigns = true;         } else {             if (chars[i] == '+' || chars[i] == '-') {                 if (!allowSigns) {                     return false;                 }                 allowSigns = false;                 foundDigit = false;             } else {                 return false;             }         }     } }  =>   if (true) {     foundDigit = true;     allowSigns = false; } else {     if (chars[i] == '.') {         if (hasDecPoint || hasExp) {             return false;         }         hasDecPoint = true;     } else {         if (chars[i] == 'e' || chars[i] == 'E') {             if (hasExp) {                 return false;             }             if (!foundDigit) {                 return false;             }             hasExp = true;             allowSigns = true;         } else {             if (chars[i] == '+' || chars[i] == '-') {                 if (!allowSigns) {                     return false;                 }                 allowSigns = false;                 foundDigit = false;             } else {                 return false;             }         }     } }
SDL_368:729:boolean_isNumber(java.lang.String): if (chars[i] == '.') {     if (hasDecPoint || hasExp) {         return false;     }     hasDecPoint = true; } else {     if (chars[i] == 'e' || chars[i] == 'E') {         if (hasExp) {             return false;         }         if (!foundDigit) {             return false;         }         hasExp = true;         allowSigns = true;     } else {         if (chars[i] == '+' || chars[i] == '-') {             if (!allowSigns) {                 return false;             }             allowSigns = false;             foundDigit = false;         } else {             return false;         }     } }  =>  
SDL_369:731:boolean_isNumber(java.lang.String): if (hasDecPoint || hasExp) {     return false; } hasDecPoint = true;  =>   hasDecPoint = true;
SDL_370:733:boolean_isNumber(java.lang.String): if (hasDecPoint || hasExp) {     return false; } hasDecPoint = true;  =>   if (hasDecPoint || hasExp) {     return false; }
SDL_371:756:boolean_isNumber(java.lang.String): if (chars[i] == '.') {     if (hasDecPoint || hasExp) {         return false;     }     hasDecPoint = true; } else {     if (chars[i] == 'e' || chars[i] == 'E') {         if (hasExp) {             return false;         }         if (!foundDigit) {             return false;         }         hasExp = true;         allowSigns = true;     } else {         if (chars[i] == '+' || chars[i] == '-') {             if (!allowSigns) {                 return false;             }             allowSigns = false;             foundDigit = false;         } else {             return false;         }     } }  =>   if (true) {     if (hasDecPoint || hasExp) {         return false;     }     hasDecPoint = true; } else {     if (chars[i] == 'e' || chars[i] == 'E') {         if (hasExp) {             return false;         }         if (!foundDigit) {             return false;         }         hasExp = true;         allowSigns = true;     } else {         if (chars[i] == '+' || chars[i] == '-') {             if (!allowSigns) {                 return false;             }             allowSigns = false;             foundDigit = false;         } else {             return false;         }     } }
SDL_372:735:boolean_isNumber(java.lang.String): if (chars[i] == 'e' || chars[i] == 'E') {     if (hasExp) {         return false;     }     if (!foundDigit) {         return false;     }     hasExp = true;     allowSigns = true; } else {     if (chars[i] == '+' || chars[i] == '-') {         if (!allowSigns) {             return false;         }         allowSigns = false;         foundDigit = false;     } else {         return false;     } }  =>  
SDL_373:733:boolean_isNumber(java.lang.String): if (hasDecPoint || hasExp) {     return false; }  =>   if (true) {     return false; }
SDL_374:732:boolean_isNumber(java.lang.String): return false;  =>   return true;
SDL_375:741:boolean_isNumber(java.lang.String): if (hasExp) {     return false; } if (!foundDigit) {     return false; } hasExp = true; allowSigns = true;  =>   if (!foundDigit) {     return false; } hasExp = true; allowSigns = true;
SDL_376:741:boolean_isNumber(java.lang.String): if (hasExp) {     return false; } if (!foundDigit) {     return false; } hasExp = true; allowSigns = true;  =>   if (hasExp) {     return false; } hasExp = true; allowSigns = true;
SDL_377:743:boolean_isNumber(java.lang.String): if (hasExp) {     return false; } if (!foundDigit) {     return false; } hasExp = true; allowSigns = true;  =>   if (hasExp) {     return false; } if (!foundDigit) {     return false; } allowSigns = true;
SDL_378:743:boolean_isNumber(java.lang.String): if (hasExp) {     return false; } if (!foundDigit) {     return false; } hasExp = true; allowSigns = true;  =>   if (hasExp) {     return false; } if (!foundDigit) {     return false; } hasExp = true;
SDL_379:755:boolean_isNumber(java.lang.String): if (chars[i] == 'e' || chars[i] == 'E') {     if (hasExp) {         return false;     }     if (!foundDigit) {         return false;     }     hasExp = true;     allowSigns = true; } else {     if (chars[i] == '+' || chars[i] == '-') {         if (!allowSigns) {             return false;         }         allowSigns = false;         foundDigit = false;     } else {         return false;     } }  =>   if (true) {     if (hasExp) {         return false;     }     if (!foundDigit) {         return false;     }     hasExp = true;     allowSigns = true; } else {     if (chars[i] == '+' || chars[i] == '-') {         if (!allowSigns) {             return false;         }         allowSigns = false;         foundDigit = false;     } else {         return false;     } }
SDL_380:745:boolean_isNumber(java.lang.String): if (chars[i] == '+' || chars[i] == '-') {     if (!allowSigns) {         return false;     }     allowSigns = false;     foundDigit = false; } else {     return false; }  =>  
SDL_381:739:boolean_isNumber(java.lang.String): if (hasExp) {     return false; }  =>   if (true) {     return false; }
SDL_382:738:boolean_isNumber(java.lang.String): return false;  =>   return true;
SDL_383:742:boolean_isNumber(java.lang.String): if (!foundDigit) {     return false; }  =>   if (true) {     return false; }
SDL_384:741:boolean_isNumber(java.lang.String): return false;  =>   return true;
SDL_385:748:boolean_isNumber(java.lang.String): if (!allowSigns) {     return false; } allowSigns = false; foundDigit = false;  =>   allowSigns = false; foundDigit = false;
SDL_386:750:boolean_isNumber(java.lang.String): if (!allowSigns) {     return false; } allowSigns = false; foundDigit = false;  =>   if (!allowSigns) {     return false; } foundDigit = false;
SDL_387:750:boolean_isNumber(java.lang.String): if (!allowSigns) {     return false; } allowSigns = false; foundDigit = false;  =>   if (!allowSigns) {     return false; } allowSigns = false;
SDL_388:754:boolean_isNumber(java.lang.String): if (chars[i] == '+' || chars[i] == '-') {     if (!allowSigns) {         return false;     }     allowSigns = false;     foundDigit = false; } else {     return false; }  =>   if (true) {     if (!allowSigns) {         return false;     }     allowSigns = false;     foundDigit = false; } else {     return false; }
SDL_389:749:boolean_isNumber(java.lang.String): if (!allowSigns) {     return false; }  =>   if (true) {     return false; }
SDL_390:748:boolean_isNumber(java.lang.String): return false;  =>   return true;
SDL_391:753:boolean_isNumber(java.lang.String): return false;  =>   return true;
SDL_392:776:boolean_isNumber(java.lang.String): if (chars[i] >= '0' && chars[i] <= '9') {     return true; } if (chars[i] == 'e' || chars[i] == 'E') {     return false; } if (chars[i] == '.') {     if (hasDecPoint || hasExp) {         return false;     }     return foundDigit; } if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {     return foundDigit; } if (chars[i] == 'l' || chars[i] == 'L') {     return foundDigit && !hasExp && !hasDecPoint; } return false;  =>   if (chars[i] == 'e' || chars[i] == 'E') {     return false; } if (chars[i] == '.') {     if (hasDecPoint || hasExp) {         return false;     }     return foundDigit; } if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {     return foundDigit; } if (chars[i] == 'l' || chars[i] == 'L') {     return foundDigit && !hasExp && !hasDecPoint; } return false;
SDL_393:776:boolean_isNumber(java.lang.String): if (chars[i] >= '0' && chars[i] <= '9') {     return true; } if (chars[i] == 'e' || chars[i] == 'E') {     return false; } if (chars[i] == '.') {     if (hasDecPoint || hasExp) {         return false;     }     return foundDigit; } if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {     return foundDigit; } if (chars[i] == 'l' || chars[i] == 'L') {     return foundDigit && !hasExp && !hasDecPoint; } return false;  =>   if (chars[i] >= '0' && chars[i] <= '9') {     return true; } if (chars[i] == '.') {     if (hasDecPoint || hasExp) {         return false;     }     return foundDigit; } if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {     return foundDigit; } if (chars[i] == 'l' || chars[i] == 'L') {     return foundDigit && !hasExp && !hasDecPoint; } return false;
SDL_394:773:boolean_isNumber(java.lang.String): if (chars[i] >= '0' && chars[i] <= '9') {     return true; } if (chars[i] == 'e' || chars[i] == 'E') {     return false; } if (chars[i] == '.') {     if (hasDecPoint || hasExp) {         return false;     }     return foundDigit; } if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {     return foundDigit; } if (chars[i] == 'l' || chars[i] == 'L') {     return foundDigit && !hasExp && !hasDecPoint; } return false;  =>   if (chars[i] >= '0' && chars[i] <= '9') {     return true; } if (chars[i] == 'e' || chars[i] == 'E') {     return false; } if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {     return foundDigit; } if (chars[i] == 'l' || chars[i] == 'L') {     return foundDigit && !hasExp && !hasDecPoint; } return false;
SDL_395:776:boolean_isNumber(java.lang.String): if (chars[i] >= '0' && chars[i] <= '9') {     return true; } if (chars[i] == 'e' || chars[i] == 'E') {     return false; } if (chars[i] == '.') {     if (hasDecPoint || hasExp) {         return false;     }     return foundDigit; } if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {     return foundDigit; } if (chars[i] == 'l' || chars[i] == 'L') {     return foundDigit && !hasExp && !hasDecPoint; } return false;  =>   if (chars[i] >= '0' && chars[i] <= '9') {     return true; } if (chars[i] == 'e' || chars[i] == 'E') {     return false; } if (chars[i] == '.') {     if (hasDecPoint || hasExp) {         return false;     }     return foundDigit; } if (chars[i] == 'l' || chars[i] == 'L') {     return foundDigit && !hasExp && !hasDecPoint; } return false;
SDL_396:776:boolean_isNumber(java.lang.String): if (chars[i] >= '0' && chars[i] <= '9') {     return true; } if (chars[i] == 'e' || chars[i] == 'E') {     return false; } if (chars[i] == '.') {     if (hasDecPoint || hasExp) {         return false;     }     return foundDigit; } if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {     return foundDigit; } if (chars[i] == 'l' || chars[i] == 'L') {     return foundDigit && !hasExp && !hasDecPoint; } return false;  =>   if (chars[i] >= '0' && chars[i] <= '9') {     return true; } if (chars[i] == 'e' || chars[i] == 'E') {     return false; } if (chars[i] == '.') {     if (hasDecPoint || hasExp) {         return false;     }     return foundDigit; } if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {     return foundDigit; } return false;
SDL_397:780:boolean_isNumber(java.lang.String): if (i < chars.length) {     if (chars[i] >= '0' && chars[i] <= '9') {         return true;     }     if (chars[i] == 'e' || chars[i] == 'E') {         return false;     }     if (chars[i] == '.') {         if (hasDecPoint || hasExp) {             return false;         }         return foundDigit;     }     if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {         return foundDigit;     }     if (chars[i] == 'l' || chars[i] == 'L') {         return foundDigit && !hasExp && !hasDecPoint;     }     return false; }  =>   if (true) {     if (chars[i] >= '0' && chars[i] <= '9') {         return true;     }     if (chars[i] == 'e' || chars[i] == 'E') {         return false;     }     if (chars[i] == '.') {         if (hasDecPoint || hasExp) {             return false;         }         return foundDigit;     }     if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {         return foundDigit;     }     if (chars[i] == 'l' || chars[i] == 'L') {         return foundDigit && !hasExp && !hasDecPoint;     }     return false; }
SDL_398:763:boolean_isNumber(java.lang.String): if (chars[i] >= '0' && chars[i] <= '9') {     return true; }  =>   if (true) {     return true; }
SDL_399:762:boolean_isNumber(java.lang.String): return true;  =>   return false;
SDL_400:766:boolean_isNumber(java.lang.String): if (chars[i] == 'e' || chars[i] == 'E') {     return false; }  =>   if (true) {     return false; }
SDL_401:765:boolean_isNumber(java.lang.String): return false;  =>   return true;
SDL_402:768:boolean_isNumber(java.lang.String): if (hasDecPoint || hasExp) {     return false; } return foundDigit;  =>   return foundDigit;
SDL_403:772:boolean_isNumber(java.lang.String): if (chars[i] == '.') {     if (hasDecPoint || hasExp) {         return false;     }     return foundDigit; }  =>   if (true) {     if (hasDecPoint || hasExp) {         return false;     }     return foundDigit; }
SDL_404:770:boolean_isNumber(java.lang.String): if (hasDecPoint || hasExp) {     return false; }  =>   if (true) {     return false; }
SDL_405:769:boolean_isNumber(java.lang.String): return false;  =>   return true;
SDL_406:771:boolean_isNumber(java.lang.String): return foundDigit;  =>   return true;
SDL_407:771:boolean_isNumber(java.lang.String): return foundDigit;  =>   return false;
SDL_408:775:boolean_isNumber(java.lang.String): if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {     return foundDigit; }  =>   if (true) {     return foundDigit; }
SDL_409:774:boolean_isNumber(java.lang.String): return foundDigit;  =>   return true;
SDL_410:774:boolean_isNumber(java.lang.String): return foundDigit;  =>   return false;
SDL_411:778:boolean_isNumber(java.lang.String): if (chars[i] == 'l' || chars[i] == 'L') {     return foundDigit && !hasExp && !hasDecPoint; }  =>   if (true) {     return foundDigit && !hasExp && !hasDecPoint; }
SDL_412:777:boolean_isNumber(java.lang.String): return foundDigit && !hasExp && !hasDecPoint;  =>   return true;
SDL_413:777:boolean_isNumber(java.lang.String): return foundDigit && !hasExp && !hasDecPoint;  =>   return false;
SDL_414:779:boolean_isNumber(java.lang.String): return false;  =>   return true;
SDL_415:781:boolean_isNumber(java.lang.String): return !allowSigns && foundDigit;  =>   return true;
SDL_416:781:boolean_isNumber(java.lang.String): return !allowSigns && foundDigit;  =>   return false;
