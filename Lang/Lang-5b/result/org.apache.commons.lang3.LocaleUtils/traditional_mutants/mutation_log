ROR_1:32:java.util.Locale_toLocale(java.lang.String): str == null  =>   str != null
ROR_2:36:java.util.Locale_toLocale(java.lang.String): len < 2  =>   len > 2
ROR_3:36:java.util.Locale_toLocale(java.lang.String): len < 2  =>   len >= 2
ROR_4:36:java.util.Locale_toLocale(java.lang.String): len < 2  =>   len <= 2
ROR_5:36:java.util.Locale_toLocale(java.lang.String): len < 2  =>   len == 2
ROR_6:36:java.util.Locale_toLocale(java.lang.String): len < 2  =>   len != 2
ROR_7:36:java.util.Locale_toLocale(java.lang.String): len < 2  =>   true
ROR_8:36:java.util.Locale_toLocale(java.lang.String): len < 2  =>   false
ROR_9:44:java.util.Locale_toLocale(java.lang.String): len == 2  =>   len > 2
ROR_10:44:java.util.Locale_toLocale(java.lang.String): len == 2  =>   len >= 2
ROR_11:44:java.util.Locale_toLocale(java.lang.String): len == 2  =>   len < 2
ROR_12:44:java.util.Locale_toLocale(java.lang.String): len == 2  =>   len <= 2
ROR_13:44:java.util.Locale_toLocale(java.lang.String): len == 2  =>   len != 2
ROR_14:44:java.util.Locale_toLocale(java.lang.String): len == 2  =>   true
ROR_15:44:java.util.Locale_toLocale(java.lang.String): len == 2  =>   false
ROR_16:47:java.util.Locale_toLocale(java.lang.String): len < 5  =>   len > 5
ROR_17:47:java.util.Locale_toLocale(java.lang.String): len < 5  =>   len >= 5
ROR_18:47:java.util.Locale_toLocale(java.lang.String): len < 5  =>   len <= 5
ROR_19:47:java.util.Locale_toLocale(java.lang.String): len < 5  =>   len == 5
ROR_20:47:java.util.Locale_toLocale(java.lang.String): len < 5  =>   len != 5
ROR_21:47:java.util.Locale_toLocale(java.lang.String): len < 5  =>   true
ROR_22:47:java.util.Locale_toLocale(java.lang.String): len < 5  =>   false
ROR_23:50:java.util.Locale_toLocale(java.lang.String): str.charAt( 2 ) != '_'  =>   str.charAt( 2 ) > '_'
ROR_24:50:java.util.Locale_toLocale(java.lang.String): str.charAt( 2 ) != '_'  =>   str.charAt( 2 ) >= '_'
ROR_25:50:java.util.Locale_toLocale(java.lang.String): str.charAt( 2 ) != '_'  =>   str.charAt( 2 ) < '_'
ROR_26:50:java.util.Locale_toLocale(java.lang.String): str.charAt( 2 ) != '_'  =>   str.charAt( 2 ) <= '_'
ROR_27:50:java.util.Locale_toLocale(java.lang.String): str.charAt( 2 ) != '_'  =>   str.charAt( 2 ) == '_'
ROR_28:50:java.util.Locale_toLocale(java.lang.String): str.charAt( 2 ) != '_'  =>   true
ROR_29:50:java.util.Locale_toLocale(java.lang.String): str.charAt( 2 ) != '_'  =>   false
ROR_30:54:java.util.Locale_toLocale(java.lang.String): ch3 == '_'  =>   ch3 > '_'
ROR_31:54:java.util.Locale_toLocale(java.lang.String): ch3 == '_'  =>   ch3 >= '_'
ROR_32:54:java.util.Locale_toLocale(java.lang.String): ch3 == '_'  =>   ch3 < '_'
ROR_33:54:java.util.Locale_toLocale(java.lang.String): ch3 == '_'  =>   ch3 <= '_'
ROR_34:54:java.util.Locale_toLocale(java.lang.String): ch3 == '_'  =>   ch3 != '_'
ROR_35:54:java.util.Locale_toLocale(java.lang.String): ch3 == '_'  =>   true
ROR_36:54:java.util.Locale_toLocale(java.lang.String): ch3 == '_'  =>   false
ROR_37:61:java.util.Locale_toLocale(java.lang.String): len == 5  =>   len > 5
ROR_38:61:java.util.Locale_toLocale(java.lang.String): len == 5  =>   len >= 5
ROR_39:61:java.util.Locale_toLocale(java.lang.String): len == 5  =>   len < 5
ROR_40:61:java.util.Locale_toLocale(java.lang.String): len == 5  =>   len <= 5
ROR_41:61:java.util.Locale_toLocale(java.lang.String): len == 5  =>   len != 5
ROR_42:61:java.util.Locale_toLocale(java.lang.String): len == 5  =>   true
ROR_43:61:java.util.Locale_toLocale(java.lang.String): len == 5  =>   false
ROR_44:64:java.util.Locale_toLocale(java.lang.String): len < 7  =>   len > 7
ROR_45:64:java.util.Locale_toLocale(java.lang.String): len < 7  =>   len >= 7
ROR_46:64:java.util.Locale_toLocale(java.lang.String): len < 7  =>   len <= 7
ROR_47:64:java.util.Locale_toLocale(java.lang.String): len < 7  =>   len == 7
ROR_48:64:java.util.Locale_toLocale(java.lang.String): len < 7  =>   len != 7
ROR_49:64:java.util.Locale_toLocale(java.lang.String): len < 7  =>   true
ROR_50:64:java.util.Locale_toLocale(java.lang.String): len < 7  =>   false
ROR_51:67:java.util.Locale_toLocale(java.lang.String): str.charAt( 5 ) != '_'  =>   str.charAt( 5 ) > '_'
ROR_52:67:java.util.Locale_toLocale(java.lang.String): str.charAt( 5 ) != '_'  =>   str.charAt( 5 ) >= '_'
ROR_53:67:java.util.Locale_toLocale(java.lang.String): str.charAt( 5 ) != '_'  =>   str.charAt( 5 ) < '_'
ROR_54:67:java.util.Locale_toLocale(java.lang.String): str.charAt( 5 ) != '_'  =>   str.charAt( 5 ) <= '_'
ROR_55:67:java.util.Locale_toLocale(java.lang.String): str.charAt( 5 ) != '_'  =>   str.charAt( 5 ) == '_'
ROR_56:67:java.util.Locale_toLocale(java.lang.String): str.charAt( 5 ) != '_'  =>   true
ROR_57:67:java.util.Locale_toLocale(java.lang.String): str.charAt( 5 ) != '_'  =>   false
ROR_58:81:java.util.List_localeLookupList(java.util.Locale,java.util.Locale): locale != null  =>   locale == null
ROR_59:83:java.util.List_localeLookupList(java.util.Locale,java.util.Locale): locale.getVariant().length() > 0  =>   locale.getVariant().length() >= 0
ROR_60:83:java.util.List_localeLookupList(java.util.Locale,java.util.Locale): locale.getVariant().length() > 0  =>   locale.getVariant().length() < 0
ROR_61:83:java.util.List_localeLookupList(java.util.Locale,java.util.Locale): locale.getVariant().length() > 0  =>   locale.getVariant().length() <= 0
ROR_62:83:java.util.List_localeLookupList(java.util.Locale,java.util.Locale): locale.getVariant().length() > 0  =>   locale.getVariant().length() == 0
ROR_63:83:java.util.List_localeLookupList(java.util.Locale,java.util.Locale): locale.getVariant().length() > 0  =>   locale.getVariant().length() != 0
ROR_64:83:java.util.List_localeLookupList(java.util.Locale,java.util.Locale): locale.getVariant().length() > 0  =>   true
ROR_65:83:java.util.List_localeLookupList(java.util.Locale,java.util.Locale): locale.getVariant().length() > 0  =>   false
ROR_66:86:java.util.List_localeLookupList(java.util.Locale,java.util.Locale): locale.getCountry().length() > 0  =>   locale.getCountry().length() >= 0
ROR_67:86:java.util.List_localeLookupList(java.util.Locale,java.util.Locale): locale.getCountry().length() > 0  =>   locale.getCountry().length() < 0
ROR_68:86:java.util.List_localeLookupList(java.util.Locale,java.util.Locale): locale.getCountry().length() > 0  =>   locale.getCountry().length() <= 0
ROR_69:86:java.util.List_localeLookupList(java.util.Locale,java.util.Locale): locale.getCountry().length() > 0  =>   locale.getCountry().length() == 0
ROR_70:86:java.util.List_localeLookupList(java.util.Locale,java.util.Locale): locale.getCountry().length() > 0  =>   locale.getCountry().length() != 0
ROR_71:86:java.util.List_localeLookupList(java.util.Locale,java.util.Locale): locale.getCountry().length() > 0  =>   true
ROR_72:86:java.util.List_localeLookupList(java.util.Locale,java.util.Locale): locale.getCountry().length() > 0  =>   false
ROR_73:89:java.util.List_localeLookupList(java.util.Locale,java.util.Locale): list.contains( defaultLocale ) == false  =>   list.contains( defaultLocale ) != false
ROR_74:113:java.util.List_languagesByCountry(java.lang.String): countryCode == null  =>   countryCode != null
ROR_75:117:java.util.List_languagesByCountry(java.lang.String): langs == null  =>   langs != null
ROR_76:120:java.util.List_languagesByCountry(java.lang.String): i < locales.size()  =>   i > locales.size()
ROR_77:120:java.util.List_languagesByCountry(java.lang.String): i < locales.size()  =>   i >= locales.size()
ROR_78:120:java.util.List_languagesByCountry(java.lang.String): i < locales.size()  =>   i <= locales.size()
ROR_79:120:java.util.List_languagesByCountry(java.lang.String): i < locales.size()  =>   i == locales.size()
ROR_80:120:java.util.List_languagesByCountry(java.lang.String): i < locales.size()  =>   i != locales.size()
ROR_81:120:java.util.List_languagesByCountry(java.lang.String): i < locales.size()  =>   true
ROR_82:120:java.util.List_languagesByCountry(java.lang.String): i < locales.size()  =>   false
ROR_83:135:java.util.List_countriesByLanguage(java.lang.String): languageCode == null  =>   languageCode != null
ROR_84:139:java.util.List_countriesByLanguage(java.lang.String): countries == null  =>   countries != null
ROR_85:142:java.util.List_countriesByLanguage(java.lang.String): i < locales.size()  =>   i > locales.size()
ROR_86:142:java.util.List_countriesByLanguage(java.lang.String): i < locales.size()  =>   i >= locales.size()
ROR_87:142:java.util.List_countriesByLanguage(java.lang.String): i < locales.size()  =>   i <= locales.size()
ROR_88:142:java.util.List_countriesByLanguage(java.lang.String): i < locales.size()  =>   i == locales.size()
ROR_89:142:java.util.List_countriesByLanguage(java.lang.String): i < locales.size()  =>   i != locales.size()
ROR_90:142:java.util.List_countriesByLanguage(java.lang.String): i < locales.size()  =>   true
ROR_91:142:java.util.List_countriesByLanguage(java.lang.String): i < locales.size()  =>   false
ROR_92:144:java.util.List_countriesByLanguage(java.lang.String): locale.getCountry().length() != 0  =>   locale.getCountry().length() > 0
ROR_93:144:java.util.List_countriesByLanguage(java.lang.String): locale.getCountry().length() != 0  =>   locale.getCountry().length() >= 0
ROR_94:144:java.util.List_countriesByLanguage(java.lang.String): locale.getCountry().length() != 0  =>   locale.getCountry().length() < 0
ROR_95:144:java.util.List_countriesByLanguage(java.lang.String): locale.getCountry().length() != 0  =>   locale.getCountry().length() <= 0
ROR_96:144:java.util.List_countriesByLanguage(java.lang.String): locale.getCountry().length() != 0  =>   locale.getCountry().length() == 0
ROR_97:144:java.util.List_countriesByLanguage(java.lang.String): locale.getCountry().length() != 0  =>   true
ROR_98:144:java.util.List_countriesByLanguage(java.lang.String): locale.getCountry().length() != 0  =>   false
COR_1:41:java.util.Locale_toLocale(java.lang.String): !Character.isLowerCase( ch0 ) || !Character.isLowerCase( ch1 )  =>   !Character.isLowerCase( ch0 ) && !Character.isLowerCase( ch1 )
COR_2:41:java.util.Locale_toLocale(java.lang.String): !Character.isLowerCase( ch0 ) || !Character.isLowerCase( ch1 )  =>   !Character.isLowerCase( ch0 ) ^ !Character.isLowerCase( ch1 )
COR_3:58:java.util.Locale_toLocale(java.lang.String): !Character.isUpperCase( ch3 ) || !Character.isUpperCase( ch4 )  =>   !Character.isUpperCase( ch3 ) && !Character.isUpperCase( ch4 )
COR_4:58:java.util.Locale_toLocale(java.lang.String): !Character.isUpperCase( ch3 ) || !Character.isUpperCase( ch4 )  =>   !Character.isUpperCase( ch3 ) ^ !Character.isUpperCase( ch4 )
COR_5:122:java.util.List_languagesByCountry(java.lang.String): countryCode.equals( locale.getCountry() ) && locale.getVariant().isEmpty()  =>   countryCode.equals( locale.getCountry() ) || locale.getVariant().isEmpty()
COR_6:122:java.util.List_languagesByCountry(java.lang.String): countryCode.equals( locale.getCountry() ) && locale.getVariant().isEmpty()  =>   countryCode.equals( locale.getCountry() ) ^ locale.getVariant().isEmpty()
COR_7:144:java.util.List_countriesByLanguage(java.lang.String): languageCode.equals( locale.getLanguage() ) && locale.getCountry().length() != 0  =>   languageCode.equals( locale.getLanguage() ) || locale.getCountry().length() != 0
COR_8:144:java.util.List_countriesByLanguage(java.lang.String): languageCode.equals( locale.getLanguage() ) && locale.getCountry().length() != 0  =>   languageCode.equals( locale.getLanguage() ) ^ locale.getCountry().length() != 0
COR_9:144:java.util.List_countriesByLanguage(java.lang.String): languageCode.equals( locale.getLanguage() ) && locale.getCountry().length() != 0 && locale.getVariant().isEmpty()  =>   languageCode.equals( locale.getLanguage() ) && locale.getCountry().length() != 0 || locale.getVariant().isEmpty()
COR_10:144:java.util.List_countriesByLanguage(java.lang.String): languageCode.equals( locale.getLanguage() ) && locale.getCountry().length() != 0 && locale.getVariant().isEmpty()  =>   (languageCode.equals( locale.getLanguage() ) && locale.getCountry().length() != 0) ^ locale.getVariant().isEmpty()
SDL_1:68:java.util.Locale_toLocale(java.lang.String): if (str == null) {     return null; } final int len = str.length(); if (len < 2) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch0 = str.charAt( 0 ); final char ch1 = str.charAt( 1 ); if (!Character.isLowerCase( ch0 ) || !Character.isLowerCase( ch1 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 2) {     return new java.util.Locale( str ); } if (len < 5) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 2 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch3 = str.charAt( 3 ); if (ch3 == '_') {     return new java.util.Locale( str.substring( 0, 2 ), \"\", str.substring( 4 ) ); } final char ch4 = str.charAt( 4 ); if (!Character.isUpperCase( ch3 ) || !Character.isUpperCase( ch4 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 5) {     return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ) ); } if (len < 7) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 5 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ), str.substring( 6 ) );  =>   final int len = str.length(); if (len < 2) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch0 = str.charAt( 0 ); final char ch1 = str.charAt( 1 ); if (!Character.isLowerCase( ch0 ) || !Character.isLowerCase( ch1 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 2) {     return new java.util.Locale( str ); } if (len < 5) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 2 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch3 = str.charAt( 3 ); if (ch3 == '_') {     return new java.util.Locale( str.substring( 0, 2 ), \"\", str.substring( 4 ) ); } final char ch4 = str.charAt( 4 ); if (!Character.isUpperCase( ch3 ) || !Character.isUpperCase( ch4 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 5) {     return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ) ); } if (len < 7) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 5 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ), str.substring( 6 ) );
SDL_2:68:java.util.Locale_toLocale(java.lang.String): if (str == null) {     return null; } final int len = str.length(); if (len < 2) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch0 = str.charAt( 0 ); final char ch1 = str.charAt( 1 ); if (!Character.isLowerCase( ch0 ) || !Character.isLowerCase( ch1 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 2) {     return new java.util.Locale( str ); } if (len < 5) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 2 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch3 = str.charAt( 3 ); if (ch3 == '_') {     return new java.util.Locale( str.substring( 0, 2 ), \"\", str.substring( 4 ) ); } final char ch4 = str.charAt( 4 ); if (!Character.isUpperCase( ch3 ) || !Character.isUpperCase( ch4 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 5) {     return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ) ); } if (len < 7) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 5 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ), str.substring( 6 ) );  =>   if (str == null) {     return null; } final int len = str.length(); final char ch0 = str.charAt( 0 ); final char ch1 = str.charAt( 1 ); if (!Character.isLowerCase( ch0 ) || !Character.isLowerCase( ch1 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 2) {     return new java.util.Locale( str ); } if (len < 5) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 2 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch3 = str.charAt( 3 ); if (ch3 == '_') {     return new java.util.Locale( str.substring( 0, 2 ), \"\", str.substring( 4 ) ); } final char ch4 = str.charAt( 4 ); if (!Character.isUpperCase( ch3 ) || !Character.isUpperCase( ch4 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 5) {     return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ) ); } if (len < 7) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 5 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ), str.substring( 6 ) );
SDL_3:68:java.util.Locale_toLocale(java.lang.String): if (str == null) {     return null; } final int len = str.length(); if (len < 2) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch0 = str.charAt( 0 ); final char ch1 = str.charAt( 1 ); if (!Character.isLowerCase( ch0 ) || !Character.isLowerCase( ch1 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 2) {     return new java.util.Locale( str ); } if (len < 5) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 2 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch3 = str.charAt( 3 ); if (ch3 == '_') {     return new java.util.Locale( str.substring( 0, 2 ), \"\", str.substring( 4 ) ); } final char ch4 = str.charAt( 4 ); if (!Character.isUpperCase( ch3 ) || !Character.isUpperCase( ch4 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 5) {     return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ) ); } if (len < 7) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 5 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ), str.substring( 6 ) );  =>   if (str == null) {     return null; } final int len = str.length(); if (len < 2) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch0 = str.charAt( 0 ); final char ch1 = str.charAt( 1 ); if (len == 2) {     return new java.util.Locale( str ); } if (len < 5) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 2 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch3 = str.charAt( 3 ); if (ch3 == '_') {     return new java.util.Locale( str.substring( 0, 2 ), \"\", str.substring( 4 ) ); } final char ch4 = str.charAt( 4 ); if (!Character.isUpperCase( ch3 ) || !Character.isUpperCase( ch4 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 5) {     return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ) ); } if (len < 7) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 5 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ), str.substring( 6 ) );
SDL_4:68:java.util.Locale_toLocale(java.lang.String): if (str == null) {     return null; } final int len = str.length(); if (len < 2) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch0 = str.charAt( 0 ); final char ch1 = str.charAt( 1 ); if (!Character.isLowerCase( ch0 ) || !Character.isLowerCase( ch1 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 2) {     return new java.util.Locale( str ); } if (len < 5) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 2 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch3 = str.charAt( 3 ); if (ch3 == '_') {     return new java.util.Locale( str.substring( 0, 2 ), \"\", str.substring( 4 ) ); } final char ch4 = str.charAt( 4 ); if (!Character.isUpperCase( ch3 ) || !Character.isUpperCase( ch4 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 5) {     return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ) ); } if (len < 7) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 5 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ), str.substring( 6 ) );  =>   if (str == null) {     return null; } final int len = str.length(); if (len < 2) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch0 = str.charAt( 0 ); final char ch1 = str.charAt( 1 ); if (!Character.isLowerCase( ch0 ) || !Character.isLowerCase( ch1 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len < 5) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 2 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch3 = str.charAt( 3 ); if (ch3 == '_') {     return new java.util.Locale( str.substring( 0, 2 ), \"\", str.substring( 4 ) ); } final char ch4 = str.charAt( 4 ); if (!Character.isUpperCase( ch3 ) || !Character.isUpperCase( ch4 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 5) {     return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ) ); } if (len < 7) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 5 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ), str.substring( 6 ) );
SDL_5:68:java.util.Locale_toLocale(java.lang.String): if (str == null) {     return null; } final int len = str.length(); if (len < 2) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch0 = str.charAt( 0 ); final char ch1 = str.charAt( 1 ); if (!Character.isLowerCase( ch0 ) || !Character.isLowerCase( ch1 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 2) {     return new java.util.Locale( str ); } if (len < 5) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 2 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch3 = str.charAt( 3 ); if (ch3 == '_') {     return new java.util.Locale( str.substring( 0, 2 ), \"\", str.substring( 4 ) ); } final char ch4 = str.charAt( 4 ); if (!Character.isUpperCase( ch3 ) || !Character.isUpperCase( ch4 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 5) {     return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ) ); } if (len < 7) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 5 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ), str.substring( 6 ) );  =>   if (str == null) {     return null; } final int len = str.length(); if (len < 2) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch0 = str.charAt( 0 ); final char ch1 = str.charAt( 1 ); if (!Character.isLowerCase( ch0 ) || !Character.isLowerCase( ch1 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 2) {     return new java.util.Locale( str ); } if (str.charAt( 2 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch3 = str.charAt( 3 ); if (ch3 == '_') {     return new java.util.Locale( str.substring( 0, 2 ), \"\", str.substring( 4 ) ); } final char ch4 = str.charAt( 4 ); if (!Character.isUpperCase( ch3 ) || !Character.isUpperCase( ch4 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 5) {     return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ) ); } if (len < 7) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 5 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ), str.substring( 6 ) );
SDL_6:68:java.util.Locale_toLocale(java.lang.String): if (str == null) {     return null; } final int len = str.length(); if (len < 2) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch0 = str.charAt( 0 ); final char ch1 = str.charAt( 1 ); if (!Character.isLowerCase( ch0 ) || !Character.isLowerCase( ch1 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 2) {     return new java.util.Locale( str ); } if (len < 5) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 2 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch3 = str.charAt( 3 ); if (ch3 == '_') {     return new java.util.Locale( str.substring( 0, 2 ), \"\", str.substring( 4 ) ); } final char ch4 = str.charAt( 4 ); if (!Character.isUpperCase( ch3 ) || !Character.isUpperCase( ch4 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 5) {     return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ) ); } if (len < 7) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 5 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ), str.substring( 6 ) );  =>   if (str == null) {     return null; } final int len = str.length(); if (len < 2) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch0 = str.charAt( 0 ); final char ch1 = str.charAt( 1 ); if (!Character.isLowerCase( ch0 ) || !Character.isLowerCase( ch1 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 2) {     return new java.util.Locale( str ); } if (len < 5) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch3 = str.charAt( 3 ); if (ch3 == '_') {     return new java.util.Locale( str.substring( 0, 2 ), \"\", str.substring( 4 ) ); } final char ch4 = str.charAt( 4 ); if (!Character.isUpperCase( ch3 ) || !Character.isUpperCase( ch4 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 5) {     return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ) ); } if (len < 7) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 5 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ), str.substring( 6 ) );
SDL_7:68:java.util.Locale_toLocale(java.lang.String): if (str == null) {     return null; } final int len = str.length(); if (len < 2) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch0 = str.charAt( 0 ); final char ch1 = str.charAt( 1 ); if (!Character.isLowerCase( ch0 ) || !Character.isLowerCase( ch1 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 2) {     return new java.util.Locale( str ); } if (len < 5) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 2 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch3 = str.charAt( 3 ); if (ch3 == '_') {     return new java.util.Locale( str.substring( 0, 2 ), \"\", str.substring( 4 ) ); } final char ch4 = str.charAt( 4 ); if (!Character.isUpperCase( ch3 ) || !Character.isUpperCase( ch4 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 5) {     return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ) ); } if (len < 7) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 5 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ), str.substring( 6 ) );  =>   if (str == null) {     return null; } final int len = str.length(); if (len < 2) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch0 = str.charAt( 0 ); final char ch1 = str.charAt( 1 ); if (!Character.isLowerCase( ch0 ) || !Character.isLowerCase( ch1 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 2) {     return new java.util.Locale( str ); } if (len < 5) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 2 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch3 = str.charAt( 3 ); final char ch4 = str.charAt( 4 ); if (!Character.isUpperCase( ch3 ) || !Character.isUpperCase( ch4 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 5) {     return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ) ); } if (len < 7) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 5 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ), str.substring( 6 ) );
SDL_8:68:java.util.Locale_toLocale(java.lang.String): if (str == null) {     return null; } final int len = str.length(); if (len < 2) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch0 = str.charAt( 0 ); final char ch1 = str.charAt( 1 ); if (!Character.isLowerCase( ch0 ) || !Character.isLowerCase( ch1 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 2) {     return new java.util.Locale( str ); } if (len < 5) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 2 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch3 = str.charAt( 3 ); if (ch3 == '_') {     return new java.util.Locale( str.substring( 0, 2 ), \"\", str.substring( 4 ) ); } final char ch4 = str.charAt( 4 ); if (!Character.isUpperCase( ch3 ) || !Character.isUpperCase( ch4 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 5) {     return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ) ); } if (len < 7) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 5 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ), str.substring( 6 ) );  =>   if (str == null) {     return null; } final int len = str.length(); if (len < 2) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch0 = str.charAt( 0 ); final char ch1 = str.charAt( 1 ); if (!Character.isLowerCase( ch0 ) || !Character.isLowerCase( ch1 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 2) {     return new java.util.Locale( str ); } if (len < 5) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 2 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch3 = str.charAt( 3 ); if (ch3 == '_') {     return new java.util.Locale( str.substring( 0, 2 ), \"\", str.substring( 4 ) ); } final char ch4 = str.charAt( 4 ); if (len == 5) {     return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ) ); } if (len < 7) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 5 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ), str.substring( 6 ) );
SDL_9:68:java.util.Locale_toLocale(java.lang.String): if (str == null) {     return null; } final int len = str.length(); if (len < 2) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch0 = str.charAt( 0 ); final char ch1 = str.charAt( 1 ); if (!Character.isLowerCase( ch0 ) || !Character.isLowerCase( ch1 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 2) {     return new java.util.Locale( str ); } if (len < 5) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 2 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch3 = str.charAt( 3 ); if (ch3 == '_') {     return new java.util.Locale( str.substring( 0, 2 ), \"\", str.substring( 4 ) ); } final char ch4 = str.charAt( 4 ); if (!Character.isUpperCase( ch3 ) || !Character.isUpperCase( ch4 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 5) {     return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ) ); } if (len < 7) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 5 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ), str.substring( 6 ) );  =>   if (str == null) {     return null; } final int len = str.length(); if (len < 2) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch0 = str.charAt( 0 ); final char ch1 = str.charAt( 1 ); if (!Character.isLowerCase( ch0 ) || !Character.isLowerCase( ch1 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 2) {     return new java.util.Locale( str ); } if (len < 5) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 2 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch3 = str.charAt( 3 ); if (ch3 == '_') {     return new java.util.Locale( str.substring( 0, 2 ), \"\", str.substring( 4 ) ); } final char ch4 = str.charAt( 4 ); if (!Character.isUpperCase( ch3 ) || !Character.isUpperCase( ch4 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len < 7) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 5 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ), str.substring( 6 ) );
SDL_10:68:java.util.Locale_toLocale(java.lang.String): if (str == null) {     return null; } final int len = str.length(); if (len < 2) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch0 = str.charAt( 0 ); final char ch1 = str.charAt( 1 ); if (!Character.isLowerCase( ch0 ) || !Character.isLowerCase( ch1 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 2) {     return new java.util.Locale( str ); } if (len < 5) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 2 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch3 = str.charAt( 3 ); if (ch3 == '_') {     return new java.util.Locale( str.substring( 0, 2 ), \"\", str.substring( 4 ) ); } final char ch4 = str.charAt( 4 ); if (!Character.isUpperCase( ch3 ) || !Character.isUpperCase( ch4 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 5) {     return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ) ); } if (len < 7) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 5 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ), str.substring( 6 ) );  =>   if (str == null) {     return null; } final int len = str.length(); if (len < 2) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch0 = str.charAt( 0 ); final char ch1 = str.charAt( 1 ); if (!Character.isLowerCase( ch0 ) || !Character.isLowerCase( ch1 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 2) {     return new java.util.Locale( str ); } if (len < 5) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 2 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch3 = str.charAt( 3 ); if (ch3 == '_') {     return new java.util.Locale( str.substring( 0, 2 ), \"\", str.substring( 4 ) ); } final char ch4 = str.charAt( 4 ); if (!Character.isUpperCase( ch3 ) || !Character.isUpperCase( ch4 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 5) {     return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ) ); } if (str.charAt( 5 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ), str.substring( 6 ) );
SDL_11:68:java.util.Locale_toLocale(java.lang.String): if (str == null) {     return null; } final int len = str.length(); if (len < 2) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch0 = str.charAt( 0 ); final char ch1 = str.charAt( 1 ); if (!Character.isLowerCase( ch0 ) || !Character.isLowerCase( ch1 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 2) {     return new java.util.Locale( str ); } if (len < 5) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 2 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch3 = str.charAt( 3 ); if (ch3 == '_') {     return new java.util.Locale( str.substring( 0, 2 ), \"\", str.substring( 4 ) ); } final char ch4 = str.charAt( 4 ); if (!Character.isUpperCase( ch3 ) || !Character.isUpperCase( ch4 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 5) {     return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ) ); } if (len < 7) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 5 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ), str.substring( 6 ) );  =>   if (str == null) {     return null; } final int len = str.length(); if (len < 2) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch0 = str.charAt( 0 ); final char ch1 = str.charAt( 1 ); if (!Character.isLowerCase( ch0 ) || !Character.isLowerCase( ch1 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 2) {     return new java.util.Locale( str ); } if (len < 5) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (str.charAt( 2 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } final char ch3 = str.charAt( 3 ); if (ch3 == '_') {     return new java.util.Locale( str.substring( 0, 2 ), \"\", str.substring( 4 ) ); } final char ch4 = str.charAt( 4 ); if (!Character.isUpperCase( ch3 ) || !Character.isUpperCase( ch4 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } if (len == 5) {     return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ) ); } if (len < 7) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); } return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ), str.substring( 6 ) );
SDL_12:35:java.util.Locale_toLocale(java.lang.String): if (str == null) {     return null; }  =>   if (true) {     return null; }
SDL_13:37:java.util.Locale_toLocale(java.lang.String): throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str );  =>  
SDL_14:39:java.util.Locale_toLocale(java.lang.String): if (len < 2) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); }
SDL_15:42:java.util.Locale_toLocale(java.lang.String): throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str );  =>  
SDL_16:44:java.util.Locale_toLocale(java.lang.String): if (!Character.isLowerCase( ch0 ) || !Character.isLowerCase( ch1 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); }
SDL_17:47:java.util.Locale_toLocale(java.lang.String): if (len == 2) {     return new java.util.Locale( str ); }  =>   if (true) {     return new java.util.Locale( str ); }
SDL_18:48:java.util.Locale_toLocale(java.lang.String): throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str );  =>  
SDL_19:50:java.util.Locale_toLocale(java.lang.String): if (len < 5) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); }
SDL_20:51:java.util.Locale_toLocale(java.lang.String): throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str );  =>  
SDL_21:53:java.util.Locale_toLocale(java.lang.String): if (str.charAt( 2 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); }
SDL_22:57:java.util.Locale_toLocale(java.lang.String): if (ch3 == '_') {     return new java.util.Locale( str.substring( 0, 2 ), \"\", str.substring( 4 ) ); }  =>   if (true) {     return new java.util.Locale( str.substring( 0, 2 ), \"\", str.substring( 4 ) ); }
SDL_23:59:java.util.Locale_toLocale(java.lang.String): throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str );  =>  
SDL_24:61:java.util.Locale_toLocale(java.lang.String): if (!Character.isUpperCase( ch3 ) || !Character.isUpperCase( ch4 )) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); }
SDL_25:64:java.util.Locale_toLocale(java.lang.String): if (len == 5) {     return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ) ); }  =>   if (true) {     return new java.util.Locale( str.substring( 0, 2 ), str.substring( 3, 5 ) ); }
SDL_26:65:java.util.Locale_toLocale(java.lang.String): throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str );  =>  
SDL_27:67:java.util.Locale_toLocale(java.lang.String): if (len < 7) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); }
SDL_28:68:java.util.Locale_toLocale(java.lang.String): throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str );  =>  
SDL_29:70:java.util.Locale_toLocale(java.lang.String): if (str.charAt( 5 ) != '_') {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Invalid locale format: \" + str ); }
SDL_30:82:java.util.List_localeLookupList(java.util.Locale,java.util.Locale): java.util.List<Locale> list = new java.util.ArrayList<Locale>( 4 ); if (locale != null) {     list.add( locale );     if (locale.getVariant().length() > 0) {         list.add( new java.util.Locale( locale.getLanguage(), locale.getCountry() ) );     }     if (locale.getCountry().length() > 0) {         list.add( new java.util.Locale( locale.getLanguage(), \"\" ) );     }     if (list.contains( defaultLocale ) == false) {         list.add( defaultLocale );     } } return Collections.unmodifiableList( list );  =>   java.util.List<Locale> list = new java.util.ArrayList<Locale>( 4 ); return Collections.unmodifiableList( list );
SDL_31:91:java.util.List_localeLookupList(java.util.Locale,java.util.Locale): list.add( locale ); if (locale.getVariant().length() > 0) {     list.add( new java.util.Locale( locale.getLanguage(), locale.getCountry() ) ); } if (locale.getCountry().length() > 0) {     list.add( new java.util.Locale( locale.getLanguage(), \"\" ) ); } if (list.contains( defaultLocale ) == false) {     list.add( defaultLocale ); }  =>   if (locale.getVariant().length() > 0) {     list.add( new java.util.Locale( locale.getLanguage(), locale.getCountry() ) ); } if (locale.getCountry().length() > 0) {     list.add( new java.util.Locale( locale.getLanguage(), \"\" ) ); } if (list.contains( defaultLocale ) == false) {     list.add( defaultLocale ); }
SDL_32:89:java.util.List_localeLookupList(java.util.Locale,java.util.Locale): list.add( locale ); if (locale.getVariant().length() > 0) {     list.add( new java.util.Locale( locale.getLanguage(), locale.getCountry() ) ); } if (locale.getCountry().length() > 0) {     list.add( new java.util.Locale( locale.getLanguage(), \"\" ) ); } if (list.contains( defaultLocale ) == false) {     list.add( defaultLocale ); }  =>   list.add( locale ); if (locale.getCountry().length() > 0) {     list.add( new java.util.Locale( locale.getLanguage(), \"\" ) ); } if (list.contains( defaultLocale ) == false) {     list.add( defaultLocale ); }
SDL_33:89:java.util.List_localeLookupList(java.util.Locale,java.util.Locale): list.add( locale ); if (locale.getVariant().length() > 0) {     list.add( new java.util.Locale( locale.getLanguage(), locale.getCountry() ) ); } if (locale.getCountry().length() > 0) {     list.add( new java.util.Locale( locale.getLanguage(), \"\" ) ); } if (list.contains( defaultLocale ) == false) {     list.add( defaultLocale ); }  =>   list.add( locale ); if (locale.getVariant().length() > 0) {     list.add( new java.util.Locale( locale.getLanguage(), locale.getCountry() ) ); } if (list.contains( defaultLocale ) == false) {     list.add( defaultLocale ); }
SDL_34:89:java.util.List_localeLookupList(java.util.Locale,java.util.Locale): list.add( locale ); if (locale.getVariant().length() > 0) {     list.add( new java.util.Locale( locale.getLanguage(), locale.getCountry() ) ); } if (locale.getCountry().length() > 0) {     list.add( new java.util.Locale( locale.getLanguage(), \"\" ) ); } if (list.contains( defaultLocale ) == false) {     list.add( defaultLocale ); }  =>   list.add( locale ); if (locale.getVariant().length() > 0) {     list.add( new java.util.Locale( locale.getLanguage(), locale.getCountry() ) ); } if (locale.getCountry().length() > 0) {     list.add( new java.util.Locale( locale.getLanguage(), \"\" ) ); }
SDL_35:93:java.util.List_localeLookupList(java.util.Locale,java.util.Locale): if (locale != null) {     list.add( locale );     if (locale.getVariant().length() > 0) {         list.add( new java.util.Locale( locale.getLanguage(), locale.getCountry() ) );     }     if (locale.getCountry().length() > 0) {         list.add( new java.util.Locale( locale.getLanguage(), \"\" ) );     }     if (list.contains( defaultLocale ) == false) {         list.add( defaultLocale );     } }  =>   if (true) {     list.add( locale );     if (locale.getVariant().length() > 0) {         list.add( new java.util.Locale( locale.getLanguage(), locale.getCountry() ) );     }     if (locale.getCountry().length() > 0) {         list.add( new java.util.Locale( locale.getLanguage(), \"\" ) );     }     if (list.contains( defaultLocale ) == false) {         list.add( defaultLocale );     } }
SDL_36:84:java.util.List_localeLookupList(java.util.Locale,java.util.Locale): list.add( new java.util.Locale( locale.getLanguage(), locale.getCountry() ) );  =>  
SDL_37:86:java.util.List_localeLookupList(java.util.Locale,java.util.Locale): if (locale.getVariant().length() > 0) {     list.add( new java.util.Locale( locale.getLanguage(), locale.getCountry() ) ); }  =>   if (true) {     list.add( new java.util.Locale( locale.getLanguage(), locale.getCountry() ) ); }
SDL_38:87:java.util.List_localeLookupList(java.util.Locale,java.util.Locale): list.add( new java.util.Locale( locale.getLanguage(), \"\" ) );  =>  
SDL_39:89:java.util.List_localeLookupList(java.util.Locale,java.util.Locale): if (locale.getCountry().length() > 0) {     list.add( new java.util.Locale( locale.getLanguage(), \"\" ) ); }  =>   if (true) {     list.add( new java.util.Locale( locale.getLanguage(), \"\" ) ); }
SDL_40:90:java.util.List_localeLookupList(java.util.Locale,java.util.Locale): list.add( defaultLocale );  =>  
SDL_41:92:java.util.List_localeLookupList(java.util.Locale,java.util.Locale): if (list.contains( defaultLocale ) == false) {     list.add( defaultLocale ); }  =>   if (true) {     list.add( defaultLocale ); }
SDL_42:109:boolean_isAvailableLocale(java.util.Locale): return availableLocaleList().contains( locale );  =>   return true;
SDL_43:109:boolean_isAvailableLocale(java.util.Locale): return availableLocaleList().contains( locale );  =>   return false;
SDL_44:128:java.util.List_languagesByCountry(java.lang.String): if (countryCode == null) {     return Collections.emptyList(); } java.util.List<Locale> langs = cLanguagesByCountry.get( countryCode ); if (langs == null) {     langs = new java.util.ArrayList<Locale>();     java.util.List<Locale> locales = availableLocaleList();     for (int i = 0; i < locales.size(); i++) {         java.util.Locale locale = locales.get( i );         if (countryCode.equals( locale.getCountry() ) && locale.getVariant().isEmpty()) {             langs.add( locale );         }     }     langs = Collections.unmodifiableList( langs );     cLanguagesByCountry.putIfAbsent( countryCode, langs );     langs = cLanguagesByCountry.get( countryCode ); } return langs;  =>   java.util.List<Locale> langs = cLanguagesByCountry.get( countryCode ); if (langs == null) {     langs = new java.util.ArrayList<Locale>();     java.util.List<Locale> locales = availableLocaleList();     for (int i = 0; i < locales.size(); i++) {         java.util.Locale locale = locales.get( i );         if (countryCode.equals( locale.getCountry() ) && locale.getVariant().isEmpty()) {             langs.add( locale );         }     }     langs = Collections.unmodifiableList( langs );     cLanguagesByCountry.putIfAbsent( countryCode, langs );     langs = cLanguagesByCountry.get( countryCode ); } return langs;
SDL_45:118:java.util.List_languagesByCountry(java.lang.String): if (countryCode == null) {     return Collections.emptyList(); } java.util.List<Locale> langs = cLanguagesByCountry.get( countryCode ); if (langs == null) {     langs = new java.util.ArrayList<Locale>();     java.util.List<Locale> locales = availableLocaleList();     for (int i = 0; i < locales.size(); i++) {         java.util.Locale locale = locales.get( i );         if (countryCode.equals( locale.getCountry() ) && locale.getVariant().isEmpty()) {             langs.add( locale );         }     }     langs = Collections.unmodifiableList( langs );     cLanguagesByCountry.putIfAbsent( countryCode, langs );     langs = cLanguagesByCountry.get( countryCode ); } return langs;  =>   if (countryCode == null) {     return Collections.emptyList(); } java.util.List<Locale> langs = cLanguagesByCountry.get( countryCode ); return langs;
SDL_46:116:java.util.List_languagesByCountry(java.lang.String): if (countryCode == null) {     return Collections.emptyList(); }  =>   if (true) {     return Collections.emptyList(); }
SDL_47:128:java.util.List_languagesByCountry(java.lang.String): langs = new java.util.ArrayList<Locale>(); java.util.List<Locale> locales = availableLocaleList(); for (int i = 0; i < locales.size(); i++) {     java.util.Locale locale = locales.get( i );     if (countryCode.equals( locale.getCountry() ) && locale.getVariant().isEmpty()) {         langs.add( locale );     } } langs = Collections.unmodifiableList( langs ); cLanguagesByCountry.putIfAbsent( countryCode, langs ); langs = cLanguagesByCountry.get( countryCode );  =>   java.util.List<Locale> locales = availableLocaleList(); for (int i = 0; i < locales.size(); i++) {     java.util.Locale locale = locales.get( i );     if (countryCode.equals( locale.getCountry() ) && locale.getVariant().isEmpty()) {         langs.add( locale );     } } langs = Collections.unmodifiableList( langs ); cLanguagesByCountry.putIfAbsent( countryCode, langs ); langs = cLanguagesByCountry.get( countryCode );
SDL_48:123:java.util.List_languagesByCountry(java.lang.String): langs = new java.util.ArrayList<Locale>(); java.util.List<Locale> locales = availableLocaleList(); for (int i = 0; i < locales.size(); i++) {     java.util.Locale locale = locales.get( i );     if (countryCode.equals( locale.getCountry() ) && locale.getVariant().isEmpty()) {         langs.add( locale );     } } langs = Collections.unmodifiableList( langs ); cLanguagesByCountry.putIfAbsent( countryCode, langs ); langs = cLanguagesByCountry.get( countryCode );  =>   langs = new java.util.ArrayList<Locale>(); java.util.List<Locale> locales = availableLocaleList(); langs = Collections.unmodifiableList( langs ); cLanguagesByCountry.putIfAbsent( countryCode, langs ); langs = cLanguagesByCountry.get( countryCode );
SDL_49:128:java.util.List_languagesByCountry(java.lang.String): langs = new java.util.ArrayList<Locale>(); java.util.List<Locale> locales = availableLocaleList(); for (int i = 0; i < locales.size(); i++) {     java.util.Locale locale = locales.get( i );     if (countryCode.equals( locale.getCountry() ) && locale.getVariant().isEmpty()) {         langs.add( locale );     } } langs = Collections.unmodifiableList( langs ); cLanguagesByCountry.putIfAbsent( countryCode, langs ); langs = cLanguagesByCountry.get( countryCode );  =>   langs = new java.util.ArrayList<Locale>(); java.util.List<Locale> locales = availableLocaleList(); for (int i = 0; i < locales.size(); i++) {     java.util.Locale locale = locales.get( i );     if (countryCode.equals( locale.getCountry() ) && locale.getVariant().isEmpty()) {         langs.add( locale );     } } cLanguagesByCountry.putIfAbsent( countryCode, langs ); langs = cLanguagesByCountry.get( countryCode );
SDL_50:128:java.util.List_languagesByCountry(java.lang.String): langs = new java.util.ArrayList<Locale>(); java.util.List<Locale> locales = availableLocaleList(); for (int i = 0; i < locales.size(); i++) {     java.util.Locale locale = locales.get( i );     if (countryCode.equals( locale.getCountry() ) && locale.getVariant().isEmpty()) {         langs.add( locale );     } } langs = Collections.unmodifiableList( langs ); cLanguagesByCountry.putIfAbsent( countryCode, langs ); langs = cLanguagesByCountry.get( countryCode );  =>   langs = new java.util.ArrayList<Locale>(); java.util.List<Locale> locales = availableLocaleList(); for (int i = 0; i < locales.size(); i++) {     java.util.Locale locale = locales.get( i );     if (countryCode.equals( locale.getCountry() ) && locale.getVariant().isEmpty()) {         langs.add( locale );     } } langs = Collections.unmodifiableList( langs ); langs = cLanguagesByCountry.get( countryCode );
SDL_51:128:java.util.List_languagesByCountry(java.lang.String): langs = new java.util.ArrayList<Locale>(); java.util.List<Locale> locales = availableLocaleList(); for (int i = 0; i < locales.size(); i++) {     java.util.Locale locale = locales.get( i );     if (countryCode.equals( locale.getCountry() ) && locale.getVariant().isEmpty()) {         langs.add( locale );     } } langs = Collections.unmodifiableList( langs ); cLanguagesByCountry.putIfAbsent( countryCode, langs ); langs = cLanguagesByCountry.get( countryCode );  =>   langs = new java.util.ArrayList<Locale>(); java.util.List<Locale> locales = availableLocaleList(); for (int i = 0; i < locales.size(); i++) {     java.util.Locale locale = locales.get( i );     if (countryCode.equals( locale.getCountry() ) && locale.getVariant().isEmpty()) {         langs.add( locale );     } } langs = Collections.unmodifiableList( langs ); cLanguagesByCountry.putIfAbsent( countryCode, langs );
SDL_52:130:java.util.List_languagesByCountry(java.lang.String): if (langs == null) {     langs = new java.util.ArrayList<Locale>();     java.util.List<Locale> locales = availableLocaleList();     for (int i = 0; i < locales.size(); i++) {         java.util.Locale locale = locales.get( i );         if (countryCode.equals( locale.getCountry() ) && locale.getVariant().isEmpty()) {             langs.add( locale );         }     }     langs = Collections.unmodifiableList( langs );     cLanguagesByCountry.putIfAbsent( countryCode, langs );     langs = cLanguagesByCountry.get( countryCode ); }  =>   if (true) {     langs = new java.util.ArrayList<Locale>();     java.util.List<Locale> locales = availableLocaleList();     for (int i = 0; i < locales.size(); i++) {         java.util.Locale locale = locales.get( i );         if (countryCode.equals( locale.getCountry() ) && locale.getVariant().isEmpty()) {             langs.add( locale );         }     }     langs = Collections.unmodifiableList( langs );     cLanguagesByCountry.putIfAbsent( countryCode, langs );     langs = cLanguagesByCountry.get( countryCode ); }
SDL_53:122:java.util.List_languagesByCountry(java.lang.String): java.util.Locale locale = locales.get( i ); if (countryCode.equals( locale.getCountry() ) && locale.getVariant().isEmpty()) {     langs.add( locale ); }  =>   java.util.Locale locale = locales.get( i );
SDL_54:126:java.util.List_languagesByCountry(java.lang.String): for (int i = 0; i < locales.size(); i++) {     java.util.Locale locale = locales.get( i );     if (countryCode.equals( locale.getCountry() ) && locale.getVariant().isEmpty()) {         langs.add( locale );     } }  =>   for (int i = 0;; i++) {     java.util.Locale locale = locales.get( i );     if (countryCode.equals( locale.getCountry() ) && locale.getVariant().isEmpty()) {         langs.add( locale );     } }
SDL_55:126:java.util.List_languagesByCountry(java.lang.String): for (int i = 0; i < locales.size(); i++) {     java.util.Locale locale = locales.get( i );     if (countryCode.equals( locale.getCountry() ) && locale.getVariant().isEmpty()) {         langs.add( locale );     } }  =>   for (int i = 0; i < locales.size();) {     java.util.Locale locale = locales.get( i );     if (countryCode.equals( locale.getCountry() ) && locale.getVariant().isEmpty()) {         langs.add( locale );     } }
SDL_56:123:java.util.List_languagesByCountry(java.lang.String): langs.add( locale );  =>  
SDL_57:125:java.util.List_languagesByCountry(java.lang.String): if (countryCode.equals( locale.getCountry() ) && locale.getVariant().isEmpty()) {     langs.add( locale ); }  =>   if (true) {     langs.add( locale ); }
SDL_58:150:java.util.List_countriesByLanguage(java.lang.String): if (languageCode == null) {     return Collections.emptyList(); } java.util.List<Locale> countries = cCountriesByLanguage.get( languageCode ); if (countries == null) {     countries = new java.util.ArrayList<Locale>();     java.util.List<Locale> locales = availableLocaleList();     for (int i = 0; i < locales.size(); i++) {         java.util.Locale locale = locales.get( i );         if (languageCode.equals( locale.getLanguage() ) && locale.getCountry().length() != 0 && locale.getVariant().isEmpty()) {             countries.add( locale );         }     }     countries = Collections.unmodifiableList( countries );     cCountriesByLanguage.putIfAbsent( languageCode, countries );     countries = cCountriesByLanguage.get( languageCode ); } return countries;  =>   java.util.List<Locale> countries = cCountriesByLanguage.get( languageCode ); if (countries == null) {     countries = new java.util.ArrayList<Locale>();     java.util.List<Locale> locales = availableLocaleList();     for (int i = 0; i < locales.size(); i++) {         java.util.Locale locale = locales.get( i );         if (languageCode.equals( locale.getLanguage() ) && locale.getCountry().length() != 0 && locale.getVariant().isEmpty()) {             countries.add( locale );         }     }     countries = Collections.unmodifiableList( countries );     cCountriesByLanguage.putIfAbsent( languageCode, countries );     countries = cCountriesByLanguage.get( languageCode ); } return countries;
SDL_59:140:java.util.List_countriesByLanguage(java.lang.String): if (languageCode == null) {     return Collections.emptyList(); } java.util.List<Locale> countries = cCountriesByLanguage.get( languageCode ); if (countries == null) {     countries = new java.util.ArrayList<Locale>();     java.util.List<Locale> locales = availableLocaleList();     for (int i = 0; i < locales.size(); i++) {         java.util.Locale locale = locales.get( i );         if (languageCode.equals( locale.getLanguage() ) && locale.getCountry().length() != 0 && locale.getVariant().isEmpty()) {             countries.add( locale );         }     }     countries = Collections.unmodifiableList( countries );     cCountriesByLanguage.putIfAbsent( languageCode, countries );     countries = cCountriesByLanguage.get( languageCode ); } return countries;  =>   if (languageCode == null) {     return Collections.emptyList(); } java.util.List<Locale> countries = cCountriesByLanguage.get( languageCode ); return countries;
SDL_60:138:java.util.List_countriesByLanguage(java.lang.String): if (languageCode == null) {     return Collections.emptyList(); }  =>   if (true) {     return Collections.emptyList(); }
SDL_61:150:java.util.List_countriesByLanguage(java.lang.String): countries = new java.util.ArrayList<Locale>(); java.util.List<Locale> locales = availableLocaleList(); for (int i = 0; i < locales.size(); i++) {     java.util.Locale locale = locales.get( i );     if (languageCode.equals( locale.getLanguage() ) && locale.getCountry().length() != 0 && locale.getVariant().isEmpty()) {         countries.add( locale );     } } countries = Collections.unmodifiableList( countries ); cCountriesByLanguage.putIfAbsent( language