AORB_1:171:java.lang.Number_createNumber(java.lang.String):str.length() - 2 => str.length() * 2
AORB_2:171:java.lang.Number_createNumber(java.lang.String):str.length() - 2 => str.length() / 2
AORB_3:171:java.lang.Number_createNumber(java.lang.String):str.length() - 2 => str.length() % 2
AORB_4:171:java.lang.Number_createNumber(java.lang.String):str.length() - 2 => str.length() + 2
AORB_5:180:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() * 1
AORB_6:180:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() / 1
AORB_7:180:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() % 1
AORB_8:180:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() + 1
AORB_9:185:java.lang.Number_createNumber(java.lang.String):str.indexOf( 'e' ) + str.indexOf( 'E' ) => str.indexOf( 'e' ) * str.indexOf( 'E' )
AORB_10:185:java.lang.Number_createNumber(java.lang.String):str.indexOf( 'e' ) + str.indexOf( 'E' ) => str.indexOf( 'e' ) / str.indexOf( 'E' )
AORB_11:185:java.lang.Number_createNumber(java.lang.String):str.indexOf( 'e' ) + str.indexOf( 'E' ) => str.indexOf( 'e' ) % str.indexOf( 'E' )
AORB_12:185:java.lang.Number_createNumber(java.lang.String):str.indexOf( 'e' ) + str.indexOf( 'E' ) => str.indexOf( 'e' ) - str.indexOf( 'E' )
AORB_13:185:java.lang.Number_createNumber(java.lang.String):str.indexOf( 'e' ) + str.indexOf( 'E' ) + 1 => (str.indexOf( 'e' ) + str.indexOf( 'E' )) * 1
AORB_14:185:java.lang.Number_createNumber(java.lang.String):str.indexOf( 'e' ) + str.indexOf( 'E' ) + 1 => (str.indexOf( 'e' ) + str.indexOf( 'E' )) / 1
AORB_15:185:java.lang.Number_createNumber(java.lang.String):str.indexOf( 'e' ) + str.indexOf( 'E' ) + 1 => (str.indexOf( 'e' ) + str.indexOf( 'E' )) % 1
AORB_16:185:java.lang.Number_createNumber(java.lang.String):str.indexOf( 'e' ) + str.indexOf( 'E' ) + 1 => str.indexOf( 'e' ) + str.indexOf( 'E' ) - 1
AORB_17:191:java.lang.Number_createNumber(java.lang.String):decPos + 1 => decPos * 1
AORB_18:191:java.lang.Number_createNumber(java.lang.String):decPos + 1 => decPos / 1
AORB_19:191:java.lang.Number_createNumber(java.lang.String):decPos + 1 => decPos % 1
AORB_20:191:java.lang.Number_createNumber(java.lang.String):decPos + 1 => decPos - 1
AORB_21:193:java.lang.Number_createNumber(java.lang.String):decPos + 1 => decPos * 1
AORB_22:193:java.lang.Number_createNumber(java.lang.String):decPos + 1 => decPos / 1
AORB_23:193:java.lang.Number_createNumber(java.lang.String):decPos + 1 => decPos % 1
AORB_24:193:java.lang.Number_createNumber(java.lang.String):decPos + 1 => decPos - 1
AORB_25:208:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() * 1
AORB_26:208:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() / 1
AORB_27:208:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() % 1
AORB_28:208:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() + 1
AORB_29:209:java.lang.Number_createNumber(java.lang.String):expPos + 1 => expPos * 1
AORB_30:209:java.lang.Number_createNumber(java.lang.String):expPos + 1 => expPos / 1
AORB_31:209:java.lang.Number_createNumber(java.lang.String):expPos + 1 => expPos % 1
AORB_32:209:java.lang.Number_createNumber(java.lang.String):expPos + 1 => expPos - 1
AORB_33:209:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() * 1
AORB_34:209:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() / 1
AORB_35:209:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() % 1
AORB_36:209:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() + 1
AORB_37:213:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() * 1
AORB_38:213:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() / 1
AORB_39:213:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() % 1
AORB_40:213:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() + 1
AORB_41:256:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() * 1
AORB_42:256:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() / 1
AORB_43:256:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() % 1
AORB_44:256:java.lang.Number_createNumber(java.lang.String):str.length() - 1 => str.length() + 1
AORB_45:257:java.lang.Number_createNumber(java.lang.String):expPos + 1 => expPos * 1
AORB_46:257:java.lang.Number_createNumber(java.lang.String):expPos + 1 => expPos / 1
AORB_47:257:java.lang.Number_createNumber(java.lang.String):expPos + 1 => expPos % 1
AORB_48:257:java.lang.Number_createNumber(java.lang.String):expPos + 1 => expPos - 1
AORB_49:297:boolean_isAllZeros(java.lang.String):str.length() - 1 => str.length() * 1
AORB_50:297:boolean_isAllZeros(java.lang.String):str.length() - 1 => str.length() / 1
AORB_51:297:boolean_isAllZeros(java.lang.String):str.length() - 1 => str.length() % 1
AORB_52:297:boolean_isAllZeros(java.lang.String):str.length() - 1 => str.length() + 1
AORB_53:717:boolean_isNumber(java.lang.String):start + 1 => start * 1
AORB_54:717:boolean_isNumber(java.lang.String):start + 1 => start / 1
AORB_55:717:boolean_isNumber(java.lang.String):start + 1 => start % 1
AORB_56:717:boolean_isNumber(java.lang.String):start + 1 => start - 1
AORB_57:717:boolean_isNumber(java.lang.String):start + 1 => start * 1
AORB_58:717:boolean_isNumber(java.lang.String):start + 1 => start / 1
AORB_59:717:boolean_isNumber(java.lang.String):start + 1 => start % 1
AORB_60:717:boolean_isNumber(java.lang.String):start + 1 => start - 1
AORB_61:718:boolean_isNumber(java.lang.String):start + 2 => start * 2
AORB_62:718:boolean_isNumber(java.lang.String):start + 2 => start / 2
AORB_63:718:boolean_isNumber(java.lang.String):start + 2 => start % 2
AORB_64:718:boolean_isNumber(java.lang.String):start + 2 => start - 2
AORB_65:731:boolean_isNumber(java.lang.String):sz + 1 => sz * 1
AORB_66:731:boolean_isNumber(java.lang.String):sz + 1 => sz / 1
AORB_67:731:boolean_isNumber(java.lang.String):sz + 1 => sz % 1
AORB_68:731:boolean_isNumber(java.lang.String):sz + 1 => sz - 1
ROR_1:63:int_toInt(java.lang.String,int): str == null  =>   str != null
ROR_2:80:long_toLong(java.lang.String,long): str == null  =>   str != null
ROR_3:97:float_toFloat(java.lang.String,float): str == null  =>   str != null
ROR_4:114:double_toDouble(java.lang.String,double): str == null  =>   str != null
ROR_5:131:byte_toByte(java.lang.String,byte): str == null  =>   str != null
ROR_6:148:short_toShort(java.lang.String,short): str == null  =>   str != null
ROR_7:161:java.lang.Number_createNumber(java.lang.String): str == null  =>   str != null
ROR_8:175:java.lang.Number_createNumber(java.lang.String): hexDigits > 8  =>   hexDigits >= 8
ROR_9:175:java.lang.Number_createNumber(java.lang.String): hexDigits > 8  =>   hexDigits < 8
ROR_10:175:java.lang.Number_createNumber(java.lang.String): hexDigits > 8  =>   hexDigits <= 8
ROR_11:175:java.lang.Number_createNumber(java.lang.String): hexDigits > 8  =>   hexDigits == 8
ROR_12:175:java.lang.Number_createNumber(java.lang.String): hexDigits > 8  =>   hexDigits != 8
ROR_13:175:java.lang.Number_createNumber(java.lang.String): hexDigits > 8  =>   true
ROR_14:175:java.lang.Number_createNumber(java.lang.String): hexDigits > 8  =>   false
ROR_15:186:java.lang.Number_createNumber(java.lang.String): decPos > -1  =>   decPos >= -1
ROR_16:186:java.lang.Number_createNumber(java.lang.String): decPos > -1  =>   decPos < -1
ROR_17:186:java.lang.Number_createNumber(java.lang.String): decPos > -1  =>   decPos <= -1
ROR_18:186:java.lang.Number_createNumber(java.lang.String): decPos > -1  =>   decPos == -1
ROR_19:186:java.lang.Number_createNumber(java.lang.String): decPos > -1  =>   decPos != -1
ROR_20:186:java.lang.Number_createNumber(java.lang.String): decPos > -1  =>   true
ROR_21:186:java.lang.Number_createNumber(java.lang.String): decPos > -1  =>   false
ROR_22:187:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos >= -1
ROR_23:187:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos < -1
ROR_24:187:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos <= -1
ROR_25:187:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos == -1
ROR_26:187:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos != -1
ROR_27:187:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   true
ROR_28:187:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   false
ROR_29:188:java.lang.Number_createNumber(java.lang.String): expPos < decPos  =>   expPos > decPos
ROR_30:188:java.lang.Number_createNumber(java.lang.String): expPos < decPos  =>   expPos >= decPos
ROR_31:188:java.lang.Number_createNumber(java.lang.String): expPos < decPos  =>   expPos <= decPos
ROR_32:188:java.lang.Number_createNumber(java.lang.String): expPos < decPos  =>   expPos == decPos
ROR_33:188:java.lang.Number_createNumber(java.lang.String): expPos < decPos  =>   expPos != decPos
ROR_34:188:java.lang.Number_createNumber(java.lang.String): expPos < decPos  =>   true
ROR_35:188:java.lang.Number_createNumber(java.lang.String): expPos < decPos  =>   false
ROR_36:188:java.lang.Number_createNumber(java.lang.String): expPos > str.length()  =>   expPos >= str.length()
ROR_37:188:java.lang.Number_createNumber(java.lang.String): expPos > str.length()  =>   expPos < str.length()
ROR_38:188:java.lang.Number_createNumber(java.lang.String): expPos > str.length()  =>   expPos <= str.length()
ROR_39:188:java.lang.Number_createNumber(java.lang.String): expPos > str.length()  =>   expPos == str.length()
ROR_40:188:java.lang.Number_createNumber(java.lang.String): expPos > str.length()  =>   expPos != str.length()
ROR_41:188:java.lang.Number_createNumber(java.lang.String): expPos > str.length()  =>   true
ROR_42:188:java.lang.Number_createNumber(java.lang.String): expPos > str.length()  =>   false
ROR_43:197:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos >= -1
ROR_44:197:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos < -1
ROR_45:197:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos <= -1
ROR_46:197:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos == -1
ROR_47:197:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos != -1
ROR_48:197:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   true
ROR_49:197:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   false
ROR_50:198:java.lang.Number_createNumber(java.lang.String): expPos > str.length()  =>   expPos >= str.length()
ROR_51:198:java.lang.Number_createNumber(java.lang.String): expPos > str.length()  =>   expPos < str.length()
ROR_52:198:java.lang.Number_createNumber(java.lang.String): expPos > str.length()  =>   expPos <= str.length()
ROR_53:198:java.lang.Number_createNumber(java.lang.String): expPos > str.length()  =>   expPos == str.length()
ROR_54:198:java.lang.Number_createNumber(java.lang.String): expPos > str.length()  =>   expPos != str.length()
ROR_55:198:java.lang.Number_createNumber(java.lang.String): expPos > str.length()  =>   true
ROR_56:198:java.lang.Number_createNumber(java.lang.String): expPos > str.length()  =>   false
ROR_57:207:java.lang.Number_createNumber(java.lang.String): lastChar != '.'  =>   lastChar > '.'
ROR_58:207:java.lang.Number_createNumber(java.lang.String): lastChar != '.'  =>   lastChar >= '.'
ROR_59:207:java.lang.Number_createNumber(java.lang.String): lastChar != '.'  =>   lastChar < '.'
ROR_60:207:java.lang.Number_createNumber(java.lang.String): lastChar != '.'  =>   lastChar <= '.'
ROR_61:207:java.lang.Number_createNumber(java.lang.String): lastChar != '.'  =>   lastChar == '.'
ROR_62:207:java.lang.Number_createNumber(java.lang.String): lastChar != '.'  =>   true
ROR_63:207:java.lang.Number_createNumber(java.lang.String): lastChar != '.'  =>   false
ROR_64:208:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos >= -1
ROR_65:208:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos < -1
ROR_66:208:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos <= -1
ROR_67:208:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos == -1
ROR_68:208:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos != -1
ROR_69:208:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   true
ROR_70:208:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   false
ROR_71:208:java.lang.Number_createNumber(java.lang.String): expPos < str.length() - 1  =>   expPos > str.length() - 1
ROR_72:208:java.lang.Number_createNumber(java.lang.String): expPos < str.length() - 1  =>   expPos >= str.length() - 1
ROR_73:208:java.lang.Number_createNumber(java.lang.String): expPos < str.length() - 1  =>   expPos <= str.length() - 1
ROR_74:208:java.lang.Number_createNumber(java.lang.String): expPos < str.length() - 1  =>   expPos == str.length() - 1
ROR_75:208:java.lang.Number_createNumber(java.lang.String): expPos < str.length() - 1  =>   expPos != str.length() - 1
ROR_76:208:java.lang.Number_createNumber(java.lang.String): expPos < str.length() - 1  =>   true
ROR_77:208:java.lang.Number_createNumber(java.lang.String): expPos < str.length() - 1  =>   false
ROR_78:218:java.lang.Number_createNumber(java.lang.String): dec == null  =>   dec != null
ROR_79:218:java.lang.Number_createNumber(java.lang.String): exp == null  =>   exp != null
ROR_80:218:java.lang.Number_createNumber(java.lang.String): numeric.charAt( 0 ) == '-'  =>   numeric.charAt( 0 ) > '-'
ROR_81:218:java.lang.Number_createNumber(java.lang.String): numeric.charAt( 0 ) == '-'  =>   numeric.charAt( 0 ) >= '-'
ROR_82:218:java.lang.Number_createNumber(java.lang.String): numeric.charAt( 0 ) == '-'  =>   numeric.charAt( 0 ) < '-'
ROR_83:218:java.lang.Number_createNumber(java.lang.String): numeric.charAt( 0 ) == '-'  =>   numeric.charAt( 0 ) <= '-'
ROR_84:218:java.lang.Number_createNumber(java.lang.String): numeric.charAt( 0 ) == '-'  =>   numeric.charAt( 0 ) != '-'
ROR_85:218:java.lang.Number_createNumber(java.lang.String): numeric.charAt( 0 ) == '-'  =>   true
ROR_86:218:java.lang.Number_createNumber(java.lang.String): numeric.charAt( 0 ) == '-'  =>   false
ROR_87:231:java.lang.Number_createNumber(java.lang.String): f.floatValue() == 0.0F  =>   f.floatValue() > 0.0F
ROR_88:231:java.lang.Number_createNumber(java.lang.String): f.floatValue() == 0.0F  =>   f.floatValue() >= 0.0F
ROR_89:231:java.lang.Number_createNumber(java.lang.String): f.floatValue() == 0.0F  =>   f.floatValue() < 0.0F
ROR_90:231:java.lang.Number_createNumber(java.lang.String): f.floatValue() == 0.0F  =>   f.floatValue() <= 0.0F
ROR_91:231:java.lang.Number_createNumber(java.lang.String): f.floatValue() == 0.0F  =>   f.floatValue() != 0.0F
ROR_92:231:java.lang.Number_createNumber(java.lang.String): f.floatValue() == 0.0F  =>   true
ROR_93:231:java.lang.Number_createNumber(java.lang.String): f.floatValue() == 0.0F  =>   false
ROR_94:241:java.lang.Number_createNumber(java.lang.String): d.floatValue() == 0.0D  =>   d.floatValue() > 0.0D
ROR_95:241:java.lang.Number_createNumber(java.lang.String): d.floatValue() == 0.0D  =>   d.floatValue() >= 0.0D
ROR_96:241:java.lang.Number_createNumber(java.lang.String): d.floatValue() == 0.0D  =>   d.floatValue() < 0.0D
ROR_97:241:java.lang.Number_createNumber(java.lang.String): d.floatValue() == 0.0D  =>   d.floatValue() <= 0.0D
ROR_98:241:java.lang.Number_createNumber(java.lang.String): d.floatValue() == 0.0D  =>   d.floatValue() != 0.0D
ROR_99:241:java.lang.Number_createNumber(java.lang.String): d.floatValue() == 0.0D  =>   true
ROR_100:241:java.lang.Number_createNumber(java.lang.String): d.floatValue() == 0.0D  =>   false
ROR_101:256:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos >= -1
ROR_102:256:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos < -1
ROR_103:256:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos <= -1
ROR_104:256:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos == -1
ROR_105:256:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   expPos != -1
ROR_106:256:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   true
ROR_107:256:java.lang.Number_createNumber(java.lang.String): expPos > -1  =>   false
ROR_108:256:java.lang.Number_createNumber(java.lang.String): expPos < str.length() - 1  =>   expPos > str.length() - 1
ROR_109:256:java.lang.Number_createNumber(java.lang.String): expPos < str.length() - 1  =>   expPos >= str.length() - 1
ROR_110:256:java.lang.Number_createNumber(java.lang.String): expPos < str.length() - 1  =>   expPos <= str.length() - 1
ROR_111:256:java.lang.Number_createNumber(java.lang.String): expPos < str.length() - 1  =>   expPos == str.length() - 1
ROR_112:256:java.lang.Number_createNumber(java.lang.String): expPos < str.length() - 1  =>   expPos != str.length() - 1
ROR_113:256:java.lang.Number_createNumber(java.lang.String): expPos < str.length() - 1  =>   true
ROR_114:256:java.lang.Number_createNumber(java.lang.String): expPos < str.length() - 1  =>   false
ROR_115:261:java.lang.Number_createNumber(java.lang.String): dec == null  =>   dec != null
ROR_116:261:java.lang.Number_createNumber(java.lang.String): exp == null  =>   exp != null
ROR_117:275:java.lang.Number_createNumber(java.lang.String): f.floatValue() == 0.0F  =>   f.floatValue() > 0.0F
ROR_118:275:java.lang.Number_createNumber(java.lang.String): f.floatValue() == 0.0F  =>   f.floatValue() >= 0.0F
ROR_119:275:java.lang.Number_createNumber(java.lang.String): f.floatValue() == 0.0F  =>   f.floatValue() < 0.0F
ROR_120:275:java.lang.Number_createNumber(java.lang.String): f.floatValue() == 0.0F  =>   f.floatValue() <= 0.0F
ROR_121:275:java.lang.Number_createNumber(java.lang.String): f.floatValue() == 0.0F  =>   f.floatValue() != 0.0F
ROR_122:275:java.lang.Number_createNumber(java.lang.String): f.floatValue() == 0.0F  =>   true
ROR_123:275:java.lang.Number_createNumber(java.lang.String): f.floatValue() == 0.0F  =>   false
ROR_124:282:java.lang.Number_createNumber(java.lang.String): d.doubleValue() == 0.0D  =>   d.doubleValue() > 0.0D
ROR_125:282:java.lang.Number_createNumber(java.lang.String): d.doubleValue() == 0.0D  =>   d.doubleValue() >= 0.0D
ROR_126:282:java.lang.Number_createNumber(java.lang.String): d.doubleValue() == 0.0D  =>   d.doubleValue() < 0.0D
ROR_127:282:java.lang.Number_createNumber(java.lang.String): d.doubleValue() == 0.0D  =>   d.doubleValue() <= 0.0D
ROR_128:282:java.lang.Number_createNumber(java.lang.String): d.doubleValue() == 0.0D  =>   d.doubleValue() != 0.0D
ROR_129:282:java.lang.Number_createNumber(java.lang.String): d.doubleValue() == 0.0D  =>   true
ROR_130:282:java.lang.Number_createNumber(java.lang.String): d.doubleValue() == 0.0D  =>   false
ROR_131:294:boolean_isAllZeros(java.lang.String): str == null  =>   str != null
ROR_132:297:boolean_isAllZeros(java.lang.String): i >= 0  =>   i > 0
ROR_133:297:boolean_isAllZeros(java.lang.String): i >= 0  =>   i < 0
ROR_134:297:boolean_isAllZeros(java.lang.String): i >= 0  =>   i <= 0
ROR_135:297:boolean_isAllZeros(java.lang.String): i >= 0  =>   i == 0
ROR_136:297:boolean_isAllZeros(java.lang.String): i >= 0  =>   i != 0
ROR_137:297:boolean_isAllZeros(java.lang.String): i >= 0  =>   true
ROR_138:297:boolean_isAllZeros(java.lang.String): i >= 0  =>   false
ROR_139:298:boolean_isAllZeros(java.lang.String): str.charAt( i ) != '0'  =>   str.charAt( i ) > '0'
ROR_140:298:boolean_isAllZeros(java.lang.String): str.charAt( i ) != '0'  =>   str.charAt( i ) >= '0'
ROR_141:298:boolean_isAllZeros(java.lang.String): str.charAt( i ) != '0'  =>   str.charAt( i ) < '0'
ROR_142:298:boolean_isAllZeros(java.lang.String): str.charAt( i ) != '0'  =>   str.charAt( i ) <= '0'
ROR_143:298:boolean_isAllZeros(java.lang.String): str.charAt( i ) != '0'  =>   str.charAt( i ) == '0'
ROR_144:298:boolean_isAllZeros(java.lang.String): str.charAt( i ) != '0'  =>   true
ROR_145:298:boolean_isAllZeros(java.lang.String): str.charAt( i ) != '0'  =>   false
ROR_146:302:boolean_isAllZeros(java.lang.String): str.length() > 0  =>   str.length() >= 0
ROR_147:302:boolean_isAllZeros(java.lang.String): str.length() > 0  =>   str.length() < 0
ROR_148:302:boolean_isAllZeros(java.lang.String): str.length() > 0  =>   str.length() <= 0
ROR_149:302:boolean_isAllZeros(java.lang.String): str.length() > 0  =>   str.length() == 0
ROR_150:302:boolean_isAllZeros(java.lang.String): str.length() > 0  =>   str.length() != 0
ROR_151:302:boolean_isAllZeros(java.lang.String): str.length() > 0  =>   true
ROR_152:302:boolean_isAllZeros(java.lang.String): str.length() > 0  =>   false
ROR_153:307:java.lang.Float_createFloat(java.lang.String): str == null  =>   str != null
ROR_154:315:java.lang.Double_createDouble(java.lang.String): str == null  =>   str != null
ROR_155:323:java.lang.Integer_createInteger(java.lang.String): str == null  =>   str != null
ROR_156:331:java.lang.Long_createLong(java.lang.String): str == null  =>   str != null
ROR_157:339:java.math.BigInteger_createBigInteger(java.lang.String): str == null  =>   str != null
ROR_158:347:java.math.BigDecimal_createBigDecimal(java.lang.String): str == null  =>   str != null
ROR_159:358:long_min(long): array == null  =>   array != null
ROR_160:361:long_min(long): array.length == 0  =>   array.length > 0
ROR_161:361:long_min(long): array.length == 0  =>   array.length >= 0
ROR_162:361:long_min(long): array.length == 0  =>   array.length < 0
ROR_163:361:long_min(long): array.length == 0  =>   array.length <= 0
ROR_164:361:long_min(long): array.length == 0  =>   array.length != 0
ROR_165:361:long_min(long): array.length == 0  =>   true
ROR_166:361:long_min(long): array.length == 0  =>   false
ROR_167:366:long_min(long): i < array.length  =>   i > array.length
ROR_168:366:long_min(long): i < array.length  =>   i >= array.length
ROR_169:366:long_min(long): i < array.length  =>   i <= array.length
ROR_170:366:long_min(long): i < array.length  =>   i == array.length
ROR_171:366:long_min(long): i < array.length  =>   i != array.length
ROR_172:366:long_min(long): i < array.length  =>   true
ROR_173:366:long_min(long): i < array.length  =>   false
ROR_174:367:long_min(long): array[i] < min  =>   array[i] > min
ROR_175:367:long_min(long): array[i] < min  =>   array[i] >= min
ROR_176:367:long_min(long): array[i] < min  =>   array[i] <= min
ROR_177:367:long_min(long): array[i] < min  =>   array[i] == min
ROR_178:367:long_min(long): array[i] < min  =>   array[i] != min
ROR_179:367:long_min(long): array[i] < min  =>   true
ROR_180:367:long_min(long): array[i] < min  =>   false
ROR_181:376:int_min(int): array == null  =>   array != null
ROR_182:379:int_min(int): array.length == 0  =>   array.length > 0
ROR_183:379:int_min(int): array.length == 0  =>   array.length >= 0
ROR_184:379:int_min(int): array.length == 0  =>   array.length < 0
ROR_185:379:int_min(int): array.length == 0  =>   array.length <= 0
ROR_186:379:int_min(int): array.length == 0  =>   array.length != 0
ROR_187:379:int_min(int): array.length == 0  =>   true
ROR_188:379:int_min(int): array.length == 0  =>   false
ROR_189:384:int_min(int): j < array.length  =>   j > array.length
ROR_190:384:int_min(int): j < array.length  =>   j >= array.length
ROR_191:384:int_min(int): j < array.length  =>   j <= array.length
ROR_192:384:int_min(int): j < array.length  =>   j == array.length
ROR_193:384:int_min(int): j < array.length  =>   j != array.length
ROR_194:384:int_min(int): j < array.length  =>   true
ROR_195:384:int_min(int): j < array.length  =>   false
ROR_196:385:int_min(int): array[j] < min  =>   array[j] > min
ROR_197:385:int_min(int): array[j] < min  =>   array[j] >= min
ROR_198:385:int_min(int): array[j] < min  =>   array[j] <= min
ROR_199:385:int_min(int): array[j] < min  =>   array[j] == min
ROR_200:385:int_min(int): array[j] < min  =>   array[j] != min
ROR_201:385:int_min(int): array[j] < min  =>   true
ROR_202:385:int_min(int): array[j] < min  =>   false
ROR_203:394:short_min(short): array == null  =>   array != null
ROR_204:397:short_min(short): array.length == 0  =>   array.length > 0
ROR_205:397:short_min(short): array.length == 0  =>   array.length >= 0
ROR_206:397:short_min(short): array.length == 0  =>   array.length < 0
ROR_207:397:short_min(short): array.length == 0  =>   array.length <= 0
ROR_208:397:short_min(short): array.length == 0  =>   array.length != 0
ROR_209:397:short_min(short): array.length == 0  =>   true
ROR_210:397:short_min(short): array.length == 0  =>   false
ROR_211:402:short_min(short): i < array.length  =>   i > array.length
ROR_212:402:short_min(short): i < array.length  =>   i >= array.length
ROR_213:402:short_min(short): i < array.length  =>   i <= array.length
ROR_214:402:short_min(short): i < array.length  =>   i == array.length
ROR_215:402:short_min(short): i < array.length  =>   i != array.length
ROR_216:402:short_min(short): i < array.length  =>   true
ROR_217:402:short_min(short): i < array.length  =>   false
ROR_218:403:short_min(short): array[i] < min  =>   array[i] > min
ROR_219:403:short_min(short): array[i] < min  =>   array[i] >= min
ROR_220:403:short_min(short): array[i] < min  =>   array[i] <= min
ROR_221:403:short_min(short): array[i] < min  =>   array[i] == min
ROR_222:403:short_min(short): array[i] < min  =>   array[i] != min
ROR_223:403:short_min(short): array[i] < min  =>   true
ROR_224:403:short_min(short): array[i] < min  =>   false
ROR_225:412:byte_min(byte): array == null  =>   array != null
ROR_226:415:byte_min(byte): array.length == 0  =>   array.length > 0
ROR_227:415:byte_min(byte): array.length == 0  =>   array.length >= 0
ROR_228:415:byte_min(byte): array.length == 0  =>   array.length < 0
ROR_229:415:byte_min(byte): array.length == 0  =>   array.length <= 0
ROR_230:415:byte_min(byte): array.length == 0  =>   array.length != 0
ROR_231:415:byte_min(byte): array.length == 0  =>   true
ROR_232:415:byte_min(byte): array.length == 0  =>   false
ROR_233:420:byte_min(byte): i < array.length  =>   i > array.length
ROR_234:420:byte_min(byte): i < array.length  =>   i >= array.length
ROR_235:420:byte_min(byte): i < array.length  =>   i <= array.length
ROR_236:420:byte_min(byte): i < array.length  =>   i == array.length
ROR_237:420:byte_min(byte): i < array.length  =>   i != array.length
ROR_238:420:byte_min(byte): i < array.length  =>   true
ROR_239:420:byte_min(byte): i < array.length  =>   false
ROR_240:421:byte_min(byte): array[i] < min  =>   array[i] > min
ROR_241:421:byte_min(byte): array[i] < min  =>   array[i] >= min
ROR_242:421:byte_min(byte): array[i] < min  =>   array[i] <= min
ROR_243:421:byte_min(byte): array[i] < min  =>   array[i] == min
ROR_244:421:byte_min(byte): array[i] < min  =>   array[i] != min
ROR_245:421:byte_min(byte): array[i] < min  =>   true
ROR_246:421:byte_min(byte): array[i] < min  =>   false
ROR_247:430:double_min(double): array == null  =>   array != null
ROR_248:433:double_min(double): array.length == 0  =>   array.length > 0
ROR_249:433:double_min(double): array.length == 0  =>   array.length >= 0
ROR_250:433:double_min(double): array.length == 0  =>   array.length < 0
ROR_251:433:double_min(double): array.length == 0  =>   array.length <= 0
ROR_252:433:double_min(double): array.length == 0  =>   array.length != 0
ROR_253:433:double_min(double): array.length == 0  =>   true
ROR_254:433:double_min(double): array.length == 0  =>   false
ROR_255:438:double_min(double): i < array.length  =>   i > array.length
ROR_256:438:double_min(double): i < array.length  =>   i >= array.length
ROR_257:438:double_min(double): i < array.length  =>   i <= array.length
ROR_258:438:double_min(double): i < array.length  =>   i == array.length
ROR_259:438:double_min(double): i < array.length  =>   i != array.length
ROR_260:438:double_min(double): i < array.length  =>   true
ROR_261:438:double_min(double): i < array.length  =>   false
ROR_262:442:double_min(double): array[i] < min  =>   array[i] > min
ROR_263:442:double_min(double): array[i] < min  =>   array[i] >= min
ROR_264:442:double_min(double): array[i] < min  =>   array[i] <= min
ROR_265:442:double_min(double): array[i] < min  =>   array[i] == min
ROR_266:442:double_min(double): array[i] < min  =>   array[i] != min
ROR_267:442:double_min(double): array[i] < min  =>   true
ROR_268:442:double_min(double): array[i] < min  =>   false
ROR_269:451:float_min(float): array == null  =>   array != null
ROR_270:454:float_min(float): array.length == 0  =>   array.length > 0
ROR_271:454:float_min(float): array.length == 0  =>   array.length >= 0
ROR_272:454:float_min(float): array.length == 0  =>   array.length < 0
ROR_273:454:float_min(float): array.length == 0  =>   array.length <= 0
ROR_274:454:float_min(float): array.length == 0  =>   array.length != 0
ROR_275:454:float_min(float): array.length == 0  =>   true
ROR_276:454:float_min(float): array.length == 0  =>   false
ROR_277:459:float_min(float): i < array.length  =>   i > array.length
ROR_278:459:float_min(float): i < array.length  =>   i >= array.length
ROR_279:459:float_min(float): i < array.length  =>   i <= array.length
ROR_280:459:float_min(float): i < array.length  =>   i == array.length
ROR_281:459:float_min(float): i < array.length  =>   i != array.length
ROR_282:459:float_min(float): i < array.length  =>   true
ROR_283:459:float_min(float): i < array.length  =>   false
ROR_284:463:float_min(float): array[i] < min  =>   array[i] > min
ROR_285:463:float_min(float): array[i] < min  =>   array[i] >= min
ROR_286:463:float_min(float): array[i] < min  =>   array[i] <= min
ROR_287:463:float_min(float): array[i] < min  =>   array[i] == min
ROR_288:463:float_min(float): array[i] < min  =>   array[i] != min
ROR_289:463:float_min(float): array[i] < min  =>   true
ROR_290:463:float_min(float): array[i] < min  =>   false
ROR_291:472:long_max(long): array == null  =>   array != null
ROR_292:475:long_max(long): array.length == 0  =>   array.length > 0
ROR_293:475:long_max(long): array.length == 0  =>   array.length >= 0
ROR_294:475:long_max(long): array.length == 0  =>   array.length < 0
ROR_295:475:long_max(long): array.length == 0  =>   array.length <= 0
ROR_296:475:long_max(long): array.length == 0  =>   array.length != 0
ROR_297:475:long_max(long): array.length == 0  =>   true
ROR_298:475:long_max(long): array.length == 0  =>   false
ROR_299:480:long_max(long): j < array.length  =>   j > array.length
ROR_300:480:long_max(long): j < array.length  =>   j >= array.length
ROR_301:480:long_max(long): j < array.length  =>   j <= array.length
ROR_302:480:long_max(long): j < array.length  =>   j == array.length
ROR_303:480:long_max(long): j < array.length  =>   j != array.length
ROR_304:480:long_max(long): j < array.length  =>   true
ROR_305:480:long_max(long): j < array.length  =>   false
ROR_306:481:long_max(long): array[j] > max  =>   array[j] >= max
ROR_307:481:long_max(long): array[j] > max  =>   array[j] < max
ROR_308:481:long_max(long): array[j] > max  =>   array[j] <= max
ROR_309:481:long_max(long): array[j] > max  =>   array[j] == max
ROR_310:481:long_max(long): array[j] > max  =>   array[j] != max
ROR_311:481:long_max(long): array[j] > max  =>   true
ROR_312:481:long_max(long): array[j] > max  =>   false
ROR_313:490:int_max(int): array == null  =>   array != null
ROR_314:493:int_max(int): array.length == 0  =>   array.length > 0
ROR_315:493:int_max(int): array.length == 0  =>   array.length >= 0
ROR_316:493:int_max(int): array.length == 0  =>   array.length < 0
ROR_317:493:int_max(int): array.length == 0  =>   array.length <= 0
ROR_318:493:int_max(int): array.length == 0  =>   array.length != 0
ROR_319:493:int_max(int): array.length == 0  =>   true
ROR_320:493:int_max(int): array.length == 0  =>   false
ROR_321:498:int_max(int): j < array.length  =>   j > array.length
ROR_322:498:int_max(int): j < array.length  =>   j >= array.length
ROR_323:498:int_max(int): j < array.length  =>   j <= array.length
ROR_324:498:int_max(int): j < array.length  =>   j == array.length
ROR_325:498:int_max(int): j < array.length  =>   j != array.length
ROR_326:498:int_max(int): j < array.length  =>   true
ROR_327:498:int_max(int): j < array.length  =>   false
ROR_328:499:int_max(int): array[j] > max  =>   array[j] >= max
ROR_329:499:int_max(int): array[j] > max  =>   array[j] < max
ROR_330:499:int_max(int): array[j] > max  =>   array[j] <= max
ROR_331:499:int_max(int): array[j] > max  =>   array[j] == max
ROR_332:499:int_max(int): array[j] > max  =>   array[j] != max
ROR_333:499:int_max(int): array[j] > max  =>   true
ROR_334:499:int_max(int): array[j] > max  =>   false
ROR_335:508:short_max(short): array == null  =>   array != null
ROR_336:511:short_max(short): array.length == 0  =>   array.length > 0
ROR_337:511:short_max(short): array.length == 0  =>   array.length >= 0
ROR_338:511:short_max(short): array.length == 0  =>   array.length < 0
ROR_339:511:short_max(short): array.length == 0  =>   array.length <= 0
ROR_340:511:short_max(short): array.length == 0  =>   array.length != 0
ROR_341:511:short_max(short): array.length == 0  =>   true
ROR_342:511:short_max(short): array.length == 0  =>   false
ROR_343:516:short_max(short): i < array.length  =>   i > array.length
ROR_344:516:short_max(short): i < array.length  =>   i >= array.length
ROR_345:516:short_max(short): i < array.length  =>   i <= array.length
ROR_346:516:short_max(short): i < array.length  =>   i == array.length
ROR_347:516:short_max(short): i < array.length  =>   i != array.length
ROR_348:516:short_max(short): i < array.length  =>   true
ROR_349:516:short_max(short): i < array.length  =>   false
ROR_350:517:short_max(short): array[i] > max  =>   array[i] >= max
ROR_351:517:short_max(short): array[i] > max  =>   array[i] < max
ROR_352:517:short_max(short): array[i] > max  =>   array[i] <= max
ROR_353:517:short_max(short): array[i] > max  =>   array[i] == max
ROR_354:517:short_max(short): array[i] > max  =>   array[i] != max
ROR_355:517:short_max(short): array[i] > max  =>   true
ROR_356:517:short_max(short): array[i] > max  =>   false
ROR_357:526:byte_max(byte): array == null  =>   array != null
ROR_358:529:byte_max(byte): array.length == 0  =>   array.length > 0
ROR_359:529:byte_max(byte): array.length == 0  =>   array.length >= 0
ROR_360:529:byte_max(byte): array.length == 0  =>   array.length < 0
ROR_361:529:byte_max(byte): array.length == 0  =>   array.length <= 0
ROR_362:529:byte_max(byte): array.length == 0  =>   array.length != 0
ROR_363:529:byte_max(byte): array.length == 0  =>   true
ROR_364:529:byte_max(byte): array.length == 0  =>   false
ROR_365:534:byte_max(byte): i < array.length  =>   i > array.length
ROR_366:534:byte_max(byte): i < array.length  =>   i >= array.length
ROR_367:534:byte_max(byte): i < array.length  =>   i <= array.length
ROR_368:534:byte_max(byte): i < array.length  =>   i == array.length
ROR_369:534:byte_max(byte): i < array.length  =>   i != array.length
ROR_370:534:byte_max(byte): i < array.length  =>   true
ROR_371:534:byte_max(byte): i < array.length  =>   false
ROR_372:535:byte_max(byte): array[i] > max  =>   array[i] >= max
ROR_373:535:byte_max(byte): array[i] > max  =>   array[i] < max
ROR_374:535:byte_max(byte): array[i] > max  =>   array[i] <= max
ROR_375:535:byte_max(byte): array[i] > max  =>   array[i] == max
ROR_376:535:byte_max(byte): array[i] > max  =>   array[i] != max
ROR_377:535:byte_max(byte): array[i] > max  =>   true
ROR_378:535:byte_max(byte): array[i] > max  =>   false
ROR_379:544:double_max(double): array == null  =>   array != null
ROR_380:547:double_max(double): array.length == 0  =>   array.length > 0
ROR_381:547:double_max(double): array.length == 0  =>   array.length >= 0
ROR_382:547:double_max(double): array.length == 0  =>   array.length < 0
ROR_383:547:double_max(double): array.length == 0  =>   array.length <= 0
ROR_384:547:double_max(double): array.length == 0  =>   array.length != 0
ROR_385:547:double_max(double): array.length == 0  =>   true
ROR_386:547:double_max(double): array.length == 0  =>   false
ROR_387:552:double_max(double): j < array.length  =>   j > array.length
ROR_388:552:double_max(double): j < array.length  =>   j >= array.length
ROR_389:552:double_max(double): j < array.length  =>   j <= array.length
ROR_390:552:double_max(double): j < array.length  =>   j == array.length
ROR_391:552:double_max(double): j < array.length  =>   j != array.length
ROR_392:552:double_max(double): j < array.length  =>   true
ROR_393:552:double_max(double): j < array.length  =>   false
ROR_394:556:double_max(double): array[j] > max  =>   array[j] >= max
ROR_395:556:double_max(double): array[j] > max  =>   array[j] < max
ROR_396:556:double_max(double): array[j] > max  =>   array[j] <= max
ROR_397:556:double_max(double): array[j] > max  =>   array[j] == max
ROR_398:556:double_max(double): array[j] > max  =>   array[j] != max
ROR_399:556:double_max(double): array[j] > max  =>   true
ROR_400:556:double_max(double): array[j] > max  =>   false
ROR_401:565:float_max(float): array == null  =>   array != null
ROR_402:568:float_max(float): array.length == 0  =>   array.length > 0
ROR_403:568:float_max(float): array.length == 0  =>   array.length >= 0
ROR_404:568:float_max(float): array.length == 0  =>   array.length < 0
ROR_405:568:float_max(float): array.length == 0  =>   array.length <= 0
ROR_406:568:float_max(float): array.length == 0  =>   array.length != 0
ROR_407:568:float_max(float): array.length == 0  =>   true
ROR_408:568:float_max(float): array.length == 0  =>   false
ROR_409:573:float_max(float): j < array.length  =>   j > array.length
ROR_410:573:float_max(float): j < array.length  =>   j >= array.length
ROR_411:573:float_max(float): j < array.length  =>   j <= array.length
ROR_412:573:float_max(float): j < array.length  =>   j == array.length
ROR_413:573:float_max(float): j < array.length  =>   j != array.length
ROR_414:573:float_max(float): j < array.length  =>   true
ROR_415:573:float_max(float): j < array.length  =>   false
ROR_416:577:float_max(float): array[j] > max  =>   array[j] >= max
ROR_417:577:float_max(float): array[j] > max  =>   array[j] < max
ROR_418:577:float_max(float): array[j] > max  =>   array[j] <= max
ROR_419:577:float_max(float): array[j] > max  =>   array[j] == max
ROR_420:577:float_max(float): array[j] > max  =>   array[j] != max
ROR_421:577:float_max(float): array[j] > max  =>   true
ROR_422:577:float_max(float): array[j] > max  =>   false
ROR_423:586:long_min(long,long,long): b < a  =>   b > a
ROR_424:586:long_min(long,long,long): b < a  =>   b >= a
ROR_425:586:long_min(long,long,long): b < a  =>   b <= a
ROR_426:586:long_min(long,long,long): b < a  =>   b == a
ROR_427:586:long_min(long,long,long): b < a  =>   b != a
ROR_428:586:long_min(long,long,long): b < a  =>   true
ROR_429:586:long_min(long,long,long): b < a  =>   false
ROR_430:589:long_min(long,long,long): c < a  =>   c > a
ROR_431:589:long_min(long,long,long): c < a  =>   c >= a
ROR_432:589:long_min(long,long,long): c < a  =>   c <= a
ROR_433:589:long_min(long,long,long): c < a  =>   c == a
ROR_434:589:long_min(long,long,long): c < a  =>   c != a
ROR_435:589:long_min(long,long,long): c < a  =>   true
ROR_436:589:long_min(long,long,long): c < a  =>   false
ROR_437:597:int_min(int,int,int): b < a  =>   b > a
ROR_438:597:int_min(int,int,int): b < a  =>   b >= a
ROR_439:597:int_min(int,int,int): b < a  =>   b <= a
ROR_440:597:int_min(int,int,int): b < a  =>   b == a
ROR_441:597:int_min(int,int,int): b < a  =>   b != a
ROR_442:597:int_min(int,int,int): b < a  =>   true
ROR_443:597:int_min(int,int,int): b < a  =>   false
ROR_444:600:int_min(int,int,int): c < a  =>   c > a
ROR_445:600:int_min(int,int,int): c < a  =>   c >= a
ROR_446:600:int_min(int,int,int): c < a  =>   c <= a
ROR_447:600:int_min(int,int,int): c < a  =>   c == a
ROR_448:600:int_min(int,int,int): c < a  =>   c != a
ROR_449:600:int_min(int,int,int): c < a  =>   true
ROR_450:600:int_min(int,int,int): c < a  =>   false
ROR_451:608:short_min(short,short,short): b < a  =>   b > a
ROR_452:608:short_min(short,short,short): b < a  =>   b >= a
ROR_453:608:short_min(short,short,short): b < a  =>   b <= a
ROR_454:608:short_min(short,short,short): b < a  =>   b == a
ROR_455:608:short_min(short,short,short): b < a  =>   b != a
ROR_456:608:short_min(short,short,short): b < a  =>   true
ROR_457:608:short_min(short,short,short): b < a  =>   false
ROR_458:611:short_min(short,short,short): c < a  =>   c > a
ROR_459:611:short_min(short,short,short): c < a  =>   c >= a
ROR_460:611:short_min(short,short,short): c < a  =>   c <= a
ROR_461:611:short_min(short,short,short): c < a  =>   c == a
ROR_462:611:short_min(short,short,short): c < a  =>   c != a
ROR_463:611:short_min(short,short,short): c < a  =>   true
ROR_464:611:short_min(short,short,short): c < a  =>   false
ROR_465:619:byte_min(byte,byte,byte): b < a  =>   b > a
ROR_466:619:byte_min(byte,byte,byte): b < a  =>   b >= a
ROR_467:619:byte_min(byte,byte,byte): b < a  =>   b <= a
ROR_468:619:byte_min(byte,byte,byte): b < a  =>   b == a
ROR_469:619:byte_min(byte,byte,byte): b < a  =>   b != a
ROR_470:619:byte_min(byte,byte,byte): b < a  =>   true
ROR_471:619:byte_min(byte,byte,byte): b < a  =>   false
ROR_472:622:byte_min(byte,byte,byte): c < a  =>   c > a
ROR_473:622:byte_min(byte,byte,byte): c < a  =>   c >= a
ROR_474:622:byte_min(byte,byte,byte): c < a  =>   c <= a
ROR_475:622:byte_min(byte,byte,byte): c < a  =>   c == a
ROR_476:622:byte_min(byte,byte,byte): c < a  =>   c != a
ROR_477:622:byte_min(byte,byte,byte): c < a  =>   true
ROR_478:622:byte_min(byte,byte,byte): c < a  =>   false
ROR_479:640:long_max(long,long,long): b > a  =>   b >= a
ROR_480:640:long_max(long,long,long): b > a  =>   b < a
ROR_481:640:long_max(long,long,long): b > a  =>   b <= a
ROR_482:640:long_max(long,long,long): b > a  =>   b == a
ROR_483:640:long_max(long,long,long): b > a  =>   b != a
ROR_484:640:long_max(long,long,long): b > a  =>   true
ROR_485:640:long_max(long,long,long): b > a  =>   false
ROR_486:643:long_max(long,long,long): c > a  =>   c >= a
ROR_487:643:long_max(long,long,long): c > a  =>   c < a
ROR_488:643:long_max(long,long,long): c > a  =>   c <= a
ROR_489:643:long_max(long,long,long): c > a  =>   c == a
ROR_490:643:long_max(long,long,long): c > a  =>   c != a
ROR_491:643:long_max(long,long,long): c > a  =>   true
ROR_492:643:long_max(long,long,long): c > a  =>   false
ROR_493:651:int_max(int,int,int): b > a  =>   b >= a
ROR_494:651:int_max(int,int,int): b > a  =>   b < a
ROR_495:651:int_max(int,int,int): b > a  =>   b <= a
ROR_496:651:int_max(int,int,int): b > a  =>   b == a
ROR_497:651:int_max(int,int,int): b > a  =>   b != a
ROR_498:651:int_max(int,int,int): b > a  =>   true
ROR_499:651:int_max(int,int,int): b > a  =>   false
ROR_500:654:int_max(int,int,int): c > a  =>   c >= a
ROR_501:654:int_max(int,int,int): c > a  =>   c < a
ROR_502:654:int_max(int,int,int): c > a  =>   c <= a
ROR_503:654:int_max(int,int,int): c > a  =>   c == a
ROR_504:654:int_max(int,int,int): c > a  =>   c != a
ROR_505:654:int_max(int,int,int): c > a  =>   true
ROR_506:654:int_max(int,int,int): c > a  =>   false
ROR_507:662:short_max(short,short,short): b > a  =>   b >= a
ROR_508:662:short_max(short,short,short): b > a  =>   b < a
ROR_509:662:short_max(short,short,short): b > a  =>   b <= a
ROR_510:662:short_max(short,short,short): b > a  =>   b == a
ROR_511:662:short_max(short,short,short): b > a  =>   b != a
ROR_512:662:short_max(short,short,short): b > a  =>   true
ROR_513:662:short_max(short,short,short): b > a  =>   false
ROR_514:665:short_max(short,short,short): c > a  =>   c >= a
ROR_515:665:short_max(short,short,short): c > a  =>   c < a
ROR_516:665:short_max(short,short,short): c > a  =>   c <= a
ROR_517:665:short_max(short,short,short): c > a  =>   c == a
ROR_518:665:short_max(short,short,short): c > a  =>   c != a
ROR_519:665:short_max(short,short,short): c > a  =>   true
ROR_520:665:short_max(short,short,short): c > a  =>   false
ROR_521:673:byte_max(byte,byte,byte): b > a  =>   b >= a
ROR_522:673:byte_max(byte,byte,byte): b > a  =>   b < a
ROR_523:673:byte_max(byte,byte,byte): b > a  =>   b <= a
ROR_524:673:byte_max(byte,byte,byte): b > a  =>   b == a
ROR_525:673:byte_max(byte,byte,byte): b > a  =>   b != a
ROR_526:673:byte_max(byte,byte,byte): b > a  =>   true
ROR_527:673:byte_max(byte,byte,byte): b > a  =>   false
ROR_528:676:byte_max(byte,byte,byte): c > a  =>   c >= a
ROR_529:676:byte_max(byte,byte,byte): c > a  =>   c < a
ROR_530:676:byte_max(byte,byte,byte): c > a  =>   c <= a
ROR_531:676:byte_max(byte,byte,byte): c > a  =>   c == a
ROR_532:676:byte_max(byte,byte,byte): c > a  =>   c != a
ROR_533:676:byte_max(byte,byte,byte): c > a  =>   true
ROR_534:676:byte_max(byte,byte,byte): c > a  =>   false
ROR_535:697:boolean_isDigits(java.lang.String): i < str.length()  =>   i > str.length()
ROR_536:697:boolean_isDigits(java.lang.String): i < str.length()  =>   i >= str.length()
ROR_537:697:boolean_isDigits(java.lang.String): i < str.length()  =>   i <= str.length()
ROR_538:697:boolean_isDigits(java.lang.String): i < str.length()  =>   i == str.length()
ROR_539:697:boolean_isDigits(java.lang.String): i < str.length()  =>   i != str.length()
ROR_540:697:boolean_isDigits(java.lang.String): i < str.length()  =>   true
ROR_541:697:boolean_isDigits(java.lang.String): i < str.length()  =>   false
ROR_542:716:boolean_isNumber(java.lang.String): chars[0] == '-'  =>   chars[0] > '-'
ROR_543:716:boolean_isNumber(java.lang.String): chars[0] == '-'  =>   chars[0] >= '-'
ROR_544:716:boolean_isNumber(java.lang.String): chars[0] == '-'  =>   chars[0] < '-'
ROR_545:716:boolean_isNumber(java.lang.String): chars[0] == '-'  =>   chars[0] <= '-'
ROR_546:716:boolean_isNumber(java.lang.String): chars[0] == '-'  =>   chars[0] != '-'
ROR_547:716:boolean_isNumber(java.lang.String): chars[0] == '-'  =>   true
ROR_548:716:boolean_isNumber(java.lang.String): chars[0] == '-'  =>   false
ROR_549:717:boolean_isNumber(java.lang.String): sz > start + 1  =>   sz >= start + 1
ROR_550:717:boolean_isNumber(java.lang.String): sz > start + 1  =>   sz < start + 1
ROR_551:717:boolean_isNumber(java.lang.String): sz > start + 1  =>   sz <= start + 1
ROR_552:717:boolean_isNumber(java.lang.String): sz > start + 1  =>   sz == start + 1
ROR_553:717:boolean_isNumber(java.lang.String): sz > start + 1  =>   sz != start + 1
ROR_554:717:boolean_isNumber(java.lang.String): sz > start + 1  =>   true
ROR_555:717:boolean_isNumber(java.lang.String): sz > start + 1  =>   false
ROR_556:717:boolean_isNumber(java.lang.String): chars[start] == '0'  =>   chars[start] > '0'
ROR_557:717:boolean_isNumber(java.lang.String): chars[start] == '0'  =>   chars[start] >= '0'
ROR_558:717:boolean_isNumber(java.lang.String): chars[start] == '0'  =>   chars[start] < '0'
ROR_559:717:boolean_isNumber(java.lang.String): chars[start] == '0'  =>   chars[start] <= '0'
ROR_560:717:boolean_isNumber(java.lang.String): chars[start] == '0'  =>   chars[start] != '0'
ROR_561:717:boolean_isNumber(java.lang.String): chars[start] == '0'  =>   true
ROR_562:717:boolean_isNumber(java.lang.String): chars[start] == '0'  =>   false
ROR_563:717:boolean_isNumber(java.lang.String): chars[start + 1] == 'x'  =>   chars[start + 1] > 'x'
ROR_564:717:boolean_isNumber(java.lang.String): chars[start + 1] == 'x'  =>   chars[start + 1] >= 'x'
ROR_565:717:boolean_isNumber(java.lang.String): chars[start + 1] == 'x'  =>   chars[start + 1] < 'x'
ROR_566:717:boolean_isNumber(java.lang.String): chars[start + 1] == 'x'  =>   chars[start + 1] <= 'x'
ROR_567:717:boolean_isNumber(java.lang.String): chars[start + 1] == 'x'  =>   chars[start + 1] != 'x'
ROR_568:717:boolean_isNumber(java.lang.String): chars[start + 1] == 'x'  =>   true
ROR_569:717:boolean_isNumber(java.lang.String): chars[start + 1] == 'x'  =>   false
ROR_570:719:boolean_isNumber(java.lang.String): i == sz  =>   i > sz
ROR_571:719:boolean_isNumber(java.lang.String): i == sz  =>   i >= sz
ROR_572:719:boolean_isNumber(java.lang.String): i == sz  =>   i < sz
ROR_573:719:boolean_isNumber(java.lang.String): i == sz  =>   i <= sz
ROR_574:719:boolean_isNumber(java.lang.String): i == sz  =>   i != sz
ROR_575:719:boolean_isNumber(java.lang.String): i == sz  =>   true
ROR_576:719:boolean_isNumber(java.lang.String): i == sz  =>   false
ROR_577:722:boolean_isNumber(java.lang.String): i < chars.length  =>   i > chars.length
ROR_578:722:boolean_isNumber(java.lang.String): i < chars.length  =>   i >= chars.length
ROR_579:722:boolean_isNumber(java.lang.String): i < chars.length  =>   i <= chars.length
ROR_580:722:boolean_isNumber(java.lang.String): i < chars.length  =>   i == chars.length
ROR_581:722:boolean_isNumber(java.lang.String): i < chars.length  =>   i != chars.length
ROR_582:722:boolean_isNumber(java.lang.String): i < chars.length  =>   true
ROR_583:722:boolean_isNumber(java.lang.String): i < chars.length  =>   false
ROR_584:723:boolean_isNumber(java.lang.String): chars[i] < '0'  =>   chars[i] > '0'
ROR_585:723:boolean_isNumber(java.lang.String): chars[i] < '0'  =>   chars[i] >= '0'
ROR_586:723:boolean_isNumber(java.lang.String): chars[i] < '0'  =>   chars[i] <= '0'
ROR_587:723:boolean_isNumber(java.lang.String): chars[i] < '0'  =>   chars[i] == '0'
ROR_588:723:boolean_isNumber(java.lang.String): chars[i] < '0'  =>   chars[i] != '0'
ROR_589:723:boolean_isNumber(java.lang.String): chars[i] < '0'  =>   true
ROR_590:723:boolean_isNumber(java.lang.String): chars[i] < '0'  =>   false
ROR_591:723:boolean_isNumber(java.lang.String): chars[i] > '9'  =>   chars[i] >= '9'
ROR_592:723:boolean_isNumber(java.lang.String): chars[i] > '9'  =>   chars[i] < '9'
ROR_593:723:boolean_isNumber(java.lang.String): chars[i] > '9'  =>   chars[i] <= '9'
ROR_594:723:boolean_isNumber(java.lang.String): chars[i] > '9'  =>   chars[i] == '9'
ROR_595:723:boolean_isNumber(java.lang.String): chars[i] > '9'  =>   chars[i] != '9'
ROR_596:723:boolean_isNumber(java.lang.String): chars[i] > '9'  =>   true
ROR_597:723:boolean_isNumber(java.lang.String): chars[i] > '9'  =>   false
ROR_598:723:boolean_isNumber(java.lang.String): chars[i] < 'a'  =>   chars[i] > 'a'
ROR_599:723:boolean_isNumber(java.lang.String): chars[i] < 'a'  =>   chars[i] >= 'a'
ROR_600:723:boolean_isNumber(java.lang.String): chars[i] < 'a'  =>   chars[i] <= 'a'
ROR_601:723:boolean_isNumber(java.lang.String): chars[i] < 'a'  =>   chars[i] == 'a'
ROR_602:723:boolean_isNumber(java.lang.String): chars[i] < 'a'  =>   chars[i] != 'a'
ROR_603:723:boolean_isNumber(java.lang.String): chars[i] < 'a'  =>   true
ROR_604:723:boolean_isNumber(java.lang.String): chars[i] < 'a'  =>   false
ROR_605:723:boolean_isNumber(java.lang.String): chars[i] > 'f'  =>   chars[i] >= 'f'
ROR_606:723:boolean_isNumber(java.lang.String): chars[i] > 'f'  =>   chars[i] < 'f'
ROR_607:723:boolean_isNumber(java.lang.String): chars[i] > 'f'  =>   chars[i] <= 'f'
ROR_608:723:boolean_isNumber(java.lang.String): chars[i] > 'f'  =>   chars[i] == 'f'
ROR_609:723:boolean_isNumber(java.lang.String): chars[i] > 'f'  =>   chars[i] != 'f'
ROR_610:723:boolean_isNumber(java.lang.String): chars[i] > 'f'  =>   true
ROR_611:723:boolean_isNumber(java.lang.String): chars[i] > 'f'  =>   false
ROR_612:723:boolean_isNumber(java.lang.String): chars[i] < 'A'  =>   chars[i] > 'A'
ROR_613:723:boolean_isNumber(java.lang.String): chars[i] < 'A'  =>   chars[i] >= 'A'
ROR_614:723:boolean_isNumber(java.lang.String): chars[i] < 'A'  =>   chars[i] <= 'A'
ROR_615:723:boolean_isNumber(java.lang.String): chars[i] < 'A'  =>   chars[i] == 'A'
ROR_616:723:boolean_isNumber(java.lang.String): chars[i] < 'A'  =>   chars[i] != 'A'
ROR_617:723:boolean_isNumber(java.lang.String): chars[i] < 'A'  =>   true
ROR_618:723:boolean_isNumber(java.lang.String): chars[i] < 'A'  =>   false
ROR_619:723:boolean_isNumber(java.lang.String): chars[i] > 'F'  =>   chars[i] >= 'F'
ROR_620:723:boolean_isNumber(java.lang.String): chars[i] > 'F'  =>   chars[i] < 'F'
ROR_621:723:boolean_isNumber(java.lang.String): chars[i] > 'F'  =>   chars[i] <= 'F'
ROR_622:723:boolean_isNumber(java.lang.String): chars[i] > 'F'  =>   chars[i] == 'F'
ROR_623:723:boolean_isNumber(java.lang.String): chars[i] > 'F'  =>   chars[i] != 'F'
ROR_624:723:boolean_isNumber(java.lang.String): chars[i] > 'F'  =>   true
ROR_625:723:boolean_isNumber(java.lang.String): chars[i] > 'F'  =>   false
ROR_626:731:boolean_isNumber(java.lang.String): i < sz  =>   i > sz
ROR_627:731:boolean_isNumber(java.lang.String): i < sz  =>   i >= sz
ROR_628:731:boolean_isNumber(java.lang.String): i < sz  =>   i <= sz
ROR_629:731:boolean_isNumber(java.lang.String): i < sz  =>   i == sz
ROR_630:731:boolean_isNumber(java.lang.String): i < sz  =>   i != sz
ROR_631:731:boolean_isNumber(java.lang.String): i < sz  =>   true
ROR_632:731:boolean_isNumber(java.lang.String): i < sz  =>   false
ROR_633:731:boolean_isNumber(java.lang.String): i < sz + 1  =>   i > sz + 1
ROR_634:731:boolean_isNumber(java.lang.String): i < sz + 1  =>   i >= sz + 1
ROR_635:731:boolean_isNumber(java.lang.String): i < sz + 1  =>   i <= sz + 1
ROR_636:731:boolean_isNumber(java.lang.String): i < sz + 1  =>   i == sz + 1
ROR_637:731:boolean_isNumber(java.lang.String): i < sz + 1  =>   i != sz + 1
ROR_638:731:boolean_isNumber(java.lang.String): i < sz + 1  =>   true
ROR_639:731:boolean_isNumber(java.lang.String): i < sz + 1  =>   false
ROR_640:732:boolean_isNumber(java.lang.String): chars[i] >= '0'  =>   chars[i] > '0'
ROR_641:732:boolean_isNumber(java.lang.String): chars[i] >= '0'  =>   chars[i] < '0'
ROR_642:732:boolean_isNumber(java.lang.String): chars[i] >= '0'  =>   chars[i] <= '0'
ROR_643:732:boolean_isNumber(java.lang.String): chars[i] >= '0'  =>   chars[i] == '0'
ROR_644:732:boolean_isNumber(java.lang.String): chars[i] >= '0'  =>   chars[i] != '0'
ROR_645:732:boolean_isNumber(java.lang.String): chars[i] >= '0'  =>   true
ROR_646:732:boolean_isNumber(java.lang.String): chars[i] >= '0'  =>   false
ROR_647:732:boolean_isNumber(java.lang.String): chars[i] <= '9'  =>   chars[i] > '9'
ROR_648:732:boolean_isNumber(java.lang.String): chars[i] <= '9'  =>   chars[i] >= '9'
ROR_649:732:boolean_isNumber(java.lang.String): chars[i] <= '9'  =>   chars[i] < '9'
ROR_650:732:boolean_isNumber(java.lang.String): chars[i] <= '9'  =>   chars[i] == '9'
ROR_651:732:boolean_isNumber(java.lang.String): chars[i] <= '9'  =>   chars[i] != '9'
ROR_652:732:boolean_isNumber(java.lang.String): chars[i] <= '9'  =>   true
ROR_653:732:boolean_isNumber(java.lang.String): chars[i] <= '9'  =>   false
ROR_654:736:boolean_isNumber(java.lang.String): chars[i] == '.'  =>   chars[i] > '.'
ROR_655:736:boolean_isNumber(java.lang.String): chars[i] == '.'  =>   chars[i] >= '.'
ROR_656:736:boolean_isNumber(java.lang.String): chars[i] == '.'  =>   chars[i] < '.'
ROR_657:736:boolean_isNumber(java.lang.String): chars[i] == '.'  =>   chars[i] <= '.'
ROR_658:736:boolean_isNumber(java.lang.String): chars[i] == '.'  =>   chars[i] != '.'
ROR_659:736:boolean_isNumber(java.lang.String): chars[i] == '.'  =>   true
ROR_660:736:boolean_isNumber(java.lang.String): chars[i] == '.'  =>   false
ROR_661:742:boolean_isNumber(java.lang.String): chars[i] == 'e'  =>   chars[i] > 'e'
ROR_662:742:boolean_isNumber(java.lang.String): chars[i] == 'e'  =>   chars[i] >= 'e'
ROR_663:742:boolean_isNumber(java.lang.String): chars[i] == 'e'  =>   chars[i] < 'e'
ROR_664:742:boolean_isNumber(java.lang.String): chars[i] == 'e'  =>   chars[i] <= 'e'
ROR_665:742:boolean_isNumber(java.lang.String): chars[i] == 'e'  =>   chars[i] != 'e'
ROR_666:742:boolean_isNumber(java.lang.String): chars[i] == 'e'  =>   true
ROR_667:742:boolean_isNumber(java.lang.String): chars[i] == 'e'  =>   false
ROR_668:742:boolean_isNumber(java.lang.String): chars[i] == 'E'  =>   chars[i] > 'E'
ROR_669:742:boolean_isNumber(java.lang.String): chars[i] == 'E'  =>   chars[i] >= 'E'
ROR_670:742:boolean_isNumber(java.lang.String): chars[i] == 'E'  =>   chars[i] < 'E'
ROR_671:742:boolean_isNumber(java.lang.String): chars[i] == 'E'  =>   chars[i] <= 'E'
ROR_672:742:boolean_isNumber(java.lang.String): chars[i] == 'E'  =>   chars[i] != 'E'
ROR_673:742:boolean_isNumber(java.lang.String): chars[i] == 'E'  =>   true
ROR_674:742:boolean_isNumber(java.lang.String): chars[i] == 'E'  =>   false
ROR_675:752:boolean_isNumber(java.lang.String): chars[i] == '+'  =>   chars[i] > '+'
ROR_676:752:boolean_isNumber(java.lang.String): chars[i] == '+'  =>   chars[i] >= '+'
ROR_677:752:boolean_isNumber(java.lang.String): chars[i] == '+'  =>   chars[i] < '+'
ROR_678:752:boolean_isNumber(java.lang.String): chars[i] == '+'  =>   chars[i] <= '+'
ROR_679:752:boolean_isNumber(java.lang.String): chars[i] == '+'  =>   chars[i] != '+'
ROR_680:752:boolean_isNumber(java.lang.String): chars[i] == '+'  =>   true
ROR_681:752:boolean_isNumber(java.lang.String): chars[i] == '+'  =>   false
ROR_682:752:boolean_isNumber(java.lang.String): chars[i] == '-'  =>   chars[i] > '-'
ROR_683:752:boolean_isNumber(java.lang.String): chars[i] == '-'  =>   chars[i] >= '-'
ROR_684:752:boolean_isNumber(java.lang.String): chars[i] == '-'  =>   chars[i] < '-'
ROR_685:752:boolean_isNumber(java.lang.String): chars[i] == '-'  =>   chars[i] <= '-'
ROR_686:752:boolean_isNumber(java.lang.String): chars[i] == '-'  =>   chars[i] != '-'
ROR_687:752:boolean_isNumber(java.lang.String): chars[i] == '-'  =>   true
ROR_688:752:boolean_isNumber(java.lang.String): chars[i] == '-'  =>   false
ROR_689:766:boolean_isNumber(java.lang.String): i < chars.length  =>   i > chars.length
ROR_690:766:boolean_isNumber(java.lang.String): i < chars.length  =>   i >= chars.length
ROR_691:766:boolean_isNumber(java.lang.String): i < chars.length  =>   i <= chars.length
ROR_692:766:boolean_isNumber(java.lang.String): i < chars.length  =>   i == chars.length
ROR_693:766:boolean_isNumber(java.lang.String): i < chars.length  =>   i != chars.length
ROR_694:766:boolean_isNumber(java.lang.String): i < chars.length  =>   true
ROR_695:766:boolean_isNumber(java.lang.String): i < chars.length  =>   false
ROR_696:767:boolean_isNumber(java.lang.String): chars[i] >= '0'  =>   chars[i] > '0'
ROR_697:767:boolean_isNumber(java.lang.String): chars[i] >= '0'  =>   chars[i] < '0'
ROR_698:767:boolean_isNumber(java.lang.String): chars[i] >= '0'  =>   chars[i] <= '0'
ROR_699:767:boolean_isNumber(java.lang.String): chars[i] >= '0'  =>   chars[i] == '0'
ROR_700:767:boolean_isNumber(java.lang.String): chars[i] >= '0'  =>   chars[i] != '0'
ROR_701:767:boolean_isNumber(java.lang.String): chars[i] >= '0'  =>   true
ROR_702:767:boolean_isNumber(java.lang.String): chars[i] >= '0'  =>   false
ROR_703:767:boolean_isNumber(java.lang.String): chars[i] <= '9'  =>   chars[i] > '9'
ROR_704:767:boolean_isNumber(java.lang.String): chars[i] <= '9'  =>   chars[i] >= '9'
ROR_705:767:boolean_isNumber(java.lang.String): chars[i] <= '9'  =>   chars[i] < '9'
ROR_706:767:boolean_isNumber(java.lang.String): chars[i] <= '9'  =>   chars[i] == '9'
ROR_707:767:boolean_isNumber(java.lang.String): chars[i] <= '9'  =>   chars[i] != '9'
ROR_708:767:boolean_isNumber(java.lang.String): chars[i] <= '9'  =>   true
ROR_709:767:boolean_isNumber(java.lang.String): chars[i] <= '9'  =>   false
ROR_710:770:boolean_isNumber(java.lang.String): chars[i] == 'e'  =>   chars[i] > 'e'
ROR_711:770:boolean_isNumber(java.lang.String): chars[i] == 'e'  =>   chars[i] >= 'e'
ROR_712:770:boolean_isNumber(java.lang.String): chars[i] == 'e'  =>   chars[i] < 'e'
ROR_713:770:boolean_isNumber(java.lang.String): chars[i] == 'e'  =>   chars[i] <= 'e'
ROR_714:770:boolean_isNumber(java.lang.String): chars[i] == 'e'  =>   chars[i] != 'e'
ROR_715:770:boolean_isNumber(java.lang.String): chars[i] == 'e'  =>   true
ROR_716:770:boolean_isNumber(java.lang.String): chars[i] == 'e'  =>   false
ROR_717:770:boolean_isNumber(java.lang.String): chars[i] == 'E'  =>   chars[i] > 'E'
ROR_718:770:boolean_isNumber(java.lang.String): chars[i] == 'E'  =>   chars[i] >= 'E'
ROR_719:770:boolean_isNumber(java.lang.String): chars[i] == 'E'  =>   chars[i] < 'E'
ROR_720:770:boolean_isNumber(java.lang.String): chars[i] == 'E'  =>   chars[i] <= 'E'
ROR_721:770:boolean_isNumber(java.lang.String): chars[i] == 'E'  =>   chars[i] != 'E'
ROR_722:770:boolean_isNumber(java.lang.String): chars[i] == 'E'  =>   true
ROR_723:770:boolean_isNumber(java.lang.String): chars[i] == 'E'  =>   false
ROR_724:773:boolean_isNumber(java.lang.String): chars[i] == '.'  =>   chars[i] > '.'
ROR_725:773:boolean_isNumber(java.lang.String): chars[i] == '.'  =>   chars[i] >= '.'
ROR_726:773:boolean_isNumber(java.lang.String): chars[i] == '.'  =>   chars[i] < '.'
ROR_727:773:boolean_isNumber(java.lang.String): chars[i] == '.'  =>   chars[i] <= '.'
ROR_728:773:boolean_isNumber(java.lang.String): chars[i] == '.'  =>   chars[i] != '.'
ROR_729:773:boolean_isNumber(java.lang.String): chars[i] == '.'  =>   true
ROR_730:773:boolean_isNumber(java.lang.String): chars[i] == '.'  =>   false
ROR_731:779:boolean_isNumber(java.lang.String): chars[i] == 'd'  =>   chars[i] > 'd'
ROR_732:779:boolean_isNumber(java.lang.String): chars[i] == 'd'  =>   chars[i] >= 'd'
ROR_733:779:boolean_isNumber(java.lang.String): chars[i] == 'd'  =>   chars[i] < 'd'
ROR_734:779:boolean_isNumber(java.lang.String): chars[i] == 'd'  =>   chars[i] <= 'd'
ROR_735:779:boolean_isNumber(java.lang.String): chars[i] == 'd'  =>   chars[i] != 'd'
ROR_736:779:boolean_isNumber(java.lang.String): chars[i] == 'd'  =>   true
ROR_737:779:boolean_isNumber(java.lang.String): chars[i] == 'd'  =>   false
ROR_738:779:boolean_isNumber(java.lang.String): chars[i] == 'D'  =>   chars[i] > 'D'
ROR_739:779:boolean_isNumber(java.lang.String): chars[i] == 'D'  =>   chars[i] >= 'D'
ROR_740:779:boolean_isNumber(java.lang.String): chars[i] == 'D'  =>   chars[i] < 'D'
ROR_741:779:boolean_isNumber(java.lang.String): chars[i] == 'D'  =>   chars[i] <= 'D'
ROR_742:779:boolean_isNumber(java.lang.String): chars[i] == 'D'  =>   chars[i] != 'D'
ROR_743:779:boolean_isNumber(java.lang.String): chars[i] == 'D'  =>   true
ROR_744:779:boolean_isNumber(java.lang.String): chars[i] == 'D'  =>   false
ROR_745:779:boolean_isNumber(java.lang.String): chars[i] == 'f'  =>   chars[i] > 'f'
ROR_746:779:boolean_isNumber(java.lang.String): chars[i] == 'f'  =>   chars[i] >= 'f'
ROR_747:779:boolean_isNumber(java.lang.String): chars[i] == 'f'  =>   chars[i] < 'f'
ROR_748:779:boolean_isNumber(java.lang.String): chars[i] == 'f'  =>   chars[i] <= 'f'
ROR_749:779:boolean_isNumber(java.lang.String): chars[i] == 'f'  =>   chars[i] != 'f'
ROR_750:779:boolean_isNumber(java.lang.String): chars[i] == 'f'  =>   true
ROR_751:779:boolean_isNumber(java.lang.String): chars[i] == 'f'  =>   false
ROR_752:779:boolean_isNumber(java.lang.String): chars[i] == 'F'  =>   chars[i] > 'F'
ROR_753:779:boolean_isNumber(java.lang.String): chars[i] == 'F'  =>   chars[i] >= 'F'
ROR_754:779:boolean_isNumber(java.lang.String): chars[i] == 'F'  =>   chars[i] < 'F'
ROR_755:779:boolean_isNumber(java.lang.String): chars[i] == 'F'  =>   chars[i] <= 'F'
ROR_756:779:boolean_isNumber(java.lang.String): chars[i] == 'F'  =>   chars[i] != 'F'
ROR_757:779:boolean_isNumber(java.lang.String): chars[i] == 'F'  =>   true
ROR_758:779:boolean_isNumber(java.lang.String): chars[i] == 'F'  =>   false
ROR_759:782:boolean_isNumber(java.lang.String): chars[i] == 'l'  =>   chars[i] > 'l'
ROR_760:782:boolean_isNumber(java.lang.String): chars[i] == 'l'  =>   chars[i] >= 'l'
ROR_761:782:boolean_isNumber(java.lang.String): chars[i] == 'l'  =>   chars[i] < 'l'
ROR_762:782:boolean_isNumber(java.lang.String): chars[i] == 'l'  =>   chars[i] <= 'l'
ROR_763:782:boolean_isNumber(java.lang.String): chars[i] == 'l'  =>   chars[i] != 'l'
ROR_764:782:boolean_isNumber(java.lang.String): chars[i] == 'l'  =>   true
ROR_765:782:boolean_isNumber(java.lang.String): chars[i] == 'l'  =>   false
ROR_766:782:boolean_isNumber(java.lang.String): chars[i] == 'L'  =>   chars[i] > 'L'
ROR_767:782:boolean_isNumber(java.lang.String): chars[i] == 'L'  =>   chars[i] >= 'L'
ROR_768:782:boolean_isNumber(java.lang.String): chars[i] == 'L'  =>   chars[i] < 'L'
ROR_769:782:boolean_isNumber(java.lang.String): chars[i] == 'L'  =>   chars[i] <= 'L'
ROR_770:782:boolean_isNumber(java.lang.String): chars[i] == 'L'  =>   chars[i] != 'L'
ROR_771:782:boolean_isNumber(java.lang.String): chars[i] == 'L'  =>   true
ROR_772:782:boolean_isNumber(java.lang.String): chars[i] == 'L'  =>   false
COR_1:170:java.lang.Number_createNumber(java.lang.String): str.startsWith( \"0x\" ) || str.startsWith( \"-0x\" )  =>   str.startsWith( \"0x\" ) && str.startsWith( \"-0x\" )
COR_2:170:java.lang.Number_createNumber(java.lang.String): str.startsWith( \"0x\" ) || str.startsWith( \"-0x\" )  =>   str.startsWith( \"0x\" ) ^ str.startsWith( \"-0x\" )
COR_3:170:java.lang.Number_createNumber(java.lang.String): str.startsWith( \"0x\" ) || str.startsWith( \"-0x\" ) || str.startsWith( \"0X\" )  =>   (str.startsWith( \"0x\" ) || str.startsWith( \"-0x\" )) && str.startsWith( \"0X\" )
COR_4:170:java.lang.Number_createNumber(java.lang.String): str.startsWith( \"0x\" ) || str.startsWith( \"-0x\" ) || str.startsWith( \"0X\" )  =>   (str.startsWith( \"0x\" ) || str.startsWith( \"-0x\" )) ^ str.startsWith( \"0X\" )
COR_5:170:java.lang.Number_createNumber(java.lang.String): str.startsWith( \"0x\" ) || str.startsWith( \"-0x\" ) || str.startsWith( \"0X\" ) || str.startsWith( \"-0X\" )  =>   (str.startsWith( \"0x\" ) || str.startsWith( \"-0x\" ) || str.startsWith( \"0X\" )) && str.startsWith( \"-0X\" )
COR_6:170:java.lang.Number_createNumber(java.lang.String): str.startsWith( \"0x\" ) || str.startsWith( \"-0x\" ) || str.startsWith( \"0X\" ) || str.startsWith( \"-0X\" )  =>   (str.startsWith( \"0x\" ) || str.startsWith( \"-0x\" ) || str.startsWith( \"0X\" )) ^ str.startsWith( \"-0X\" )
COR_7:188:java.lang.Number_createNumber(java.lang.String): expPos < decPos || expPos > str.length()  =>   expPos < decPos && expPos > str.length()
COR_8:188:java.lang.Number_createNumber(java.lang.String): expPos < decPos || expPos > str.length()  =>   expPos < decPos ^ expPos > str.length()
COR_9:207:java.lang.Number_createNumber(java.lang.String): !Character.isDigit( lastChar ) && lastChar != '.'  =>   !Character.isDigit( lastChar ) || lastChar != '.'
COR_10:207:java.lang.Number_createNumber(java.lang.String): !Character.isDigit( lastChar ) && lastChar != '.'  =>   !Character.isDigit( lastChar ) ^ lastChar != '.'
COR_11:208:java.lang.Number_createNumber(java.lang.String): expPos > -1 && expPos < str.length() - 1  =>   expPos > -1 || expPos < str.length() - 1
COR_12:208:java.lang.Number_createNumber(java.lang.String): expPos > -1 && expPos < str.length() - 1  =>   expPos > -1 ^ expPos < str.length() - 1
COR_13:214:java.lang.Number_createNumber(java.lang.String): isAllZeros( mant ) && isAllZeros( exp )  =>   isAllZeros( mant ) || isAllZeros( exp )
COR_14:214:java.lang.Number_createNumber(java.lang.String): isAllZeros( mant ) && isAllZeros( exp )  =>   isAllZeros( mant ) ^ isAllZeros( exp )
COR_15:218:java.lang.Number_createNumber(java.lang.String): dec == null && exp == null  =>   dec == null || exp == null
COR_16:218:java.lang.Number_createNumber(java.lang.String): dec == null && exp == null  =>   dec == null ^ exp == null
COR_17:218:java.lang.Number_createNumber(java.lang.String): numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) )  =>   numeric.charAt( 0 ) == '-' || isDigits( numeric.substring( 1 ) )
COR_18:218:java.lang.Number_createNumber(java.lang.String): numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) )  =>   numeric.charAt( 0 ) == '-' ^ isDigits( numeric.substring( 1 ) )
COR_19:218:java.lang.Number_createNumber(java.lang.String): numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric )  =>   numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) && isDigits( numeric )
COR_20:218:java.lang.Number_createNumber(java.lang.String): numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric )  =>   (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) )) ^ isDigits( numeric )
COR_21:218:java.lang.Number_createNumber(java.lang.String): dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))  =>   dec == null && exp == null || (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))
COR_22:218:java.lang.Number_createNumber(java.lang.String): dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))  =>   (dec == null && exp == null) ^ (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))
COR_23:231:java.lang.Number_createNumber(java.lang.String): f.floatValue() == 0.0F && !allZeros  =>   f.floatValue() == 0.0F || !allZeros
COR_24:231:java.lang.Number_createNumber(java.lang.String): f.floatValue() == 0.0F && !allZeros  =>   f.floatValue() == 0.0F ^ !allZeros
COR_25:231:java.lang.Number_createNumber(java.lang.String): f.isInfinite() || f.floatValue() == 0.0F && !allZeros  =>   f.isInfinite() && (f.floatValue() == 0.0F && !allZeros)
COR_26:231:java.lang.Number_createNumber(java.lang.String): f.isInfinite() || f.floatValue() == 0.0F && !allZeros  =>   f.isInfinite() ^ (f.floatValue() == 0.0F && !allZeros)
COR_27:241:java.lang.Number_createNumber(java.lang.String): d.floatValue() == 0.0D && !allZeros  =>   d.floatValue() == 0.0D || !allZeros
COR_28:241:java.lang.Number_createNumber(java.lang.String): d.floatValue() == 0.0D && !allZeros  =>   d.floatValue() == 0.0D ^ !allZeros
COR_29:241:java.lang.Number_createNumber(java.lang.String): d.isInfinite() || d.floatValue() == 0.0D && !allZeros  =>   d.isInfinite() && (d.floatValue() == 0.0D && !allZeros)
COR_30:241:java.lang.Number_createNumber(java.lang.String): d.isInfinite() || d.floatValue() == 0.0D && !allZeros  =>   d.isInfinite() ^ (d.floatValue() == 0.0D && !allZeros)
COR_31:256:java.lang.Number_createNumber(java.lang.String): expPos > -1 && expPos < str.length() - 1  =>   expPos > -1 || expPos < str.length() - 1
COR_32:256:java.lang.Number_createNumber(java.lang.String): expPos > -1 && expPos < str.length() - 1  =>   expPos > -1 ^ expPos < str.length() - 1
COR_33:261:java.lang.Number_createNumber(java.lang.String): dec == null && exp == null  =>   dec == null || exp == null
COR_34:261:java.lang.Number_createNumber(java.lang.String): dec == null && exp == null  =>   dec == null ^ exp == null
COR_35:272:java.lang.Number_createNumber(java.lang.String): isAllZeros( mant ) && isAllZeros( exp )  =>   isAllZeros( mant ) || isAllZeros( exp )
COR_36:272:java.lang.Number_createNumber(java.lang.String): isAllZeros( mant ) && isAllZeros( exp )  =>   isAllZeros( mant ) ^ isAllZeros( exp )
COR_37:275:java.lang.Number_createNumber(java.lang.String): f.floatValue() == 0.0F && !allZeros  =>   f.floatValue() == 0.0F || !allZeros
COR_38:275:java.lang.Number_createNumber(java.lang.String): f.floatValue() == 0.0F && !allZeros  =>   f.floatValue() == 0.0F ^ !allZeros
COR_39:275:java.lang.Number_createNumber(java.lang.String): f.isInfinite() || f.floatValue() == 0.0F && !allZeros  =>   f.isInfinite() && (f.floatValue() == 0.0F && !allZeros)
COR_40:275:java.lang.Number_createNumber(java.lang.String): f.isInfinite() || f.floatValue() == 0.0F && !allZeros  =>   f.isInfinite() ^ (f.floatValue() == 0.0F && !allZeros)
COR_41:282:java.lang.Number_createNumber(java.lang.String): d.doubleValue() == 0.0D && !allZeros  =>   d.doubleValue() == 0.0D || !allZeros
COR_42:282:java.lang.Number_createNumber(java.lang.String): d.doubleValue() == 0.0D && !allZeros  =>   d.doubleValue() == 0.0D ^ !allZeros
COR_43:282:java.lang.Number_createNumber(java.lang.String): d.isInfinite() || d.doubleValue() == 0.0D && !allZeros  =>   d.isInfinite() && (d.doubleValue() == 0.0D && !allZeros)
COR_44:282:java.lang.Number_createNumber(java.lang.String): d.isInfinite() || d.doubleValue() == 0.0D && !allZeros  =>   d.isInfinite() ^ (d.doubleValue() == 0.0D && !allZeros)
COR_45:717:boolean_isNumber(java.lang.String): sz > start + 1 && chars[start] == '0'  =>   sz > start + 1 || chars[start] == '0'
COR_46:717:boolean_isNumber(java.lang.String): sz > start + 1 && chars[start] == '0'  =>   sz > start + 1 ^ chars[start] == '0'
COR_47:717:boolean_isNumber(java.lang.String): sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x'  =>   sz > start + 1 && chars[start] == '0' || chars[start + 1] == 'x'
COR_48:717:boolean_isNumber(java.lang.String): sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x'  =>   (sz > start + 1 && chars[start] == '0') ^ chars[start + 1] == 'x'
COR_49:723:boolean_isNumber(java.lang.String): chars[i] < '0' || chars[i] > '9'  =>   chars[i] < '0' && chars[i] > '9'
COR_50:723:boolean_isNumber(java.lang.String): chars[i] < '0' || chars[i] > '9'  =>   chars[i] < '0' ^ chars[i] > '9'
COR_51:723:boolean_isNumber(java.lang.String): chars[i] < 'a' || chars[i] > 'f'  =>   chars[i] < 'a' && chars[i] > 'f'
COR_52:723:boolean_isNumber(java.lang.String): chars[i] < 'a' || chars[i] > 'f'  =>   chars[i] < 'a' ^ chars[i] > 'f'
COR_53:723:boolean_isNumber(java.lang.String): (chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f')  =>   chars[i] < '0' || chars[i] > '9' || (chars[i] < 'a' || chars[i] > 'f')
COR_54:723:boolean_isNumber(java.lang.String): (chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f')  =>   (chars[i] < '0' || chars[i] > '9') ^ (chars[i] < 'a' || chars[i] > 'f')
COR_55:723:boolean_isNumber(java.lang.String): chars[i] < 'A' || chars[i] > 'F'  =>   chars[i] < 'A' && chars[i] > 'F'
COR_56:723:boolean_isNumber(java.lang.String): chars[i] < 'A' || chars[i] > 'F'  =>   chars[i] < 'A' ^ chars[i] > 'F'
COR_57:723:boolean_isNumber(java.lang.String): (chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')  =>   (chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') || (chars[i] < 'A' || chars[i] > 'F')
COR_58:723:boolean_isNumber(java.lang.String): (chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')  =>   ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f')) ^ (chars[i] < 'A' || chars[i] > 'F')
COR_59:731:boolean_isNumber(java.lang.String): i < sz + 1 && allowSigns  =>   i < sz + 1 || allowSigns
COR_60:731:boolean_isNumber(java.lang.String): i < sz + 1 && allowSigns  =>   i < sz + 1 ^ allowSigns
COR_61:731:boolean_isNumber(java.lang.String): i < sz + 1 && allowSigns && !foundDigit  =>   i < sz + 1 && allowSigns || !foundDigit
COR_62:731:boolean_isNumber(java.lang.String): i < sz + 1 && allowSigns && !foundDigit  =>   (i < sz + 1 && allowSigns) ^ !foundDigit
COR_63:731:boolean_isNumber(java.lang.String): i < sz || i < sz + 1 && allowSigns && !foundDigit  =>   i < sz && (i < sz + 1 && allowSigns && !foundDigit)
COR_64:731:boolean_isNumber(java.lang.String): i < sz || i < sz + 1 && allowSigns && !foundDigit  =>   i < sz ^ (i < sz + 1 && allowSigns && !foundDigit)
COR_65:732:boolean_isNumber(java.lang.String): chars[i] >= '0' && chars[i] <= '9'  =>   chars[i] >= '0' || chars[i] <= '9'
COR_66:732:boolean_isNumber(java.lang.String): chars[i] >= '0' && chars[i] <= '9'  =>   chars[i] >= '0' ^ chars[i] <= '9'
COR_67:737:boolean_isNumber(java.lang.String): hasDecPoint || hasExp  =>   hasDecPoint && hasExp
COR_68:737:boolean_isNumber(java.lang.String): hasDecPoint || hasExp  =>   hasDecPoint ^ hasExp
COR_69:742:boolean_isNumber(java.lang.String): chars[i] == 'e' || chars[i] == 'E'  =>   chars[i] == 'e' && chars[i] == 'E'
COR_70:742:boolean_isNumber(java.lang.String): chars[i] == 'e' || chars[i] == 'E'  =>   chars[i] == 'e' ^ chars[i] == 'E'
COR_71:752:boolean_isNumber(java.lang.String): chars[i] == '+' || chars[i] == '-'  =>   chars[i] == '+' && chars[i] == '-'
COR_72:752:boolean_isNumber(java.lang.String): chars[i] == '+' || chars[i] == '-'  =>   chars[i] == '+' ^ chars[i] == '-'
COR_73:767:boolean_isNumber(java.lang.String): chars[i] >= '0' && chars[i] <= '9'  =>   chars[i] >= '0' || chars[i] <= '9'
COR_74:767:boolean_isNumber(java.lang.String): chars[i] >= '0' && chars[i] <= '9'  =>   chars[i] >= '0' ^ chars[i] <= '9'
COR_75:770:boolean_isNumber(java.lang.String): chars[i] == 'e' || chars[i] == 'E'  =>   chars[i] == 'e' && chars[i] == 'E'
COR_76:770:boolean_isNumber(java.lang.String): chars[i] == 'e' || chars[i] == 'E'  =>   chars[i] == 'e' ^ chars[i] == 'E'
COR_77:774:boolean_isNumber(java.lang.String): hasDecPoint || hasExp  =>   hasDecPoint && hasExp
COR_78:774:boolean_isNumber(java.lang.String): hasDecPoint || hasExp  =>   hasDecPoint ^ hasExp
COR_79:779:boolean_isNumber(java.lang.String): chars[i] == 'd' || chars[i] == 'D'  =>   chars[i] == 'd' && chars[i] == 'D'
COR_80:779:boolean_isNumber(java.lang.String): chars[i] == 'd' || chars[i] == 'D'  =>   chars[i] == 'd' ^ chars[i] == 'D'
COR_81:779:boolean_isNumber(java.lang.String): chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f'  =>   (chars[i] == 'd' || chars[i] == 'D') && chars[i] == 'f'
COR_82:779:boolean_isNumber(java.lang.String): chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f'  =>   (chars[i] == 'd' || chars[i] == 'D') ^ chars[i] == 'f'
COR_83:779:boolean_isNumber(java.lang.String): chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F'  =>   (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f') && chars[i] == 'F'
COR_84:779:boolean_isNumber(java.lang.String): chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F'  =>   (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f') ^ chars[i] == 'F'
COR_85:779:boolean_isNumber(java.lang.String): !allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')  =>   !allowSigns || (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')
COR_86:779:boolean_isNumber(java.lang.String): !allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')  =>   !allowSigns ^ (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')
COR_87:782:boolean_isNumber(java.lang.String): chars[i] == 'l' || chars[i] == 'L'  =>   chars[i] == 'l' && chars[i] == 'L'
COR_88:782:boolean_isNumber(java.lang.String): chars[i] == 'l' || chars[i] == 'L'  =>   chars[i] == 'l' ^ chars[i] == 'L'
COR_89:783:boolean_isNumber(java.lang.String): foundDigit && !hasExp  =>   foundDigit || !hasExp
COR_90:783:boolean_isNumber(java.lang.String): foundDigit && !hasExp  =>   foundDigit ^ !hasExp
COR_91:783:boolean_isNumber(java.lang.String): foundDigit && !hasExp && !hasDecPoint  =>   foundDigit && !hasExp || !hasDecPoint
COR_92:783:boolean_isNumber(java.lang.String): foundDigit && !hasExp && !hasDecPoint  =>   (foundDigit && !hasExp) ^ !hasDecPoint
COR_93:787:boolean_isNumber(java.lang.String): !allowSigns && foundDigit  =>   !allowSigns || foundDigit
COR_94:787:boolean_isNumber(java.lang.String): !allowSigns && foundDigit  =>   !allowSigns ^ foundDigit
SDL_1:59:int_toInt(java.lang.String): return toInt( str, 0 );  =>   return 0;
SDL_2:68:int_toInt(java.lang.String,int): if (str == null) {     return defaultValue; } try {     return Integer.parseInt( str ); } catch ( java.lang.NumberFormatException nfe ) {     return defaultValue; }  =>   try {     return Integer.parseInt( str ); } catch ( java.lang.NumberFormatException nfe ) {     return defaultValue; }
SDL_3:66:int_toInt(java.lang.String,int): if (str == null) {     return defaultValue; }  =>   if (true) {     return defaultValue; }
SDL_4:65:int_toInt(java.lang.String,int): return defaultValue;  =>   return 0;
SDL_5:68:int_toInt(java.lang.String,int): return Integer.parseInt( str );  =>   return 0;
SDL_6:76:long_toLong(java.lang.String): return toLong( str, 0L );  =>   return 0;
SDL_7:85:long_toLong(java.lang.String,long): if (str == null) {     return defaultValue; } try {     return Long.parseLong( str ); } catch ( java.lang.NumberFormatException nfe ) {     return defaultValue; }  =>   try {     return Long.parseLong( str ); } catch ( java.lang.NumberFormatException nfe ) {     return defaultValue; }
SDL_8:83:long_toLong(java.lang.String,long): if (str == null) {     return defaultValue; }  =>   if (true) {     return defaultValue; }
SDL_9:82:long_toLong(java.lang.String,long): return defaultValue;  =>   return 0;
SDL_10:85:long_toLong(java.lang.String,long): return Long.parseLong( str );  =>   return 0;
SDL_11:93:float_toFloat(java.lang.String): return toFloat( str, 0.0f );  =>   return 0;
SDL_12:102:float_toFloat(java.lang.String,float): if (str == null) {     return defaultValue; } try {     return Float.parseFloat( str ); } catch ( java.lang.NumberFormatException nfe ) {     return defaultValue; }  =>   try {     return Float.parseFloat( str ); } catch ( java.lang.NumberFormatException nfe ) {     return defaultValue; }
SDL_13:100:float_toFloat(java.lang.String,float): if (str == null) {     return defaultValue; }  =>   if (true) {     return defaultValue; }
SDL_14:99:float_toFloat(java.lang.String,float): return defaultValue;  =>   return 0;
SDL_15:102:float_toFloat(java.lang.String,float): return Float.parseFloat( str );  =>   return 0;
SDL_16:110:double_toDouble(java.lang.String): return toDouble( str, 0.0d );  =>   return 0;
SDL_17:119:double_toDouble(java.lang.String,double): if (str == null) {     return defaultValue; } try {     return Double.parseDouble( str ); } catch ( java.lang.NumberFormatException nfe ) {     return defaultValue; }  =>   try {     return Double.parseDouble( str ); } catch ( java.lang.NumberFormatException nfe ) {     return defaultValue; }
SDL_18:117:double_toDouble(java.lang.String,double): if (str == null) {     return defaultValue; }  =>   if (true) {     return defaultValue; }
SDL_19:116:double_toDouble(java.lang.String,double): return defaultValue;  =>   return 0;
SDL_20:119:double_toDouble(java.lang.String,double): return Double.parseDouble( str );  =>   return 0;
SDL_21:136:byte_toByte(java.lang.String,byte): if (str == null) {     return defaultValue; } try {     return Byte.parseByte( str ); } catch ( java.lang.NumberFormatException nfe ) {     return defaultValue; }  =>   try {     return Byte.parseByte( str ); } catch ( java.lang.NumberFormatException nfe ) {     return defaultValue; }
SDL_22:134:byte_toByte(java.lang.String,byte): if (str == null) {     return defaultValue; }  =>   if (true) {     return defaultValue; }
SDL_23:144:short_toShort(java.lang.String): return toShort( str, (short) 0 );  =>   return 0;
SDL_24:153:short_toShort(java.lang.String,short): if (str == null) {     return defaultValue; } try {     return Short.parseShort( str ); } catch ( java.lang.NumberFormatException nfe ) {     return defaultValue; }  =>   try {     return Short.parseShort( str ); } catch ( java.lang.NumberFormatException nfe ) {     return defaultValue; }
SDL_25:151:short_toShort(java.lang.String,short): if (str == null) {     return defaultValue; }  =>   if (true) {     return defaultValue; }
SDL_26:150:short_toShort(java.lang.String,short): return defaultValue;  =>   return 0;
SDL_27:153:short_toShort(java.lang.String,short): return Short.parseShort( str );  =>   return 0;
SDL_28:287:java.lang.Number_createNumber(java.lang.String): if (str == null) {     return null; } if (StringUtils.isBlank( str )) {     throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" ); } if (str.startsWith( \"--\" )) {     return null; } if (str.startsWith( \"0x\" ) || str.startsWith( \"-0x\" ) || str.startsWith( \"0X\" ) || str.startsWith( \"-0X\" )) {     int hexDigits = str.length() - 2;     if (str.startsWith( \"-\" )) {         hexDigits--;     }     if (hexDigits > 8) {         return createLong( str );     }     return createInteger( str ); } char lastChar = str.charAt( str.length() - 1 ); java.lang.String mant; java.lang.String dec; java.lang.String exp; int decPos = str.indexOf( '.' ); int expPos = str.indexOf( 'e' ) + str.indexOf( 'E' ) + 1; if (decPos > -1) {     if (expPos > -1) {         if (expPos < decPos || expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         dec = str.substring( decPos + 1, expPos );     } else {         dec = str.substring( decPos + 1 );     }     mant = str.substring( 0, decPos ); } else {     if (expPos > -1) {         if (expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         mant = str.substring( 0, expPos );     } else {         mant = str;     }     dec = null; } if (!Character.isDigit( lastChar ) && lastChar != '.') {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() - 1 );     } else {         exp = null;     }     java.lang.String numeric = str.substring( 0, str.length() - 1 );     boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );     switch (lastChar) {     case 'l' :     case 'L' :         if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {             try {                 return createLong( numeric );             } catch ( java.lang.NumberFormatException nfe ) {             }             return createBigInteger( numeric );         }         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     case 'f' :     case 'F' :         try {             java.lang.Float f = NumberUtils.createFloat( numeric );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }     case 'd' :     case 'D' :         try {             java.lang.Double d = NumberUtils.createDouble( numeric );             if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createBigDecimal( numeric );         } catch ( java.lang.NumberFormatException e ) {         }     default  :         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     } } else {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() );     } else {         exp = null;     }     if (dec == null && exp == null) {         try {             return createInteger( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createLong( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( str );     } else {         boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );         try {             java.lang.Float f = createFloat( str );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             java.lang.Double d = createDouble( str );             if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigDecimal( str );     } }  =>   if (StringUtils.isBlank( str )) {     throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" ); } if (str.startsWith( \"--\" )) {     return null; } if (str.startsWith( \"0x\" ) || str.startsWith( \"-0x\" ) || str.startsWith( \"0X\" ) || str.startsWith( \"-0X\" )) {     int hexDigits = str.length() - 2;     if (str.startsWith( \"-\" )) {         hexDigits--;     }     if (hexDigits > 8) {         return createLong( str );     }     return createInteger( str ); } char lastChar = str.charAt( str.length() - 1 ); java.lang.String mant; java.lang.String dec; java.lang.String exp; int decPos = str.indexOf( '.' ); int expPos = str.indexOf( 'e' ) + str.indexOf( 'E' ) + 1; if (decPos > -1) {     if (expPos > -1) {         if (expPos < decPos || expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         dec = str.substring( decPos + 1, expPos );     } else {         dec = str.substring( decPos + 1 );     }     mant = str.substring( 0, decPos ); } else {     if (expPos > -1) {         if (expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         mant = str.substring( 0, expPos );     } else {         mant = str;     }     dec = null; } if (!Character.isDigit( lastChar ) && lastChar != '.') {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() - 1 );     } else {         exp = null;     }     java.lang.String numeric = str.substring( 0, str.length() - 1 );     boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );     switch (lastChar) {     case 'l' :     case 'L' :         if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {             try {                 return createLong( numeric );             } catch ( java.lang.NumberFormatException nfe ) {             }             return createBigInteger( numeric );         }         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     case 'f' :     case 'F' :         try {             java.lang.Float f = NumberUtils.createFloat( numeric );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }     case 'd' :     case 'D' :         try {             java.lang.Double d = NumberUtils.createDouble( numeric );             if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createBigDecimal( numeric );         } catch ( java.lang.NumberFormatException e ) {         }     default  :         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     } } else {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() );     } else {         exp = null;     }     if (dec == null && exp == null) {         try {             return createInteger( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createLong( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( str );     } else {         boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );         try {             java.lang.Float f = createFloat( str );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             java.lang.Double d = createDouble( str );             if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigDecimal( str );     } }
SDL_29:287:java.lang.Number_createNumber(java.lang.String): if (str == null) {     return null; } if (StringUtils.isBlank( str )) {     throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" ); } if (str.startsWith( \"--\" )) {     return null; } if (str.startsWith( \"0x\" ) || str.startsWith( \"-0x\" ) || str.startsWith( \"0X\" ) || str.startsWith( \"-0X\" )) {     int hexDigits = str.length() - 2;     if (str.startsWith( \"-\" )) {         hexDigits--;     }     if (hexDigits > 8) {         return createLong( str );     }     return createInteger( str ); } char lastChar = str.charAt( str.length() - 1 ); java.lang.String mant; java.lang.String dec; java.lang.String exp; int decPos = str.indexOf( '.' ); int expPos = str.indexOf( 'e' ) + str.indexOf( 'E' ) + 1; if (decPos > -1) {     if (expPos > -1) {         if (expPos < decPos || expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         dec = str.substring( decPos + 1, expPos );     } else {         dec = str.substring( decPos + 1 );     }     mant = str.substring( 0, decPos ); } else {     if (expPos > -1) {         if (expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         mant = str.substring( 0, expPos );     } else {         mant = str;     }     dec = null; } if (!Character.isDigit( lastChar ) && lastChar != '.') {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() - 1 );     } else {         exp = null;     }     java.lang.String numeric = str.substring( 0, str.length() - 1 );     boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );     switch (lastChar) {     case 'l' :     case 'L' :         if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {             try {                 return createLong( numeric );             } catch ( java.lang.NumberFormatException nfe ) {             }             return createBigInteger( numeric );         }         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     case 'f' :     case 'F' :         try {             java.lang.Float f = NumberUtils.createFloat( numeric );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }     case 'd' :     case 'D' :         try {             java.lang.Double d = NumberUtils.createDouble( numeric );             if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createBigDecimal( numeric );         } catch ( java.lang.NumberFormatException e ) {         }     default  :         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     } } else {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() );     } else {         exp = null;     }     if (dec == null && exp == null) {         try {             return createInteger( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createLong( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( str );     } else {         boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );         try {             java.lang.Float f = createFloat( str );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             java.lang.Double d = createDouble( str );             if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigDecimal( str );     } }  =>   if (str == null) {     return null; } if (str.startsWith( \"--\" )) {     return null; } if (str.startsWith( \"0x\" ) || str.startsWith( \"-0x\" ) || str.startsWith( \"0X\" ) || str.startsWith( \"-0X\" )) {     int hexDigits = str.length() - 2;     if (str.startsWith( \"-\" )) {         hexDigits--;     }     if (hexDigits > 8) {         return createLong( str );     }     return createInteger( str ); } char lastChar = str.charAt( str.length() - 1 ); java.lang.String mant; java.lang.String dec; java.lang.String exp; int decPos = str.indexOf( '.' ); int expPos = str.indexOf( 'e' ) + str.indexOf( 'E' ) + 1; if (decPos > -1) {     if (expPos > -1) {         if (expPos < decPos || expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         dec = str.substring( decPos + 1, expPos );     } else {         dec = str.substring( decPos + 1 );     }     mant = str.substring( 0, decPos ); } else {     if (expPos > -1) {         if (expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         mant = str.substring( 0, expPos );     } else {         mant = str;     }     dec = null; } if (!Character.isDigit( lastChar ) && lastChar != '.') {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() - 1 );     } else {         exp = null;     }     java.lang.String numeric = str.substring( 0, str.length() - 1 );     boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );     switch (lastChar) {     case 'l' :     case 'L' :         if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {             try {                 return createLong( numeric );             } catch ( java.lang.NumberFormatException nfe ) {             }             return createBigInteger( numeric );         }         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     case 'f' :     case 'F' :         try {             java.lang.Float f = NumberUtils.createFloat( numeric );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }     case 'd' :     case 'D' :         try {             java.lang.Double d = NumberUtils.createDouble( numeric );             if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createBigDecimal( numeric );         } catch ( java.lang.NumberFormatException e ) {         }     default  :         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     } } else {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() );     } else {         exp = null;     }     if (dec == null && exp == null) {         try {             return createInteger( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createLong( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( str );     } else {         boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );         try {             java.lang.Float f = createFloat( str );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             java.lang.Double d = createDouble( str );             if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigDecimal( str );     } }
SDL_30:287:java.lang.Number_createNumber(java.lang.String): if (str == null) {     return null; } if (StringUtils.isBlank( str )) {     throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" ); } if (str.startsWith( \"--\" )) {     return null; } if (str.startsWith( \"0x\" ) || str.startsWith( \"-0x\" ) || str.startsWith( \"0X\" ) || str.startsWith( \"-0X\" )) {     int hexDigits = str.length() - 2;     if (str.startsWith( \"-\" )) {         hexDigits--;     }     if (hexDigits > 8) {         return createLong( str );     }     return createInteger( str ); } char lastChar = str.charAt( str.length() - 1 ); java.lang.String mant; java.lang.String dec; java.lang.String exp; int decPos = str.indexOf( '.' ); int expPos = str.indexOf( 'e' ) + str.indexOf( 'E' ) + 1; if (decPos > -1) {     if (expPos > -1) {         if (expPos < decPos || expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         dec = str.substring( decPos + 1, expPos );     } else {         dec = str.substring( decPos + 1 );     }     mant = str.substring( 0, decPos ); } else {     if (expPos > -1) {         if (expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         mant = str.substring( 0, expPos );     } else {         mant = str;     }     dec = null; } if (!Character.isDigit( lastChar ) && lastChar != '.') {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() - 1 );     } else {         exp = null;     }     java.lang.String numeric = str.substring( 0, str.length() - 1 );     boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );     switch (lastChar) {     case 'l' :     case 'L' :         if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {             try {                 return createLong( numeric );             } catch ( java.lang.NumberFormatException nfe ) {             }             return createBigInteger( numeric );         }         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     case 'f' :     case 'F' :         try {             java.lang.Float f = NumberUtils.createFloat( numeric );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }     case 'd' :     case 'D' :         try {             java.lang.Double d = NumberUtils.createDouble( numeric );             if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createBigDecimal( numeric );         } catch ( java.lang.NumberFormatException e ) {         }     default  :         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     } } else {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() );     } else {         exp = null;     }     if (dec == null && exp == null) {         try {             return createInteger( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createLong( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( str );     } else {         boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );         try {             java.lang.Float f = createFloat( str );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             java.lang.Double d = createDouble( str );             if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigDecimal( str );     } }  =>   if (str == null) {     return null; } if (StringUtils.isBlank( str )) {     throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" ); } if (str.startsWith( \"0x\" ) || str.startsWith( \"-0x\" ) || str.startsWith( \"0X\" ) || str.startsWith( \"-0X\" )) {     int hexDigits = str.length() - 2;     if (str.startsWith( \"-\" )) {         hexDigits--;     }     if (hexDigits > 8) {         return createLong( str );     }     return createInteger( str ); } char lastChar = str.charAt( str.length() - 1 ); java.lang.String mant; java.lang.String dec; java.lang.String exp; int decPos = str.indexOf( '.' ); int expPos = str.indexOf( 'e' ) + str.indexOf( 'E' ) + 1; if (decPos > -1) {     if (expPos > -1) {         if (expPos < decPos || expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         dec = str.substring( decPos + 1, expPos );     } else {         dec = str.substring( decPos + 1 );     }     mant = str.substring( 0, decPos ); } else {     if (expPos > -1) {         if (expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         mant = str.substring( 0, expPos );     } else {         mant = str;     }     dec = null; } if (!Character.isDigit( lastChar ) && lastChar != '.') {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() - 1 );     } else {         exp = null;     }     java.lang.String numeric = str.substring( 0, str.length() - 1 );     boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );     switch (lastChar) {     case 'l' :     case 'L' :         if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {             try {                 return createLong( numeric );             } catch ( java.lang.NumberFormatException nfe ) {             }             return createBigInteger( numeric );         }         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     case 'f' :     case 'F' :         try {             java.lang.Float f = NumberUtils.createFloat( numeric );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }     case 'd' :     case 'D' :         try {             java.lang.Double d = NumberUtils.createDouble( numeric );             if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createBigDecimal( numeric );         } catch ( java.lang.NumberFormatException e ) {         }     default  :         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     } } else {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() );     } else {         exp = null;     }     if (dec == null && exp == null) {         try {             return createInteger( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createLong( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( str );     } else {         boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );         try {             java.lang.Float f = createFloat( str );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             java.lang.Double d = createDouble( str );             if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigDecimal( str );     } }
SDL_31:280:java.lang.Number_createNumber(java.lang.String): if (str == null) {     return null; } if (StringUtils.isBlank( str )) {     throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" ); } if (str.startsWith( \"--\" )) {     return null; } if (str.startsWith( \"0x\" ) || str.startsWith( \"-0x\" ) || str.startsWith( \"0X\" ) || str.startsWith( \"-0X\" )) {     int hexDigits = str.length() - 2;     if (str.startsWith( \"-\" )) {         hexDigits--;     }     if (hexDigits > 8) {         return createLong( str );     }     return createInteger( str ); } char lastChar = str.charAt( str.length() - 1 ); java.lang.String mant; java.lang.String dec; java.lang.String exp; int decPos = str.indexOf( '.' ); int expPos = str.indexOf( 'e' ) + str.indexOf( 'E' ) + 1; if (decPos > -1) {     if (expPos > -1) {         if (expPos < decPos || expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         dec = str.substring( decPos + 1, expPos );     } else {         dec = str.substring( decPos + 1 );     }     mant = str.substring( 0, decPos ); } else {     if (expPos > -1) {         if (expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         mant = str.substring( 0, expPos );     } else {         mant = str;     }     dec = null; } if (!Character.isDigit( lastChar ) && lastChar != '.') {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() - 1 );     } else {         exp = null;     }     java.lang.String numeric = str.substring( 0, str.length() - 1 );     boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );     switch (lastChar) {     case 'l' :     case 'L' :         if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {             try {                 return createLong( numeric );             } catch ( java.lang.NumberFormatException nfe ) {             }             return createBigInteger( numeric );         }         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     case 'f' :     case 'F' :         try {             java.lang.Float f = NumberUtils.createFloat( numeric );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }     case 'd' :     case 'D' :         try {             java.lang.Double d = NumberUtils.createDouble( numeric );             if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createBigDecimal( numeric );         } catch ( java.lang.NumberFormatException e ) {         }     default  :         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     } } else {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() );     } else {         exp = null;     }     if (dec == null && exp == null) {         try {             return createInteger( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createLong( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( str );     } else {         boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );         try {             java.lang.Float f = createFloat( str );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             java.lang.Double d = createDouble( str );             if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigDecimal( str );     } }  =>   if (str == null) {     return null; } if (StringUtils.isBlank( str )) {     throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" ); } if (str.startsWith( \"--\" )) {     return null; } char lastChar = str.charAt( str.length() - 1 ); java.lang.String mant; java.lang.String dec; java.lang.String exp; int decPos = str.indexOf( '.' ); int expPos = str.indexOf( 'e' ) + str.indexOf( 'E' ) + 1; if (decPos > -1) {     if (expPos > -1) {         if (expPos < decPos || expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         dec = str.substring( decPos + 1, expPos );     } else {         dec = str.substring( decPos + 1 );     }     mant = str.substring( 0, decPos ); } else {     if (expPos > -1) {         if (expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         mant = str.substring( 0, expPos );     } else {         mant = str;     }     dec = null; } if (!Character.isDigit( lastChar ) && lastChar != '.') {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() - 1 );     } else {         exp = null;     }     java.lang.String numeric = str.substring( 0, str.length() - 1 );     boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );     switch (lastChar) {     case 'l' :     case 'L' :         if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {             try {                 return createLong( numeric );             } catch ( java.lang.NumberFormatException nfe ) {             }             return createBigInteger( numeric );         }         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     case 'f' :     case 'F' :         try {             java.lang.Float f = NumberUtils.createFloat( numeric );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }     case 'd' :     case 'D' :         try {             java.lang.Double d = NumberUtils.createDouble( numeric );             if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createBigDecimal( numeric );         } catch ( java.lang.NumberFormatException e ) {         }     default  :         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     } } else {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() );     } else {         exp = null;     }     if (dec == null && exp == null) {         try {             return createInteger( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createLong( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( str );     } else {         boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );         try {             java.lang.Float f = createFloat( str );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             java.lang.Double d = createDouble( str );             if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigDecimal( str );     } }
SDL_32:269:java.lang.Number_createNumber(java.lang.String): if (str == null) {     return null; } if (StringUtils.isBlank( str )) {     throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" ); } if (str.startsWith( \"--\" )) {     return null; } if (str.startsWith( \"0x\" ) || str.startsWith( \"-0x\" ) || str.startsWith( \"0X\" ) || str.startsWith( \"-0X\" )) {     int hexDigits = str.length() - 2;     if (str.startsWith( \"-\" )) {         hexDigits--;     }     if (hexDigits > 8) {         return createLong( str );     }     return createInteger( str ); } char lastChar = str.charAt( str.length() - 1 ); java.lang.String mant; java.lang.String dec; java.lang.String exp; int decPos = str.indexOf( '.' ); int expPos = str.indexOf( 'e' ) + str.indexOf( 'E' ) + 1; if (decPos > -1) {     if (expPos > -1) {         if (expPos < decPos || expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         dec = str.substring( decPos + 1, expPos );     } else {         dec = str.substring( decPos + 1 );     }     mant = str.substring( 0, decPos ); } else {     if (expPos > -1) {         if (expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         mant = str.substring( 0, expPos );     } else {         mant = str;     }     dec = null; } if (!Character.isDigit( lastChar ) && lastChar != '.') {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() - 1 );     } else {         exp = null;     }     java.lang.String numeric = str.substring( 0, str.length() - 1 );     boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );     switch (lastChar) {     case 'l' :     case 'L' :         if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {             try {                 return createLong( numeric );             } catch ( java.lang.NumberFormatException nfe ) {             }             return createBigInteger( numeric );         }         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     case 'f' :     case 'F' :         try {             java.lang.Float f = NumberUtils.createFloat( numeric );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }     case 'd' :     case 'D' :         try {             java.lang.Double d = NumberUtils.createDouble( numeric );             if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createBigDecimal( numeric );         } catch ( java.lang.NumberFormatException e ) {         }     default  :         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     } } else {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() );     } else {         exp = null;     }     if (dec == null && exp == null) {         try {             return createInteger( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createLong( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( str );     } else {         boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );         try {             java.lang.Float f = createFloat( str );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             java.lang.Double d = createDouble( str );             if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigDecimal( str );     } }  =>   if (str == null) {     return null; } if (StringUtils.isBlank( str )) {     throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" ); } if (str.startsWith( \"--\" )) {     return null; } if (str.startsWith( \"0x\" ) || str.startsWith( \"-0x\" ) || str.startsWith( \"0X\" ) || str.startsWith( \"-0X\" )) {     int hexDigits = str.length() - 2;     if (str.startsWith( \"-\" )) {         hexDigits--;     }     if (hexDigits > 8) {         return createLong( str );     }     return createInteger( str ); } char lastChar = str.charAt( str.length() - 1 ); java.lang.String mant; java.lang.String dec; java.lang.String exp; int decPos = str.indexOf( '.' ); int expPos = str.indexOf( 'e' ) + str.indexOf( 'E' ) + 1; if (!Character.isDigit( lastChar ) && lastChar != '.') {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() - 1 );     } else {         exp = null;     }     java.lang.String numeric = str.substring( 0, str.length() - 1 );     boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );     switch (lastChar) {     case 'l' :     case 'L' :         if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {             try {                 return createLong( numeric );             } catch ( java.lang.NumberFormatException nfe ) {             }             return createBigInteger( numeric );         }         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     case 'f' :     case 'F' :         try {             java.lang.Float f = NumberUtils.createFloat( numeric );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }     case 'd' :     case 'D' :         try {             java.lang.Double d = NumberUtils.createDouble( numeric );             if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createBigDecimal( numeric );         } catch ( java.lang.NumberFormatException e ) {         }     default  :         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     } } else {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() );     } else {         exp = null;     }     if (dec == null && exp == null) {         try {             return createInteger( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createLong( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( str );     } else {         boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );         try {             java.lang.Float f = createFloat( str );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             java.lang.Double d = createDouble( str );             if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigDecimal( str );     } }
SDL_33:207:java.lang.Number_createNumber(java.lang.String): if (str == null) {     return null; } if (StringUtils.isBlank( str )) {     throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" ); } if (str.startsWith( \"--\" )) {     return null; } if (str.startsWith( \"0x\" ) || str.startsWith( \"-0x\" ) || str.startsWith( \"0X\" ) || str.startsWith( \"-0X\" )) {     int hexDigits = str.length() - 2;     if (str.startsWith( \"-\" )) {         hexDigits--;     }     if (hexDigits > 8) {         return createLong( str );     }     return createInteger( str ); } char lastChar = str.charAt( str.length() - 1 ); java.lang.String mant; java.lang.String dec; java.lang.String exp; int decPos = str.indexOf( '.' ); int expPos = str.indexOf( 'e' ) + str.indexOf( 'E' ) + 1; if (decPos > -1) {     if (expPos > -1) {         if (expPos < decPos || expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         dec = str.substring( decPos + 1, expPos );     } else {         dec = str.substring( decPos + 1 );     }     mant = str.substring( 0, decPos ); } else {     if (expPos > -1) {         if (expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         mant = str.substring( 0, expPos );     } else {         mant = str;     }     dec = null; } if (!Character.isDigit( lastChar ) && lastChar != '.') {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() - 1 );     } else {         exp = null;     }     java.lang.String numeric = str.substring( 0, str.length() - 1 );     boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );     switch (lastChar) {     case 'l' :     case 'L' :         if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {             try {                 return createLong( numeric );             } catch ( java.lang.NumberFormatException nfe ) {             }             return createBigInteger( numeric );         }         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     case 'f' :     case 'F' :         try {             java.lang.Float f = NumberUtils.createFloat( numeric );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }     case 'd' :     case 'D' :         try {             java.lang.Double d = NumberUtils.createDouble( numeric );             if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createBigDecimal( numeric );         } catch ( java.lang.NumberFormatException e ) {         }     default  :         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     } } else {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() );     } else {         exp = null;     }     if (dec == null && exp == null) {         try {             return createInteger( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createLong( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( str );     } else {         boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );         try {             java.lang.Float f = createFloat( str );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             java.lang.Double d = createDouble( str );             if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigDecimal( str );     } }  =>   if (str == null) {     return null; } if (StringUtils.isBlank( str )) {     throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" ); } if (str.startsWith( \"--\" )) {     return null; } if (str.startsWith( \"0x\" ) || str.startsWith( \"-0x\" ) || str.startsWith( \"0X\" ) || str.startsWith( \"-0X\" )) {     int hexDigits = str.length() - 2;     if (str.startsWith( \"-\" )) {         hexDigits--;     }     if (hexDigits > 8) {         return createLong( str );     }     return createInteger( str ); } char lastChar = str.charAt( str.length() - 1 ); java.lang.String mant; java.lang.String dec; java.lang.String exp; int decPos = str.indexOf( '.' ); int expPos = str.indexOf( 'e' ) + str.indexOf( 'E' ) + 1; if (decPos > -1) {     if (expPos > -1) {         if (expPos < decPos || expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         dec = str.substring( decPos + 1, expPos );     } else {         dec = str.substring( decPos + 1 );     }     mant = str.substring( 0, decPos ); } else {     if (expPos > -1) {         if (expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         mant = str.substring( 0, expPos );     } else {         mant = str;     }     dec = null; }
SDL_34:164:java.lang.Number_createNumber(java.lang.String): if (str == null) {     return null; }  =>   if (true) {     return null; }
SDL_35:165:java.lang.Number_createNumber(java.lang.String): throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" );  =>  
SDL_36:167:java.lang.Number_createNumber(java.lang.String): if (StringUtils.isBlank( str )) {     throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" ); }  =>   if (true) {     throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" ); }
SDL_37:170:java.lang.Number_createNumber(java.lang.String): if (str.startsWith( \"--\" )) {     return null; }  =>   if (true) {     return null; }
SDL_38:176:java.lang.Number_createNumber(java.lang.String): int hexDigits = str.length() - 2; if (str.startsWith( \"-\" )) {     hexDigits--; } if (hexDigits > 8) {     return createLong( str ); } return createInteger( str );  =>   int hexDigits = str.length() - 2; if (hexDigits > 8) {     return createLong( str ); } return createInteger( str );
SDL_39:176:java.lang.Number_createNumber(java.lang.String): int hexDigits = str.length() - 2; if (str.startsWith( \"-\" )) {     hexDigits--; } if (hexDigits > 8) {     return createLong( str ); } return createInteger( str );  =>   int hexDigits = str.length() - 2; if (str.startsWith( \"-\" )) {     hexDigits--; } return createInteger( str );
SDL_40:180:java.lang.Number_createNumber(java.lang.String): if (str.startsWith( \"0x\" ) || str.startsWith( \"-0x\" ) || str.startsWith( \"0X\" ) || str.startsWith( \"-0X\" )) {     int hexDigits = str.length() - 2;     if (str.startsWith( \"-\" )) {         hexDigits--;     }     if (hexDigits > 8) {         return createLong( str );     }     return createInteger( str ); }  =>   if (true) {     int hexDigits = str.length() - 2;     if (str.startsWith( \"-\" )) {         hexDigits--;     }     if (hexDigits > 8) {         return createLong( str );     }     return createInteger( str ); }
SDL_41:173:java.lang.Number_createNumber(java.lang.String): hexDigits--;  =>  
SDL_42:175:java.lang.Number_createNumber(java.lang.String): if (str.startsWith( \"-\" )) {     hexDigits--; }  =>   if (true) {     hexDigits--; }
SDL_43:178:java.lang.Number_createNumber(java.lang.String): if (hexDigits > 8) {     return createLong( str ); }  =>   if (true) {     return createLong( str ); }
SDL_44:188:java.lang.Number_createNumber(java.lang.String): if (expPos > -1) {     if (expPos < decPos || expPos > str.length()) {         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     }     dec = str.substring( decPos + 1, expPos ); } else {     dec = str.substring( decPos + 1 ); } mant = str.substring( 0, decPos );  =>   mant = str.substring( 0, decPos );
SDL_45:195:java.lang.Number_createNumber(java.lang.String): if (expPos > -1) {     if (expPos < decPos || expPos > str.length()) {         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     }     dec = str.substring( decPos + 1, expPos ); } else {     dec = str.substring( decPos + 1 ); } mant = str.substring( 0, decPos );  =>   if (expPos > -1) {     if (expPos < decPos || expPos > str.length()) {         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     }     dec = str.substring( decPos + 1, expPos ); } else {     dec = str.substring( decPos + 1 ); }
SDL_46:207:java.lang.Number_createNumber(java.lang.String): if (decPos > -1) {     if (expPos > -1) {         if (expPos < decPos || expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         dec = str.substring( decPos + 1, expPos );     } else {         dec = str.substring( decPos + 1 );     }     mant = str.substring( 0, decPos ); } else {     if (expPos > -1) {         if (expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         mant = str.substring( 0, expPos );     } else {         mant = str;     }     dec = null; }  =>   if (true) {     if (expPos > -1) {         if (expPos < decPos || expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         dec = str.substring( decPos + 1, expPos );     } else {         dec = str.substring( decPos + 1 );     }     mant = str.substring( 0, decPos ); } else {     if (expPos > -1) {         if (expPos > str.length()) {             throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );         }         mant = str.substring( 0, expPos );     } else {         mant = str;     }     dec = null; }
SDL_47:198:java.lang.Number_createNumber(java.lang.String): if (expPos > -1) {     if (expPos > str.length()) {         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     }     mant = str.substring( 0, expPos ); } else {     mant = str; } dec = null;  =>   dec = null;
SDL_48:205:java.lang.Number_createNumber(java.lang.String): if (expPos > -1) {     if (expPos > str.length()) {         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     }     mant = str.substring( 0, expPos ); } else {     mant = str; } dec = null;  =>   if (expPos > -1) {     if (expPos > str.length()) {         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     }     mant = str.substring( 0, expPos ); } else {     mant = str; }
SDL_49:189:java.lang.Number_createNumber(java.lang.String): if (expPos < decPos || expPos > str.length()) {     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); } dec = str.substring( decPos + 1, expPos );  =>   dec = str.substring( decPos + 1, expPos );
SDL_50:191:java.lang.Number_createNumber(java.lang.String): if (expPos < decPos || expPos > str.length()) {     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); } dec = str.substring( decPos + 1, expPos );  =>   if (expPos < decPos || expPos > str.length()) {     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); }
SDL_51:195:java.lang.Number_createNumber(java.lang.String): if (expPos > -1) {     if (expPos < decPos || expPos > str.length()) {         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     }     dec = str.substring( decPos + 1, expPos ); } else {     dec = str.substring( decPos + 1 ); }  =>   if (true) {     if (expPos < decPos || expPos > str.length()) {         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     }     dec = str.substring( decPos + 1, expPos ); } else {     dec = str.substring( decPos + 1 ); }
SDL_52:193:java.lang.Number_createNumber(java.lang.String): dec = str.substring( decPos + 1 );  =>  
SDL_53:189:java.lang.Number_createNumber(java.lang.String): throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );  =>  
SDL_54:191:java.lang.Number_createNumber(java.lang.String): if (expPos < decPos || expPos > str.length()) {     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); }  =>   if (true) {     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); }
SDL_55:199:java.lang.Number_createNumber(java.lang.String): if (expPos > str.length()) {     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); } mant = str.substring( 0, expPos );  =>   mant = str.substring( 0, expPos );
SDL_56:201:java.lang.Number_createNumber(java.lang.String): if (expPos > str.length()) {     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); } mant = str.substring( 0, expPos );  =>   if (expPos > str.length()) {     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); }
SDL_57:205:java.lang.Number_createNumber(java.lang.String): if (expPos > -1) {     if (expPos > str.length()) {         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     }     mant = str.substring( 0, expPos ); } else {     mant = str; }  =>   if (true) {     if (expPos > str.length()) {         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     }     mant = str.substring( 0, expPos ); } else {     mant = str; }
SDL_58:203:java.lang.Number_createNumber(java.lang.String): mant = str;  =>  
SDL_59:199:java.lang.Number_createNumber(java.lang.String): throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );  =>  
SDL_60:201:java.lang.Number_createNumber(java.lang.String): if (expPos > str.length()) {     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); }  =>   if (true) {     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); }
SDL_61:250:java.lang.Number_createNumber(java.lang.String): if (expPos > -1 && expPos < str.length() - 1) {     exp = str.substring( expPos + 1, str.length() - 1 ); } else {     exp = null; } java.lang.String numeric = str.substring( 0, str.length() - 1 ); boolean allZeros = isAllZeros( mant ) && isAllZeros( exp ); switch (lastChar) { case 'l' : case 'L' :     if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {         try {             return createLong( numeric );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( numeric );     }     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); case 'f' : case 'F' :     try {         java.lang.Float f = NumberUtils.createFloat( numeric );         if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {             return f;         }     } catch ( java.lang.NumberFormatException nfe ) {     } case 'd' : case 'D' :     try {         java.lang.Double d = NumberUtils.createDouble( numeric );         if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {             return d;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         return createBigDecimal( numeric );     } catch ( java.lang.NumberFormatException e ) {     } default  :     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); }  =>   java.lang.String numeric = str.substring( 0, str.length() - 1 ); boolean allZeros = isAllZeros( mant ) && isAllZeros( exp ); switch (lastChar) { case 'l' : case 'L' :     if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {         try {             return createLong( numeric );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( numeric );     }     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); case 'f' : case 'F' :     try {         java.lang.Float f = NumberUtils.createFloat( numeric );         if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {             return f;         }     } catch ( java.lang.NumberFormatException nfe ) {     } case 'd' : case 'D' :     try {         java.lang.Double d = NumberUtils.createDouble( numeric );         if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {             return d;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         return createBigDecimal( numeric );     } catch ( java.lang.NumberFormatException e ) {     } default  :     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); }
SDL_62:215:java.lang.Number_createNumber(java.lang.String): if (expPos > -1 && expPos < str.length() - 1) {     exp = str.substring( expPos + 1, str.length() - 1 ); } else {     exp = null; } java.lang.String numeric = str.substring( 0, str.length() - 1 ); boolean allZeros = isAllZeros( mant ) && isAllZeros( exp ); switch (lastChar) { case 'l' : case 'L' :     if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {         try {             return createLong( numeric );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( numeric );     }     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); case 'f' : case 'F' :     try {         java.lang.Float f = NumberUtils.createFloat( numeric );         if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {             return f;         }     } catch ( java.lang.NumberFormatException nfe ) {     } case 'd' : case 'D' :     try {         java.lang.Double d = NumberUtils.createDouble( numeric );         if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {             return d;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         return createBigDecimal( numeric );     } catch ( java.lang.NumberFormatException e ) {     } default  :     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); }  =>   if (expPos > -1 && expPos < str.length() - 1) {     exp = str.substring( expPos + 1, str.length() - 1 ); } else {     exp = null; } java.lang.String numeric = str.substring( 0, str.length() - 1 ); boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );
SDL_63:290:java.lang.Number_createNumber(java.lang.String): if (!Character.isDigit( lastChar ) && lastChar != '.') {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() - 1 );     } else {         exp = null;     }     java.lang.String numeric = str.substring( 0, str.length() - 1 );     boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );     switch (lastChar) {     case 'l' :     case 'L' :         if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {             try {                 return createLong( numeric );             } catch ( java.lang.NumberFormatException nfe ) {             }             return createBigInteger( numeric );         }         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     case 'f' :     case 'F' :         try {             java.lang.Float f = NumberUtils.createFloat( numeric );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }     case 'd' :     case 'D' :         try {             java.lang.Double d = NumberUtils.createDouble( numeric );             if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createBigDecimal( numeric );         } catch ( java.lang.NumberFormatException e ) {         }     default  :         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     } } else {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() );     } else {         exp = null;     }     if (dec == null && exp == null) {         try {             return createInteger( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createLong( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( str );     } else {         boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );         try {             java.lang.Float f = createFloat( str );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             java.lang.Double d = createDouble( str );             if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigDecimal( str );     } }  =>   if (true) {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() - 1 );     } else {         exp = null;     }     java.lang.String numeric = str.substring( 0, str.length() - 1 );     boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );     switch (lastChar) {     case 'l' :     case 'L' :         if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {             try {                 return createLong( numeric );             } catch ( java.lang.NumberFormatException nfe ) {             }             return createBigInteger( numeric );         }         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     case 'f' :     case 'F' :         try {             java.lang.Float f = NumberUtils.createFloat( numeric );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }     case 'd' :     case 'D' :         try {             java.lang.Double d = NumberUtils.createDouble( numeric );             if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createBigDecimal( numeric );         } catch ( java.lang.NumberFormatException e ) {         }     default  :         throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );     } } else {     if (expPos > -1 && expPos < str.length() - 1) {         exp = str.substring( expPos + 1, str.length() );     } else {         exp = null;     }     if (dec == null && exp == null) {         try {             return createInteger( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             return createLong( str );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( str );     } else {         boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );         try {             java.lang.Float f = createFloat( str );             if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {                 return f;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         try {             java.lang.Double d = createDouble( str );             if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {                 return d;             }         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigDecimal( str );     } }
SDL_64:284:java.lang.Number_createNumber(java.lang.String): if (expPos > -1 && expPos < str.length() - 1) {     exp = str.substring( expPos + 1, str.length() ); } else {     exp = null; } if (dec == null && exp == null) {     try {         return createInteger( str );     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         return createLong( str );     } catch ( java.lang.NumberFormatException nfe ) {     }     return createBigInteger( str ); } else {     boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );     try {         java.lang.Float f = createFloat( str );         if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {             return f;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         java.lang.Double d = createDouble( str );         if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {             return d;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     return createBigDecimal( str ); }  =>   if (dec == null && exp == null) {     try {         return createInteger( str );     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         return createLong( str );     } catch ( java.lang.NumberFormatException nfe ) {     }     return createBigInteger( str ); } else {     boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );     try {         java.lang.Float f = createFloat( str );         if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {             return f;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         java.lang.Double d = createDouble( str );         if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {             return d;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     return createBigDecimal( str ); }
SDL_65:261:java.lang.Number_createNumber(java.lang.String): if (expPos > -1 && expPos < str.length() - 1) {     exp = str.substring( expPos + 1, str.length() ); } else {     exp = null; } if (dec == null && exp == null) {     try {         return createInteger( str );     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         return createLong( str );     } catch ( java.lang.NumberFormatException nfe ) {     }     return createBigInteger( str ); } else {     boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );     try {         java.lang.Float f = createFloat( str );         if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {             return f;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         java.lang.Double d = createDouble( str );         if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {             return d;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     return createBigDecimal( str ); }  =>   if (expPos > -1 && expPos < str.length() - 1) {     exp = str.substring( expPos + 1, str.length() ); } else {     exp = null; }
SDL_66:209:java.lang.Number_createNumber(java.lang.String): exp = str.substring( expPos + 1, str.length() - 1 );  =>  
SDL_67:213:java.lang.Number_createNumber(java.lang.String): if (expPos > -1 && expPos < str.length() - 1) {     exp = str.substring( expPos + 1, str.length() - 1 ); } else {     exp = null; }  =>   if (true) {     exp = str.substring( expPos + 1, str.length() - 1 ); } else {     exp = null; }
SDL_68:211:java.lang.Number_createNumber(java.lang.String): exp = null;  =>  
SDL_69:219:java.lang.Number_createNumber(java.lang.String): if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {     try {         return createLong( numeric );     } catch ( java.lang.NumberFormatException nfe ) {     }     return createBigInteger( numeric ); } throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );  =>   throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );
SDL_70:225:java.lang.Number_createNumber(java.lang.String): if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {     try {         return createLong( numeric );     } catch ( java.lang.NumberFormatException nfe ) {     }     return createBigInteger( numeric ); } throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );  =>   if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {     try {         return createLong( numeric );     } catch ( java.lang.NumberFormatException nfe ) {     }     return createBigInteger( numeric ); }
SDL_71:225:java.lang.Number_createNumber(java.lang.String): if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {     try {         return createLong( numeric );     } catch ( java.lang.NumberFormatException nfe ) {     }     return createBigInteger( numeric ); }  =>   if (true) {     try {         return createLong( numeric );     } catch ( java.lang.NumberFormatException nfe ) {     }     return createBigInteger( numeric ); }
SDL_72:232:java.lang.Number_createNumber(java.lang.String): try {     java.lang.Float f = NumberUtils.createFloat( numeric );     if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {         return f;     } } catch ( java.lang.NumberFormatException nfe ) { }  =>   try {     java.lang.Float f = NumberUtils.createFloat( numeric ); }
SDL_73:234:java.lang.Number_createNumber(java.lang.String): if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {     return f; }  =>   if (true) {     return f; }
SDL_74:242:java.lang.Number_createNumber(java.lang.String): try {     java.lang.Double d = NumberUtils.createDouble( numeric );     if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {         return d;     } } catch ( java.lang.NumberFormatException nfe ) { }  =>   try {     java.lang.Double d = NumberUtils.createDouble( numeric ); }
SDL_75:244:java.lang.Number_createNumber(java.lang.String): if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {     return d; }  =>   if (true) {     return d; }
SDL_76:252:java.lang.Number_createNumber(java.lang.String): throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );  =>  
SDL_77:243:java.lang.Number_createNumber(java.lang.String): case 'l' : case 'L' :     if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {         try {             return createLong( numeric );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( numeric );     }     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); case 'f' : case 'F' :     try {         java.lang.Float f = NumberUtils.createFloat( numeric );         if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {             return f;         }     } catch ( java.lang.NumberFormatException nfe ) {     } case 'd' : case 'D' :     try {         java.lang.Double d = NumberUtils.createDouble( numeric );         if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {             return d;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         return createBigDecimal( numeric );     } catch ( java.lang.NumberFormatException e ) {     } default  :     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );  =>   case 'f' : case 'F' :     try {         java.lang.Float f = NumberUtils.createFloat( numeric );         if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {             return f;         }     } catch ( java.lang.NumberFormatException nfe ) {     } case 'd' : case 'D' :     try {         java.lang.Double d = NumberUtils.createDouble( numeric );         if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {             return d;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         return createBigDecimal( numeric );     } catch ( java.lang.NumberFormatException e ) {     } default  :     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );
SDL_78:244:java.lang.Number_createNumber(java.lang.String): case 'l' : case 'L' :     if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {         try {             return createLong( numeric );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( numeric );     }     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); case 'f' : case 'F' :     try {         java.lang.Float f = NumberUtils.createFloat( numeric );         if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {             return f;         }     } catch ( java.lang.NumberFormatException nfe ) {     } case 'd' : case 'D' :     try {         java.lang.Double d = NumberUtils.createDouble( numeric );         if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {             return d;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         return createBigDecimal( numeric );     } catch ( java.lang.NumberFormatException e ) {     } default  :     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );  =>   case 'l' : case 'L' :     if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {         try {             return createLong( numeric );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( numeric );     }     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); case 'd' : case 'D' :     try {         java.lang.Double d = NumberUtils.createDouble( numeric );         if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {             return d;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         return createBigDecimal( numeric );     } catch ( java.lang.NumberFormatException e ) {     } default  :     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );
SDL_79:240:java.lang.Number_createNumber(java.lang.String): case 'l' : case 'L' :     if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {         try {             return createLong( numeric );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( numeric );     }     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); case 'f' : case 'F' :     try {         java.lang.Float f = NumberUtils.createFloat( numeric );         if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {             return f;         }     } catch ( java.lang.NumberFormatException nfe ) {     } case 'd' : case 'D' :     try {         java.lang.Double d = NumberUtils.createDouble( numeric );         if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {             return d;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         return createBigDecimal( numeric );     } catch ( java.lang.NumberFormatException e ) {     } default  :     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );  =>   case 'l' : case 'L' :     if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {         try {             return createLong( numeric );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( numeric );     }     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); case 'f' : case 'F' :     try {         java.lang.Float f = NumberUtils.createFloat( numeric );         if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {             return f;         }     } catch ( java.lang.NumberFormatException nfe ) {     } default  :     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );
SDL_80:251:java.lang.Number_createNumber(java.lang.String): case 'l' : case 'L' :     if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {         try {             return createLong( numeric );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( numeric );     }     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); case 'f' : case 'F' :     try {         java.lang.Float f = NumberUtils.createFloat( numeric );         if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {             return f;         }     } catch ( java.lang.NumberFormatException nfe ) {     } case 'd' : case 'D' :     try {         java.lang.Double d = NumberUtils.createDouble( numeric );         if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {             return d;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         return createBigDecimal( numeric );     } catch ( java.lang.NumberFormatException e ) {     } default  :     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" );  =>   case 'l' : case 'L' :     if (dec == null && exp == null && (numeric.charAt( 0 ) == '-' && isDigits( numeric.substring( 1 ) ) || isDigits( numeric ))) {         try {             return createLong( numeric );         } catch ( java.lang.NumberFormatException nfe ) {         }         return createBigInteger( numeric );     }     throw new java.lang.NumberFormatException( str + \" is not a valid number.\" ); case 'f' : case 'F' :     try {         java.lang.Float f = NumberUtils.createFloat( numeric );         if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {             return f;         }     } catch ( java.lang.NumberFormatException nfe ) {     } case 'd' : case 'D' :     try {         java.lang.Double d = NumberUtils.createDouble( numeric );         if (!(d.isInfinite() || d.floatValue() == 0.0D && !allZeros)) {             return d;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         return createBigDecimal( numeric );     } catch ( java.lang.NumberFormatException e ) {     }
SDL_81:257:java.lang.Number_createNumber(java.lang.String): exp = str.substring( expPos + 1, str.length() );  =>  
SDL_82:261:java.lang.Number_createNumber(java.lang.String): if (expPos > -1 && expPos < str.length() - 1) {     exp = str.substring( expPos + 1, str.length() ); } else {     exp = null; }  =>   if (true) {     exp = str.substring( expPos + 1, str.length() ); } else {     exp = null; }
SDL_83:259:java.lang.Number_createNumber(java.lang.String): exp = null;  =>  
SDL_84:289:java.lang.Number_createNumber(java.lang.String): if (dec == null && exp == null) {     try {         return createInteger( str );     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         return createLong( str );     } catch ( java.lang.NumberFormatException nfe ) {     }     return createBigInteger( str ); } else {     boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );     try {         java.lang.Float f = createFloat( str );         if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {             return f;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         java.lang.Double d = createDouble( str );         if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {             return d;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     return createBigDecimal( str ); }  =>   if (true) {     try {         return createInteger( str );     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         return createLong( str );     } catch ( java.lang.NumberFormatException nfe ) {     }     return createBigInteger( str ); } else {     boolean allZeros = isAllZeros( mant ) && isAllZeros( exp );     try {         java.lang.Float f = createFloat( str );         if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {             return f;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     try {         java.lang.Double d = createDouble( str );         if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {             return d;         }     } catch ( java.lang.NumberFormatException nfe ) {     }     return createBigDecimal( str ); }
SDL_85:276:java.lang.Number_createNumber(java.lang.String): try {     java.lang.Float f = createFloat( str );     if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {         return f;     } } catch ( java.lang.NumberFormatException nfe ) { }  =>   try {     java.lang.Float f = createFloat( str ); }
SDL_86:278:java.lang.Number_createNumber(java.lang.String): if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {     return f; }  =>   if (true) {     return f; }
SDL_87:283:java.lang.Number_createNumber(java.lang.String): try {     java.lang.Double d = createDouble( str );     if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {         return d;     } } catch ( java.lang.NumberFormatException nfe ) { }  =>   try {     java.lang.Double d = createDouble( str ); }
SDL_88:285:java.lang.Number_createNumber(java.lang.String): if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {     return d; }  =>   if (true) {     return d; }
SDL_89:300:boolean_isAllZeros(java.lang.String): if (str == null) {     return true; } for (int i = str.length() - 1; i >= 0; i--) {     if (str.charAt( i ) != '0') {         return false;     } } return str.length() > 0;  =>   for (int i = str.length() - 1; i >= 0; i--) {     if (str.charAt( i ) != '0') {         return false;     } } return str.length() > 0;
SDL_90:298:boolean_isAllZeros(java.lang.String): if (str == null) {     return true; } for (int i = str.length() - 1; i >= 0; i--) {     if (str.charAt( i ) != '0') {         return false;     } } return str.length() > 0;  =>   if (str == null) {     return true; } return str.length() > 0;
SDL_91:297:boolean_isAllZeros(java.lang.String): if (str == null) {     return true; }  =>   if (true) {     return true; }
SDL_92:296:boolean_isAllZeros(java.lang.String): return true;  =>   return false;
SDL_93:298:boolean_isAllZeros(java.lang.String): if (str.charAt( i ) != '0') {     return false; }  =>  
SDL_94:302:boolean_isAllZeros(java.lang.String): for (int i = str.length() - 1; i >= 0; i--) {     if (str.charAt( i ) != '0') {         return false;     } }  =>   for (int i = str.length() - 1;; i--) {     if (str.charAt( i ) != '0') {         return false;     } }
SDL_95:302:boolean_isAllZeros(java.lang.String): for (int i = str.length() - 1; i >= 0; i--) {     if (str.charAt( i ) != '0') {         return false;     } }  =>   for (int i = str.length() - 1; i >= 0;) {     if (str.charAt( i ) != '0') {         return false;     } }
SDL_96:301:boolean_isAllZeros(java.lang.String): if (str.charAt( i ) != '0') {     return false; }  =>   if (true) {     return false; }
SDL_97:300:boolean_isAllZeros(java.lang.String): return false;  =>   return true;
SDL_98:303:boolean_isAllZeros(java.lang.String): return str.length() > 0;  =>   return true;
SDL_99:303:boolean_isAllZeros(java.lang.String): return str.length() > 0;  =>   return false;
SDL_100:308:java.lang.Float_createFloat(java.lang.String): if (str == null) {     return null; } return Float.valueOf( str );  =>   return Float.valueOf( str );
SDL_101:310:java.lang.Float_createFloat(java.lang.String): if (str == null) {     return null; }  =>   if (true) {     return null; }
SDL_102:316:java.lang.Double_createDouble(java.lang.String): if (str == null) {     return null; } return Double.valueOf( str );  =>   return Double.valueOf( str );
SDL_103:318:java.lang.Double_createDouble(java.lang.String): if (str == null) {     return null; }  =>   if (true) {     return null; }
SDL_104:324:java.lang.Integer_createInteger(java.lang.String): if (str == null) {     return null; } return Integer.decode( str );  =>   return Integer.decode( str );
SDL_105:326:java.lang.Integer_createInteger(java.lang.String): if (str == null) {     return null; }  =>   if (true) {     return null; }
SDL_106:332:java.lang.Long_createLong(java.lang.String): if (str == null) {     return null; } return Long.decode( str );  =>   return Long.decode( str );
SDL_107:334:java.lang.Long_createLong(java.lang.String): if (str == null) {     return null; }  =>   if (true) {     return null; }
SDL_108:340:java.math.BigInteger_createBigInteger(java.lang.String): if (str == null) {     return null; } return new java.math.BigInteger( str );  =>   return new java.math.BigInteger( str );
SDL_109:342:java.math.BigInteger_createBigInteger(java.lang.String): if (str == null) {     return null; }  =>   if (true) {     return null; }
SDL_110:351:java.math.BigDecimal_createBigDecimal(java.lang.String): if (str == null) {     return null; } if (StringUtils.isBlank( str )) {     throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" ); } return new java.math.BigDecimal( str );  =>   if (StringUtils.isBlank( str )) {     throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" ); } return new java.math.BigDecimal( str );
SDL_111:351:java.math.BigDecimal_createBigDecimal(java.lang.String): if (str == null) {     return null; } if (StringUtils.isBlank( str )) {     throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" ); } return new java.math.BigDecimal( str );  =>   if (str == null) {     return null; } return new java.math.BigDecimal( str );
SDL_112:350:java.math.BigDecimal_createBigDecimal(java.lang.String): if (str == null) {     return null; }  =>   if (true) {     return null; }
SDL_113:351:java.math.BigDecimal_createBigDecimal(java.lang.String): throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" );  =>  
SDL_114:353:java.math.BigDecimal_createBigDecimal(java.lang.String): if (StringUtils.isBlank( str )) {     throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" ); }  =>   if (true) {     throw new java.lang.NumberFormatException( \"A blank string is not a valid number\" ); }
SDL_115:365:long_min(long): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } long min = array[0]; for (int i = 1; i < array.length; i++) {     if (array[i] < min) {         min = array[i];     } } return min;  =>   long min = array[0]; for (int i = 1; i < array.length; i++) {     if (array[i] < min) {         min = array[i];     } } return min;
SDL_116:367:long_min(long): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } long min = array[0]; for (int i = 1; i < array.length; i++) {     if (array[i] < min) {         min = array[i];     } } return min;  =>   if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } long min = array[0]; return min;
SDL_117:359:long_min(long): throw new java.lang.IllegalArgumentException( \"The Array must not be null\" );  =>  
SDL_118:365:long_min(long): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }
SDL_119:361:long_min(long): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>  
SDL_120:362:long_min(long): throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );  =>  
SDL_121:364:long_min(long): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }
SDL_122:367:long_min(long): if (array[i] < min) {     min = array[i]; }  =>  
SDL_123:371:long_min(long): for (int i = 1; i < array.length; i++) {     if (array[i] < min) {         min = array[i];     } }  =>   for (int i = 1;; i++) {     if (array[i] < min) {         min = array[i];     } }
SDL_124:371:long_min(long): for (int i = 1; i < array.length; i++) {     if (array[i] < min) {         min = array[i];     } }  =>   for (int i = 1; i < array.length;) {     if (array[i] < min) {         min = array[i];     } }
SDL_125:368:long_min(long): min = array[i];  =>  
SDL_126:370:long_min(long): if (array[i] < min) {     min = array[i]; }  =>   if (true) {     min = array[i]; }
SDL_127:372:long_min(long): return min;  =>   return 0;
SDL_128:383:int_min(int): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } int min = array[0]; for (int j = 1; j < array.length; j++) {     if (array[j] < min) {         min = array[j];     } } return min;  =>   int min = array[0]; for (int j = 1; j < array.length; j++) {     if (array[j] < min) {         min = array[j];     } } return min;
SDL_129:385:int_min(int): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } int min = array[0]; for (int j = 1; j < array.length; j++) {     if (array[j] < min) {         min = array[j];     } } return min;  =>   if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } int min = array[0]; return min;
SDL_130:377:int_min(int): throw new java.lang.IllegalArgumentException( \"The Array must not be null\" );  =>  
SDL_131:383:int_min(int): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }
SDL_132:379:int_min(int): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>  
SDL_133:380:int_min(int): throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );  =>  
SDL_134:382:int_min(int): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }
SDL_135:385:int_min(int): if (array[j] < min) {     min = array[j]; }  =>  
SDL_136:389:int_min(int): for (int j = 1; j < array.length; j++) {     if (array[j] < min) {         min = array[j];     } }  =>   for (int j = 1;; j++) {     if (array[j] < min) {         min = array[j];     } }
SDL_137:389:int_min(int): for (int j = 1; j < array.length; j++) {     if (array[j] < min) {         min = array[j];     } }  =>   for (int j = 1; j < array.length;) {     if (array[j] < min) {         min = array[j];     } }
SDL_138:386:int_min(int): min = array[j];  =>  
SDL_139:388:int_min(int): if (array[j] < min) {     min = array[j]; }  =>   if (true) {     min = array[j]; }
SDL_140:390:int_min(int): return min;  =>   return 0;
SDL_141:401:short_min(short): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } short min = array[0]; for (int i = 1; i < array.length; i++) {     if (array[i] < min) {         min = array[i];     } } return min;  =>   short min = array[0]; for (int i = 1; i < array.length; i++) {     if (array[i] < min) {         min = array[i];     } } return min;
SDL_142:403:short_min(short): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } short min = array[0]; for (int i = 1; i < array.length; i++) {     if (array[i] < min) {         min = array[i];     } } return min;  =>   if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } short min = array[0]; return min;
SDL_143:395:short_min(short): throw new java.lang.IllegalArgumentException( \"The Array must not be null\" );  =>  
SDL_144:401:short_min(short): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }
SDL_145:397:short_min(short): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>  
SDL_146:398:short_min(short): throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );  =>  
SDL_147:400:short_min(short): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }
SDL_148:403:short_min(short): if (array[i] < min) {     min = array[i]; }  =>  
SDL_149:407:short_min(short): for (int i = 1; i < array.length; i++) {     if (array[i] < min) {         min = array[i];     } }  =>   for (int i = 1;; i++) {     if (array[i] < min) {         min = array[i];     } }
SDL_150:407:short_min(short): for (int i = 1; i < array.length; i++) {     if (array[i] < min) {         min = array[i];     } }  =>   for (int i = 1; i < array.length;) {     if (array[i] < min) {         min = array[i];     } }
SDL_151:404:short_min(short): min = array[i];  =>  
SDL_152:406:short_min(short): if (array[i] < min) {     min = array[i]; }  =>   if (true) {     min = array[i]; }
SDL_153:408:short_min(short): return min;  =>   return 0;
SDL_154:419:byte_min(byte): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } byte min = array[0]; for (int i = 1; i < array.length; i++) {     if (array[i] < min) {         min = array[i];     } } return min;  =>   byte min = array[0]; for (int i = 1; i < array.length; i++) {     if (array[i] < min) {         min = array[i];     } } return min;
SDL_155:421:byte_min(byte): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } byte min = array[0]; for (int i = 1; i < array.length; i++) {     if (array[i] < min) {         min = array[i];     } } return min;  =>   if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } byte min = array[0]; return min;
SDL_156:413:byte_min(byte): throw new java.lang.IllegalArgumentException( \"The Array must not be null\" );  =>  
SDL_157:419:byte_min(byte): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }
SDL_158:415:byte_min(byte): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>  
SDL_159:416:byte_min(byte): throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );  =>  
SDL_160:418:byte_min(byte): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }
SDL_161:421:byte_min(byte): if (array[i] < min) {     min = array[i]; }  =>  
SDL_162:425:byte_min(byte): for (int i = 1; i < array.length; i++) {     if (array[i] < min) {         min = array[i];     } }  =>   for (int i = 1;; i++) {     if (array[i] < min) {         min = array[i];     } }
SDL_163:425:byte_min(byte): for (int i = 1; i < array.length; i++) {     if (array[i] < min) {         min = array[i];     } }  =>   for (int i = 1; i < array.length;) {     if (array[i] < min) {         min = array[i];     } }
SDL_164:422:byte_min(byte): min = array[i];  =>  
SDL_165:424:byte_min(byte): if (array[i] < min) {     min = array[i]; }  =>   if (true) {     min = array[i]; }
SDL_166:440:double_min(double): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } double min = array[0]; for (int i = 1; i < array.length; i++) {     if (Double.isNaN( array[i] )) {         return Double.NaN;     }     if (array[i] < min) {         min = array[i];     } } return min;  =>   double min = array[0]; for (int i = 1; i < array.length; i++) {     if (Double.isNaN( array[i] )) {         return Double.NaN;     }     if (array[i] < min) {         min = array[i];     } } return min;
SDL_167:439:double_min(double): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } double min = array[0]; for (int i = 1; i < array.length; i++) {     if (Double.isNaN( array[i] )) {         return Double.NaN;     }     if (array[i] < min) {         min = array[i];     } } return min;  =>   if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } double min = array[0]; return min;
SDL_168:431:double_min(double): throw new java.lang.IllegalArgumentException( \"The Array must not be null\" );  =>  
SDL_169:437:double_min(double): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }
SDL_170:433:double_min(double): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>  
SDL_171:434:double_min(double): throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );  =>  
SDL_172:436:double_min(double): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }
SDL_173:442:double_min(double): if (Double.isNaN( array[i] )) {     return Double.NaN; } if (array[i] < min) {     min = array[i]; }  =>   if (array[i] < min) {     min = array[i]; }
SDL_174:442:double_min(double): if (Double.isNaN( array[i] )) {     return Double.NaN; } if (array[i] < min) {     min = array[i]; }  =>   if (Double.isNaN( array[i] )) {     return Double.NaN; }
SDL_175:446:double_min(double): for (int i = 1; i < array.length; i++) {     if (Double.isNaN( array[i] )) {         return Double.NaN;     }     if (array[i] < min) {         min = array[i];     } }  =>   for (int i = 1;; i++) {     if (Double.isNaN( array[i] )) {         return Double.NaN;     }     if (array[i] < min) {         min = array[i];     } }
SDL_176:446:double_min(double): for (int i = 1; i < array.length; i++) {     if (Double.isNaN( array[i] )) {         return Double.NaN;     }     if (array[i] < min) {         min = array[i];     } }  =>   for (int i = 1; i < array.length;) {     if (Double.isNaN( array[i] )) {         return Double.NaN;     }     if (array[i] < min) {         min = array[i];     } }
SDL_177:442:double_min(double): if (Double.isNaN( array[i] )) {     return Double.NaN; }  =>   if (true) {     return Double.NaN; }
SDL_178:441:double_min(double): return Double.NaN;  =>   return 0;
SDL_179:443:double_min(double): min = array[i];  =>  
SDL_180:445:double_min(double): if (array[i] < min) {     min = array[i]; }  =>   if (true) {     min = array[i]; }
SDL_181:447:double_min(double): return min;  =>   return 0;
SDL_182:461:float_min(float): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } float min = array[0]; for (int i = 1; i < array.length; i++) {     if (Float.isNaN( array[i] )) {         return Float.NaN;     }     if (array[i] < min) {         min = array[i];     } } return min;  =>   float min = array[0]; for (int i = 1; i < array.length; i++) {     if (Float.isNaN( array[i] )) {         return Float.NaN;     }     if (array[i] < min) {         min = array[i];     } } return min;
SDL_183:460:float_min(float): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } float min = array[0]; for (int i = 1; i < array.length; i++) {     if (Float.isNaN( array[i] )) {         return Float.NaN;     }     if (array[i] < min) {         min = array[i];     } } return min;  =>   if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } float min = array[0]; return min;
SDL_184:452:float_min(float): throw new java.lang.IllegalArgumentException( \"The Array must not be null\" );  =>  
SDL_185:458:float_min(float): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }
SDL_186:454:float_min(float): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>  
SDL_187:455:float_min(float): throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );  =>  
SDL_188:457:float_min(float): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }
SDL_189:463:float_min(float): if (Float.isNaN( array[i] )) {     return Float.NaN; } if (array[i] < min) {     min = array[i]; }  =>   if (array[i] < min) {     min = array[i]; }
SDL_190:463:float_min(float): if (Float.isNaN( array[i] )) {     return Float.NaN; } if (array[i] < min) {     min = array[i]; }  =>   if (Float.isNaN( array[i] )) {     return Float.NaN; }
SDL_191:467:float_min(float): for (int i = 1; i < array.length; i++) {     if (Float.isNaN( array[i] )) {         return Float.NaN;     }     if (array[i] < min) {         min = array[i];     } }  =>   for (int i = 1;; i++) {     if (Float.isNaN( array[i] )) {         return Float.NaN;     }     if (array[i] < min) {         min = array[i];     } }
SDL_192:467:float_min(float): for (int i = 1; i < array.length; i++) {     if (Float.isNaN( array[i] )) {         return Float.NaN;     }     if (array[i] < min) {         min = array[i];     } }  =>   for (int i = 1; i < array.length;) {     if (Float.isNaN( array[i] )) {         return Float.NaN;     }     if (array[i] < min) {         min = array[i];     } }
SDL_193:463:float_min(float): if (Float.isNaN( array[i] )) {     return Float.NaN; }  =>   if (true) {     return Float.NaN; }
SDL_194:462:float_min(float): return Float.NaN;  =>   return 0;
SDL_195:464:float_min(float): min = array[i];  =>  
SDL_196:466:float_min(float): if (array[i] < min) {     min = array[i]; }  =>   if (true) {     min = array[i]; }
SDL_197:468:float_min(float): return min;  =>   return 0;
SDL_198:479:long_max(long): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } long max = array[0]; for (int j = 1; j < array.length; j++) {     if (array[j] > max) {         max = array[j];     } } return max;  =>   long max = array[0]; for (int j = 1; j < array.length; j++) {     if (array[j] > max) {         max = array[j];     } } return max;
SDL_199:481:long_max(long): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } long max = array[0]; for (int j = 1; j < array.length; j++) {     if (array[j] > max) {         max = array[j];     } } return max;  =>   if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } long max = array[0]; return max;
SDL_200:473:long_max(long): throw new java.lang.IllegalArgumentException( \"The Array must not be null\" );  =>  
SDL_201:479:long_max(long): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }
SDL_202:475:long_max(long): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>  
SDL_203:476:long_max(long): throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );  =>  
SDL_204:478:long_max(long): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }
SDL_205:481:long_max(long): if (array[j] > max) {     max = array[j]; }  =>  
SDL_206:485:long_max(long): for (int j = 1; j < array.length; j++) {     if (array[j] > max) {         max = array[j];     } }  =>   for (int j = 1;; j++) {     if (array[j] > max) {         max = array[j];     } }
SDL_207:485:long_max(long): for (int j = 1; j < array.length; j++) {     if (array[j] > max) {         max = array[j];     } }  =>   for (int j = 1; j < array.length;) {     if (array[j] > max) {         max = array[j];     } }
SDL_208:482:long_max(long): max = array[j];  =>  
SDL_209:484:long_max(long): if (array[j] > max) {     max = array[j]; }  =>   if (true) {     max = array[j]; }
SDL_210:486:long_max(long): return max;  =>   return 0;
SDL_211:497:int_max(int): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } int max = array[0]; for (int j = 1; j < array.length; j++) {     if (array[j] > max) {         max = array[j];     } } return max;  =>   int max = array[0]; for (int j = 1; j < array.length; j++) {     if (array[j] > max) {         max = array[j];     } } return max;
SDL_212:499:int_max(int): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } int max = array[0]; for (int j = 1; j < array.length; j++) {     if (array[j] > max) {         max = array[j];     } } return max;  =>   if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } int max = array[0]; return max;
SDL_213:491:int_max(int): throw new java.lang.IllegalArgumentException( \"The Array must not be null\" );  =>  
SDL_214:497:int_max(int): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }
SDL_215:493:int_max(int): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>  
SDL_216:494:int_max(int): throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );  =>  
SDL_217:496:int_max(int): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }
SDL_218:499:int_max(int): if (array[j] > max) {     max = array[j]; }  =>  
SDL_219:503:int_max(int): for (int j = 1; j < array.length; j++) {     if (array[j] > max) {         max = array[j];     } }  =>   for (int j = 1;; j++) {     if (array[j] > max) {         max = array[j];     } }
SDL_220:503:int_max(int): for (int j = 1; j < array.length; j++) {     if (array[j] > max) {         max = array[j];     } }  =>   for (int j = 1; j < array.length;) {     if (array[j] > max) {         max = array[j];     } }
SDL_221:500:int_max(int): max = array[j];  =>  
SDL_222:502:int_max(int): if (array[j] > max) {     max = array[j]; }  =>   if (true) {     max = array[j]; }
SDL_223:504:int_max(int): return max;  =>   return 0;
SDL_224:515:short_max(short): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } short max = array[0]; for (int i = 1; i < array.length; i++) {     if (array[i] > max) {         max = array[i];     } } return max;  =>   short max = array[0]; for (int i = 1; i < array.length; i++) {     if (array[i] > max) {         max = array[i];     } } return max;
SDL_225:517:short_max(short): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } short max = array[0]; for (int i = 1; i < array.length; i++) {     if (array[i] > max) {         max = array[i];     } } return max;  =>   if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } short max = array[0]; return max;
SDL_226:509:short_max(short): throw new java.lang.IllegalArgumentException( \"The Array must not be null\" );  =>  
SDL_227:515:short_max(short): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }
SDL_228:511:short_max(short): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>  
SDL_229:512:short_max(short): throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );  =>  
SDL_230:514:short_max(short): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }
SDL_231:517:short_max(short): if (array[i] > max) {     max = array[i]; }  =>  
SDL_232:521:short_max(short): for (int i = 1; i < array.length; i++) {     if (array[i] > max) {         max = array[i];     } }  =>   for (int i = 1;; i++) {     if (array[i] > max) {         max = array[i];     } }
SDL_233:521:short_max(short): for (int i = 1; i < array.length; i++) {     if (array[i] > max) {         max = array[i];     } }  =>   for (int i = 1; i < array.length;) {     if (array[i] > max) {         max = array[i];     } }
SDL_234:518:short_max(short): max = array[i];  =>  
SDL_235:520:short_max(short): if (array[i] > max) {     max = array[i]; }  =>   if (true) {     max = array[i]; }
SDL_236:522:short_max(short): return max;  =>   return 0;
SDL_237:533:byte_max(byte): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } byte max = array[0]; for (int i = 1; i < array.length; i++) {     if (array[i] > max) {         max = array[i];     } } return max;  =>   byte max = array[0]; for (int i = 1; i < array.length; i++) {     if (array[i] > max) {         max = array[i];     } } return max;
SDL_238:535:byte_max(byte): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } byte max = array[0]; for (int i = 1; i < array.length; i++) {     if (array[i] > max) {         max = array[i];     } } return max;  =>   if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } byte max = array[0]; return max;
SDL_239:527:byte_max(byte): throw new java.lang.IllegalArgumentException( \"The Array must not be null\" );  =>  
SDL_240:533:byte_max(byte): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }
SDL_241:529:byte_max(byte): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>  
SDL_242:530:byte_max(byte): throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );  =>  
SDL_243:532:byte_max(byte): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }
SDL_244:535:byte_max(byte): if (array[i] > max) {     max = array[i]; }  =>  
SDL_245:539:byte_max(byte): for (int i = 1; i < array.length; i++) {     if (array[i] > max) {         max = array[i];     } }  =>   for (int i = 1;; i++) {     if (array[i] > max) {         max = array[i];     } }
SDL_246:539:byte_max(byte): for (int i = 1; i < array.length; i++) {     if (array[i] > max) {         max = array[i];     } }  =>   for (int i = 1; i < array.length;) {     if (array[i] > max) {         max = array[i];     } }
SDL_247:536:byte_max(byte): max = array[i];  =>  
SDL_248:538:byte_max(byte): if (array[i] > max) {     max = array[i]; }  =>   if (true) {     max = array[i]; }
SDL_249:554:double_max(double): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } double max = array[0]; for (int j = 1; j < array.length; j++) {     if (Double.isNaN( array[j] )) {         return Double.NaN;     }     if (array[j] > max) {         max = array[j];     } } return max;  =>   double max = array[0]; for (int j = 1; j < array.length; j++) {     if (Double.isNaN( array[j] )) {         return Double.NaN;     }     if (array[j] > max) {         max = array[j];     } } return max;
SDL_250:553:double_max(double): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } double max = array[0]; for (int j = 1; j < array.length; j++) {     if (Double.isNaN( array[j] )) {         return Double.NaN;     }     if (array[j] > max) {         max = array[j];     } } return max;  =>   if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } double max = array[0]; return max;
SDL_251:545:double_max(double): throw new java.lang.IllegalArgumentException( \"The Array must not be null\" );  =>  
SDL_252:551:double_max(double): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }
SDL_253:547:double_max(double): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>  
SDL_254:548:double_max(double): throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );  =>  
SDL_255:550:double_max(double): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }
SDL_256:556:double_max(double): if (Double.isNaN( array[j] )) {     return Double.NaN; } if (array[j] > max) {     max = array[j]; }  =>   if (array[j] > max) {     max = array[j]; }
SDL_257:556:double_max(double): if (Double.isNaN( array[j] )) {     return Double.NaN; } if (array[j] > max) {     max = array[j]; }  =>   if (Double.isNaN( array[j] )) {     return Double.NaN; }
SDL_258:560:double_max(double): for (int j = 1; j < array.length; j++) {     if (Double.isNaN( array[j] )) {         return Double.NaN;     }     if (array[j] > max) {         max = array[j];     } }  =>   for (int j = 1;; j++) {     if (Double.isNaN( array[j] )) {         return Double.NaN;     }     if (array[j] > max) {         max = array[j];     } }
SDL_259:560:double_max(double): for (int j = 1; j < array.length; j++) {     if (Double.isNaN( array[j] )) {         return Double.NaN;     }     if (array[j] > max) {         max = array[j];     } }  =>   for (int j = 1; j < array.length;) {     if (Double.isNaN( array[j] )) {         return Double.NaN;     }     if (array[j] > max) {         max = array[j];     } }
SDL_260:556:double_max(double): if (Double.isNaN( array[j] )) {     return Double.NaN; }  =>   if (true) {     return Double.NaN; }
SDL_261:555:double_max(double): return Double.NaN;  =>   return 0;
SDL_262:557:double_max(double): max = array[j];  =>  
SDL_263:559:double_max(double): if (array[j] > max) {     max = array[j]; }  =>   if (true) {     max = array[j]; }
SDL_264:561:double_max(double): return max;  =>   return 0;
SDL_265:575:float_max(float): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } float max = array[0]; for (int j = 1; j < array.length; j++) {     if (Float.isNaN( array[j] )) {         return Float.NaN;     }     if (array[j] > max) {         max = array[j];     } } return max;  =>   float max = array[0]; for (int j = 1; j < array.length; j++) {     if (Float.isNaN( array[j] )) {         return Float.NaN;     }     if (array[j] > max) {         max = array[j];     } } return max;
SDL_266:574:float_max(float): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } float max = array[0]; for (int j = 1; j < array.length; j++) {     if (Float.isNaN( array[j] )) {         return Float.NaN;     }     if (array[j] > max) {         max = array[j];     } } return max;  =>   if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } } float max = array[0]; return max;
SDL_267:566:float_max(float): throw new java.lang.IllegalArgumentException( \"The Array must not be null\" );  =>  
SDL_268:572:float_max(float): if (array == null) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The Array must not be null\" ); } else {     if (array.length == 0) {         throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );     } }
SDL_269:568:float_max(float): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>  
SDL_270:569:float_max(float): throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" );  =>  
SDL_271:571:float_max(float): if (array.length == 0) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Array cannot be empty.\" ); }
SDL_272:577:float_max(float): if (Float.isNaN( array[j] )) {     return Float.NaN; } if (array[j] > max) {     max = array[j]; }  =>   if (array[j] > max) {     max = array[j]; }
SDL_273:577:float_max(float): if (Float.isNaN( array[j] )) {     return Float.NaN; } if (array[j] > max) {     max = array[j]; }  =>   if (Float.isNaN( array[j] )) {     return Float.NaN; }
SDL_274:581:float_max(float): for (int j = 1; j < array.length; j++) {     if (Float.isNaN( array[j] )) {         return Float.NaN;     }     if (array[j] > max) {         max = array[j];     } }  =>   for (int j = 1;; j++) {     if (Float.isNaN( array[j] )) {         return Float.NaN;     }     if (array[j] > max) {         max = array[j];     } }
SDL_275:581:float_max(float): for (int j = 1; j < array.length; j++) {     if (Float.isNaN( array[j] )) {         return Float.NaN;     }     if (array[j] > max) {         max = array[j];     } }  =>   for (int j = 1; j < array.length;) {     if (Float.isNaN( array[j] )) {         return Float.NaN;     }     if (array[j] > max) {         max = array[j];     } }
SDL_276:577:float_max(float): if (Float.isNaN( array[j] )) {     return Float.NaN; }  =>   if (true) {     return Float.NaN; }
SDL_277:576:float_max(float): return Float.NaN;  =>   return 0;
SDL_278:578:float_max(float): max = array[j];  =>  
SDL_279:580:float_max(float): if (array[j] > max) {     max = array[j]; }  =>   if (true) {     max = array[j]; }
SDL_280:582:float_max(float): return max;  =>   return 0;
SDL_281:590:long_min(long,long,long): if (b < a) {     a = b; } if (c < a) {     a = c; } return a;  =>   if (c < a) {     a = c; } return a;
SDL_282:590:long_min(long,long,long): if (b < a) {     a = b; } if (c < a) {     a = c; } return a;  =>   if (b < a) {     a = b; } return a;
SDL_283:587:long_min(long,long,long): a = b;  =>  
SDL_284:589:long_min(long,long,long): if (b < a) {     a = b; }  =>   if (true) {     a = b; }
SDL_285:590:long_min(long,long,long): a = c;  =>  
SDL_286:592:long_min(long,long,long): if (c < a) {     a = c; }  =>   if (true) {     a = c; }
SDL_287:593:long_min(long,long,long): return a;  =>   return 0;
SDL_288:601:int_min(int,int,int): if (b < a) {     a = b; } if (c < a) {     a = c; } return a;  =>   if (c < a) {     a = c; } return a;
SDL_289:601:int_min(int,int,int): if (b < a) {     a = b; } if (c < a) {     a = c; } return a;  =>   if (b < a) {     a = b; } return a;
SDL_290:598:int_min(int,int,int): a = b;  =>  
SDL_291:600:int_min(int,int,int): if (b < a) {     a = b; }  =>   if (true) {     a = b; }
SDL_292:601:int_min(int,int,int): a = c;  =>  
SDL_293:603:int_min(int,int,int): if (c < a) {     a = c; }  =>   if (true) {     a = c; }
SDL_294:604:int_min(int,int,int): return a;  =>   return 0;
SDL_295:612:short_min(short,short,short): if (b < a) {     a = b; } if (c < a) {     a = c; } return a;  =>   if (c < a) {     a = c; } return a;
SDL_296:612:short_min(short,short,short): if (b < a) {     a = b; } if (c < a) {     a = c; } return a;  =>   if (b < a) {     a = b; } return a;
SDL_297:609:short_min(short,short,short): a = b;  =>  
SDL_298:611:short_min(short,short,short): if (b < a) {     a = b; }  =>   if (true) {     a = b; }
SDL_299:612:short_min(short,short,short): a = c;  =>  
SDL_300:614:short_min(short,short,short): if (c < a) {     a = c; }  =>   if (true) {     a = c; }
SDL_301:615:short_min(short,short,short): return a;  =>   return 0;
SDL_302:623:byte_min(byte,byte,byte): if (b < a) {     a = b; } if (c < a) {     a = c; } return a;  =>   if (c < a) {     a = c; } return a;
SDL_303:623:byte_min(byte,byte,byte): if (b < a) {     a = b; } if (c < a) {     a = c; } return a;  =>   if (b < a) {     a = b; } return a;
SDL_304:620:byte_min(byte,byte,byte): a = b;  =>  
SDL_305:622:byte_min(byte,byte,byte): if (b < a) {     a = b; }  =>   if (true) {     a = b; }
SDL_306:623:byte_min(byte,byte,byte): a = c;  =>  
SDL_307:625:byte_min(byte,byte,byte): if (c < a) {     a = c; }  =>   if (true) {     a = c; }
SDL_308:631:double_min(double,double,double): return Math.min( Math.min( a, b ), c );  =>   return 0;
SDL_309:636:float_min(float,float,float): return Math.min( Math.min( a, b ), c );  =>   return 0;
SDL_310:644:long_max(long,long,long): if (b > a) {     a = b; } if (c > a) {     a = c; } return a;  =>   if (c > a) {     a = c; } return a;
SDL_311:644:long_max(long,long,long): if (b > a) {     a = b; } if (c > a) {     a = c; } return a;  =>   if (b > a) {     a = b; } return a;
SDL_312:641:long_max(long,long,long): a = b;  =>  
SDL_313:643:long_max(long,long,long): if (b > a) {     a = b; }  =>   if (true) {     a = b; }
SDL_314:644:long_max(long,long,long): a = c;  =>  
SDL_315:646:long_max(long,long,long): if (c > a) {     a = c; }  =>   if (true) {     a = c; }
SDL_316:647:long_max(long,long,long): return a;  =>   return 0;
SDL_317:655:int_max(int,int,int): if (b > a) {     a = b; } if (c > a) {     a = c; } return a;  =>   if (c > a) {     a = c; } return a;
SDL_318:655:int_max(int,int,int): if (b > a) {     a = b; } if (c > a) {     a = c; } return a;  =>   if (b > a) {     a = b; } return a;
SDL_319:652:int_max(int,int,int): a = b;  =>  
SDL_320:654:int_max(int,int,int): if (b > a) {     a = b; }  =>   if (true) {     a = b; }
SDL_321:655:int_max(int,int,int): a = c;  =>  
SDL_322:657:int_max(int,int,int): if (c > a) {     a = c; }  =>   if (true) {     a = c; }
SDL_323:658:int_max(int,int,int): return a;  =>   return 0;
SDL_324:666:short_max(short,short,short): if (b > a) {     a = b; } if (c > a) {     a = c; } return a;  =>   if (c > a) {     a = c; } return a;
SDL_325:666:short_max(short,short,short): if (b > a) {     a = b; } if (c > a) {     a = c; } return a;  =>   if (b > a) {     a = b; } return a;
SDL_326:663:short_max(short,short,short): a = b;  =>  
SDL_327:665:short_max(short,short,short): if (b > a) {     a = b; }  =>   if (true) {     a = b; }
SDL_328:666:short_max(short,short,short): a = c;  =>  
SDL_329:668:short_max(short,short,short): if (c > a) {     a = c; }  =>   if (true) {     a = c; }
SDL_330:669:short_max(short,short,short): return a;  =>   return 0;
SDL_331:677:byte_max(byte,byte,byte): if (b > a) {     a = b; } if (c > a) {     a = c; } return a;  =>   if (c > a) {     a = c; } return a;
SDL_332:677:byte_max(byte,byte,byte): if (b > a) {     a = b; } if (c > a) {     a = c; } return a;  =>   if (b > a) {     a = b; } return a;
SDL_333:674:byte_max(byte,byte,byte): a = b;  =>  
SDL_334:676:byte_max(byte,byte,byte): if (b > a) {     a = b; }  =>   if (true) {     a = b; }
SDL_335:677:byte_max(byte,byte,byte): a = c;  =>  
SDL_336:679:byte_max(byte,byte,byte): if (c > a) {     a = c; }  =>   if (true) {     a = c; }
SDL_337:685:double_max(double,double,double): return Math.max( Math.max( a, b ), c );  =>   return 0;
SDL_338:690:float_max(float,float,float): return Math.max( Math.max( a, b ), c );  =>   return 0;
SDL_339:700:boolean_isDigits(java.lang.String): if (StringUtils.isEmpty( str )) {     return false; } for (int i = 0; i < str.length(); i++) {     if (!Character.isDigit( str.charAt( i ) )) {         return false;     } } return true;  =>   for (int i = 0; i < str.length(); i++) {     if (!Character.isDigit( str.charAt( i ) )) {         return false;     } } return true;
SDL_340:698:boolean_isDigits(java.lang.String): if (StringUtils.isEmpty( str )) {     return false; } for (int i = 0; i < str.length(); i++) {     if (!Character.isDigit( str.charAt( i ) )) {         return false;     } } return true;  =>   if (StringUtils.isEmpty( str )) {     return false; } return true;
SDL_341:697:boolean_isDigits(java.lang.String): if (StringUtils.isEmpty( str )) {     return false; }  =>   if (true) {     return false; }
SDL_342:696:boolean_isDigits(java.lang.String): return false;  =>   return true;
SDL_343:698:boolean_isDigits(java.lang.String): if (!Character.isDigit( str.charAt( i ) )) {     return false; }  =>  
SDL_344:702:boolean_isDigits(java.lang.String): for (int i = 0; i < str.length(); i++) {     if (!Character.isDigit( str.charAt( i ) )) {         return false;     } }  =>   for (int i = 0;; i++) {     if (!Character.isDigit( str.charAt( i ) )) {         return false;     } }
SDL_345:702:boolean_isDigits(java.lang.String): for (int i = 0; i < str.length(); i++) {     if (!Character.isDigit( str.charAt( i ) )) {         return false;     } }  =>   for (int i = 0; i < str.length();) {     if (!Character.isDigit( str.charAt( i ) )) {         return false;     } }
SDL_346:701:boolean_isDigits(java.lang.String): if (!Character.isDigit( str.charAt( i ) )) {     return false; }  =>   if (true) {     return false; }
SDL_347:700:boolean_isDigits(java.lang.String): return false;  =>   return true;
SDL_348:703:boolean_isDigits(java.lang.String): return true;  =>   return false;
SDL_349:785:boolean_isNumber(java.lang.String): if (StringUtils.isEmpty( str )) {     return false; } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false; int start = chars[0] == '-' ? 1 : 0; if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {     int i = start + 2;     if (i == sz) {         return false;     }     for (; i < chars.length; i++) {         if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {             return false;         }     }     return true; } sz--; int i = start; while (i < sz || i < sz + 1 && allowSigns && !foundDigit) {     if (chars[i] >= '0' && chars[i] <= '9') {         foundDigit = true;         allowSigns = false;     } else {         if (chars[i] == '.') {             if (hasDecPoint || hasExp) {                 return false;             }             hasDecPoint = true;         } else {             if (chars[i] == 'e' || chars[i] == 'E') {                 if (hasExp) {                     return false;                 }                 if (!foundDigit) {                     return false;                 }                 hasExp = true;                 allowSigns = true;             } else {                 if (chars[i] == '+' || chars[i] == '-') {                     if (!allowSigns) {                         return false;                     }                     allowSigns = false;                     foundDigit = false;                 } else {                     return false;                 }             }         }     }     i++; } if (i < chars.length) {     if (chars[i] >= '0' && chars[i] <= '9') {         return true;     }     if (chars[i] == 'e' || chars[i] == 'E') {         return false;     }     if (chars[i] == '.') {         if (hasDecPoint || hasExp) {             return false;         }         return foundDigit;     }     if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {         return foundDigit;     }     if (chars[i] == 'l' || chars[i] == 'L') {         return foundDigit && !hasExp && !hasDecPoint;     }     return false; } return !allowSigns && foundDigit;  =>   char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false; int start = chars[0] == '-' ? 1 : 0; if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {     int i = start + 2;     if (i == sz) {         return false;     }     for (; i < chars.length; i++) {         if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {             return false;         }     }     return true; } sz--; int i = start; while (i < sz || i < sz + 1 && allowSigns && !foundDigit) {     if (chars[i] >= '0' && chars[i] <= '9') {         foundDigit = true;         allowSigns = false;     } else {         if (chars[i] == '.') {             if (hasDecPoint || hasExp) {                 return false;             }             hasDecPoint = true;         } else {             if (chars[i] == 'e' || chars[i] == 'E') {                 if (hasExp) {                     return false;                 }                 if (!foundDigit) {                     return false;                 }                 hasExp = true;                 allowSigns = true;             } else {                 if (chars[i] == '+' || chars[i] == '-') {                     if (!allowSigns) {                         return false;                     }                     allowSigns = false;                     foundDigit = false;                 } else {                     return false;                 }             }         }     }     i++; } if (i < chars.length) {     if (chars[i] >= '0' && chars[i] <= '9') {         return true;     }     if (chars[i] == 'e' || chars[i] == 'E') {         return false;     }     if (chars[i] == '.') {         if (hasDecPoint || hasExp) {             return false;         }         return foundDigit;     }     if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {         return foundDigit;     }     if (chars[i] == 'l' || chars[i] == 'L') {         return foundDigit && !hasExp && !hasDecPoint;     }     return false; } return !allowSigns && foundDigit;
SDL_350:776:boolean_isNumber(java.lang.String): if (StringUtils.isEmpty( str )) {     return false; } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false; int start = chars[0] == '-' ? 1 : 0; if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {     int i = start + 2;     if (i == sz) {         return false;     }     for (; i < chars.length; i++) {         if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {             return false;         }     }     return true; } sz--; int i = start; while (i < sz || i < sz + 1 && allowSigns && !foundDigit) {     if (chars[i] >= '0' && chars[i] <= '9') {         foundDigit = true;         allowSigns = false;     } else {         if (chars[i] == '.') {             if (hasDecPoint || hasExp) {                 return false;             }             hasDecPoint = true;         } else {             if (chars[i] == 'e' || chars[i] == 'E') {                 if (hasExp) {                     return false;                 }                 if (!foundDigit) {                     return false;                 }                 hasExp = true;                 allowSigns = true;             } else {                 if (chars[i] == '+' || chars[i] == '-') {                     if (!allowSigns) {                         return false;                     }                     allowSigns = false;                     foundDigit = false;                 } else {                     return false;                 }             }         }     }     i++; } if (i < chars.length) {     if (chars[i] >= '0' && chars[i] <= '9') {         return true;     }     if (chars[i] == 'e' || chars[i] == 'E') {         return false;     }     if (chars[i] == '.') {         if (hasDecPoint || hasExp) {             return false;         }         return foundDigit;     }     if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {         return foundDigit;     }     if (chars[i] == 'l' || chars[i] == 'L') {         return foundDigit && !hasExp && !hasDecPoint;     }     return false; } return !allowSigns && foundDigit;  =>   if (StringUtils.isEmpty( str )) {     return false; } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false; int start = chars[0] == '-' ? 1 : 0; sz--; int i = start; while (i < sz || i < sz + 1 && allowSigns && !foundDigit) {     if (chars[i] >= '0' && chars[i] <= '9') {         foundDigit = true;         allowSigns = false;     } else {         if (chars[i] == '.') {             if (hasDecPoint || hasExp) {                 return false;             }             hasDecPoint = true;         } else {             if (chars[i] == 'e' || chars[i] == 'E') {                 if (hasExp) {                     return false;                 }                 if (!foundDigit) {                     return false;                 }                 hasExp = true;                 allowSigns = true;             } else {                 if (chars[i] == '+' || chars[i] == '-') {                     if (!allowSigns) {                         return false;                     }                     allowSigns = false;                     foundDigit = false;                 } else {                     return false;                 }             }         }     }     i++; } if (i < chars.length) {     if (chars[i] >= '0' && chars[i] <= '9') {         return true;     }     if (chars[i] == 'e' || chars[i] == 'E') {         return false;     }     if (chars[i] == '.') {         if (hasDecPoint || hasExp) {             return false;         }         return foundDigit;     }     if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {         return foundDigit;     }     if (chars[i] == 'l' || chars[i] == 'L') {         return foundDigit && !hasExp && !hasDecPoint;     }     return false; } return !allowSigns && foundDigit;
SDL_351:787:boolean_isNumber(java.lang.String): if (StringUtils.isEmpty( str )) {     return false; } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false; int start = chars[0] == '-' ? 1 : 0; if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {     int i = start + 2;     if (i == sz) {         return false;     }     for (; i < chars.length; i++) {         if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {             return false;         }     }     return true; } sz--; int i = start; while (i < sz || i < sz + 1 && allowSigns && !foundDigit) {     if (chars[i] >= '0' && chars[i] <= '9') {         foundDigit = true;         allowSigns = false;     } else {         if (chars[i] == '.') {             if (hasDecPoint || hasExp) {                 return false;             }             hasDecPoint = true;         } else {             if (chars[i] == 'e' || chars[i] == 'E') {                 if (hasExp) {                     return false;                 }                 if (!foundDigit) {                     return false;                 }                 hasExp = true;                 allowSigns = true;             } else {                 if (chars[i] == '+' || chars[i] == '-') {                     if (!allowSigns) {                         return false;                     }                     allowSigns = false;                     foundDigit = false;                 } else {                     return false;                 }             }         }     }     i++; } if (i < chars.length) {     if (chars[i] >= '0' && chars[i] <= '9') {         return true;     }     if (chars[i] == 'e' || chars[i] == 'E') {         return false;     }     if (chars[i] == '.') {         if (hasDecPoint || hasExp) {             return false;         }         return foundDigit;     }     if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {         return foundDigit;     }     if (chars[i] == 'l' || chars[i] == 'L') {         return foundDigit && !hasExp && !hasDecPoint;     }     return false; } return !allowSigns && foundDigit;  =>   if (StringUtils.isEmpty( str )) {     return false; } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false; int start = chars[0] == '-' ? 1 : 0; if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {     int i = start + 2;     if (i == sz) {         return false;     }     for (; i < chars.length; i++) {         if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {             return false;         }     }     return true; } int i = start; while (i < sz || i < sz + 1 && allowSigns && !foundDigit) {     if (chars[i] >= '0' && chars[i] <= '9') {         foundDigit = true;         allowSigns = false;     } else {         if (chars[i] == '.') {             if (hasDecPoint || hasExp) {                 return false;             }             hasDecPoint = true;         } else {             if (chars[i] == 'e' || chars[i] == 'E') {                 if (hasExp) {                     return false;                 }                 if (!foundDigit) {                     return false;                 }                 hasExp = true;                 allowSigns = true;             } else {                 if (chars[i] == '+' || chars[i] == '-') {                     if (!allowSigns) {                         return false;                     }                     allowSigns = false;                     foundDigit = false;                 } else {                     return false;                 }             }         }     }     i++; } if (i < chars.length) {     if (chars[i] >= '0' && chars[i] <= '9') {         return true;     }     if (chars[i] == 'e' || chars[i] == 'E') {         return false;     }     if (chars[i] == '.') {         if (hasDecPoint || hasExp) {             return false;         }         return foundDigit;     }     if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {         return foundDigit;     }     if (chars[i] == 'l' || chars[i] == 'L') {         return foundDigit && !hasExp && !hasDecPoint;     }     return false; } return !allowSigns && foundDigit;
SDL_352:753:boolean_isNumber(java.lang.String): if (StringUtils.isEmpty( str )) {     return false; } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false; int start = chars[0] == '-' ? 1 : 0; if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {     int i = start + 2;     if (i == sz) {         return false;     }     for (; i < chars.length; i++) {         if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {             return false;         }     }     return true; } sz--; int i = start; while (i < sz || i < sz + 1 && allowSigns && !foundDigit) {     if (chars[i] >= '0' && chars[i] <= '9') {         foundDigit = true;         allowSigns = false;     } else {         if (chars[i] == '.') {             if (hasDecPoint || hasExp) {                 return false;             }             hasDecPoint = true;         } else {             if (chars[i] == 'e' || chars[i] == 'E') {                 if (hasExp) {                     return false;                 }                 if (!foundDigit) {                     return false;                 }                 hasExp = true;                 allowSigns = true;             } else {                 if (chars[i] == '+' || chars[i] == '-') {                     if (!allowSigns) {                         return false;                     }                     allowSigns = false;                     foundDigit = false;                 } else {                     return false;                 }             }         }     }     i++; } if (i < chars.length) {     if (chars[i] >= '0' && chars[i] <= '9') {         return true;     }     if (chars[i] == 'e' || chars[i] == 'E') {         return false;     }     if (chars[i] == '.') {         if (hasDecPoint || hasExp) {             return false;         }         return foundDigit;     }     if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {         return foundDigit;     }     if (chars[i] == 'l' || chars[i] == 'L') {         return foundDigit && !hasExp && !hasDecPoint;     }     return false; } return !allowSigns && foundDigit;  =>   if (StringUtils.isEmpty( str )) {     return false; } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false; int start = chars[0] == '-' ? 1 : 0; if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {     int i = start + 2;     if (i == sz) {         return false;     }     for (; i < chars.length; i++) {         if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {             return false;         }     }     return true; } sz--; int i = start; if (i < chars.length) {     if (chars[i] >= '0' && chars[i] <= '9') {         return true;     }     if (chars[i] == 'e' || chars[i] == 'E') {         return false;     }     if (chars[i] == '.') {         if (hasDecPoint || hasExp) {             return false;         }         return foundDigit;     }     if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {         return foundDigit;     }     if (chars[i] == 'l' || chars[i] == 'L') {         return foundDigit && !hasExp && !hasDecPoint;     }     return false; } return !allowSigns && foundDigit;
SDL_353:767:boolean_isNumber(java.lang.String): if (StringUtils.isEmpty( str )) {     return false; } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false; int start = chars[0] == '-' ? 1 : 0; if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {     int i = start + 2;     if (i == sz) {         return false;     }     for (; i < chars.length; i++) {         if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {             return false;         }     }     return true; } sz--; int i = start; while (i < sz || i < sz + 1 && allowSigns && !foundDigit) {     if (chars[i] >= '0' && chars[i] <= '9') {         foundDigit = true;         allowSigns = false;     } else {         if (chars[i] == '.') {             if (hasDecPoint || hasExp) {                 return false;             }             hasDecPoint = true;         } else {             if (chars[i] == 'e' || chars[i] == 'E') {                 if (hasExp) {                     return false;                 }                 if (!foundDigit) {                     return false;                 }                 hasExp = true;                 allowSigns = true;             } else {                 if (chars[i] == '+' || chars[i] == '-') {                     if (!allowSigns) {                         return false;                     }                     allowSigns = false;                     foundDigit = false;                 } else {                     return false;                 }             }         }     }     i++; } if (i < chars.length) {     if (chars[i] >= '0' && chars[i] <= '9') {         return true;     }     if (chars[i] == 'e' || chars[i] == 'E') {         return false;     }     if (chars[i] == '.') {         if (hasDecPoint || hasExp) {             return false;         }         return foundDigit;     }     if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {         return foundDigit;     }     if (chars[i] == 'l' || chars[i] == 'L') {         return foundDigit && !hasExp && !hasDecPoint;     }     return false; } return !allowSigns && foundDigit;  =>   if (StringUtils.isEmpty( str )) {     return false; } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false; int start = chars[0] == '-' ? 1 : 0; if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {     int i = start + 2;     if (i == sz) {         return false;     }     for (; i < chars.length; i++) {         if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {             return false;         }     }     return true; } sz--; int i = start; while (i < sz || i < sz + 1 && allowSigns && !foundDigit) {     if (chars[i] >= '0' && chars[i] <= '9') {         foundDigit = true;         allowSigns = false;     } else {         if (chars[i] == '.') {             if (hasDecPoint || hasExp) {                 return false;             }             hasDecPoint = true;         } else {             if (chars[i] == 'e' || chars[i] == 'E') {                 if (hasExp) {                     return false;                 }                 if (!foundDigit) {                     return false;                 }                 hasExp = true;                 allowSigns = true;             } else {                 if (chars[i] == '+' || chars[i] == '-') {                     if (!allowSigns) {                         return false;                     }                     allowSigns = false;                     foundDigit = false;                 } else {                     return false;                 }             }         }     }     i++; } return !allowSigns && foundDigit;
SDL_354:710:boolean_isNumber(java.lang.String): if (StringUtils.isEmpty( str )) {     return false; }  =>   if (true) {     return false; }
SDL_355:709:boolean_isNumber(java.lang.String): return false;  =>   return true;
SDL_356:725:boolean_isNumber(java.lang.String): int i = start + 2; if (i == sz) {     return false; } for (; i < chars.length; i++) {     if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {         return false;     } } return true;  =>   int i = start + 2; for (; i < chars.length; i++) {     if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {         return false;     } } return true;
SDL_357:723:boolean_isNumber(java.lang.String): int i = start + 2; if (i == sz) {     return false; } for (; i < chars.length; i++) {     if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {         return false;     } } return true;  =>   int i = start + 2; if (i == sz) {     return false; } return true;
SDL_358:729:boolean_isNumber(java.lang.String): if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {     int i = start + 2;     if (i == sz) {         return false;     }     for (; i < chars.length; i++) {         if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {             return false;         }     }     return true; }  =>   if (true) {     int i = start + 2;     if (i == sz) {         return false;     }     for (; i < chars.length; i++) {         if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {             return false;         }     }     return true; }
SDL_359:722:boolean_isNumber(java.lang.String): if (i == sz) {     return false; }  =>   if (true) {     return false; }
SDL_360:721:boolean_isNumber(java.lang.String): return false;  =>   return true;
SDL_361:723:boolean_isNumber(java.lang.String): if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {     return false; }  =>  
SDL_362:727:boolean_isNumber(java.lang.String): for (; i < chars.length; i++) {     if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {         return false;     } }  =>   for (;; i++) {     if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {         return false;     } }
SDL_363:727:boolean_isNumber(java.lang.String): for (; i < chars.length; i++) {     if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {         return false;     } }  =>   for (; i < chars.length;) {     if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {         return false;     } }
SDL_364:726:boolean_isNumber(java.lang.String): if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {     return false; }  =>   if (true) {     return false; }
SDL_365:725:boolean_isNumber(java.lang.String): return false;  =>   return true;
SDL_366:728:boolean_isNumber(java.lang.String): return true;  =>   return false;
SDL_367:733:boolean_isNumber(java.lang.String): if (chars[i] >= '0' && chars[i] <= '9') {     foundDigit = true;     allowSigns = false; } else {     if (chars[i] == '.') {         if (hasDecPoint || hasExp) {             return false;         }         hasDecPoint = true;     } else {         if (chars[i] == 'e' || chars[i] == 'E') {             if (hasExp) {                 return false;             }             if (!foundDigit) {                 return false;             }             hasExp = true;             allowSigns = true;         } else {             if (chars[i] == '+' || chars[i] == '-') {                 if (!allowSigns) {                     return false;                 }                 allowSigns = false;                 foundDigit = false;             } else {                 return false;             }         }     } } i++;  =>   i++;
SDL_368:764:boolean_isNumber(java.lang.String): if (chars[i] >= '0' && chars[i] <= '9') {     foundDigit = true;     allowSigns = false; } else {     if (chars[i] == '.') {         if (hasDecPoint || hasExp) {             return false;         }         hasDecPoint = true;     } else {         if (chars[i] == 'e' || chars[i] == 'E') {             if (hasExp) {                 return false;             }             if (!foundDigit) {                 return false;             }             hasExp = true;             allowSigns = true;         } else {             if (chars[i] == '+' || chars[i] == '-') {                 if (!allowSigns) {                     return false;                 }                 allowSigns = false;                 foundDigit = false;             } else {                 return false;             }         }     } } i++;  =>   if (chars[i] >= '0' && chars[i] <= '9') {     foundDigit = true;     allowSigns = false; } else {     if (chars[i] == '.') {         if (hasDecPoint || hasExp) {             return false;         }         hasDecPoint = true;     } else {         if (chars[i] == 'e' || chars[i] == 'E') {             if (hasExp) {                 return false;             }             if (!foundDigit) {                 return false;             }             hasExp = true;             allowSigns = true;         } else {             if (chars[i] == '+' || chars[i] == '-') {                 if (!allowSigns) {                     return false;                 }                 allowSigns = false;                 foundDigit = false;             } else {                 return false;             }         }     } }
SDL_369:766:boolean_isNumber(java.lang.String): while (i < sz || i < sz + 1 && allowSigns && !foundDigit) {     if (chars[i] >= '0' && chars[i] <= '9') {         foundDigit = true;         allowSigns = false;     } else {         if (chars[i] == '.') {             if (hasDecPoint || hasExp) {                 return false;             }             hasDecPoint = true;         } else {             if (chars[i] == 'e' || chars[i] == 'E') {                 if (hasExp) {                     return false;                 }                 if (!foundDigit) {                     return false;                 }                 hasExp = true;                 allowSigns = true;             } else {                 if (chars[i] == '+' || chars[i] == '-') {                     if (!allowSigns) {                         return false;                     }                     allowSigns = false;                     foundDigit = false;                 } else {                     return false;                 }             }         }     }     i++; }  =>   while (true) {     if (chars[i] >= '0' && chars[i] <= '9') {         foundDigit = true;         allowSigns = false;     } else {         if (chars[i] == '.') {             if (hasDecPoint || hasExp) {                 return false;             }             hasDecPoint = true;         } else {             if (chars[i] == 'e' || chars[i] == 'E') {                 if (hasExp) {                     return false;                 }                 if (!foundDigit) {                     return false;                 }                 hasExp = true;                 allowSigns = true;             } else {                 if (chars[i] == '+' || chars[i] == '-') {                     if (!allowSigns) {                         return false;                     }                     allowSigns = false;                     foundDigit = false;                 } else {                     return false;                 }             }         }     }     i++; }
SDL_370:734:boolean_isNumber(java.lang.String): foundDigit = true; allowSigns = false;  =>   allowSigns = false;
SDL_371:734:boolean_isNumber(java.lang.String): foundDigit = true; allowSigns = false;  =>   foundDigit = true;
SDL_372:764:boolean_isNumber(java.lang.String): if (chars[i] >= '0' && chars[i] <= '9') {     foundDigit = true;     allowSigns = false; } else {     if (chars[i] == '.') {         if (hasDecPoint || hasExp) {             return false;         }         hasDecPoint = true;     } else {         if (chars[i] == 'e' || chars[i] == 'E') {             if (hasExp) {                 return false;             }             if (!foundDigit) {                 return false;             }             hasExp = true;             allowSigns = true;         } else {             if (chars[i] == '+' || chars[i] == '-') {                 if (!allowSigns) {                     return false;                 }                 allowSigns = false;                 foundDigit = false;             } else {                 return false;             }         }     } }  =>   if (true) {     foundDigit = true;     allowSigns = false; } else {     if (chars[i] == '.') {         if (hasDecPoint || hasExp) {             return false;         }         hasDecPoint = true;     } else {         if (chars[i] == 'e' || chars[i] == 'E') {             if (hasExp) {                 return false;             }             if (!foundDigit) {                 return false;             }             hasExp = true;             allowSigns = true;         } else {             if (chars[i] == '+' || chars[i] == '-') {                 if (!allowSigns) {                     return false;                 }                 allowSigns = false;                 foundDigit = false;             } else {                 return false;             }         }     } }
SDL_373:736:boolean_isNumber(java.lang.String): if (chars[i] == '.') {     if (hasDecPoint || hasExp) {         return false;     }     hasDecPoint = true; } else {     if (chars[i] == 'e' || chars[i] == 'E') {         if (hasExp) {             return false;         }         if (!foundDigit) {             return false;         }         hasExp = true;         allowSigns = true;     } else {         if (chars[i] == '+' || chars[i] == '-') {             if (!allowSigns) {                 return false;             }             allowSigns = false;             foundDigit = false;         } else {             return false;         }     } }  =>  
SDL_374:738:boolean_isNumber(java.lang.String): if (hasDecPoint || hasExp) {     return false; } hasDecPoint = true;  =>   hasDecPoint = true;
SDL_375:740:boolean_isNumber(java.lang.String): if (hasDecPoint || hasExp) {     return false; } hasDecPoint = true;  =>   if (hasDecPoint || hasExp) {     return false; }
SDL_376:763:boolean_isNumber(java.lang.String): if (chars[i] == '.') {     if (hasDecPoint || hasExp) {         return false;     }     hasDecPoint = true; } else {     if (chars[i] == 'e' || chars[i] == 'E') {         if (hasExp) {             return false;         }         if (!foundDigit) {             return false;         }         hasExp = true;         allowSigns = true;     } else {         if (chars[i] == '+' || chars[i] == '-') {             if (!allowSigns) {                 return false;             }             allowSigns = false;             foundDigit = false;         } else {             return false;         }     } }  =>   if (true) {     if (hasDecPoint || hasExp) {         return false;     }     hasDecPoint = true; } else {     if (chars[i] == 'e' || chars[i] == 'E') {         if (hasExp) {             return false;         }         if (!foundDigit) {             return false;         }         hasExp = true;         allowSigns = true;     } else {         if (chars[i] == '+' || chars[i] == '-') {             if (!allowSigns) {                 return false;             }             allowSigns = false;             foundDigit = false;         } else {             return false;         }     } }
SDL_377:742:boolean_isNumber(java.lang.String): if (chars[i] == 'e' || chars[i] == 'E') {     if (hasExp) {         return false;     }     if (!foundDigit) {         return false;     }     hasExp = true;     allowSigns = true; } else {     if (chars[i] == '+' || chars[i] == '-') {         if (!allowSigns) {             return false;         }         allowSigns = false;         foundDigit = false;     } else {         return false;     } }  =>  
SDL_378:740:boolean_isNumber(java.lang.String): if (hasDecPoint || hasExp) {     return false; }  =>   if (true) {     return false; }
SDL_379:739:boolean_isNumber(java.lang.String): return false;  =>   return true;
SDL_380:748:boolean_isNumber(java.lang.String): if (hasExp) {     return false; } if (!foundDigit) {     return false; } hasExp = true; allowSigns = true;  =>   if (!foundDigit) {     return false; } hasExp = true; allowSigns = true;
SDL_381:748:boolean_isNumber(java.lang.String): if (hasExp) {     return false; } if (!foundDigit) {     return false; } hasExp = true; allowSigns = true;  =>   if (hasExp) {     return false; } hasExp = true; allowSigns = true;
SDL_382:750:boolean_isNumber(java.lang.String): if (hasExp) {     return false; } if (!foundDigit) {     return false; } hasExp = true; allowSigns = true;  =>   if (hasExp) {     return false; } if (!foundDigit) {     return false; } allowSigns = true;
SDL_383:750:boolean_isNumber(java.lang.String): if (hasExp) {     return false; } if (!foundDigit) {     return false; } hasExp = true; allowSigns = true;  =>   if (hasExp) {     return false; } if (!foundDigit) {     return false; } hasExp = true;
SDL_384:762:boolean_isNumber(java.lang.String): if (chars[i] == 'e' || chars[i] == 'E') {     if (hasExp) {         return false;     }     if (!foundDigit) {         return false;     }     hasExp = true;     allowSigns = true; } else {     if (chars[i] == '+' || chars[i] == '-') {         if (!allowSigns) {             return false;         }         allowSigns = false;         foundDigit = false;     } else {         return false;     } }  =>   if (true) {     if (hasExp) {         return false;     }     if (!foundDigit) {         return false;     }     hasExp = true;     allowSigns = true; } else {     if (chars[i] == '+' || chars[i] == '-') {         if (!allowSigns) {             return false;         }         allowSigns = false;         foundDigit = false;     } else {         return false;     } }
SDL_385:752:boolean_isNumber(java.lang.String): if (chars[i] == '+' || chars[i] == '-') {     if (!allowSigns) {         return false;     }     allowSigns = false;     foundDigit = false; } else {     return false; }  =>  
SDL_386:746:boolean_isNumber(java.lang.String): if (hasExp) {     return false; }  =>   if (true) {     return false; }
SDL_387:745:boolean_isNumber(java.lang.String): return false;  =>   return true;
SDL_388:749:boolean_isNumber(java.lang.String): if (!foundDigit) {     return false; }  =>   if (true) {     return false; }
SDL_389:748:boolean_isNumber(java.lang.String): return false;  =>   return true;
SDL_390:755:boolean_isNumber(java.lang.String): if (!allowSigns) {     return false; } allowSigns = false; foundDigit = false;  =>   allowSigns = false; foundDigit = false;
SDL_391:757:boolean_isNumber(java.lang.String): if (!allowSigns) {     return false; } allowSigns = false; foundDigit = false;  =>   if (!allowSigns) {     return false; } foundDigit = false;
SDL_392:757:boolean_isNumber(java.lang.String): if (!allowSigns) {     return false; } allowSigns = false; foundDigit = false;  =>   if (!allowSigns) {     return false; } allowSigns = false;
SDL_393:761:boolean_isNumber(java.lang.String): if (chars[i] == '+' || chars[i] == '-') {     if (!allowSigns) {         return false;     }     allowSigns = false;     foundDigit = false; } else {     return false; }  =>   if (true) {     if (!allowSigns) {         return false;     }     allowSigns = false;     foundDigit = false; } else {     return false; }
SDL_394:756:boolean_isNumber(java.lang.String): if (!allowSigns) {     return false; }  =>   if (true) {     return false; }
SDL_395:755:boolean_isNumber(java.lang.String): return false;  =>   return true;
SDL_396:760:boolean_isNumber(java.lang.String): return false;  =>   return true;
SDL_397:783:boolean_isNumber(java.lang.String): if (chars[i] >= '0' && chars[i] <= '9') {     return true; } if (chars[i] == 'e' || chars[i] == 'E') {     return false; } if (chars[i] == '.') {     if (hasDecPoint || hasExp) {         return false;     }     return foundDigit; } if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {     return foundDigit; } if (chars[i] == 'l' || chars[i] == 'L') {     return foundDigit && !hasExp && !hasDecPoint; } return false;  =>   if (chars[i] == 'e' || chars[i] == 'E') {     return false; } if (chars[i] == '.') {     if (hasDecPoint || hasExp) {         return false;     }     return foundDigit; } if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {     return foundDigit; } if (chars[i] == 'l' || chars[i] == 'L') {     return foundDigit && !hasExp && !hasDecPoint; } return false;
SDL_398:783:boolean_isNumber(java.lang.String): if (chars[i] >= '0' && chars[i] <= '9') {     return true; } if (chars[i] == 'e' || chars[i] == 'E') {     return false; } if (chars[i] == '.') {     if (hasDecPoint || hasExp) {         return false;     }     return foundDigit; } if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {     return foundDigit; } if (chars[i] == 'l' || chars[i] == 'L') {     return foundDigit && !hasExp && !hasDecPoint; } return false;  =>   if (chars[i] >= '0' && chars[i] <= '9') {     return true; } if (chars[i] == '.') {     if (hasDecPoint || hasExp) {         return false;     }     return foundDigit; } if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {     return foundDigit; } if (chars[i] == 'l' || chars[i] == 'L') {     return foundDigit && !hasExp && !hasDecPoint; } return false;
SDL_399:780:boolean_isNumber(java.lang.String): if (chars[i] >= '0' && chars[i] <= '9') {     return true; } if (chars[i] == 'e' || chars[i] == 'E') {     return false; } if (chars[i] == '.') {     if (hasDecPoint || hasExp) {         return false;     }     return foundDigit; } if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {     return foundDigit; } if (chars[i] == 'l' || chars[i] == 'L') {     return foundDigit && !hasExp && !hasDecPoint; } return false;  =>   if (chars[i] >= '0' && chars[i] <= '9') {     return true; } if (chars[i] == 'e' || chars[i] == 'E') {     return false; } if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {     return foundDigit; } if (chars[i] == 'l' || chars[i] == 'L') {     return foundDigit && !hasExp && !hasDecPoint; } return false;
SDL_400:783:boolean_isNumber(java.lang.String): if (chars[i] >= '0' && chars[i] <= '9') {     return true; } if (chars[i] == 'e' || chars[i] == 'E') {     return false; } if (chars[i] == '.') {     if (hasDecPoint || hasExp) {         return false;     }     return foundDigit; } if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {     return foundDigit; } if (chars[i] == 'l' || chars[i] == 'L') {     return foundDigit && !hasExp && !hasDecPoint; } return false;  =>   if (chars[i] >= '0' && chars[i] <= '9') {     return true; } if (chars[i] == 'e' || chars[i] == 'E') {     return false; } if (chars[i] == '.') {     if (hasDecPoint || hasExp) {         return false;     }     return foundDigit; } if (chars[i] == 'l' || chars[i] == 'L') {     return foundDigit && !hasExp && !hasDecPoint; } return false;
SDL_401:783:boolean_isNumber(java.lang.String): if (chars[i] >= '0' && chars[i] <= '9') {     return true; } if (chars[i] == 'e' || chars[i] == 'E') {     return false; } if (chars[i] == '.') {     if (hasDecPoint || hasExp) {         return false;     }     return foundDigit; } if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {     return foundDigit; } if (chars[i] == 'l' || chars[i] == 'L') {     return foundDigit && !hasExp && !hasDecPoint; } return false;  =>   if (chars[i] >= '0' && chars[i] <= '9') {     return true; } if (chars[i] == 'e' || chars[i] == 'E') {     return false; } if (chars[i] == '.') {     if (hasDecPoint || hasExp) {         return false;     }     return foundDigit; } if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {     return foundDigit; } return false;
SDL_402:787:boolean_isNumber(java.lang.String): if (i < chars.length) {     if (chars[i] >= '0' && chars[i] <= '9') {         return true;     }     if (chars[i] == 'e' || chars[i] == 'E') {         return false;     }     if (chars[i] == '.') {         if (hasDecPoint || hasExp) {             return false;         }         return foundDigit;     }     if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {         return foundDigit;     }     if (chars[i] == 'l' || chars[i] == 'L') {         return foundDigit && !hasExp && !hasDecPoint;     }     return false; }  =>   if (true) {     if (chars[i] >= '0' && chars[i] <= '9') {         return true;     }     if (chars[i] == 'e' || chars[i] == 'E') {         return false;     }     if (chars[i] == '.') {         if (hasDecPoint || hasExp) {             return false;         }         return foundDigit;     }     if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {         return foundDigit;     }     if (chars[i] == 'l' || chars[i] == 'L') {         return foundDigit && !hasExp && !hasDecPoint;     }     return false; }
SDL_403:770:boolean_isNumber(java.lang.String): if (chars[i] >= '0' && chars[i] <= '9') {     return true; }  =>   if (true) {     return true; }
SDL_404:769:boolean_isNumber(java.lang.String): return true;  =>   return false;
SDL_405:773:boolean_isNumber(java.lang.String): if (chars[i] == 'e' || chars[i] == 'E') {     return false; }  =>   if (true) {     return false; }
SDL_406:772:boolean_isNumber(java.lang.String): return false;  =>   return true;
SDL_407:775:boolean_isNumber(java.lang.String): if (hasDecPoint || hasExp) {     return false; } return foundDigit;  =>   return foundDigit;
SDL_408:779:boolean_isNumber(java.lang.String): if (chars[i] == '.') {     if (hasDecPoint || hasExp) {         return false;     }     return foundDigit; }  =>   if (true) {     if (hasDecPoint || hasExp) {         return false;     }     return foundDigit; }
SDL_409:777:boolean_isNumber(java.lang.String): if (hasDecPoint || hasExp) {     return false; }  =>   if (true) {     return false; }
SDL_410:776:boolean_isNumber(java.lang.String): return false;  =>   return true;
SDL_411:778:boolean_isNumber(java.lang.String): return foundDigit;  =>   return true;
SDL_412:778:boolean_isNumber(java.lang.String): return foundDigit;  =>   return false;
SDL_413:782:boolean_isNumber(java.lang.String): if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {     return foundDigit; }  =>   if (true) {     return foundDigit; }
SDL_414:781:boolean_isNumber(java.lang.String): return foundDigit;  =>   return true;
SDL_415:781:boolean_isNumber(java.lang.String): return foundDigit;  =>   return false;
SDL_416:785:boolean_isNumber(java.lang.String): if (chars[i] == 'l' || chars[i] == 'L') {     return foundDigit && !hasExp && !hasDecPoint; }  =>   if (true) {     return foundDigit && !hasExp && !hasDecPoint; }
SDL_417:784:boolean_isNumber(java.lang.String): return foundDigit && !hasExp && !hasDecPoint;  =>   return true;
SDL_418:784:boolean_isNumber(java.lang.String): return foundDigit && !hasExp && !hasDecPoint;  =>   return false;
SDL_419:786:boolean_isNumber(java.lang.String): return false;  =>   return true;
SDL_420:788:boolean_isNumber(java.lang.String): return !allowSigns && foundDigit;  =>   return true;
SDL_421:788:boolean_isNumber(java.lang.String): return !allowSigns && foundDigit;  =>   return false;
