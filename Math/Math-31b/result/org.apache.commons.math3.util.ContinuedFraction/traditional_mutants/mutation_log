AORB_1:57:double_evaluate(double,double,int):a * hPrev => a / hPrev
AORB_2:57:double_evaluate(double,double,int):a * hPrev => a % hPrev
AORB_3:57:double_evaluate(double,double,int):a * hPrev => a + hPrev
AORB_4:57:double_evaluate(double,double,int):a * hPrev => a - hPrev
AORB_5:57:double_evaluate(double,double,int):b * p0 => b / p0
AORB_6:57:double_evaluate(double,double,int):b * p0 => b % p0
AORB_7:57:double_evaluate(double,double,int):b * p0 => b + p0
AORB_8:57:double_evaluate(double,double,int):b * p0 => b - p0
AORB_9:57:double_evaluate(double,double,int):a * hPrev + b * p0 => a * hPrev * (b * p0)
AORB_10:57:double_evaluate(double,double,int):a * hPrev + b * p0 => a * hPrev / (b * p0)
AORB_11:57:double_evaluate(double,double,int):a * hPrev + b * p0 => a * hPrev % (b * p0)
AORB_12:57:double_evaluate(double,double,int):a * hPrev + b * p0 => a * hPrev - b * p0
AORB_13:58:double_evaluate(double,double,int):a * q1 => a / q1
AORB_14:58:double_evaluate(double,double,int):a * q1 => a % q1
AORB_15:58:double_evaluate(double,double,int):a * q1 => a + q1
AORB_16:58:double_evaluate(double,double,int):a * q1 => a - q1
AORB_17:58:double_evaluate(double,double,int):b * dPrev => b / dPrev
AORB_18:58:double_evaluate(double,double,int):b * dPrev => b % dPrev
AORB_19:58:double_evaluate(double,double,int):b * dPrev => b + dPrev
AORB_20:58:double_evaluate(double,double,int):b * dPrev => b - dPrev
AORB_21:58:double_evaluate(double,double,int):a * q1 + b * dPrev => a * q1 * (b * dPrev)
AORB_22:58:double_evaluate(double,double,int):a * q1 + b * dPrev => a * q1 / (b * dPrev)
AORB_23:58:double_evaluate(double,double,int):a * q1 + b * dPrev => a * q1 % (b * dPrev)
AORB_24:58:double_evaluate(double,double,int):a * q1 + b * dPrev => a * q1 - b * dPrev
AORB_25:71:double_evaluate(double,double,int):hPrev / lastScaleFactor => hPrev * lastScaleFactor
AORB_26:71:double_evaluate(double,double,int):hPrev / lastScaleFactor => hPrev % lastScaleFactor
AORB_27:71:double_evaluate(double,double,int):hPrev / lastScaleFactor => hPrev + lastScaleFactor
AORB_28:71:double_evaluate(double,double,int):hPrev / lastScaleFactor => hPrev - lastScaleFactor
AORB_29:71:double_evaluate(double,double,int):b / scaleFactor => b * scaleFactor
AORB_30:71:double_evaluate(double,double,int):b / scaleFactor => b % scaleFactor
AORB_31:71:double_evaluate(double,double,int):b / scaleFactor => b + scaleFactor
AORB_32:71:double_evaluate(double,double,int):b / scaleFactor => b - scaleFactor
AORB_33:71:double_evaluate(double,double,int):b / scaleFactor * p0 => b / scaleFactor / p0
AORB_34:71:double_evaluate(double,double,int):b / scaleFactor * p0 => b / scaleFactor % p0
AORB_35:71:double_evaluate(double,double,int):b / scaleFactor * p0 => b / scaleFactor + p0
AORB_36:71:double_evaluate(double,double,int):b / scaleFactor * p0 => b / scaleFactor - p0
AORB_37:71:double_evaluate(double,double,int):hPrev / lastScaleFactor + b / scaleFactor * p0 => hPrev / lastScaleFactor * (b / scaleFactor * p0)
AORB_38:71:double_evaluate(double,double,int):hPrev / lastScaleFactor + b / scaleFactor * p0 => hPrev / lastScaleFactor / (b / scaleFactor * p0)
AORB_39:71:double_evaluate(double,double,int):hPrev / lastScaleFactor + b / scaleFactor * p0 => hPrev / lastScaleFactor % (b / scaleFactor * p0)
AORB_40:71:double_evaluate(double,double,int):hPrev / lastScaleFactor + b / scaleFactor * p0 => hPrev / lastScaleFactor - b / scaleFactor * p0
AORB_41:72:double_evaluate(double,double,int):q1 / lastScaleFactor => q1 * lastScaleFactor
AORB_42:72:double_evaluate(double,double,int):q1 / lastScaleFactor => q1 % lastScaleFactor
AORB_43:72:double_evaluate(double,double,int):q1 / lastScaleFactor => q1 + lastScaleFactor
AORB_44:72:double_evaluate(double,double,int):q1 / lastScaleFactor => q1 - lastScaleFactor
AORB_45:72:double_evaluate(double,double,int):b / scaleFactor => b * scaleFactor
AORB_46:72:double_evaluate(double,double,int):b / scaleFactor => b % scaleFactor
AORB_47:72:double_evaluate(double,double,int):b / scaleFactor => b + scaleFactor
AORB_48:72:double_evaluate(double,double,int):b / scaleFactor => b - scaleFactor
AORB_49:72:double_evaluate(double,double,int):b / scaleFactor * dPrev => b / scaleFactor / dPrev
AORB_50:72:double_evaluate(double,double,int):b / scaleFactor * dPrev => b / scaleFactor % dPrev
AORB_51:72:double_evaluate(double,double,int):b / scaleFactor * dPrev => b / scaleFactor + dPrev
AORB_52:72:double_evaluate(double,double,int):b / scaleFactor * dPrev => b / scaleFactor - dPrev
AORB_53:72:double_evaluate(double,double,int):q1 / lastScaleFactor + b / scaleFactor * dPrev => q1 / lastScaleFactor * (b / scaleFactor * dPrev)
AORB_54:72:double_evaluate(double,double,int):q1 / lastScaleFactor + b / scaleFactor * dPrev => q1 / lastScaleFactor / (b / scaleFactor * dPrev)
AORB_55:72:double_evaluate(double,double,int):q1 / lastScaleFactor + b / scaleFactor * dPrev => q1 / lastScaleFactor % (b / scaleFactor * dPrev)
AORB_56:72:double_evaluate(double,double,int):q1 / lastScaleFactor + b / scaleFactor * dPrev => q1 / lastScaleFactor - b / scaleFactor * dPrev
AORB_57:75:double_evaluate(double,double,int):a / scaleFactor => a * scaleFactor
AORB_58:75:double_evaluate(double,double,int):a / scaleFactor => a % scaleFactor
AORB_59:75:double_evaluate(double,double,int):a / scaleFactor => a + scaleFactor
AORB_60:75:double_evaluate(double,double,int):a / scaleFactor => a - scaleFactor
AORB_61:75:double_evaluate(double,double,int):a / scaleFactor * hPrev => a / scaleFactor / hPrev
AORB_62:75:double_evaluate(double,double,int):a / scaleFactor * hPrev => a / scaleFactor % hPrev
AORB_63:75:double_evaluate(double,double,int):a / scaleFactor * hPrev => a / scaleFactor + hPrev
AORB_64:75:double_evaluate(double,double,int):a / scaleFactor * hPrev => a / scaleFactor - hPrev
AORB_65:75:double_evaluate(double,double,int):p0 / lastScaleFactor => p0 * lastScaleFactor
AORB_66:75:double_evaluate(double,double,int):p0 / lastScaleFactor => p0 % lastScaleFactor
AORB_67:75:double_evaluate(double,double,int):p0 / lastScaleFactor => p0 + lastScaleFactor
AORB_68:75:double_evaluate(double,double,int):p0 / lastScaleFactor => p0 - lastScaleFactor
AORB_69:75:double_evaluate(double,double,int):a / scaleFactor * hPrev + p0 / lastScaleFactor => a / scaleFactor * hPrev * (p0 / lastScaleFactor)
AORB_70:75:double_evaluate(double,double,int):a / scaleFactor * hPrev + p0 / lastScaleFactor => a / scaleFactor * hPrev / (p0 / lastScaleFactor)
AORB_71:75:double_evaluate(double,double,int):a / scaleFactor * hPrev + p0 / lastScaleFactor => a / scaleFactor * hPrev % (p0 / lastScaleFactor)
AORB_72:75:double_evaluate(double,double,int):a / scaleFactor * hPrev + p0 / lastScaleFactor => a / scaleFactor * hPrev - p0 / lastScaleFactor
AORB_73:76:double_evaluate(double,double,int):a / scaleFactor => a * scaleFactor
AORB_74:76:double_evaluate(double,double,int):a / scaleFactor => a % scaleFactor
AORB_75:76:double_evaluate(double,double,int):a / scaleFactor => a + scaleFactor
AORB_76:76:double_evaluate(double,double,int):a / scaleFactor => a - scaleFactor
AORB_77:76:double_evaluate(double,double,int):a / scaleFactor * q1 => a / scaleFactor / q1
AORB_78:76:double_evaluate(double,double,int):a / scaleFactor * q1 => a / scaleFactor % q1
AORB_79:76:double_evaluate(double,double,int):a / scaleFactor * q1 => a / scaleFactor + q1
AORB_80:76:double_evaluate(double,double,int):a / scaleFactor * q1 => a / scaleFactor - q1
AORB_81:76:double_evaluate(double,double,int):dPrev / lastScaleFactor => dPrev * lastScaleFactor
AORB_82:76:double_evaluate(double,double,int):dPrev / lastScaleFactor => dPrev % lastScaleFactor
AORB_83:76:double_evaluate(double,double,int):dPrev / lastScaleFactor => dPrev + lastScaleFactor
AORB_84:76:double_evaluate(double,double,int):dPrev / lastScaleFactor => dPrev - lastScaleFactor
AORB_85:76:double_evaluate(double,double,int):a / scaleFactor * q1 + dPrev / lastScaleFactor => a / scaleFactor * q1 * (dPrev / lastScaleFactor)
AORB_86:76:double_evaluate(double,double,int):a / scaleFactor * q1 + dPrev / lastScaleFactor => a / scaleFactor * q1 / (dPrev / lastScaleFactor)
AORB_87:76:double_evaluate(double,double,int):a / scaleFactor * q1 + dPrev / lastScaleFactor => a / scaleFactor * q1 % (dPrev / lastScaleFactor)
AORB_88:76:double_evaluate(double,double,int):a / scaleFactor * q1 + dPrev / lastScaleFactor => a / scaleFactor * q1 - dPrev / lastScaleFactor
AORB_89:84:double_evaluate(double,double,int):cN / q2 => cN * q2
AORB_90:84:double_evaluate(double,double,int):cN / q2 => cN % q2
AORB_91:84:double_evaluate(double,double,int):cN / q2 => cN + q2
AORB_92:84:double_evaluate(double,double,int):cN / q2 => cN - q2
AORB_93:84:double_evaluate(double,double,int):cN / q2 / cPrev => cN / q2 * cPrev
AORB_94:84:double_evaluate(double,double,int):cN / q2 / cPrev => cN / q2 % cPrev
AORB_95:84:double_evaluate(double,double,int):cN / q2 / cPrev => cN / q2 + cPrev
AORB_96:84:double_evaluate(double,double,int):cN / q2 / cPrev => cN / q2 - cPrev
AORB_97:85:double_evaluate(double,double,int):cPrev * deltaN => cPrev / deltaN
AORB_98:85:double_evaluate(double,double,int):cPrev * deltaN => cPrev % deltaN
AORB_99:85:double_evaluate(double,double,int):cPrev * deltaN => cPrev + deltaN
AORB_100:85:double_evaluate(double,double,int):cPrev * deltaN => cPrev - deltaN
AORB_101:92:double_evaluate(double,double,int):deltaN - 1.0 => deltaN * 1.0
AORB_102:92:double_evaluate(double,double,int):deltaN - 1.0 => deltaN / 1.0
AORB_103:92:double_evaluate(double,double,int):deltaN - 1.0 => deltaN % 1.0
AORB_104:92:double_evaluate(double,double,int):deltaN - 1.0 => deltaN + 1.0
AORB_105:96:double_evaluate(double,double,int):cN / q2 => cN * q2
AORB_106:96:double_evaluate(double,double,int):cN / q2 => cN % q2
AORB_107:96:double_evaluate(double,double,int):cN / q2 => cN + q2
AORB_108:96:double_evaluate(double,double,int):cN / q2 => cN - q2
ROR_1:54:double_evaluate(double,double,int): n < maxIterations  =>   n > maxIterations
ROR_2:54:double_evaluate(double,double,int): n < maxIterations  =>   n >= maxIterations
ROR_3:54:double_evaluate(double,double,int): n < maxIterations  =>   n <= maxIterations
ROR_4:54:double_evaluate(double,double,int): n < maxIterations  =>   n == maxIterations
ROR_5:54:double_evaluate(double,double,int): n < maxIterations  =>   n != maxIterations
ROR_6:54:double_evaluate(double,double,int): n < maxIterations  =>   true
ROR_7:54:double_evaluate(double,double,int): n < maxIterations  =>   false
ROR_8:64:double_evaluate(double,double,int): scale <= 0  =>   scale > 0
ROR_9:64:double_evaluate(double,double,int): scale <= 0  =>   scale >= 0
ROR_10:64:double_evaluate(double,double,int): scale <= 0  =>   scale < 0
ROR_11:64:double_evaluate(double,double,int): scale <= 0  =>   scale == 0
ROR_12:64:double_evaluate(double,double,int): scale <= 0  =>   scale != 0
ROR_13:64:double_evaluate(double,double,int): scale <= 0  =>   true
ROR_14:64:double_evaluate(double,double,int): scale <= 0  =>   false
ROR_15:67:double_evaluate(double,double,int): i < maxPower  =>   i > maxPower
ROR_16:67:double_evaluate(double,double,int): i < maxPower  =>   i >= maxPower
ROR_17:67:double_evaluate(double,double,int): i < maxPower  =>   i <= maxPower
ROR_18:67:double_evaluate(double,double,int): i < maxPower  =>   i == maxPower
ROR_19:67:double_evaluate(double,double,int): i < maxPower  =>   i != maxPower
ROR_20:67:double_evaluate(double,double,int): i < maxPower  =>   true
ROR_21:67:double_evaluate(double,double,int): i < maxPower  =>   false
ROR_22:70:double_evaluate(double,double,int): a != 0.0  =>   a > 0.0
ROR_23:70:double_evaluate(double,double,int): a != 0.0  =>   a >= 0.0
ROR_24:70:double_evaluate(double,double,int): a != 0.0  =>   a < 0.0
ROR_25:70:double_evaluate(double,double,int): a != 0.0  =>   a <= 0.0
ROR_26:70:double_evaluate(double,double,int): a != 0.0  =>   a == 0.0
ROR_27:70:double_evaluate(double,double,int): a != 0.0  =>   true
ROR_28:70:double_evaluate(double,double,int): a != 0.0  =>   false
ROR_29:70:double_evaluate(double,double,int): a > b  =>   a >= b
ROR_30:70:double_evaluate(double,double,int): a > b  =>   a < b
ROR_31:70:double_evaluate(double,double,int): a > b  =>   a <= b
ROR_32:70:double_evaluate(double,double,int): a > b  =>   a == b
ROR_33:70:double_evaluate(double,double,int): a > b  =>   a != b
ROR_34:70:double_evaluate(double,double,int): a > b  =>   true
ROR_35:70:double_evaluate(double,double,int): a > b  =>   false
ROR_36:74:double_evaluate(double,double,int): b != 0  =>   b > 0
ROR_37:74:double_evaluate(double,double,int): b != 0  =>   b >= 0
ROR_38:74:double_evaluate(double,double,int): b != 0  =>   b < 0
ROR_39:74:double_evaluate(double,double,int): b != 0  =>   b <= 0
ROR_40:74:double_evaluate(double,double,int): b != 0  =>   b == 0
ROR_41:74:double_evaluate(double,double,int): b != 0  =>   true
ROR_42:74:double_evaluate(double,double,int): b != 0  =>   false
ROR_43:92:double_evaluate(double,double,int): FastMath.abs( deltaN - 1.0 ) < epsilon  =>   FastMath.abs( deltaN - 1.0 ) > epsilon
ROR_44:92:double_evaluate(double,double,int): FastMath.abs( deltaN - 1.0 ) < epsilon  =>   FastMath.abs( deltaN - 1.0 ) >= epsilon
ROR_45:92:double_evaluate(double,double,int): FastMath.abs( deltaN - 1.0 ) < epsilon  =>   FastMath.abs( deltaN - 1.0 ) <= epsilon
ROR_46:92:double_evaluate(double,double,int): FastMath.abs( deltaN - 1.0 ) < epsilon  =>   FastMath.abs( deltaN - 1.0 ) == epsilon
ROR_47:92:double_evaluate(double,double,int): FastMath.abs( deltaN - 1.0 ) < epsilon  =>   FastMath.abs( deltaN - 1.0 ) != epsilon
ROR_48:92:double_evaluate(double,double,int): FastMath.abs( deltaN - 1.0 ) < epsilon  =>   true
ROR_49:92:double_evaluate(double,double,int): FastMath.abs( deltaN - 1.0 ) < epsilon  =>   false
ROR_50:102:double_evaluate(double,double,int): n >= maxIterations  =>   n > maxIterations
ROR_51:102:double_evaluate(double,double,int): n >= maxIterations  =>   n < maxIterations
ROR_52:102:double_evaluate(double,double,int): n >= maxIterations  =>   n <= maxIterations
ROR_53:102:double_evaluate(double,double,int): n >= maxIterations  =>   n == maxIterations
ROR_54:102:double_evaluate(double,double,int): n >= maxIterations  =>   n != maxIterations
ROR_55:102:double_evaluate(double,double,int): n >= maxIterations  =>   true
ROR_56:102:double_evaluate(double,double,int): n >= maxIterations  =>   false
COR_1:59:double_evaluate(double,double,int): Double.isInfinite( cN ) || Double.isInfinite( q2 )  =>   Double.isInfinite( cN ) && Double.isInfinite( q2 )
COR_2:59:double_evaluate(double,double,int): Double.isInfinite( cN ) || Double.isInfinite( q2 )  =>   Double.isInfinite( cN ) ^ Double.isInfinite( q2 )
COR_3:70:double_evaluate(double,double,int): a != 0.0 && a > b  =>   a != 0.0 || a > b
COR_4:70:double_evaluate(double,double,int): a != 0.0 && a > b  =>   a != 0.0 ^ a > b
COR_5:79:double_evaluate(double,double,int): Double.isInfinite( cN ) || Double.isInfinite( q2 )  =>   Double.isInfinite( cN ) && Double.isInfinite( q2 )
COR_6:79:double_evaluate(double,double,int): Double.isInfinite( cN ) || Double.isInfinite( q2 )  =>   Double.isInfinite( cN ) ^ Double.isInfinite( q2 )
SDL_1:29:double_evaluate(double): return evaluate( x, DEFAULT_EPSILON, Integer.MAX_VALUE );  =>   return 0;
SDL_2:34:double_evaluate(double,double): return evaluate( x, epsilon, Integer.MAX_VALUE );  =>   return 0;
SDL_3:39:double_evaluate(double,int): return evaluate( x, DEFAULT_EPSILON, maxIterations );  =>   return 0;
SDL_4:103:double_evaluate(double,double,int): final double small = 1e-50; double hPrev = getA( 0, x ); if (Precision.equals( hPrev, 0.0, small )) {     hPrev = small; } int n = 1; double dPrev = 0.0; double p0 = 1.0; double q1 = 1.0; double cPrev = hPrev; double hN = hPrev; while (n < maxIterations) {     final double a = getA( n, x );     final double b = getB( n, x );     double cN = a * hPrev + b * p0;     double q2 = a * q1 + b * dPrev;     if (Double.isInfinite( cN ) || Double.isInfinite( q2 )) {         double scaleFactor = 1d;         double lastScaleFactor = 1d;         final int maxPower = 5;         final double scale = FastMath.max( a, b );         if (scale <= 0) {             throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );         }         for (int i = 0; i < maxPower; i++) {             lastScaleFactor = scaleFactor;             scaleFactor *= scale;             if (a != 0.0 && a > b) {                 cN = hPrev / lastScaleFactor + b / scaleFactor * p0;                 q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;             } else {                 if (b != 0) {                     cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;                     q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;                 }             }             if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {                 break;             }         }     }     final double deltaN = cN / q2 / cPrev;     hN = cPrev * deltaN;     if (Double.isInfinite( hN )) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );     }     if (Double.isNaN( hN )) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x );     }     if (FastMath.abs( deltaN - 1.0 ) < epsilon) {         break;     }     dPrev = q1;     cPrev = cN / q2;     p0 = hPrev;     hPrev = cN;     q1 = q2;     n++; } if (n >= maxIterations) {     throw new org.apache.commons.math3.exception.MaxCountExceededException( LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x ); } return hN;  =>   final double small = 1e-50; double hPrev = getA( 0, x ); int n = 1; double dPrev = 0.0; double p0 = 1.0; double q1 = 1.0; double cPrev = hPrev; double hN = hPrev; while (n < maxIterations) {     final double a = getA( n, x );     final double b = getB( n, x );     double cN = a * hPrev + b * p0;     double q2 = a * q1 + b * dPrev;     if (Double.isInfinite( cN ) || Double.isInfinite( q2 )) {         double scaleFactor = 1d;         double lastScaleFactor = 1d;         final int maxPower = 5;         final double scale = FastMath.max( a, b );         if (scale <= 0) {             throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );         }         for (int i = 0; i < maxPower; i++) {             lastScaleFactor = scaleFactor;             scaleFactor *= scale;             if (a != 0.0 && a > b) {                 cN = hPrev / lastScaleFactor + b / scaleFactor * p0;                 q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;             } else {                 if (b != 0) {                     cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;                     q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;                 }             }             if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {                 break;             }         }     }     final double deltaN = cN / q2 / cPrev;     hN = cPrev * deltaN;     if (Double.isInfinite( hN )) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );     }     if (Double.isNaN( hN )) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x );     }     if (FastMath.abs( deltaN - 1.0 ) < epsilon) {         break;     }     dPrev = q1;     cPrev = cN / q2;     p0 = hPrev;     hPrev = cN;     q1 = q2;     n++; } if (n >= maxIterations) {     throw new org.apache.commons.math3.exception.MaxCountExceededException( LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x ); } return hN;
SDL_5:58:double_evaluate(double,double,int): final double small = 1e-50; double hPrev = getA( 0, x ); if (Precision.equals( hPrev, 0.0, small )) {     hPrev = small; } int n = 1; double dPrev = 0.0; double p0 = 1.0; double q1 = 1.0; double cPrev = hPrev; double hN = hPrev; while (n < maxIterations) {     final double a = getA( n, x );     final double b = getB( n, x );     double cN = a * hPrev + b * p0;     double q2 = a * q1 + b * dPrev;     if (Double.isInfinite( cN ) || Double.isInfinite( q2 )) {         double scaleFactor = 1d;         double lastScaleFactor = 1d;         final int maxPower = 5;         final double scale = FastMath.max( a, b );         if (scale <= 0) {             throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );         }         for (int i = 0; i < maxPower; i++) {             lastScaleFactor = scaleFactor;             scaleFactor *= scale;             if (a != 0.0 && a > b) {                 cN = hPrev / lastScaleFactor + b / scaleFactor * p0;                 q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;             } else {                 if (b != 0) {                     cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;                     q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;                 }             }             if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {                 break;             }         }     }     final double deltaN = cN / q2 / cPrev;     hN = cPrev * deltaN;     if (Double.isInfinite( hN )) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );     }     if (Double.isNaN( hN )) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x );     }     if (FastMath.abs( deltaN - 1.0 ) < epsilon) {         break;     }     dPrev = q1;     cPrev = cN / q2;     p0 = hPrev;     hPrev = cN;     q1 = q2;     n++; } if (n >= maxIterations) {     throw new org.apache.commons.math3.exception.MaxCountExceededException( LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x ); } return hN;  =>   final double small = 1e-50; double hPrev = getA( 0, x ); if (Precision.equals( hPrev, 0.0, small )) {     hPrev = small; } int n = 1; double dPrev = 0.0; double p0 = 1.0; double q1 = 1.0; double cPrev = hPrev; double hN = hPrev; if (n >= maxIterations) {     throw new org.apache.commons.math3.exception.MaxCountExceededException( LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x ); } return hN;
SDL_6:103:double_evaluate(double,double,int): final double small = 1e-50; double hPrev = getA( 0, x ); if (Precision.equals( hPrev, 0.0, small )) {     hPrev = small; } int n = 1; double dPrev = 0.0; double p0 = 1.0; double q1 = 1.0; double cPrev = hPrev; double hN = hPrev; while (n < maxIterations) {     final double a = getA( n, x );     final double b = getB( n, x );     double cN = a * hPrev + b * p0;     double q2 = a * q1 + b * dPrev;     if (Double.isInfinite( cN ) || Double.isInfinite( q2 )) {         double scaleFactor = 1d;         double lastScaleFactor = 1d;         final int maxPower = 5;         final double scale = FastMath.max( a, b );         if (scale <= 0) {             throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );         }         for (int i = 0; i < maxPower; i++) {             lastScaleFactor = scaleFactor;             scaleFactor *= scale;             if (a != 0.0 && a > b) {                 cN = hPrev / lastScaleFactor + b / scaleFactor * p0;                 q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;             } else {                 if (b != 0) {                     cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;                     q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;                 }             }             if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {                 break;             }         }     }     final double deltaN = cN / q2 / cPrev;     hN = cPrev * deltaN;     if (Double.isInfinite( hN )) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );     }     if (Double.isNaN( hN )) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x );     }     if (FastMath.abs( deltaN - 1.0 ) < epsilon) {         break;     }     dPrev = q1;     cPrev = cN / q2;     p0 = hPrev;     hPrev = cN;     q1 = q2;     n++; } if (n >= maxIterations) {     throw new org.apache.commons.math3.exception.MaxCountExceededException( LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x ); } return hN;  =>   final double small = 1e-50; double hPrev = getA( 0, x ); if (Precision.equals( hPrev, 0.0, small )) {     hPrev = small; } int n = 1; double dPrev = 0.0; double p0 = 1.0; double q1 = 1.0; double cPrev = hPrev; double hN = hPrev; while (n < maxIterations) {     final double a = getA( n, x );     final double b = getB( n, x );     double cN = a * hPrev + b * p0;     double q2 = a * q1 + b * dPrev;     if (Double.isInfinite( cN ) || Double.isInfinite( q2 )) {         double scaleFactor = 1d;         double lastScaleFactor = 1d;         final int maxPower = 5;         final double scale = FastMath.max( a, b );         if (scale <= 0) {             throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );         }         for (int i = 0; i < maxPower; i++) {             lastScaleFactor = scaleFactor;             scaleFactor *= scale;             if (a != 0.0 && a > b) {                 cN = hPrev / lastScaleFactor + b / scaleFactor * p0;                 q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;             } else {                 if (b != 0) {                     cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;                     q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;                 }             }             if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {                 break;             }         }     }     final double deltaN = cN / q2 / cPrev;     hN = cPrev * deltaN;     if (Double.isInfinite( hN )) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );     }     if (Double.isNaN( hN )) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x );     }     if (FastMath.abs( deltaN - 1.0 ) < epsilon) {         break;     }     dPrev = q1;     cPrev = cN / q2;     p0 = hPrev;     hPrev = cN;     q1 = q2;     n++; } return hN;
SDL_7:46:double_evaluate(double,double,int): hPrev = small;  =>  
SDL_8:48:double_evaluate(double,double,int): if (Precision.equals( hPrev, 0.0, small )) {     hPrev = small; }  =>   if (true) {     hPrev = small; }
SDL_9:76:double_evaluate(double,double,int): final double a = getA( n, x ); final double b = getB( n, x ); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite( cN ) || Double.isInfinite( q2 )) {     double scaleFactor = 1d;     double lastScaleFactor = 1d;     final int maxPower = 5;     final double scale = FastMath.max( a, b );     if (scale <= 0) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );     }     for (int i = 0; i < maxPower; i++) {         lastScaleFactor = scaleFactor;         scaleFactor *= scale;         if (a != 0.0 && a > b) {             cN = hPrev / lastScaleFactor + b / scaleFactor * p0;             q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;         } else {             if (b != 0) {                 cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;                 q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;             }         }         if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {             break;         }     } } final double deltaN = cN / q2 / cPrev; hN = cPrev * deltaN; if (Double.isInfinite( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x ); } if (Double.isNaN( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x ); } if (FastMath.abs( deltaN - 1.0 ) < epsilon) {     break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2; n++;  =>   final double a = getA( n, x ); final double b = getB( n, x ); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; final double deltaN = cN / q2 / cPrev; hN = cPrev * deltaN; if (Double.isInfinite( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x ); } if (Double.isNaN( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x ); } if (FastMath.abs( deltaN - 1.0 ) < epsilon) {     break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2; n++;
SDL_10:100:double_evaluate(double,double,int): final double a = getA( n, x ); final double b = getB( n, x ); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite( cN ) || Double.isInfinite( q2 )) {     double scaleFactor = 1d;     double lastScaleFactor = 1d;     final int maxPower = 5;     final double scale = FastMath.max( a, b );     if (scale <= 0) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );     }     for (int i = 0; i < maxPower; i++) {         lastScaleFactor = scaleFactor;         scaleFactor *= scale;         if (a != 0.0 && a > b) {             cN = hPrev / lastScaleFactor + b / scaleFactor * p0;             q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;         } else {             if (b != 0) {                 cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;                 q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;             }         }         if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {             break;         }     } } final double deltaN = cN / q2 / cPrev; hN = cPrev * deltaN; if (Double.isInfinite( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x ); } if (Double.isNaN( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x ); } if (FastMath.abs( deltaN - 1.0 ) < epsilon) {     break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2; n++;  =>   final double a = getA( n, x ); final double b = getB( n, x ); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite( cN ) || Double.isInfinite( q2 )) {     double scaleFactor = 1d;     double lastScaleFactor = 1d;     final int maxPower = 5;     final double scale = FastMath.max( a, b );     if (scale <= 0) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );     }     for (int i = 0; i < maxPower; i++) {         lastScaleFactor = scaleFactor;         scaleFactor *= scale;         if (a != 0.0 && a > b) {             cN = hPrev / lastScaleFactor + b / scaleFactor * p0;             q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;         } else {             if (b != 0) {                 cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;                 q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;             }         }         if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {             break;         }     } } final double deltaN = cN / q2 / cPrev; if (Double.isInfinite( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x ); } if (Double.isNaN( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x ); } if (FastMath.abs( deltaN - 1.0 ) < epsilon) {     break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2; n++;
SDL_11:98:double_evaluate(double,double,int): final double a = getA( n, x ); final double b = getB( n, x ); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite( cN ) || Double.isInfinite( q2 )) {     double scaleFactor = 1d;     double lastScaleFactor = 1d;     final int maxPower = 5;     final double scale = FastMath.max( a, b );     if (scale <= 0) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );     }     for (int i = 0; i < maxPower; i++) {         lastScaleFactor = scaleFactor;         scaleFactor *= scale;         if (a != 0.0 && a > b) {             cN = hPrev / lastScaleFactor + b / scaleFactor * p0;             q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;         } else {             if (b != 0) {                 cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;                 q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;             }         }         if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {             break;         }     } } final double deltaN = cN / q2 / cPrev; hN = cPrev * deltaN; if (Double.isInfinite( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x ); } if (Double.isNaN( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x ); } if (FastMath.abs( deltaN - 1.0 ) < epsilon) {     break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2; n++;  =>   final double a = getA( n, x ); final double b = getB( n, x ); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite( cN ) || Double.isInfinite( q2 )) {     double scaleFactor = 1d;     double lastScaleFactor = 1d;     final int maxPower = 5;     final double scale = FastMath.max( a, b );     if (scale <= 0) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );     }     for (int i = 0; i < maxPower; i++) {         lastScaleFactor = scaleFactor;         scaleFactor *= scale;         if (a != 0.0 && a > b) {             cN = hPrev / lastScaleFactor + b / scaleFactor * p0;             q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;         } else {             if (b != 0) {                 cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;                 q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;             }         }         if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {             break;         }     } } final double deltaN = cN / q2 / cPrev; hN = cPrev * deltaN; if (Double.isNaN( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x ); } if (FastMath.abs( deltaN - 1.0 ) < epsilon) {     break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2; n++;
SDL_12:98:double_evaluate(double,double,int): final double a = getA( n, x ); final double b = getB( n, x ); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite( cN ) || Double.isInfinite( q2 )) {     double scaleFactor = 1d;     double lastScaleFactor = 1d;     final int maxPower = 5;     final double scale = FastMath.max( a, b );     if (scale <= 0) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );     }     for (int i = 0; i < maxPower; i++) {         lastScaleFactor = scaleFactor;         scaleFactor *= scale;         if (a != 0.0 && a > b) {             cN = hPrev / lastScaleFactor + b / scaleFactor * p0;             q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;         } else {             if (b != 0) {                 cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;                 q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;             }         }         if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {             break;         }     } } final double deltaN = cN / q2 / cPrev; hN = cPrev * deltaN; if (Double.isInfinite( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x ); } if (Double.isNaN( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x ); } if (FastMath.abs( deltaN - 1.0 ) < epsilon) {     break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2; n++;  =>   final double a = getA( n, x ); final double b = getB( n, x ); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite( cN ) || Double.isInfinite( q2 )) {     double scaleFactor = 1d;     double lastScaleFactor = 1d;     final int maxPower = 5;     final double scale = FastMath.max( a, b );     if (scale <= 0) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );     }     for (int i = 0; i < maxPower; i++) {         lastScaleFactor = scaleFactor;         scaleFactor *= scale;         if (a != 0.0 && a > b) {             cN = hPrev / lastScaleFactor + b / scaleFactor * p0;             q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;         } else {             if (b != 0) {                 cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;                 q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;             }         }         if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {             break;         }     } } final double deltaN = cN / q2 / cPrev; hN = cPrev * deltaN; if (Double.isInfinite( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x ); } if (FastMath.abs( deltaN - 1.0 ) < epsilon) {     break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2; n++;
SDL_13:98:double_evaluate(double,double,int): final double a = getA( n, x ); final double b = getB( n, x ); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite( cN ) || Double.isInfinite( q2 )) {     double scaleFactor = 1d;     double lastScaleFactor = 1d;     final int maxPower = 5;     final double scale = FastMath.max( a, b );     if (scale <= 0) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );     }     for (int i = 0; i < maxPower; i++) {         lastScaleFactor = scaleFactor;         scaleFactor *= scale;         if (a != 0.0 && a > b) {             cN = hPrev / lastScaleFactor + b / scaleFactor * p0;             q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;         } else {             if (b != 0) {                 cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;                 q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;             }         }         if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {             break;         }     } } final double deltaN = cN / q2 / cPrev; hN = cPrev * deltaN; if (Double.isInfinite( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x ); } if (Double.isNaN( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x ); } if (FastMath.abs( deltaN - 1.0 ) < epsilon) {     break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2; n++;  =>   final double a = getA( n, x ); final double b = getB( n, x ); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite( cN ) || Double.isInfinite( q2 )) {     double scaleFactor = 1d;     double lastScaleFactor = 1d;     final int maxPower = 5;     final double scale = FastMath.max( a, b );     if (scale <= 0) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );     }     for (int i = 0; i < maxPower; i++) {         lastScaleFactor = scaleFactor;         scaleFactor *= scale;         if (a != 0.0 && a > b) {             cN = hPrev / lastScaleFactor + b / scaleFactor * p0;             q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;         } else {             if (b != 0) {                 cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;                 q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;             }         }         if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {             break;         }     } } final double deltaN = cN / q2 / cPrev; hN = cPrev * deltaN; if (Double.isInfinite( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x ); } if (Double.isNaN( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x ); } dPrev = q1; cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2; n++;
SDL_14:100:double_evaluate(double,double,int): final double a = getA( n, x ); final double b = getB( n, x ); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite( cN ) || Double.isInfinite( q2 )) {     double scaleFactor = 1d;     double lastScaleFactor = 1d;     final int maxPower = 5;     final double scale = FastMath.max( a, b );     if (scale <= 0) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );     }     for (int i = 0; i < maxPower; i++) {         lastScaleFactor = scaleFactor;         scaleFactor *= scale;         if (a != 0.0 && a > b) {             cN = hPrev / lastScaleFactor + b / scaleFactor * p0;             q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;         } else {             if (b != 0) {                 cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;                 q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;             }         }         if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {             break;         }     } } final double deltaN = cN / q2 / cPrev; hN = cPrev * deltaN; if (Double.isInfinite( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x ); } if (Double.isNaN( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x ); } if (FastMath.abs( deltaN - 1.0 ) < epsilon) {     break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2; n++;  =>   final double a = getA( n, x ); final double b = getB( n, x ); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite( cN ) || Double.isInfinite( q2 )) {     double scaleFactor = 1d;     double lastScaleFactor = 1d;     final int maxPower = 5;     final double scale = FastMath.max( a, b );     if (scale <= 0) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );     }     for (int i = 0; i < maxPower; i++) {         lastScaleFactor = scaleFactor;         scaleFactor *= scale;         if (a != 0.0 && a > b) {             cN = hPrev / lastScaleFactor + b / scaleFactor * p0;             q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;         } else {             if (b != 0) {                 cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;                 q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;             }         }         if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {             break;         }     } } final double deltaN = cN / q2 / cPrev; hN = cPrev * deltaN; if (Double.isInfinite( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x ); } if (Double.isNaN( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x ); } if (FastMath.abs( deltaN - 1.0 ) < epsilon) {     break; } cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2; n++;
SDL_15:100:double_evaluate(double,double,int): final double a = getA( n, x ); final double b = getB( n, x ); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite( cN ) || Double.isInfinite( q2 )) {     double scaleFactor = 1d;     double lastScaleFactor = 1d;     final int maxPower = 5;     final double scale = FastMath.max( a, b );     if (scale <= 0) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );     }     for (int i = 0; i < maxPower; i++) {         lastScaleFactor = scaleFactor;         scaleFactor *= scale;         if (a != 0.0 && a > b) {             cN = hPrev / lastScaleFactor + b / scaleFactor * p0;             q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;         } else {             if (b != 0) {                 cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;                 q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;             }         }         if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {             break;         }     } } final double deltaN = cN / q2 / cPrev; hN = cPrev * deltaN; if (Double.isInfinite( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x ); } if (Double.isNaN( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x ); } if (FastMath.abs( deltaN - 1.0 ) < epsilon) {     break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2; n++;  =>   final double a = getA( n, x ); final double b = getB( n, x ); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite( cN ) || Double.isInfinite( q2 )) {     double scaleFactor = 1d;     double lastScaleFactor = 1d;     final int maxPower = 5;     final double scale = FastMath.max( a, b );     if (scale <= 0) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );     }     for (int i = 0; i < maxPower; i++) {         lastScaleFactor = scaleFactor;         scaleFactor *= scale;         if (a != 0.0 && a > b) {             cN = hPrev / lastScaleFactor + b / scaleFactor * p0;             q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;         } else {             if (b != 0) {                 cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;                 q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;             }         }         if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {             break;         }     } } final double deltaN = cN / q2 / cPrev; hN = cPrev * deltaN; if (Double.isInfinite( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x ); } if (Double.isNaN( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x ); } if (FastMath.abs( deltaN - 1.0 ) < epsilon) {     break; } dPrev = q1; p0 = hPrev; hPrev = cN; q1 = q2; n++;
SDL_16:100:double_evaluate(double,double,int): final double a = getA( n, x ); final double b = getB( n, x ); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite( cN ) || Double.isInfinite( q2 )) {     double scaleFactor = 1d;     double lastScaleFactor = 1d;     final int maxPower = 5;     final double scale = FastMath.max( a, b );     if (scale <= 0) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );     }     for (int i = 0; i < maxPower; i++) {         lastScaleFactor = scaleFactor;         scaleFactor *= scale;         if (a != 0.0 && a > b) {             cN = hPrev / lastScaleFactor + b / scaleFactor * p0;             q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;         } else {             if (b != 0) {                 cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;                 q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;             }         }         if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {             break;         }     } } final double deltaN = cN / q2 / cPrev; hN = cPrev * deltaN; if (Double.isInfinite( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x ); } if (Double.isNaN( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x ); } if (FastMath.abs( deltaN - 1.0 ) < epsilon) {     break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2; n++;  =>   final double a = getA( n, x ); final double b = getB( n, x ); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite( cN ) || Double.isInfinite( q2 )) {     double scaleFactor = 1d;     double lastScaleFactor = 1d;     final int maxPower = 5;     final double scale = FastMath.max( a, b );     if (scale <= 0) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );     }     for (int i = 0; i < maxPower; i++) {         lastScaleFactor = scaleFactor;         scaleFactor *= scale;         if (a != 0.0 && a > b) {             cN = hPrev / lastScaleFactor + b / scaleFactor * p0;             q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;         } else {             if (b != 0) {                 cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;                 q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;             }         }         if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {             break;         }     } } final double deltaN = cN / q2 / cPrev; hN = cPrev * deltaN; if (Double.isInfinite( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x ); } if (Double.isNaN( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x ); } if (FastMath.abs( deltaN - 1.0 ) < epsilon) {     break; } dPrev = q1; cPrev = cN / q2; hPrev = cN; q1 = q2; n++;
SDL_17:100:double_evaluate(double,double,int): final double a = getA( n, x ); final double b = getB( n, x ); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite( cN ) || Double.isInfinite( q2 )) {     double scaleFactor = 1d;     double lastScaleFactor = 1d;     final int maxPower = 5;     final double scale = FastMath.max( a, b );     if (scale <= 0) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );     }     for (int i = 0; i < maxPower; i++) {         lastScaleFactor = scaleFactor;         scaleFactor *= scale;         if (a != 0.0 && a > b) {             cN = hPrev / lastScaleFactor + b / scaleFactor * p0;             q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;         } else {             if (b != 0) {                 cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;                 q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;             }         }         if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {             break;         }     } } final double deltaN = cN / q2 / cPrev; hN = cPrev * deltaN; if (Double.isInfinite( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x ); } if (Double.isNaN( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x ); } if (FastMath.abs( deltaN - 1.0 ) < epsilon) {     break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2; n++;  =>   final double a = getA( n, x ); final double b = getB( n, x ); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite( cN ) || Double.isInfinite( q2 )) {     double scaleFactor = 1d;     double lastScaleFactor = 1d;     final int maxPower = 5;     final double scale = FastMath.max( a, b );     if (scale <= 0) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );     }     for (int i = 0; i < maxPower; i++) {         lastScaleFactor = scaleFactor;         scaleFactor *= scale;         if (a != 0.0 && a > b) {             cN = hPrev / lastScaleFactor + b / scaleFactor * p0;             q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;         } else {             if (b != 0) {                 cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;                 q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;             }         }         if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {             break;         }     } } final double deltaN = cN / q2 / cPrev; hN = cPrev * deltaN; if (Double.isInfinite( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x ); } if (Double.isNaN( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x ); } if (FastMath.abs( deltaN - 1.0 ) < epsilon) {     break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; q1 = q2; n++;
SDL_18:100:double_evaluate(double,double,int): final double a = getA( n, x ); final double b = getB( n, x ); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite( cN ) || Double.isInfinite( q2 )) {     double scaleFactor = 1d;     double lastScaleFactor = 1d;     final int maxPower = 5;     final double scale = FastMath.max( a, b );     if (scale <= 0) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );     }     for (int i = 0; i < maxPower; i++) {         lastScaleFactor = scaleFactor;         scaleFactor *= scale;         if (a != 0.0 && a > b) {             cN = hPrev / lastScaleFactor + b / scaleFactor * p0;             q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;         } else {             if (b != 0) {                 cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;                 q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;             }         }         if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {             break;         }     } } final double deltaN = cN / q2 / cPrev; hN = cPrev * deltaN; if (Double.isInfinite( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x ); } if (Double.isNaN( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x ); } if (FastMath.abs( deltaN - 1.0 ) < epsilon) {     break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2; n++;  =>   final double a = getA( n, x ); final double b = getB( n, x ); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite( cN ) || Double.isInfinite( q2 )) {     double scaleFactor = 1d;     double lastScaleFactor = 1d;     final int maxPower = 5;     final double scale = FastMath.max( a, b );     if (scale <= 0) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );     }     for (int i = 0; i < maxPower; i++) {         lastScaleFactor = scaleFactor;         scaleFactor *= scale;         if (a != 0.0 && a > b) {             cN = hPrev / lastScaleFactor + b / scaleFactor * p0;             q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;         } else {             if (b != 0) {                 cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;                 q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;             }         }         if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {             break;         }     } } final double deltaN = cN / q2 / cPrev; hN = cPrev * deltaN; if (Double.isInfinite( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x ); } if (Double.isNaN( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x ); } if (FastMath.abs( deltaN - 1.0 ) < epsilon) {     break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; hPrev = cN; n++;
SDL_19:100:double_evaluate(double,double,int): final double a = getA( n, x ); final double b = getB( n, x ); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite( cN ) || Double.isInfinite( q2 )) {     double scaleFactor = 1d;     double lastScaleFactor = 1d;     final int maxPower = 5;     final double scale = FastMath.max( a, b );     if (scale <= 0) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );     }     for (int i = 0; i < maxPower; i++) {         lastScaleFactor = scaleFactor;         scaleFactor *= scale;         if (a != 0.0 && a > b) {             cN = hPrev / lastScaleFactor + b / scaleFactor * p0;             q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;         } else {             if (b != 0) {                 cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;                 q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;             }         }         if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {             break;         }     } } final double deltaN = cN / q2 / cPrev; hN = cPrev * deltaN; if (Double.isInfinite( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x ); } if (Double.isNaN( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x ); } if (FastMath.abs( deltaN - 1.0 ) < epsilon) {     break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2; n++;  =>   final double a = getA( n, x ); final double b = getB( n, x ); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite( cN ) || Double.isInfinite( q2 )) {     double scaleFactor = 1d;     double lastScaleFactor = 1d;     final int maxPower = 5;     final double scale = FastMath.max( a, b );     if (scale <= 0) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );     }     for (int i = 0; i < maxPower; i++) {         lastScaleFactor = scaleFactor;         scaleFactor *= scale;         if (a != 0.0 && a > b) {             cN = hPrev / lastScaleFactor + b / scaleFactor * p0;             q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;         } else {             if (b != 0) {                 cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;                 q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;             }         }         if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {             break;         }     } } final double deltaN = cN / q2 / cPrev; hN = cPrev * deltaN; if (Double.isInfinite( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x ); } if (Double.isNaN( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x ); } if (FastMath.abs( deltaN - 1.0 ) < epsilon) {     break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2;
SDL_20:102:double_evaluate(double,double,int): while (n < maxIterations) {     final double a = getA( n, x );     final double b = getB( n, x );     double cN = a * hPrev + b * p0;     double q2 = a * q1 + b * dPrev;     if (Double.isInfinite( cN ) || Double.isInfinite( q2 )) {         double scaleFactor = 1d;         double lastScaleFactor = 1d;         final int maxPower = 5;         final double scale = FastMath.max( a, b );         if (scale <= 0) {             throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );         }         for (int i = 0; i < maxPower; i++) {             lastScaleFactor = scaleFactor;             scaleFactor *= scale;             if (a != 0.0 && a > b) {                 cN = hPrev / lastScaleFactor + b / scaleFactor * p0;                 q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;             } else {                 if (b != 0) {                     cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;                     q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;                 }             }             if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {                 break;             }         }     }     final double deltaN = cN / q2 / cPrev;     hN = cPrev * deltaN;     if (Double.isInfinite( hN )) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );     }     if (Double.isNaN( hN )) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x );     }     if (FastMath.abs( deltaN - 1.0 ) < epsilon) {         break;     }     dPrev = q1;     cPrev = cN / q2;     p0 = hPrev;     hPrev = cN;     q1 = q2;     n++; }  =>   while (true) {     final double a = getA( n, x );     final double b = getB( n, x );     double cN = a * hPrev + b * p0;     double q2 = a * q1 + b * dPrev;     if (Double.isInfinite( cN ) || Double.isInfinite( q2 )) {         double scaleFactor = 1d;         double lastScaleFactor = 1d;         final int maxPower = 5;         final double scale = FastMath.max( a, b );         if (scale <= 0) {             throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );         }         for (int i = 0; i < maxPower; i++) {             lastScaleFactor = scaleFactor;             scaleFactor *= scale;             if (a != 0.0 && a > b) {                 cN = hPrev / lastScaleFactor + b / scaleFactor * p0;                 q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;             } else {                 if (b != 0) {                     cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;                     q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;                 }             }             if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {                 break;             }         }     }     final double deltaN = cN / q2 / cPrev;     hN = cPrev * deltaN;     if (Double.isInfinite( hN )) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );     }     if (Double.isNaN( hN )) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x );     }     if (FastMath.abs( deltaN - 1.0 ) < epsilon) {         break;     }     dPrev = q1;     cPrev = cN / q2;     p0 = hPrev;     hPrev = cN;     q1 = q2;     n++; }
SDL_21:80:double_evaluate(double,double,int): double scaleFactor = 1d; double lastScaleFactor = 1d; final int maxPower = 5; final double scale = FastMath.max( a, b ); if (scale <= 0) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x ); } for (int i = 0; i < maxPower; i++) {     lastScaleFactor = scaleFactor;     scaleFactor *= scale;     if (a != 0.0 && a > b) {         cN = hPrev / lastScaleFactor + b / scaleFactor * p0;         q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;     } else {         if (b != 0) {             cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;             q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;         }     }     if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {         break;     } }  =>   double scaleFactor = 1d; double lastScaleFactor = 1d; final int maxPower = 5; final double scale = FastMath.max( a, b ); for (int i = 0; i < maxPower; i++) {     lastScaleFactor = scaleFactor;     scaleFactor *= scale;     if (a != 0.0 && a > b) {         cN = hPrev / lastScaleFactor + b / scaleFactor * p0;         q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;     } else {         if (b != 0) {             cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;             q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;         }     }     if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {         break;     } }
SDL_22:67:double_evaluate(double,double,int): double scaleFactor = 1d; double lastScaleFactor = 1d; final int maxPower = 5; final double scale = FastMath.max( a, b ); if (scale <= 0) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x ); } for (int i = 0; i < maxPower; i++) {     lastScaleFactor = scaleFactor;     scaleFactor *= scale;     if (a != 0.0 && a > b) {         cN = hPrev / lastScaleFactor + b / scaleFactor * p0;         q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;     } else {         if (b != 0) {             cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;             q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;         }     }     if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {         break;     } }  =>   double scaleFactor = 1d; double lastScaleFactor = 1d; final int maxPower = 5; final double scale = FastMath.max( a, b ); if (scale <= 0) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x ); }
SDL_23:84:double_evaluate(double,double,int): if (Double.isInfinite( cN ) || Double.isInfinite( q2 )) {     double scaleFactor = 1d;     double lastScaleFactor = 1d;     final int maxPower = 5;     final double scale = FastMath.max( a, b );     if (scale <= 0) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );     }     for (int i = 0; i < maxPower; i++) {         lastScaleFactor = scaleFactor;         scaleFactor *= scale;         if (a != 0.0 && a > b) {             cN = hPrev / lastScaleFactor + b / scaleFactor * p0;             q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;         } else {             if (b != 0) {                 cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;                 q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;             }         }         if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {             break;         }     } }  =>   if (true) {     double scaleFactor = 1d;     double lastScaleFactor = 1d;     final int maxPower = 5;     final double scale = FastMath.max( a, b );     if (scale <= 0) {         throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );     }     for (int i = 0; i < maxPower; i++) {         lastScaleFactor = scaleFactor;         scaleFactor *= scale;         if (a != 0.0 && a > b) {             cN = hPrev / lastScaleFactor + b / scaleFactor * p0;             q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;         } else {             if (b != 0) {                 cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;                 q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;             }         }         if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {             break;         }     } }
SDL_24:65:double_evaluate(double,double,int): throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );  =>  
SDL_25:67:double_evaluate(double,double,int): if (scale <= 0) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x ); }  =>   if (true) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x ); }
SDL_26:81:double_evaluate(double,double,int): lastScaleFactor = scaleFactor; scaleFactor *= scale; if (a != 0.0 && a > b) {     cN = hPrev / lastScaleFactor + b / scaleFactor * p0;     q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev; } else {     if (b != 0) {         cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;         q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;     } } if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {     break; }  =>   scaleFactor *= scale; if (a != 0.0 && a > b) {     cN = hPrev / lastScaleFactor + b / scaleFactor * p0;     q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev; } else {     if (b != 0) {         cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;         q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;     } } if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {     break; }
SDL_27:81:double_evaluate(double,double,int): lastScaleFactor = scaleFactor; scaleFactor *= scale; if (a != 0.0 && a > b) {     cN = hPrev / lastScaleFactor + b / scaleFactor * p0;     q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev; } else {     if (b != 0) {         cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;         q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;     } } if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {     break; }  =>   lastScaleFactor = scaleFactor; if (a != 0.0 && a > b) {     cN = hPrev / lastScaleFactor + b / scaleFactor * p0;     q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev; } else {     if (b != 0) {         cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;         q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;     } } if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {     break; }
SDL_28:73:double_evaluate(double,double,int): lastScaleFactor = scaleFactor; scaleFactor *= scale; if (a != 0.0 && a > b) {     cN = hPrev / lastScaleFactor + b / scaleFactor * p0;     q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev; } else {     if (b != 0) {         cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;         q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;     } } if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {     break; }  =>   lastScaleFactor = scaleFactor; scaleFactor *= scale; if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {     break; }
SDL_29:79:double_evaluate(double,double,int): lastScaleFactor = scaleFactor; scaleFactor *= scale; if (a != 0.0 && a > b) {     cN = hPrev / lastScaleFactor + b / scaleFactor * p0;     q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev; } else {     if (b != 0) {         cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;         q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;     } } if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {     break; }  =>   lastScaleFactor = scaleFactor; scaleFactor *= scale; if (a != 0.0 && a > b) {     cN = hPrev / lastScaleFactor + b / scaleFactor * p0;     q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev; } else {     if (b != 0) {         cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;         q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;     } }
SDL_30:83:double_evaluate(double,double,int): for (int i = 0; i < maxPower; i++) {     lastScaleFactor = scaleFactor;     scaleFactor *= scale;     if (a != 0.0 && a > b) {         cN = hPrev / lastScaleFactor + b / scaleFactor * p0;         q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;     } else {         if (b != 0) {             cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;             q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;         }     }     if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {         break;     } }  =>   for (int i = 0;; i++) {     lastScaleFactor = scaleFactor;     scaleFactor *= scale;     if (a != 0.0 && a > b) {         cN = hPrev / lastScaleFactor + b / scaleFactor * p0;         q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;     } else {         if (b != 0) {             cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;             q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;         }     }     if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {         break;     } }
SDL_31:83:double_evaluate(double,double,int): for (int i = 0; i < maxPower; i++) {     lastScaleFactor = scaleFactor;     scaleFactor *= scale;     if (a != 0.0 && a > b) {         cN = hPrev / lastScaleFactor + b / scaleFactor * p0;         q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;     } else {         if (b != 0) {             cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;             q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;         }     }     if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {         break;     } }  =>   for (int i = 0; i < maxPower;) {     lastScaleFactor = scaleFactor;     scaleFactor *= scale;     if (a != 0.0 && a > b) {         cN = hPrev / lastScaleFactor + b / scaleFactor * p0;         q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;     } else {         if (b != 0) {             cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;             q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;         }     }     if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {         break;     } }
SDL_32:72:double_evaluate(double,double,int): cN = hPrev / lastScaleFactor + b / scaleFactor * p0; q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;  =>   q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;
SDL_33:72:double_evaluate(double,double,int): cN = hPrev / lastScaleFactor + b / scaleFactor * p0; q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev;  =>   cN = hPrev / lastScaleFactor + b / scaleFactor * p0;
SDL_34:79:double_evaluate(double,double,int): if (a != 0.0 && a > b) {     cN = hPrev / lastScaleFactor + b / scaleFactor * p0;     q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev; } else {     if (b != 0) {         cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;         q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;     } }  =>   if (true) {     cN = hPrev / lastScaleFactor + b / scaleFactor * p0;     q2 = q1 / lastScaleFactor + b / scaleFactor * dPrev; } else {     if (b != 0) {         cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;         q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;     } }
SDL_35:74:double_evaluate(double,double,int): if (b != 0) {     cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;     q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor; }  =>  
SDL_36:76:double_evaluate(double,double,int): cN = a / scaleFactor * hPrev + p0 / lastScaleFactor; q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;  =>   q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;
SDL_37:76:double_evaluate(double,double,int): cN = a / scaleFactor * hPrev + p0 / lastScaleFactor; q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor;  =>   cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;
SDL_38:78:double_evaluate(double,double,int): if (b != 0) {     cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;     q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor; }  =>   if (true) {     cN = a / scaleFactor * hPrev + p0 / lastScaleFactor;     q2 = a / scaleFactor * q1 + dPrev / lastScaleFactor; }
SDL_39:80:double_evaluate(double,double,int): break;  =>  
SDL_40:82:double_evaluate(double,double,int): if (!(Double.isInfinite( cN ) || Double.isInfinite( q2 ))) {     break; }  =>   if (true) {     break; }
SDL_41:87:double_evaluate(double,double,int): throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x );  =>  
SDL_42:89:double_evaluate(double,double,int): if (Double.isInfinite( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x ); }  =>   if (true) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x ); }
SDL_43:90:double_evaluate(double,double,int): throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x );  =>  
SDL_44:92:double_evaluate(double,double,int): if (Double.isNaN( hN )) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x ); }  =>   if (true) {     throw new org.apache.commons.math3.exception.ConvergenceException( LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x ); }
SDL_45:93:double_evaluate(double,double,int): break;  =>  
SDL_46:95:double_evaluate(double,double,int): if (FastMath.abs( deltaN - 1.0 ) < epsilon) {     break; }  =>   if (true) {     break; }
SDL_47:103:double_evaluate(double,double,int): throw new org.apache.commons.math3.exception.MaxCountExceededException( LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x );  =>  
SDL_48:105:double_evaluate(double,double,int): if (n >= maxIterations) {     throw new org.apache.commons.math3.exception.MaxCountExceededException( LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x ); }  =>   if (true) {     throw new org.apache.commons.math3.exception.MaxCountExceededException( LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x ); }
SDL_49:106:double_evaluate(double,double,int): return hN;  =>   return 0;
