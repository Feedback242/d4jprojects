1:COR:includeEndPoints:TRUE:org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):121:includeEndPoints |==> false
2:COR:includeEndPoints:FALSE:org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):121:includeEndPoints |==> true
3:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):122:loc1 != Location.OUTSIDE |==> true
4:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):122:loc2 != Location.OUTSIDE |==> true
5:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):122:(loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE) |==> (loc1 != Location.OUTSIDE) == (loc2 != Location.OUTSIDE)
6:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):122:(loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE) |==> false
7:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):122:(loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE) |==> (loc1 != Location.OUTSIDE)
8:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):122:(loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE) |==> (loc2 != Location.OUTSIDE)
9:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):124:loc1 == Location.INSIDE |==> false
10:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):124:loc2 == Location.INSIDE |==> false
11:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):124:(loc1 == Location.INSIDE) && (loc2 == Location.INSIDE) |==> (loc1 == Location.INSIDE) == (loc2 == Location.INSIDE)
12:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):124:(loc1 == Location.INSIDE) && (loc2 == Location.INSIDE) |==> false
13:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):124:(loc1 == Location.INSIDE) && (loc2 == Location.INSIDE) |==> (loc1 == Location.INSIDE)
14:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):124:(loc1 == Location.INSIDE) && (loc2 == Location.INSIDE) |==> (loc2 == Location.INSIDE)
15:COR:includeEndPoints:TRUE:org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):125:includeEndPoints |==> false
16:COR:includeEndPoints:FALSE:org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):125:includeEndPoints |==> true
17:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):126:loc1 != Location.OUTSIDE |==> true
18:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):126:loc2 != Location.OUTSIDE |==> true
19:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):126:(loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE) |==> (loc1 != Location.OUTSIDE) == (loc2 != Location.OUTSIDE)
20:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):126:(loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE) |==> false
21:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):126:(loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE) |==> (loc1 != Location.OUTSIDE)
22:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):126:(loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE) |==> (loc2 != Location.OUTSIDE)
23:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):128:loc1 == Location.INSIDE |==> false
24:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):128:loc2 == Location.INSIDE |==> false
25:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):128:(loc1 == Location.INSIDE) && (loc2 == Location.INSIDE) |==> (loc1 == Location.INSIDE) == (loc2 == Location.INSIDE)
26:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):128:(loc1 == Location.INSIDE) && (loc2 == Location.INSIDE) |==> false
27:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):128:(loc1 == Location.INSIDE) && (loc2 == Location.INSIDE) |==> (loc1 == Location.INSIDE)
28:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):128:(loc1 == Location.INSIDE) && (loc2 == Location.INSIDE) |==> (loc2 == Location.INSIDE)
29:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):159:crossing == null |==> false
30:ROR:<(double,double):!=(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):162:global < -1.0E-10 |==> global != -1.0E-10
31:ROR:<(double,double):<=(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):162:global < -1.0E-10 |==> global <= -1.0E-10
32:ROR:<(double,double):FALSE(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):162:global < -1.0E-10 |==> false
33:ROR:>(double,double):!=(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):162:global > 1.0E-10 |==> global != 1.0E-10
34:ROR:>(double,double):>=(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):162:global > 1.0E-10 |==> global >= 1.0E-10
35:ROR:>(double,double):FALSE(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):162:global > 1.0E-10 |==> false
36:AOR:-(double,double):%(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):166:thisLine.getAngle() - otherLine.getAngle() |==> thisLine.getAngle() % otherLine.getAngle()
37:AOR:-(double,double):*(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):166:thisLine.getAngle() - otherLine.getAngle() |==> thisLine.getAngle() * otherLine.getAngle()
38:AOR:-(double,double):+(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):166:thisLine.getAngle() - otherLine.getAngle() |==> thisLine.getAngle() + otherLine.getAngle()
39:AOR:-(double,double):/(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):166:thisLine.getAngle() - otherLine.getAngle() |==> thisLine.getAngle() / otherLine.getAngle()
40:ROR:<(double,double):!=(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):166:FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0 |==> FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) != 0
41:ROR:<(double,double):<=(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):166:FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0 |==> FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) <= 0
42:ROR:<(double,double):FALSE(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):166:FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0 |==> false
43:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):180:crossing == null |==> false
44:ROR:<(double,double):!=(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):183:global < -1.0E-10 |==> global != -1.0E-10
45:ROR:<(double,double):<=(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):183:global < -1.0E-10 |==> global <= -1.0E-10
46:ROR:<(double,double):FALSE(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):183:global < -1.0E-10 |==> false
47:AOR:-(double,double):%(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):189:thisLine.getAngle() - otherLine.getAngle() |==> thisLine.getAngle() % otherLine.getAngle()
48:AOR:-(double,double):*(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):189:thisLine.getAngle() - otherLine.getAngle() |==> thisLine.getAngle() * otherLine.getAngle()
49:AOR:-(double,double):+(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):189:thisLine.getAngle() - otherLine.getAngle() |==> thisLine.getAngle() + otherLine.getAngle()
50:AOR:-(double,double):/(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):189:thisLine.getAngle() - otherLine.getAngle() |==> thisLine.getAngle() / otherLine.getAngle()
51:ROR:<(double,double):!=(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):189:FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0 |==> FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) != 0
52:ROR:<(double,double):<=(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):189:FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0 |==> FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) <= 0
53:ROR:<(double,double):FALSE(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):189:FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0 |==> false
54:COR:getRemainingRegion().isEmpty(splitTree.getPlus()):TRUE:org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):195:getRemainingRegion().isEmpty(splitTree.getPlus()) |==> false
55:COR:getRemainingRegion().isEmpty(splitTree.getPlus()):FALSE:org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):195:getRemainingRegion().isEmpty(splitTree.getPlus()) |==> true
56:COR:getRemainingRegion().isEmpty(splitTree.getMinus()):TRUE:org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):199:getRemainingRegion().isEmpty(splitTree.getMinus()) |==> false
57:COR:getRemainingRegion().isEmpty(splitTree.getMinus()):FALSE:org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):199:getRemainingRegion().isEmpty(splitTree.getMinus()) |==> true
