AORB_1:82:org.joda.time.LocalDateTime_fromCalendarFields(java.util.Calendar):calendar.get( Calendar.MONTH ) + 1 => calendar.get( Calendar.MONTH ) * 1
AORB_2:82:org.joda.time.LocalDateTime_fromCalendarFields(java.util.Calendar):calendar.get( Calendar.MONTH ) + 1 => calendar.get( Calendar.MONTH ) / 1
AORB_3:82:org.joda.time.LocalDateTime_fromCalendarFields(java.util.Calendar):calendar.get( Calendar.MONTH ) + 1 => calendar.get( Calendar.MONTH ) % 1
AORB_4:82:org.joda.time.LocalDateTime_fromCalendarFields(java.util.Calendar):calendar.get( Calendar.MONTH ) + 1 => calendar.get( Calendar.MONTH ) - 1
AORB_5:90:org.joda.time.LocalDateTime_fromDateFields(java.util.Date):date.getYear() + 1900 => date.getYear() * 1900
AORB_6:90:org.joda.time.LocalDateTime_fromDateFields(java.util.Date):date.getYear() + 1900 => date.getYear() / 1900
AORB_7:90:org.joda.time.LocalDateTime_fromDateFields(java.util.Date):date.getYear() + 1900 => date.getYear() % 1900
AORB_8:90:org.joda.time.LocalDateTime_fromDateFields(java.util.Date):date.getYear() + 1900 => date.getYear() - 1900
AORB_9:90:org.joda.time.LocalDateTime_fromDateFields(java.util.Date):date.getMonth() + 1 => date.getMonth() * 1
AORB_10:90:org.joda.time.LocalDateTime_fromDateFields(java.util.Date):date.getMonth() + 1 => date.getMonth() / 1
AORB_11:90:org.joda.time.LocalDateTime_fromDateFields(java.util.Date):date.getMonth() + 1 => date.getMonth() % 1
AORB_12:90:org.joda.time.LocalDateTime_fromDateFields(java.util.Date):date.getMonth() + 1 => date.getMonth() - 1
AORB_13:90:org.joda.time.LocalDateTime_fromDateFields(java.util.Date):date.getTime() % 1000 => date.getTime() * 1000
AORB_14:90:org.joda.time.LocalDateTime_fromDateFields(java.util.Date):date.getTime() % 1000 => date.getTime() / 1000
AORB_15:90:org.joda.time.LocalDateTime_fromDateFields(java.util.Date):date.getTime() % 1000 => date.getTime() + 1000
AORB_16:90:org.joda.time.LocalDateTime_fromDateFields(java.util.Date):date.getTime() % 1000 => date.getTime() - 1000
AORB_17:90:org.joda.time.LocalDateTime_fromDateFields(java.util.Date):(int) (date.getTime() % 1000) + 1000 => (int) (date.getTime() % 1000) * 1000
AORB_18:90:org.joda.time.LocalDateTime_fromDateFields(java.util.Date):(int) (date.getTime() % 1000) + 1000 => (int) (date.getTime() % 1000) / 1000
AORB_19:90:org.joda.time.LocalDateTime_fromDateFields(java.util.Date):(int) (date.getTime() % 1000) + 1000 => (int) (date.getTime() % 1000) % 1000
AORB_20:90:org.joda.time.LocalDateTime_fromDateFields(java.util.Date):(int) (date.getTime() % 1000) + 1000 => (int) (date.getTime() % 1000) - 1000
AORB_21:90:org.joda.time.LocalDateTime_fromDateFields(java.util.Date):((int) (date.getTime() % 1000) + 1000) % 1000 => ((int) (date.getTime() % 1000) + 1000) * 1000
AORB_22:90:org.joda.time.LocalDateTime_fromDateFields(java.util.Date):((int) (date.getTime() % 1000) + 1000) % 1000 => ((int) (date.getTime() % 1000) + 1000) / 1000
AORB_23:90:org.joda.time.LocalDateTime_fromDateFields(java.util.Date):((int) (date.getTime() % 1000) + 1000) % 1000 => (int) (date.getTime() % 1000) + 1000 + 1000
AORB_24:90:org.joda.time.LocalDateTime_fromDateFields(java.util.Date):((int) (date.getTime() % 1000) + 1000) % 1000 => (int) (date.getTime() % 1000) + 1000 - 1000
AORB_25:320:java.util.Date_toDate():getYear() - 1900 => getYear() * 1900
AORB_26:320:java.util.Date_toDate():getYear() - 1900 => getYear() / 1900
AORB_27:320:java.util.Date_toDate():getYear() - 1900 => getYear() % 1900
AORB_28:320:java.util.Date_toDate():getYear() - 1900 => getYear() + 1900
AORB_29:320:java.util.Date_toDate():getMonthOfYear() - 1 => getMonthOfYear() * 1
AORB_30:320:java.util.Date_toDate():getMonthOfYear() - 1 => getMonthOfYear() / 1
AORB_31:320:java.util.Date_toDate():getMonthOfYear() - 1 => getMonthOfYear() % 1
AORB_32:320:java.util.Date_toDate():getMonthOfYear() - 1 => getMonthOfYear() + 1
AORB_33:321:java.util.Date_toDate():date.getTime() + getMillisOfSecond() => date.getTime() * getMillisOfSecond()
AORB_34:321:java.util.Date_toDate():date.getTime() + getMillisOfSecond() => date.getTime() / getMillisOfSecond()
AORB_35:321:java.util.Date_toDate():date.getTime() + getMillisOfSecond() => date.getTime() % getMillisOfSecond()
AORB_36:321:java.util.Date_toDate():date.getTime() + getMillisOfSecond() => date.getTime() - getMillisOfSecond()
AORB_37:325:java.util.Date_toDate():date.getTime() + 60000 => date.getTime() * 60000
AORB_38:325:java.util.Date_toDate():date.getTime() + 60000 => date.getTime() / 60000
AORB_39:325:java.util.Date_toDate():date.getTime() + 60000 => date.getTime() % 60000
AORB_40:325:java.util.Date_toDate():date.getTime() + 60000 => date.getTime() - 60000
AORB_41:329:java.util.Date_toDate():date.getTime() - 1000 => date.getTime() * 1000
AORB_42:329:java.util.Date_toDate():date.getTime() - 1000 => date.getTime() / 1000
AORB_43:329:java.util.Date_toDate():date.getTime() - 1000 => date.getTime() % 1000
AORB_44:329:java.util.Date_toDate():date.getTime() - 1000 => date.getTime() + 1000
AORB_45:332:java.util.Date_toDate():date.getTime() + 1000 => date.getTime() * 1000
AORB_46:332:java.util.Date_toDate():date.getTime() + 1000 => date.getTime() / 1000
AORB_47:332:java.util.Date_toDate():date.getTime() + 1000 => date.getTime() % 1000
AORB_48:332:java.util.Date_toDate():date.getTime() + 1000 => date.getTime() - 1000
AORB_49:335:java.util.Date_toDate():date.getTime() - TimeZone.getDefault().getDSTSavings() => date.getTime() * TimeZone.getDefault().getDSTSavings()
AORB_50:335:java.util.Date_toDate():date.getTime() - TimeZone.getDefault().getDSTSavings() => date.getTime() / TimeZone.getDefault().getDSTSavings()
AORB_51:335:java.util.Date_toDate():date.getTime() - TimeZone.getDefault().getDSTSavings() => date.getTime() % TimeZone.getDefault().getDSTSavings()
AORB_52:335:java.util.Date_toDate():date.getTime() - TimeZone.getDefault().getDSTSavings() => date.getTime() + TimeZone.getDefault().getDSTSavings()
ROR_1:52:org.joda.time.LocalDateTime_now(org.joda.time.DateTimeZone): zone == null  =>   zone != null
ROR_2:60:org.joda.time.LocalDateTime_now(org.joda.time.Chronology): chronology == null  =>   chronology != null
ROR_3:78:org.joda.time.LocalDateTime_fromCalendarFields(java.util.Calendar): calendar == null  =>   calendar != null
ROR_4:87:org.joda.time.LocalDateTime_fromDateFields(java.util.Date): date == null  =>   date != null
ROR_5:177:java.lang.Object_readResolve(): iChronology == null  =>   iChronology != null
ROR_6:180:java.lang.Object_readResolve(): DateTimeZone.UTC.equals( iChronology.getZone() ) == false  =>   DateTimeZone.UTC.equals( iChronology.getZone() ) != false
ROR_7:235:int_get(org.joda.time.DateTimeFieldType): type == null  =>   type != null
ROR_8:243:boolean_isSupported(org.joda.time.DateTimeFieldType): type == null  =>   type != null
ROR_9:251:boolean_isSupported(org.joda.time.DurationFieldType): type == null  =>   type != null
ROR_10:269:boolean_equals(java.lang.Object): this == partial  =>   this != partial
ROR_11:275:boolean_equals(java.lang.Object): iLocalMillis == other.iLocalMillis  =>   iLocalMillis > other.iLocalMillis
ROR_12:275:boolean_equals(java.lang.Object): iLocalMillis == other.iLocalMillis  =>   iLocalMillis >= other.iLocalMillis
ROR_13:275:boolean_equals(java.lang.Object): iLocalMillis == other.iLocalMillis  =>   iLocalMillis < other.iLocalMillis
ROR_14:275:boolean_equals(java.lang.Object): iLocalMillis == other.iLocalMillis  =>   iLocalMillis <= other.iLocalMillis
ROR_15:275:boolean_equals(java.lang.Object): iLocalMillis == other.iLocalMillis  =>   iLocalMillis != other.iLocalMillis
ROR_16:275:boolean_equals(java.lang.Object): iLocalMillis == other.iLocalMillis  =>   true
ROR_17:275:boolean_equals(java.lang.Object): iLocalMillis == other.iLocalMillis  =>   false
ROR_18:283:int_compareTo(org.joda.time.ReadablePartial): this == partial  =>   this != partial
ROR_19:289:int_compareTo(org.joda.time.ReadablePartial): iLocalMillis < other.iLocalMillis  =>   iLocalMillis > other.iLocalMillis
ROR_20:289:int_compareTo(org.joda.time.ReadablePartial): iLocalMillis < other.iLocalMillis  =>   iLocalMillis >= other.iLocalMillis
ROR_21:289:int_compareTo(org.joda.time.ReadablePartial): iLocalMillis < other.iLocalMillis  =>   iLocalMillis <= other.iLocalMillis
ROR_22:289:int_compareTo(org.joda.time.ReadablePartial): iLocalMillis < other.iLocalMillis  =>   iLocalMillis == other.iLocalMillis
ROR_23:289:int_compareTo(org.joda.time.ReadablePartial): iLocalMillis < other.iLocalMillis  =>   iLocalMillis != other.iLocalMillis
ROR_24:289:int_compareTo(org.joda.time.ReadablePartial): iLocalMillis < other.iLocalMillis  =>   true
ROR_25:289:int_compareTo(org.joda.time.ReadablePartial): iLocalMillis < other.iLocalMillis  =>   false
ROR_26:289:int_compareTo(org.joda.time.ReadablePartial): iLocalMillis == other.iLocalMillis  =>   iLocalMillis > other.iLocalMillis
ROR_27:289:int_compareTo(org.joda.time.ReadablePartial): iLocalMillis == other.iLocalMillis  =>   iLocalMillis >= other.iLocalMillis
ROR_28:289:int_compareTo(org.joda.time.ReadablePartial): iLocalMillis == other.iLocalMillis  =>   iLocalMillis < other.iLocalMillis
ROR_29:289:int_compareTo(org.joda.time.ReadablePartial): iLocalMillis == other.iLocalMillis  =>   iLocalMillis <= other.iLocalMillis
ROR_30:289:int_compareTo(org.joda.time.ReadablePartial): iLocalMillis == other.iLocalMillis  =>   iLocalMillis != other.iLocalMillis
ROR_31:289:int_compareTo(org.joda.time.ReadablePartial): iLocalMillis == other.iLocalMillis  =>   true
ROR_32:289:int_compareTo(org.joda.time.ReadablePartial): iLocalMillis == other.iLocalMillis  =>   false
ROR_33:328:java.util.Date_toDate(): check.isBefore( this ) == false  =>   check.isBefore( this ) != false
ROR_34:347:org.joda.time.LocalDateTime_withLocalMillis(long): newMillis == getLocalMillis()  =>   newMillis > getLocalMillis()
ROR_35:347:org.joda.time.LocalDateTime_withLocalMillis(long): newMillis == getLocalMillis()  =>   newMillis >= getLocalMillis()
ROR_36:347:org.joda.time.LocalDateTime_withLocalMillis(long): newMillis == getLocalMillis()  =>   newMillis < getLocalMillis()
ROR_37:347:org.joda.time.LocalDateTime_withLocalMillis(long): newMillis == getLocalMillis()  =>   newMillis <= getLocalMillis()
ROR_38:347:org.joda.time.LocalDateTime_withLocalMillis(long): newMillis == getLocalMillis()  =>   newMillis != getLocalMillis()
ROR_39:347:org.joda.time.LocalDateTime_withLocalMillis(long): newMillis == getLocalMillis()  =>   true
ROR_40:347:org.joda.time.LocalDateTime_withLocalMillis(long): newMillis == getLocalMillis()  =>   false
ROR_41:373:org.joda.time.LocalDateTime_withFields(org.joda.time.ReadablePartial): partial == null  =>   partial != null
ROR_42:381:org.joda.time.LocalDateTime_withField(org.joda.time.DateTimeFieldType,int): fieldType == null  =>   fieldType != null
ROR_43:390:org.joda.time.LocalDateTime_withFieldAdded(org.joda.time.DurationFieldType,int): fieldType == null  =>   fieldType != null
ROR_44:393:org.joda.time.LocalDateTime_withFieldAdded(org.joda.time.DurationFieldType,int): amount == 0  =>   amount > 0
ROR_45:393:org.joda.time.LocalDateTime_withFieldAdded(org.joda.time.DurationFieldType,int): amount == 0  =>   amount >= 0
ROR_46:393:org.joda.time.LocalDateTime_withFieldAdded(org.joda.time.DurationFieldType,int): amount == 0  =>   amount < 0
ROR_47:393:org.joda.time.LocalDateTime_withFieldAdded(org.joda.time.DurationFieldType,int): amount == 0  =>   amount <= 0
ROR_48:393:org.joda.time.LocalDateTime_withFieldAdded(org.joda.time.DurationFieldType,int): amount == 0  =>   amount != 0
ROR_49:393:org.joda.time.LocalDateTime_withFieldAdded(org.joda.time.DurationFieldType,int): amount == 0  =>   true
ROR_50:393:org.joda.time.LocalDateTime_withFieldAdded(org.joda.time.DurationFieldType,int): amount == 0  =>   false
ROR_51:402:org.joda.time.LocalDateTime_withDurationAdded(org.joda.time.ReadableDuration,int): durationToAdd == null  =>   durationToAdd != null
ROR_52:402:org.joda.time.LocalDateTime_withDurationAdded(org.joda.time.ReadableDuration,int): scalar == 0  =>   scalar > 0
ROR_53:402:org.joda.time.LocalDateTime_withDurationAdded(org.joda.time.ReadableDuration,int): scalar == 0  =>   scalar >= 0
ROR_54:402:org.joda.time.LocalDateTime_withDurationAdded(org.joda.time.ReadableDuration,int): scalar == 0  =>   scalar < 0
ROR_55:402:org.joda.time.LocalDateTime_withDurationAdded(org.joda.time.ReadableDuration,int): scalar == 0  =>   scalar <= 0
ROR_56:402:org.joda.time.LocalDateTime_withDurationAdded(org.joda.time.ReadableDuration,int): scalar == 0  =>   scalar != 0
ROR_57:402:org.joda.time.LocalDateTime_withDurationAdded(org.joda.time.ReadableDuration,int): scalar == 0  =>   true
ROR_58:402:org.joda.time.LocalDateTime_withDurationAdded(org.joda.time.ReadableDuration,int): scalar == 0  =>   false
ROR_59:411:org.joda.time.LocalDateTime_withPeriodAdded(org.joda.time.ReadablePeriod,int): period == null  =>   period != null
ROR_60:411:org.joda.time.LocalDateTime_withPeriodAdded(org.joda.time.ReadablePeriod,int): scalar == 0  =>   scalar > 0
ROR_61:411:org.joda.time.LocalDateTime_withPeriodAdded(org.joda.time.ReadablePeriod,int): scalar == 0  =>   scalar >= 0
ROR_62:411:org.joda.time.LocalDateTime_withPeriodAdded(org.joda.time.ReadablePeriod,int): scalar == 0  =>   scalar < 0
ROR_63:411:org.joda.time.LocalDateTime_withPeriodAdded(org.joda.time.ReadablePeriod,int): scalar == 0  =>   scalar <= 0
ROR_64:411:org.joda.time.LocalDateTime_withPeriodAdded(org.joda.time.ReadablePeriod,int): scalar == 0  =>   scalar != 0
ROR_65:411:org.joda.time.LocalDateTime_withPeriodAdded(org.joda.time.ReadablePeriod,int): scalar == 0  =>   true
ROR_66:411:org.joda.time.LocalDateTime_withPeriodAdded(org.joda.time.ReadablePeriod,int): scalar == 0  =>   false
ROR_67:430:org.joda.time.LocalDateTime_plusYears(int): years == 0  =>   years > 0
ROR_68:430:org.joda.time.LocalDateTime_plusYears(int): years == 0  =>   years >= 0
ROR_69:430:org.joda.time.LocalDateTime_plusYears(int): years == 0  =>   years < 0
ROR_70:430:org.joda.time.LocalDateTime_plusYears(int): years == 0  =>   years <= 0
ROR_71:430:org.joda.time.LocalDateTime_plusYears(int): years == 0  =>   years != 0
ROR_72:430:org.joda.time.LocalDateTime_plusYears(int): years == 0  =>   true
ROR_73:430:org.joda.time.LocalDateTime_plusYears(int): years == 0  =>   false
ROR_74:439:org.joda.time.LocalDateTime_plusMonths(int): months == 0  =>   months > 0
ROR_75:439:org.joda.time.LocalDateTime_plusMonths(int): months == 0  =>   months >= 0
ROR_76:439:org.joda.time.LocalDateTime_plusMonths(int): months == 0  =>   months < 0
ROR_77:439:org.joda.time.LocalDateTime_plusMonths(int): months == 0  =>   months <= 0
ROR_78:439:org.joda.time.LocalDateTime_plusMonths(int): months == 0  =>   months != 0
ROR_79:439:org.joda.time.LocalDateTime_plusMonths(int): months == 0  =>   true
ROR_80:439:org.joda.time.LocalDateTime_plusMonths(int): months == 0  =>   false
ROR_81:448:org.joda.time.LocalDateTime_plusWeeks(int): weeks == 0  =>   weeks > 0
ROR_82:448:org.joda.time.LocalDateTime_plusWeeks(int): weeks == 0  =>   weeks >= 0
ROR_83:448:org.joda.time.LocalDateTime_plusWeeks(int): weeks == 0  =>   weeks < 0
ROR_84:448:org.joda.time.LocalDateTime_plusWeeks(int): weeks == 0  =>   weeks <= 0
ROR_85:448:org.joda.time.LocalDateTime_plusWeeks(int): weeks == 0  =>   weeks != 0
ROR_86:448:org.joda.time.LocalDateTime_plusWeeks(int): weeks == 0  =>   true
ROR_87:448:org.joda.time.LocalDateTime_plusWeeks(int): weeks == 0  =>   false
ROR_88:457:org.joda.time.LocalDateTime_plusDays(int): days == 0  =>   days > 0
ROR_89:457:org.joda.time.LocalDateTime_plusDays(int): days == 0  =>   days >= 0
ROR_90:457:org.joda.time.LocalDateTime_plusDays(int): days == 0  =>   days < 0
ROR_91:457:org.joda.time.LocalDateTime_plusDays(int): days == 0  =>   days <= 0
ROR_92:457:org.joda.time.LocalDateTime_plusDays(int): days == 0  =>   days != 0
ROR_93:457:org.joda.time.LocalDateTime_plusDays(int): days == 0  =>   true
ROR_94:457:org.joda.time.LocalDateTime_plusDays(int): days == 0  =>   false
ROR_95:466:org.joda.time.LocalDateTime_plusHours(int): hours == 0  =>   hours > 0
ROR_96:466:org.joda.time.LocalDateTime_plusHours(int): hours == 0  =>   hours >= 0
ROR_97:466:org.joda.time.LocalDateTime_plusHours(int): hours == 0  =>   hours < 0
ROR_98:466:org.joda.time.LocalDateTime_plusHours(int): hours == 0  =>   hours <= 0
ROR_99:466:org.joda.time.LocalDateTime_plusHours(int): hours == 0  =>   hours != 0
ROR_100:466:org.joda.time.LocalDateTime_plusHours(int): hours == 0  =>   true
ROR_101:466:org.joda.time.LocalDateTime_plusHours(int): hours == 0  =>   false
ROR_102:475:org.joda.time.LocalDateTime_plusMinutes(int): minutes == 0  =>   minutes > 0
ROR_103:475:org.joda.time.LocalDateTime_plusMinutes(int): minutes == 0  =>   minutes >= 0
ROR_104:475:org.joda.time.LocalDateTime_plusMinutes(int): minutes == 0  =>   minutes < 0
ROR_105:475:org.joda.time.LocalDateTime_plusMinutes(int): minutes == 0  =>   minutes <= 0
ROR_106:475:org.joda.time.LocalDateTime_plusMinutes(int): minutes == 0  =>   minutes != 0
ROR_107:475:org.joda.time.LocalDateTime_plusMinutes(int): minutes == 0  =>   true
ROR_108:475:org.joda.time.LocalDateTime_plusMinutes(int): minutes == 0  =>   false
ROR_109:484:org.joda.time.LocalDateTime_plusSeconds(int): seconds == 0  =>   seconds > 0
ROR_110:484:org.joda.time.LocalDateTime_plusSeconds(int): seconds == 0  =>   seconds >= 0
ROR_111:484:org.joda.time.LocalDateTime_plusSeconds(int): seconds == 0  =>   seconds < 0
ROR_112:484:org.joda.time.LocalDateTime_plusSeconds(int): seconds == 0  =>   seconds <= 0
ROR_113:484:org.joda.time.LocalDateTime_plusSeconds(int): seconds == 0  =>   seconds != 0
ROR_114:484:org.joda.time.LocalDateTime_plusSeconds(int): seconds == 0  =>   true
ROR_115:484:org.joda.time.LocalDateTime_plusSeconds(int): seconds == 0  =>   false
ROR_116:493:org.joda.time.LocalDateTime_plusMillis(int): millis == 0  =>   millis > 0
ROR_117:493:org.joda.time.LocalDateTime_plusMillis(int): millis == 0  =>   millis >= 0
ROR_118:493:org.joda.time.LocalDateTime_plusMillis(int): millis == 0  =>   millis < 0
ROR_119:493:org.joda.time.LocalDateTime_plusMillis(int): millis == 0  =>   millis <= 0
ROR_120:493:org.joda.time.LocalDateTime_plusMillis(int): millis == 0  =>   millis != 0
ROR_121:493:org.joda.time.LocalDateTime_plusMillis(int): millis == 0  =>   true
ROR_122:493:org.joda.time.LocalDateTime_plusMillis(int): millis == 0  =>   false
ROR_123:512:org.joda.time.LocalDateTime_minusYears(int): years == 0  =>   years > 0
ROR_124:512:org.joda.time.LocalDateTime_minusYears(int): years == 0  =>   years >= 0
ROR_125:512:org.joda.time.LocalDateTime_minusYears(int): years == 0  =>   years < 0
ROR_126:512:org.joda.time.LocalDateTime_minusYears(int): years == 0  =>   years <= 0
ROR_127:512:org.joda.time.LocalDateTime_minusYears(int): years == 0  =>   years != 0
ROR_128:512:org.joda.time.LocalDateTime_minusYears(int): years == 0  =>   true
ROR_129:512:org.joda.time.LocalDateTime_minusYears(int): years == 0  =>   false
ROR_130:521:org.joda.time.LocalDateTime_minusMonths(int): months == 0  =>   months > 0
ROR_131:521:org.joda.time.LocalDateTime_minusMonths(int): months == 0  =>   months >= 0
ROR_132:521:org.joda.time.LocalDateTime_minusMonths(int): months == 0  =>   months < 0
ROR_133:521:org.joda.time.LocalDateTime_minusMonths(int): months == 0  =>   months <= 0
ROR_134:521:org.joda.time.LocalDateTime_minusMonths(int): months == 0  =>   months != 0
ROR_135:521:org.joda.time.LocalDateTime_minusMonths(int): months == 0  =>   true
ROR_136:521:org.joda.time.LocalDateTime_minusMonths(int): months == 0  =>   false
ROR_137:530:org.joda.time.LocalDateTime_minusWeeks(int): weeks == 0  =>   weeks > 0
ROR_138:530:org.joda.time.LocalDateTime_minusWeeks(int): weeks == 0  =>   weeks >= 0
ROR_139:530:org.joda.time.LocalDateTime_minusWeeks(int): weeks == 0  =>   weeks < 0
ROR_140:530:org.joda.time.LocalDateTime_minusWeeks(int): weeks == 0  =>   weeks <= 0
ROR_141:530:org.joda.time.LocalDateTime_minusWeeks(int): weeks == 0  =>   weeks != 0
ROR_142:530:org.joda.time.LocalDateTime_minusWeeks(int): weeks == 0  =>   true
ROR_143:530:org.joda.time.LocalDateTime_minusWeeks(int): weeks == 0  =>   false
ROR_144:539:org.joda.time.LocalDateTime_minusDays(int): days == 0  =>   days > 0
ROR_145:539:org.joda.time.LocalDateTime_minusDays(int): days == 0  =>   days >= 0
ROR_146:539:org.joda.time.LocalDateTime_minusDays(int): days == 0  =>   days < 0
ROR_147:539:org.joda.time.LocalDateTime_minusDays(int): days == 0  =>   days <= 0
ROR_148:539:org.joda.time.LocalDateTime_minusDays(int): days == 0  =>   days != 0
ROR_149:539:org.joda.time.LocalDateTime_minusDays(int): days == 0  =>   true
ROR_150:539:org.joda.time.LocalDateTime_minusDays(int): days == 0  =>   false
ROR_151:548:org.joda.time.LocalDateTime_minusHours(int): hours == 0  =>   hours > 0
ROR_152:548:org.joda.time.LocalDateTime_minusHours(int): hours == 0  =>   hours >= 0
ROR_153:548:org.joda.time.LocalDateTime_minusHours(int): hours == 0  =>   hours < 0
ROR_154:548:org.joda.time.LocalDateTime_minusHours(int): hours == 0  =>   hours <= 0
ROR_155:548:org.joda.time.LocalDateTime_minusHours(int): hours == 0  =>   hours != 0
ROR_156:548:org.joda.time.LocalDateTime_minusHours(int): hours == 0  =>   true
ROR_157:548:org.joda.time.LocalDateTime_minusHours(int): hours == 0  =>   false
ROR_158:557:org.joda.time.LocalDateTime_minusMinutes(int): minutes == 0  =>   minutes > 0
ROR_159:557:org.joda.time.LocalDateTime_minusMinutes(int): minutes == 0  =>   minutes >= 0
ROR_160:557:org.joda.time.LocalDateTime_minusMinutes(int): minutes == 0  =>   minutes < 0
ROR_161:557:org.joda.time.LocalDateTime_minusMinutes(int): minutes == 0  =>   minutes <= 0
ROR_162:557:org.joda.time.LocalDateTime_minusMinutes(int): minutes == 0  =>   minutes != 0
ROR_163:557:org.joda.time.LocalDateTime_minusMinutes(int): minutes == 0  =>   true
ROR_164:557:org.joda.time.LocalDateTime_minusMinutes(int): minutes == 0  =>   false
ROR_165:566:org.joda.time.LocalDateTime_minusSeconds(int): seconds == 0  =>   seconds > 0
ROR_166:566:org.joda.time.LocalDateTime_minusSeconds(int): seconds == 0  =>   seconds >= 0
ROR_167:566:org.joda.time.LocalDateTime_minusSeconds(int): seconds == 0  =>   seconds < 0
ROR_168:566:org.joda.time.LocalDateTime_minusSeconds(int): seconds == 0  =>   seconds <= 0
ROR_169:566:org.joda.time.LocalDateTime_minusSeconds(int): seconds == 0  =>   seconds != 0
ROR_170:566:org.joda.time.LocalDateTime_minusSeconds(int): seconds == 0  =>   true
ROR_171:566:org.joda.time.LocalDateTime_minusSeconds(int): seconds == 0  =>   false
ROR_172:575:org.joda.time.LocalDateTime_minusMillis(int): millis == 0  =>   millis > 0
ROR_173:575:org.joda.time.LocalDateTime_minusMillis(int): millis == 0  =>   millis >= 0
ROR_174:575:org.joda.time.LocalDateTime_minusMillis(int): millis == 0  =>   millis < 0
ROR_175:575:org.joda.time.LocalDateTime_minusMillis(int): millis == 0  =>   millis <= 0
ROR_176:575:org.joda.time.LocalDateTime_minusMillis(int): millis == 0  =>   millis != 0
ROR_177:575:org.joda.time.LocalDateTime_minusMillis(int): millis == 0  =>   true
ROR_178:575:org.joda.time.LocalDateTime_minusMillis(int): millis == 0  =>   false
ROR_179:584:org.joda.time.LocalDateTime.Property_property(org.joda.time.DateTimeFieldType): fieldType == null  =>   fieldType != null
ROR_180:587:org.joda.time.LocalDateTime.Property_property(org.joda.time.DateTimeFieldType): isSupported( fieldType ) == false  =>   isSupported( fieldType ) != false
ROR_181:840:java.lang.String_toString(java.lang.String): pattern == null  =>   pattern != null
ROR_182:849:java.lang.String_toString(java.lang.String,java.util.Locale): pattern == null  =>   pattern != null
COR_1:402:org.joda.time.LocalDateTime_withDurationAdded(org.joda.time.ReadableDuration,int): durationToAdd == null || scalar == 0  =>   durationToAdd == null && scalar == 0
COR_2:402:org.joda.time.LocalDateTime_withDurationAdded(org.joda.time.ReadableDuration,int): durationToAdd == null || scalar == 0  =>   durationToAdd == null ^ scalar == 0
COR_3:411:org.joda.time.LocalDateTime_withPeriodAdded(org.joda.time.ReadablePeriod,int): period == null || scalar == 0  =>   period == null && scalar == 0
COR_4:411:org.joda.time.LocalDateTime_withPeriodAdded(org.joda.time.ReadablePeriod,int): period == null || scalar == 0  =>   period == null ^ scalar == 0
SDL_1:53:org.joda.time.LocalDateTime_now(org.joda.time.DateTimeZone): if (zone == null) {     throw new java.lang.NullPointerException( \"Zone must not be null\" ); } return new org.joda.time.LocalDateTime( zone );  =>   return new org.joda.time.LocalDateTime( zone );
SDL_2:53:org.joda.time.LocalDateTime_now(org.joda.time.DateTimeZone): throw new java.lang.NullPointerException( \"Zone must not be null\" );  =>  
SDL_3:55:org.joda.time.LocalDateTime_now(org.joda.time.DateTimeZone): if (zone == null) {     throw new java.lang.NullPointerException( \"Zone must not be null\" ); }  =>   if (true) {     throw new java.lang.NullPointerException( \"Zone must not be null\" ); }
SDL_4:61:org.joda.time.LocalDateTime_now(org.joda.time.Chronology): if (chronology == null) {     throw new java.lang.NullPointerException( \"Chronology must not be null\" ); } return new org.joda.time.LocalDateTime( chronology );  =>   return new org.joda.time.LocalDateTime( chronology );
SDL_5:61:org.joda.time.LocalDateTime_now(org.joda.time.Chronology): throw new java.lang.NullPointerException( \"Chronology must not be null\" );  =>  
SDL_6:63:org.joda.time.LocalDateTime_now(org.joda.time.Chronology): if (chronology == null) {     throw new java.lang.NullPointerException( \"Chronology must not be null\" ); }  =>   if (true) {     throw new java.lang.NullPointerException( \"Chronology must not be null\" ); }
SDL_7:80:org.joda.time.LocalDateTime_fromCalendarFields(java.util.Calendar): if (calendar == null) {     throw new java.lang.IllegalArgumentException( \"The calendar must not be null\" ); } int yearOfEra = calendar.get( Calendar.YEAR ); return new org.joda.time.LocalDateTime( yearOfEra, calendar.get( Calendar.MONTH ) + 1, calendar.get( Calendar.DAY_OF_MONTH ), calendar.get( Calendar.HOUR_OF_DAY ), calendar.get( Calendar.MINUTE ), calendar.get( Calendar.SECOND ), calendar.get( Calendar.MILLISECOND ) );  =>   int yearOfEra = calendar.get( Calendar.YEAR ); return new org.joda.time.LocalDateTime( yearOfEra, calendar.get( Calendar.MONTH ) + 1, calendar.get( Calendar.DAY_OF_MONTH ), calendar.get( Calendar.HOUR_OF_DAY ), calendar.get( Calendar.MINUTE ), calendar.get( Calendar.SECOND ), calendar.get( Calendar.MILLISECOND ) );
SDL_8:79:org.joda.time.LocalDateTime_fromCalendarFields(java.util.Calendar): throw new java.lang.IllegalArgumentException( \"The calendar must not be null\" );  =>  
SDL_9:81:org.joda.time.LocalDateTime_fromCalendarFields(java.util.Calendar): if (calendar == null) {     throw new java.lang.IllegalArgumentException( \"The calendar must not be null\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The calendar must not be null\" ); }
SDL_10:88:org.joda.time.LocalDateTime_fromDateFields(java.util.Date): if (date == null) {     throw new java.lang.IllegalArgumentException( \"The date must not be null\" ); } return new org.joda.time.LocalDateTime( date.getYear() + 1900, date.getMonth() + 1, date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), ((int) (date.getTime() % 1000) + 1000) % 1000 );  =>   return new org.joda.time.LocalDateTime( date.getYear() + 1900, date.getMonth() + 1, date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), ((int) (date.getTime() % 1000) + 1000) % 1000 );
SDL_11:88:org.joda.time.LocalDateTime_fromDateFields(java.util.Date): throw new java.lang.IllegalArgumentException( \"The date must not be null\" );  =>  
SDL_12:90:org.joda.time.LocalDateTime_fromDateFields(java.util.Date): if (date == null) {     throw new java.lang.IllegalArgumentException( \"The date must not be null\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The date must not be null\" ); }
SDL_13:123:LocalDateTime(long,org.joda.time.Chronology): chronology = DateTimeUtils.getChronology( chronology ); long localMillis = chronology.getZone().getMillisKeepLocal( DateTimeZone.UTC, instant ); iLocalMillis = localMillis; iChronology = chronology.withUTC();  =>   long localMillis = chronology.getZone().getMillisKeepLocal( DateTimeZone.UTC, instant ); iLocalMillis = localMillis; iChronology = chronology.withUTC();
SDL_14:123:LocalDateTime(long,org.joda.time.Chronology): chronology = DateTimeUtils.getChronology( chronology ); long localMillis = chronology.getZone().getMillisKeepLocal( DateTimeZone.UTC, instant ); iLocalMillis = localMillis; iChronology = chronology.withUTC();  =>   chronology = DateTimeUtils.getChronology( chronology ); long localMillis = chronology.getZone().getMillisKeepLocal( DateTimeZone.UTC, instant ); iChronology = chronology.withUTC();
SDL_15:123:LocalDateTime(long,org.joda.time.Chronology): chronology = DateTimeUtils.getChronology( chronology ); long localMillis = chronology.getZone().getMillisKeepLocal( DateTimeZone.UTC, instant ); iLocalMillis = localMillis; iChronology = chronology.withUTC();  =>   chronology = DateTimeUtils.getChronology( chronology ); long localMillis = chronology.getZone().getMillisKeepLocal( DateTimeZone.UTC, instant ); iLocalMillis = localMillis;
SDL_16:138:LocalDateTime(java.lang.Object,org.joda.time.DateTimeZone): org.joda.time.convert.PartialConverter converter = ConverterManager.getInstance().getPartialConverter( instant ); org.joda.time.Chronology chronology = converter.getChronology( instant, zone ); chronology = DateTimeUtils.getChronology( chronology ); iChronology = chronology.withUTC(); int[] values = converter.getPartialValues( this, instant, chronology, ISODateTimeFormat.localDateOptionalTimeParser() ); iLocalMillis = iChronology.getDateTimeMillis( values[0], values[1], values[2], values[3] );  =>   org.joda.time.convert.PartialConverter converter = ConverterManager.getInstance().getPartialConverter( instant ); org.joda.time.Chronology chronology = converter.getChronology( instant, zone ); iChronology = chronology.withUTC(); int[] values = converter.getPartialValues( this, instant, chronology, ISODateTimeFormat.localDateOptionalTimeParser() ); iLocalMillis = iChronology.getDateTimeMillis( values[0], values[1], values[2], values[3] );
SDL_17:138:LocalDateTime(java.lang.Object,org.joda.time.DateTimeZone): org.joda.time.convert.PartialConverter converter = ConverterManager.getInstance().getPartialConverter( instant ); org.joda.time.Chronology chronology = converter.getChronology( instant, zone ); chronology = DateTimeUtils.getChronology( chronology ); iChronology = chronology.withUTC(); int[] values = converter.getPartialValues( this, instant, chronology, ISODateTimeFormat.localDateOptionalTimeParser() ); iLocalMillis = iChronology.getDateTimeMillis( values[0], values[1], values[2], values[3] );  =>   org.joda.time.convert.PartialConverter converter = ConverterManager.getInstance().getPartialConverter( instant ); org.joda.time.Chronology chronology = converter.getChronology( instant, zone ); chronology = DateTimeUtils.getChronology( chronology ); int[] values = converter.getPartialValues( this, instant, chronology, ISODateTimeFormat.localDateOptionalTimeParser() ); iLocalMillis = iChronology.getDateTimeMillis( values[0], values[1], values[2], values[3] );
SDL_18:138:LocalDateTime(java.lang.Object,org.joda.time.DateTimeZone): org.joda.time.convert.PartialConverter converter = ConverterManager.getInstance().getPartialConverter( instant ); org.joda.time.Chronology chronology = converter.getChronology( instant, zone ); chronology = DateTimeUtils.getChronology( chronology ); iChronology = chronology.withUTC(); int[] values = converter.getPartialValues( this, instant, chronology, ISODateTimeFormat.localDateOptionalTimeParser() ); iLocalMillis = iChronology.getDateTimeMillis( values[0], values[1], values[2], values[3] );  =>   org.joda.time.convert.PartialConverter converter = ConverterManager.getInstance().getPartialConverter( instant ); org.joda.time.Chronology chronology = converter.getChronology( instant, zone ); chronology = DateTimeUtils.getChronology( chronology ); iChronology = chronology.withUTC(); int[] values = converter.getPartialValues( this, instant, chronology, ISODateTimeFormat.localDateOptionalTimeParser() );
SDL_19:148:LocalDateTime(java.lang.Object,org.joda.time.Chronology): org.joda.time.convert.PartialConverter converter = ConverterManager.getInstance().getPartialConverter( instant ); chronology = converter.getChronology( instant, chronology ); chronology = DateTimeUtils.getChronology( chronology ); iChronology = chronology.withUTC(); int[] values = converter.getPartialValues( this, instant, chronology, ISODateTimeFormat.localDateOptionalTimeParser() ); iLocalMillis = iChronology.getDateTimeMillis( values[0], values[1], values[2], values[3] );  =>   org.joda.time.convert.PartialConverter converter = ConverterManager.getInstance().getPartialConverter( instant ); chronology = DateTimeUtils.getChronology( chronology ); iChronology = chronology.withUTC(); int[] values = converter.getPartialValues( this, instant, chronology, ISODateTimeFormat.localDateOptionalTimeParser() ); iLocalMillis = iChronology.getDateTimeMillis( values[0], values[1], values[2], values[3] );
SDL_20:148:LocalDateTime(java.lang.Object,org.joda.time.Chronology): org.joda.time.convert.PartialConverter converter = ConverterManager.getInstance().getPartialConverter( instant ); chronology = converter.getChronology( instant, chronology ); chronology = DateTimeUtils.getChronology( chronology ); iChronology = chronology.withUTC(); int[] values = converter.getPartialValues( this, instant, chronology, ISODateTimeFormat.localDateOptionalTimeParser() ); iLocalMillis = iChronology.getDateTimeMillis( values[0], values[1], values[2], values[3] );  =>   org.joda.time.convert.PartialConverter converter = ConverterManager.getInstance().getPartialConverter( instant ); chronology = converter.getChronology( instant, chronology ); iChronology = chronology.withUTC(); int[] values = converter.getPartialValues( this, instant, chronology, ISODateTimeFormat.localDateOptionalTimeParser() ); iLocalMillis = iChronology.getDateTimeMillis( values[0], values[1], values[2], values[3] );
SDL_21:148:LocalDateTime(java.lang.Object,org.joda.time.Chronology): org.joda.time.convert.PartialConverter converter = ConverterManager.getInstance().getPartialConverter( instant ); chronology = converter.getChronology( instant, chronology ); chronology = DateTimeUtils.getChronology( chronology ); iChronology = chronology.withUTC(); int[] values = converter.getPartialValues( this, instant, chronology, ISODateTimeFormat.localDateOptionalTimeParser() ); iLocalMillis = iChronology.getDateTimeMillis( values[0], values[1], values[2], values[3] );  =>   org.joda.time.convert.PartialConverter converter = ConverterManager.getInstance().getPartialConverter( instant ); chronology = converter.getChronology( instant, chronology ); chronology = DateTimeUtils.getChronology( chronology ); int[] values = converter.getPartialValues( this, instant, chronology, ISODateTimeFormat.localDateOptionalTimeParser() ); iLocalMillis = iChronology.getDateTimeMillis( values[0], values[1], values[2], values[3] );
SDL_22:148:LocalDateTime(java.lang.Object,org.joda.time.Chronology): org.joda.time.convert.PartialConverter converter = ConverterManager.getInstance().getPartialConverter( instant ); chronology = converter.getChronology( instant, chronology ); chronology = DateTimeUtils.getChronology( chronology ); iChronology = chronology.withUTC(); int[] values = converter.getPartialValues( this, instant, chronology, ISODateTimeFormat.localDateOptionalTimeParser() ); iLocalMillis = iChronology.getDateTimeMillis( values[0], values[1], values[2], values[3] );  =>   org.joda.time.convert.PartialConverter converter = ConverterManager.getInstance().getPartialConverter( instant ); chronology = converter.getChronology( instant, chronology ); chronology = DateTimeUtils.getChronology( chronology ); iChronology = chronology.withUTC(); int[] values = converter.getPartialValues( this, instant, chronology, ISODateTimeFormat.localDateOptionalTimeParser() );
SDL_23:172:LocalDateTime(int,int,int,int,int,int,int,org.joda.time.Chronology): chronology = DateTimeUtils.getChronology( chronology ).withUTC(); long instant = chronology.getDateTimeMillis( year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond ); iChronology = chronology; iLocalMillis = instant;  =>   long instant = chronology.getDateTimeMillis( year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond ); iChronology = chronology; iLocalMillis = instant;
SDL_24:172:LocalDateTime(int,int,int,int,int,int,int,org.joda.time.Chronology): chronology = DateTimeUtils.getChronology( chronology ).withUTC(); long instant = chronology.getDateTimeMillis( year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond ); iChronology = chronology; iLocalMillis = instant;  =>   chronology = DateTimeUtils.getChronology( chronology ).withUTC(); long instant = chronology.getDateTimeMillis( year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond ); iLocalMillis = instant;
SDL_25:172:LocalDateTime(int,int,int,int,int,int,int,org.joda.time.Chronology): chronology = DateTimeUtils.getChronology( chronology ).withUTC(); long instant = chronology.getDateTimeMillis( year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond ); iChronology = chronology; iLocalMillis = instant;  =>   chronology = DateTimeUtils.getChronology( chronology ).withUTC(); long instant = chronology.getDateTimeMillis( year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond ); iChronology = chronology;
SDL_26:181:java.lang.Object_readResolve(): if (iChronology == null) {     return new org.joda.time.LocalDateTime( iLocalMillis, ISOChronology.getInstanceUTC() ); } if (DateTimeZone.UTC.equals( iChronology.getZone() ) == false) {     return new org.joda.time.LocalDateTime( iLocalMillis, iChronology.withUTC() ); } return this;  =>   if (DateTimeZone.UTC.equals( iChronology.getZone() ) == false) {     return new org.joda.time.LocalDateTime( iLocalMillis, iChronology.withUTC() ); } return this;
SDL_27:181:java.lang.Object_readResolve(): if (iChronology == null) {     return new org.joda.time.LocalDateTime( iLocalMillis, ISOChronology.getInstanceUTC() ); } if (DateTimeZone.UTC.equals( iChronology.getZone() ) == false) {     return new org.joda.time.LocalDateTime( iLocalMillis, iChronology.withUTC() ); } return this;  =>   if (iChronology == null) {     return new org.joda.time.LocalDateTime( iLocalMillis, ISOChronology.getInstanceUTC() ); } return this;
SDL_28:180:java.lang.Object_readResolve(): if (iChronology == null) {     return new org.joda.time.LocalDateTime( iLocalMillis, ISOChronology.getInstanceUTC() ); }  =>   if (true) {     return new org.joda.time.LocalDateTime( iLocalMillis, ISOChronology.getInstanceUTC() ); }
SDL_29:183:java.lang.Object_readResolve(): if (DateTimeZone.UTC.equals( iChronology.getZone() ) == false) {     return new org.joda.time.LocalDateTime( iLocalMillis, iChronology.withUTC() ); }  =>   if (true) {     return new org.joda.time.LocalDateTime( iLocalMillis, iChronology.withUTC() ); }
SDL_30:189:int_size(): return 4;  =>   return 0;
SDL_31:193:org.joda.time.DateTimeField_getField(int,org.joda.time.Chronology): switch (index) { case YEAR :     return chrono.year(); case MONTH_OF_YEAR :     return chrono.monthOfYear(); case DAY_OF_MONTH :     return chrono.dayOfMonth(); case MILLIS_OF_DAY :     return chrono.millisOfDay(); default  :     throw new java.lang.IndexOutOfBoundsException( \"Invalid index: \" + index ); }  =>  
SDL_32:207:org.joda.time.DateTimeField_getField(int,org.joda.time.Chronology): throw new java.lang.IndexOutOfBoundsException( \"Invalid index: \" + index );  =>  
SDL_33:206:org.joda.time.DateTimeField_getField(int,org.joda.time.Chronology): case YEAR :     return chrono.year(); case MONTH_OF_YEAR :     return chrono.monthOfYear(); case DAY_OF_MONTH :     return chrono.dayOfMonth(); case MILLIS_OF_DAY :     return chrono.millisOfDay(); default  :     throw new java.lang.IndexOutOfBoundsException( \"Invalid index: \" + index );  =>   case MONTH_OF_YEAR :     return chrono.monthOfYear(); case DAY_OF_MONTH :     return chrono.dayOfMonth(); case MILLIS_OF_DAY :     return chrono.millisOfDay(); default  :     throw new java.lang.IndexOutOfBoundsException( \"Invalid index: \" + index );
SDL_34:206:org.joda.time.DateTimeField_getField(int,org.joda.time.Chronology): case YEAR :     return chrono.year(); case MONTH_OF_YEAR :     return chrono.monthOfYear(); case DAY_OF_MONTH :     return chrono.dayOfMonth(); case MILLIS_OF_DAY :     return chrono.millisOfDay(); default  :     throw new java.lang.IndexOutOfBoundsException( \"Invalid index: \" + index );  =>   case YEAR :     return chrono.year(); case DAY_OF_MONTH :     return chrono.dayOfMonth(); case MILLIS_OF_DAY :     return chrono.millisOfDay(); default  :     throw new java.lang.IndexOutOfBoundsException( \"Invalid index: \" + index );
SDL_35:206:org.joda.time.DateTimeField_getField(int,org.joda.time.Chronology): case YEAR :     return chrono.year(); case MONTH_OF_YEAR :     return chrono.monthOfYear(); case DAY_OF_MONTH :     return chrono.dayOfMonth(); case MILLIS_OF_DAY :     return chrono.millisOfDay(); default  :     throw new java.lang.IndexOutOfBoundsException( \"Invalid index: \" + index );  =>   case YEAR :     return chrono.year(); case MONTH_OF_YEAR :     return chrono.monthOfYear(); case MILLIS_OF_DAY :     return chrono.millisOfDay(); default  :     throw new java.lang.IndexOutOfBoundsException( \"Invalid index: \" + index );
SDL_36:206:org.joda.time.DateTimeField_getField(int,org.joda.time.Chronology): case YEAR :     return chrono.year(); case MONTH_OF_YEAR :     return chrono.monthOfYear(); case DAY_OF_MONTH :     return chrono.dayOfMonth(); case MILLIS_OF_DAY :     return chrono.millisOfDay(); default  :     throw new java.lang.IndexOutOfBoundsException( \"Invalid index: \" + index );  =>   case YEAR :     return chrono.year(); case MONTH_OF_YEAR :     return chrono.monthOfYear(); case DAY_OF_MONTH :     return chrono.dayOfMonth(); default  :     throw new java.lang.IndexOutOfBoundsException( \"Invalid index: \" + index );
SDL_37:206:org.joda.time.DateTimeField_getField(int,org.joda.time.Chronology): case YEAR :     return chrono.year(); case MONTH_OF_YEAR :     return chrono.monthOfYear(); case DAY_OF_MONTH :     return chrono.dayOfMonth(); case MILLIS_OF_DAY :     return chrono.millisOfDay(); default  :     throw new java.lang.IndexOutOfBoundsException( \"Invalid index: \" + index );  =>   case YEAR :     return chrono.year(); case MONTH_OF_YEAR :     return chrono.monthOfYear(); case DAY_OF_MONTH :     return chrono.dayOfMonth(); case MILLIS_OF_DAY :     return chrono.millisOfDay();
SDL_38:214:int_getValue(int): switch (index) { case YEAR :     return getChronology().year().get( getLocalMillis() ); case MONTH_OF_YEAR :     return getChronology().monthOfYear().get( getLocalMillis() ); case DAY_OF_MONTH :     return getChronology().dayOfMonth().get( getLocalMillis() ); case MILLIS_OF_DAY :     return getChronology().millisOfDay().get( getLocalMillis() ); default  :     throw new java.lang.IndexOutOfBoundsException( \"Invalid index: \" + index ); }  =>  
SDL_39:217:int_getValue(int): return getChronology().year().get( getLocalMillis() );  =>   return 0;
SDL_40:220:int_getValue(int): return getChronology().monthOfYear().get( getLocalMillis() );  =>   return 0;
SDL_41:223:int_getValue(int): return getChronology().dayOfMonth().get( getLocalMillis() );  =>   return 0;
SDL_42:226:int_getValue(int): return getChronology().millisOfDay().get( getLocalMillis() );  =>   return 0;
SDL_43:228:int_getValue(int): throw new java.lang.IndexOutOfBoundsException( \"Invalid index: \" + index );  =>  
SDL_44:227:int_getValue(int): case YEAR :     return getChronology().year().get( getLocalMillis() ); case MONTH_OF_YEAR :     return getChronology().monthOfYear().get( getLocalMillis() ); case DAY_OF_MONTH :     return getChronology().dayOfMonth().get( getLocalMillis() ); case MILLIS_OF_DAY :     return getChronology().millisOfDay().get( getLocalMillis() ); default  :     throw new java.lang.IndexOutOfBoundsException( \"Invalid index: \" + index );  =>   case MONTH_OF_YEAR :     return getChronology().monthOfYear().get( getLocalMillis() ); case DAY_OF_MONTH :     return getChronology().dayOfMonth().get( getLocalMillis() ); case MILLIS_OF_DAY :     return getChronology().millisOfDay().get( getLocalMillis() ); default  :     throw new java.lang.IndexOutOfBoundsException( \"Invalid index: \" + index );
SDL_45:227:int_getValue(int): case YEAR :     return getChronology().year().get( getLocalMillis() ); case MONTH_OF_YEAR :     return getChronology().monthOfYear().get( getLocalMillis() ); case DAY_OF_MONTH :     return getChronology().dayOfMonth().get( getLocalMillis() ); case MILLIS_OF_DAY :     return getChronology().millisOfDay().get( getLocalMillis() ); default  :     throw new java.lang.IndexOutOfBoundsException( \"Invalid index: \" + index );  =>   case YEAR :     return getChronology().year().get( getLocalMillis() ); case DAY_OF_MONTH :     return getChronology().dayOfMonth().get( getLocalMillis() ); case MILLIS_OF_DAY :     return getChronology().millisOfDay().get( getLocalMillis() ); default  :     throw new java.lang.IndexOutOfBoundsException( \"Invalid index: \" + index );
SDL_46:227:int_getValue(int): case YEAR :     return getChronology().year().get( getLocalMillis() ); case MONTH_OF_YEAR :     return getChronology().monthOfYear().get( getLocalMillis() ); case DAY_OF_MONTH :     return getChronology().dayOfMonth().get( getLocalMillis() ); case MILLIS_OF_DAY :     return getChronology().millisOfDay().get( getLocalMillis() ); default  :     throw new java.lang.IndexOutOfBoundsException( \"Invalid index: \" + index );  =>   case YEAR :     return getChronology().year().get( getLocalMillis() ); case MONTH_OF_YEAR :     return getChronology().monthOfYear().get( getLocalMillis() ); case MILLIS_OF_DAY :     return getChronology().millisOfDay().get( getLocalMillis() ); default  :     throw new java.lang.IndexOutOfBoundsException( \"Invalid index: \" + index );
SDL_47:227:int_getValue(int): case YEAR :     return getChronology().year().get( getLocalMillis() ); case MONTH_OF_YEAR :     return getChronology().monthOfYear().get( getLocalMillis() ); case DAY_OF_MONTH :     return getChronology().dayOfMonth().get( getLocalMillis() ); case MILLIS_OF_DAY :     return getChronology().millisOfDay().get( getLocalMillis() ); default  :     throw new java.lang.IndexOutOfBoundsException( \"Invalid index: \" + index );  =>   case YEAR :     return getChronology().year().get( getLocalMillis() ); case MONTH_OF_YEAR :     return getChronology().monthOfYear().get( getLocalMillis() ); case DAY_OF_MONTH :     return getChronology().dayOfMonth().get( getLocalMillis() ); default  :     throw new java.lang.IndexOutOfBoundsException( \"Invalid index: \" + index );
SDL_48:227:int_getValue(int): case YEAR :     return getChronology().year().get( getLocalMillis() ); case MONTH_OF_YEAR :     return getChronology().monthOfYear().get( getLocalMillis() ); case DAY_OF_MONTH :     return getChronology().dayOfMonth().get( getLocalMillis() ); case MILLIS_OF_DAY :     return getChronology().millisOfDay().get( getLocalMillis() ); default  :     throw new java.lang.IndexOutOfBoundsException( \"Invalid index: \" + index );  =>   case YEAR :     return getChronology().year().get( getLocalMillis() ); case MONTH_OF_YEAR :     return getChronology().monthOfYear().get( getLocalMillis() ); case DAY_OF_MONTH :     return getChronology().dayOfMonth().get( getLocalMillis() ); case MILLIS_OF_DAY :     return getChronology().millisOfDay().get( getLocalMillis() );
SDL_49:236:int_get(org.joda.time.DateTimeFieldType): if (type == null) {     throw new java.lang.IllegalArgumentException( \"The DateTimeFieldType must not be null\" ); } return type.getField( getChronology() ).get( getLocalMillis() );  =>   return type.getField( getChronology() ).get( getLocalMillis() );
SDL_50:236:int_get(org.joda.time.DateTimeFieldType): throw new java.lang.IllegalArgumentException( \"The DateTimeFieldType must not be null\" );  =>  
SDL_51:238:int_get(org.joda.time.DateTimeFieldType): if (type == null) {     throw new java.lang.IllegalArgumentException( \"The DateTimeFieldType must not be null\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The DateTimeFieldType must not be null\" ); }
SDL_52:239:int_get(org.joda.time.DateTimeFieldType): return type.getField( getChronology() ).get( getLocalMillis() );  =>   return 0;
SDL_53:244:boolean_isSupported(org.joda.time.DateTimeFieldType): if (type == null) {     return false; } return type.getField( getChronology() ).isSupported();  =>   return type.getField( getChronology() ).isSupported();
SDL_54:246:boolean_isSupported(org.joda.time.DateTimeFieldType): if (type == null) {     return false; }  =>   if (true) {     return false; }
SDL_55:245:boolean_isSupported(org.joda.time.DateTimeFieldType): return false;  =>   return true;
SDL_56:247:boolean_isSupported(org.joda.time.DateTimeFieldType): return type.getField( getChronology() ).isSupported();  =>   return true;
SDL_57:247:boolean_isSupported(org.joda.time.DateTimeFieldType): return type.getField( getChronology() ).isSupported();  =>   return false;
SDL_58:252:boolean_isSupported(org.joda.time.DurationFieldType): if (type == null) {     return false; } return type.getField( getChronology() ).isSupported();  =>   return type.getField( getChronology() ).isSupported();
SDL_59:254:boolean_isSupported(org.joda.time.DurationFieldType): if (type == null) {     return false; }  =>   if (true) {     return false; }
SDL_60:253:boolean_isSupported(org.joda.time.DurationFieldType): return false;  =>   return true;
SDL_61:255:boolean_isSupported(org.joda.time.DurationFieldType): return type.getField( getChronology() ).isSupported();  =>   return true;
SDL_62:255:boolean_isSupported(org.joda.time.DurationFieldType): return type.getField( getChronology() ).isSupported();  =>   return false;
SDL_63:260:long_getLocalMillis(): return iLocalMillis;  =>   return 0;
SDL_64:276:boolean_equals(java.lang.Object): if (this == partial) {     return true; } if (partial instanceof org.joda.time.LocalDateTime) {     org.joda.time.LocalDateTime other = (org.joda.time.LocalDateTime) partial;     if (iChronology.equals( other.iChronology )) {         return iLocalMillis == other.iLocalMillis;     } } return super.equals( partial );  =>   if (partial instanceof org.joda.time.LocalDateTime) {     org.joda.time.LocalDateTime other = (org.joda.time.LocalDateTime) partial;     if (iChronology.equals( other.iChronology )) {         return iLocalMillis == other.iLocalMillis;     } } return super.equals( partial );
SDL_65:273:boolean_equals(java.lang.Object): if (this == partial) {     return true; } if (partial instanceof org.joda.time.LocalDateTime) {     org.joda.time.LocalDateTime other = (org.joda.time.LocalDateTime) partial;     if (iChronology.equals( other.iChronology )) {         return iLocalMillis == other.iLocalMillis;     } } return super.equals( partial );  =>   if (this == partial) {     return true; } return super.equals( partial );
SDL_66:272:boolean_equals(java.lang.Object): if (this == partial) {     return true; }  =>   if (true) {     return true; }
SDL_67:271:boolean_equals(java.lang.Object): return true;  =>   return false;
SDL_68:274:boolean_equals(java.lang.Object): org.joda.time.LocalDateTime other = (org.joda.time.LocalDateTime) partial; if (iChronology.equals( other.iChronology )) {     return iLocalMillis == other.iLocalMillis; }  =>   org.joda.time.LocalDateTime other = (org.joda.time.LocalDateTime) partial;
SDL_69:278:boolean_equals(java.lang.Object): if (partial instanceof org.joda.time.LocalDateTime) {     org.joda.time.LocalDateTime other = (org.joda.time.LocalDateTime) partial;     if (iChronology.equals( other.iChronology )) {         return iLocalMillis == other.iLocalMillis;     } }  =>   if (true) {     org.joda.time.LocalDateTime other = (org.joda.time.LocalDateTime) partial;     if (iChronology.equals( other.iChronology )) {         return iLocalMillis == other.iLocalMillis;     } }
SDL_70:277:boolean_equals(java.lang.Object): if (iChronology.equals( other.iChronology )) {     return iLocalMillis == other.iLocalMillis; }  =>   if (true) {     return iLocalMillis == other.iLocalMillis; }
SDL_71:276:boolean_equals(java.lang.Object): return iLocalMillis == other.iLocalMillis;  =>   return true;
SDL_72:276:boolean_equals(java.lang.Object): return iLocalMillis == other.iLocalMillis;  =>   return false;
SDL_73:279:boolean_equals(java.lang.Object): return super.equals( partial );  =>   return true;
SDL_74:279:boolean_equals(java.lang.Object): return super.equals( partial );  =>   return false;
SDL_75:290:int_compareTo(org.joda.time.ReadablePartial): if (this == partial) {     return 0; } if (partial instanceof org.joda.time.LocalDateTime) {     org.joda.time.LocalDateTime other = (org.joda.time.LocalDateTime) partial;     if (iChronology.equals( other.iChronology )) {         return iLocalMillis < other.iLocalMillis ? -1 : iLocalMillis == other.iLocalMillis ? 0 : 1;     } } return super.compareTo( partial );  =>   if (partial instanceof org.joda.time.LocalDateTime) {     org.joda.time.LocalDateTime other = (org.joda.time.LocalDateTime) partial;     if (iChronology.equals( other.iChronology )) {         return iLocalMillis < other.iLocalMillis ? -1 : iLocalMillis == other.iLocalMillis ? 0 : 1;     } } return super.compareTo( partial );
SDL_76:287:int_compareTo(org.joda.time.ReadablePartial): if (this == partial) {     return 0; } if (partial instanceof org.joda.time.LocalDateTime) {     org.joda.time.LocalDateTime other = (org.joda.time.LocalDateTime) partial;     if (iChronology.equals( other.iChronology )) {         return iLocalMillis < other.iLocalMillis ? -1 : iLocalMillis == other.iLocalMillis ? 0 : 1;     } } return super.compareTo( partial );  =>   if (this == partial) {     return 0; } return super.compareTo( partial );
SDL_77:286:int_compareTo(org.joda.time.ReadablePartial): if (this == partial) {     return 0; }  =>   if (true) {     return 0; }
SDL_78:288:int_compareTo(org.joda.time.ReadablePartial): org.joda.time.LocalDateTime other = (org.joda.time.LocalDateTime) partial; if (iChronology.equals( other.iChronology )) {     return iLocalMillis < other.iLocalMillis ? -1 : iLocalMillis == other.iLocalMillis ? 0 : 1; }  =>   org.joda.time.LocalDateTime other = (org.joda.time.LocalDateTime) partial;
SDL_79:292:int_compareTo(org.joda.time.ReadablePartial): if (partial instanceof org.joda.time.LocalDateTime) {     org.joda.time.LocalDateTime other = (org.joda.time.LocalDateTime) partial;     if (iChronology.equals( other.iChronology )) {         return iLocalMillis < other.iLocalMillis ? -1 : iLocalMillis == other.iLocalMillis ? 0 : 1;     } }  =>   if (true) {     org.joda.time.LocalDateTime other = (org.joda.time.LocalDateTime) partial;     if (iChronology.equals( other.iChronology )) {         return iLocalMillis < other.iLocalMillis ? -1 : iLocalMillis == other.iLocalMillis ? 0 : 1;     } }
SDL_80:291:int_compareTo(org.joda.time.ReadablePartial): if (iChronology.equals( other.iChronology )) {     return iLocalMillis < other.iLocalMillis ? -1 : iLocalMillis == other.iLocalMillis ? 0 : 1; }  =>   if (true) {     return iLocalMillis < other.iLocalMillis ? -1 : iLocalMillis == other.iLocalMillis ? 0 : 1; }
SDL_81:290:int_compareTo(org.joda.time.ReadablePartial): return iLocalMillis < other.iLocalMillis ? -1 : iLocalMillis == other.iLocalMillis ? 0 : 1;  =>   return 0;
SDL_82:293:int_compareTo(org.joda.time.ReadablePartial): return super.compareTo( partial );  =>   return 0;
SDL_83:304:org.joda.time.DateTime_toDateTime(org.joda.time.DateTimeZone): zone = DateTimeUtils.getZone( zone ); org.joda.time.Chronology chrono = iChronology.withZone( zone ); return new org.joda.time.DateTime( getYear(), getMonthOfYear(), getDayOfMonth(), getHourOfDay(), getMinuteOfHour(), getSecondOfMinute(), getMillisOfSecond(), chrono );  =>   org.joda.time.Chronology chrono = iChronology.withZone( zone ); return new org.joda.time.DateTime( getYear(), getMonthOfYear(), getDayOfMonth(), getHourOfDay(), getMinuteOfHour(), getSecondOfMinute(), getMillisOfSecond(), chrono );
SDL_84:342:java.util.Date_toDate(): int dom = getDayOfMonth(); java.util.Date date = new java.util.Date( getYear() - 1900, getMonthOfYear() - 1, dom, getHourOfDay(), getMinuteOfHour(), getSecondOfMinute() ); date.setTime( date.getTime() + getMillisOfSecond() ); org.joda.time.LocalDateTime check = LocalDateTime.fromDateFields( date ); if (check.isBefore( this )) {     while (check.isBefore( this )) {         date.setTime( date.getTime() + 60000 );         check = LocalDateTime.fromDateFields( date );     }     while (check.isBefore( this ) == false) {         date.setTime( date.getTime() - 1000 );         check = LocalDateTime.fromDateFields( date );     }     date.setTime( date.getTime() + 1000 ); } else {     if (check.equals( this )) {         java.util.Date earlier = new java.util.Date( date.getTime() - TimeZone.getDefault().getDSTSavings() );         check = LocalDateTime.fromDateFields( earlier );         if (check.equals( this )) {             date = earlier;         }     } } return date;  =>   int dom = getDayOfMonth(); java.util.Date date = new java.util.Date( getYear() - 1900, getMonthOfYear() - 1, dom, getHourOfDay(), getMinuteOfHour(), getSecondOfMinute() ); org.joda.time.LocalDateTime check = LocalDateTime.fromDateFields( date ); if (check.isBefore( this )) {     while (check.isBefore( this )) {         date.setTime( date.getTime() + 60000 );         check = LocalDateTime.fromDateFields( date );     }     while (check.isBefore( this ) == false) {         date.setTime( date.getTime() - 1000 );         check = LocalDateTime.fromDateFields( date );     }     date.setTime( date.getTime() + 1000 ); } else {     if (check.equals( this )) {         java.util.Date earlier = new java.util.Date( date.getTime() - TimeZone.getDefault().getDSTSavings() );         check = LocalDateTime.fromDateFields( earlier );         if (check.equals( this )) {             date = earlier;         }     } } return date;
SDL_85:324:java.util.Date_toDate(): int dom = getDayOfMonth(); java.util.Date date = new java.util.Date( getYear() - 1900, getMonthOfYear() - 1, dom, getHourOfDay(), getMinuteOfHour(), getSecondOfMinute() ); date.setTime( date.getTime() + getMillisOfSecond() ); org.joda.time.LocalDateTime check = LocalDateTime.fromDateFields( date ); if (check.isBefore( this )) {     while (check.isBefore( this )) {         date.setTime( date.getTime() + 60000 );         check = LocalDateTime.fromDateFields( date );     }     while (check.isBefore( this ) == false) {         date.setTime( date.getTime() - 1000 );         check = LocalDateTime.fromDateFields( date );     }     date.setTime( date.getTime() + 1000 ); } else {     if (check.equals( this )) {         java.util.Date earlier = new java.util.Date( date.getTime() - TimeZone.getDefault().getDSTSavings() );         check = LocalDateTime.fromDateFields( earlier );         if (check.equals( this )) {             date = earlier;         }     } } return date;  =>   int dom = getDayOfMonth(); java.util.Date date = new java.util.Date( getYear() - 1900, getMonthOfYear() - 1, dom, getHourOfDay(), getMinuteOfHour(), getSecondOfMinute() ); date.setTime( date.getTime() + getMillisOfSecond() ); org.joda.time.LocalDateTime check = LocalDateTime.fromDateFields( date ); return date;
SDL_86:329:java.util.Date_toDate(): while (check.isBefore( this )) {     date.setTime( date.getTime() + 60000 );     check = LocalDateTime.fromDateFields( date ); } while (check.isBefore( this ) == false) {     date.setTime( date.getTime() - 1000 );     check = LocalDateTime.fromDateFields( date ); } date.setTime( date.getTime() + 1000 );  =>   while (check.isBefore( this ) == false) {     date.setTime( date.getTime() - 1000 );     check = LocalDateTime.fromDateFields( date ); } date.setTime( date.getTime() + 1000 );
SDL_87:329:java.util.Date_toDate(): while (check.isBefore( this )) {     date.setTime( date.getTime() + 60000 );     check = LocalDateTime.fromDateFields( date ); } while (check.isBefore( this ) == false) {     date.setTime( date.getTime() - 1000 );     check = LocalDateTime.fromDateFields( date ); } date.setTime( date.getTime() + 1000 );  =>   while (check.isBefore( this )) {     date.setTime( date.getTime() + 60000 );     check = LocalDateTime.fromDateFields( date ); } date.setTime( date.getTime() + 1000 );
SDL_88:332:java.util.Date_toDate(): while (check.isBefore( this )) {     date.setTime( date.getTime() + 60000 );     check = LocalDateTime.fromDateFields( date ); } while (check.isBefore( this ) == false) {     date.setTime( date.getTime() - 1000 );     check = LocalDateTime.fromDateFields( date ); } date.setTime( date.getTime() + 1000 );  =>   while (check.isBefore( this )) {     date.setTime( date.getTime() + 60000 );     check = LocalDateTime.fromDateFields( date ); } while (check.isBefore( this ) == false) {     date.setTime( date.getTime() - 1000 );     check = LocalDateTime.fromDateFields( date ); }
SDL_89:342:java.util.Date_toDate(): if (check.isBefore( this )) {     while (check.isBefore( this )) {         date.setTime( date.getTime() + 60000 );         check = LocalDateTime.fromDateFields( date );     }     while (check.isBefore( this ) == false) {         date.setTime( date.getTime() - 1000 );         check = LocalDateTime.fromDateFields( date );     }     date.setTime( date.getTime() + 1000 ); } else {     if (check.equals( this )) {         java.util.Date earlier = new java.util.Date( date.getTime() - TimeZone.getDefault().getDSTSavings() );         check = LocalDateTime.fromDateFields( earlier );         if (check.equals( this )) {             date = earlier;         }     } }  =>   if (true) {     while (check.isBefore( this )) {         date.setTime( date.getTime() + 60000 );         check = LocalDateTime.fromDateFields( date );     }     while (check.isBefore( this ) == false) {         date.setTime( date.getTime() - 1000 );         check = LocalDateTime.fromDateFields( date );     }     date.setTime( date.getTime() + 1000 ); } else {     if (check.equals( this )) {         java.util.Date earlier = new java.util.Date( date.getTime() - TimeZone.getDefault().getDSTSavings() );         check = LocalDateTime.fromDateFields( earlier );         if (check.equals( this )) {             date = earlier;         }     } }
SDL_90:334:java.util.Date_toDate(): if (check.equals( this )) {     java.util.Date earlier = new java.util.Date( date.getTime() - TimeZone.getDefault().getDSTSavings() );     check = LocalDateTime.fromDateFields( earlier );     if (check.equals( this )) {         date = earlier;     } }  =>  
SDL_91:326:java.util.Date_toDate(): date.setTime( date.getTime() + 60000 ); check = LocalDateTime.fromDateFields( date );  =>   check = LocalDateTime.fromDateFields( date );
SDL_92:326:java.util.Date_toDate(): date.setTime( date.getTime() + 60000 ); check = LocalDateTime.fromDateFields( date );  =>   date.setTime( date.getTime() + 60000 );
SDL_93:328:java.util.Date_toDate(): while (check.isBefore( this )) {     date.setTime( date.getTime() + 60000 );     check = LocalDateTime.fromDateFields( date ); }  =>   while (true) {     date.setTime( date.getTime() + 60000 );     check = LocalDateTime.fromDateFields( date ); }
SDL_94:330:java.util.Date_toDate(): date.setTime( date.getTime() - 1000 ); check = LocalDateTime.fromDateFields( date );  =>   check = LocalDateTime.fromDateFields( date );
SDL_95:330:java.util.Date_toDate(): date.setTime( date.getTime() - 1000 ); check = LocalDateTime.fromDateFields( date );  =>   date.setTime( date.getTime() - 1000 );
SDL_96:332:java.util.Date_toDate(): while (check.isBefore( this ) == false) {     date.setTime( date.getTime() - 1000 );     check = LocalDateTime.fromDateFields( date ); }  =>   while (true) {     date.setTime( date.getTime() - 1000 );     check = LocalDateTime.fromDateFields( date ); }
SDL_97:339:java.util.Date_toDate(): java.util.Date earlier = new java.util.Date( date.getTime() - TimeZone.getDefault().getDSTSavings() ); check = LocalDateTime.fromDateFields( earlier ); if (check.equals( this )) {     date = earlier; }  =>   java.util.Date earlier = new java.util.Date( date.getTime() - TimeZone.getDefault().getDSTSavings() ); if (check.equals( this )) {     date = earlier; }
SDL_98:337:java.util.Date_toDate(): java.util.Date earlier = new java.util.Date( date.getTime() - TimeZone.getDefault().getDSTSavings() ); check = LocalDateTime.fromDateFields( earlier ); if (check.equals( this )) {     date = earlier; }  =>   java.util.Date earlier = new java.util.Date( date.getTime() - TimeZone.getDefault().getDSTSavings() ); check = LocalDateTime.fromDateFields( earlier );
SDL_99:341:java.util.Date_toDate(): if (check.equals( this )) {     java.util.Date earlier = new java.util.Date( date.getTime() - TimeZone.getDefault().getDSTSavings() );     check = LocalDateTime.fromDateFields( earlier );     if (check.equals( this )) {         date = earlier;     } }  =>   if (true) {     java.util.Date earlier = new java.util.Date( date.getTime() - TimeZone.getDefault().getDSTSavings() );     check = LocalDateTime.fromDateFields( earlier );     if (check.equals( this )) {         date = earlier;     } }
SDL_100:338:java.util.Date_toDate(): date = earlier;  =>  
SDL_101:340:java.util.Date_toDate(): if (check.equals( this )) {     date = earlier; }  =>   if (true) {     date = earlier; }
SDL_102:357:org.joda.time.LocalDateTime_withDate(int,int,int): org.joda.time.Chronology chrono = getChronology(); long instant = getLocalMillis(); instant = chrono.year().set( instant, year ); instant = chrono.monthOfYear().set( instant, monthOfYear ); instant = chrono.dayOfMonth().set( instant, dayOfMonth ); return withLocalMillis( instant );  =>   org.joda.time.Chronology chrono = getChronology(); long instant = getLocalMillis(); instant = chrono.monthOfYear().set( instant, monthOfYear ); instant = chrono.dayOfMonth().set( instant, dayOfMonth ); return withLocalMillis( instant );
SDL_103:357:org.joda.time.LocalDateTime_withDate(int,int,int): org.joda.time.Chronology chrono = getChronology(); long instant = getLocalMillis(); instant = chrono.year().set( instant, year ); instant = chrono.monthOfYear().set( instant, monthOfYear ); instant = chrono.dayOfMonth().set( instant, dayOfMonth ); return withLocalMillis( instant );  =>   org.joda.time.Chronology chrono = getChronology(); long instant = getLocalMillis(); instant = chrono.year().set( instant, year ); instant = chrono.dayOfMonth().set( instant, dayOfMonth ); return withLocalMillis( instant );
SDL_104:357:org.joda.time.LocalDateTime_withDate(int,int,int): org.joda.time.Chronology chrono = getChronology(); long instant = getLocalMillis(); instant = chrono.year().set( instant, year ); instant = chrono.monthOfYear().set( instant, monthOfYear ); instant = chrono.dayOfMonth().set( instant, dayOfMonth ); return withLocalMillis( instant );  =>   org.joda.time.Chronology chrono = getChronology(); long instant = getLocalMillis(); instant = chrono.year().set( instant, year ); instant = chrono.monthOfYear().set( instant, monthOfYear ); return withLocalMillis( instant );
SDL_105:368:org.joda.time.LocalDateTime_withTime(int,int,int,int): org.joda.time.Chronology chrono = getChronology(); long instant = getLocalMillis(); instant = chrono.hourOfDay().set( instant, hourOfDay ); instant = chrono.minuteOfHour().set( instant, minuteOfHour ); instant = chrono.secondOfMinute().set( instant, secondOfMinute ); instant = chrono.millisOfSecond().set( instant, millisOfSecond ); return withLocalMillis( instant );  =>   org.joda.time.Chronology chrono = getChronology(); long instant = getLocalMillis(); instant = chrono.minuteOfHour().set( instant, minuteOfHour ); instant = chrono.secondOfMinute().set( instant, secondOfMinute ); instant = chrono.millisOfSecond().set( instant, millisOfSecond ); return withLocalMillis( instant );
SDL_106:368:org.joda.time.LocalDateTime_withTime(int,int,int,int): org.joda.time.Chronology chrono = getChronology(); long instant = getLocalMillis(); instant = chrono.hourOfDay().set( instant, hourOfDay ); instant = chrono.minuteOfHour().set( instant, minuteOfHour ); instant = chrono.secondOfMinute().set( instant, secondOfMinute ); instant = chrono.millisOfSecond().set( instant, millisOfSecond ); return withLocalMillis( instant );  =>   org.joda.time.Chronology chrono = getChronology(); long instant = getLocalMillis(); instant = chrono.hourOfDay().set( instant, hourOfDay ); instant = chrono.secondOfMinute().set( instant, secondOfMinute ); instant = chrono.millisOfSecond().set( instant, millisOfSecond ); return withLocalMillis( instant );
SDL_107:368:org.joda.time.LocalDateTime_withTime(int,int,int,int): org.joda.time.Chronology chrono = getChronology(); long instant = getLocalMillis(); instant = chrono.hourOfDay().set( instant, hourOfDay ); instant = chrono.minuteOfHour().set( instant, minuteOfHour ); instant = chrono.secondOfMinute().set( instant, secondOfMinute ); instant = chrono.millisOfSecond().set( instant, millisOfSecond ); return withLocalMillis( instant );  =>   org.joda.time.Chronology chrono = getChronology(); long instant = getLocalMillis(); instant = chrono.hourOfDay().set( instant, hourOfDay ); instant = chrono.minuteOfHour().set( instant, minuteOfHour ); instant = chrono.millisOfSecond().set( instant, millisOfSecond ); return withLocalMillis( instant );
SDL_108:368:org.joda.time.LocalDateTime_withTime(int,int,int,int): org.joda.time.Chronology chrono = getChronology(); long instant = getLocalMillis(); instant = chrono.hourOfDay().set( instant, hourOfDay ); instant = chrono.minuteOfHour().set( instant, minuteOfHour ); instant = chrono.secondOfMinute().set( instant, secondOfMinute ); instant = chrono.millisOfSecond().set( instant, millisOfSecond ); return withLocalMillis( instant );  =>   org.joda.time.Chronology chrono = getChronology(); long instant = getLocalMillis(); instant = chrono.hourOfDay().set( instant, hourOfDay ); instant = chrono.minuteOfHour().set( instant, minuteOfHour ); instant = chrono.secondOfMinute().set( instant, secondOfMinute ); return withLocalMillis( instant );
SDL_109:374:org.joda.time.LocalDateTime_withFields(org.joda.time.ReadablePartial): if (partial == null) {     return this; } return withLocalMillis( getChronology().set( partial, getLocalMillis() ) );  =>   return withLocalMillis( getChronology().set( partial, getLocalMillis() ) );
SDL_110:376:org.joda.time.LocalDateTime_withFields(org.joda.time.ReadablePartial): if (partial == null) {     return this; }  =>   if (true) {     return this; }
SDL_111:383:org.joda.time.LocalDateTime_withField(org.joda.time.DateTimeFieldType,int): if (fieldType == null) {     throw new java.lang.IllegalArgumentException( \"Field must not be null\" ); } long instant = fieldType.getField( getChronology() ).set( getLocalMillis(), value ); return withLocalMillis( instant );  =>   long instant = fieldType.getField( getChronology() ).set( getLocalMillis(), value ); return withLocalMillis( instant );
SDL_112:382:org.joda.time.LocalDateTime_withField(org.joda.time.DateTimeFieldType,int): throw new java.lang.IllegalArgumentException( \"Field must not be null\" );  =>  
SDL_113:384:org.joda.time.LocalDateTime_withField(org.joda.time.DateTimeFieldType,int): if (fieldType == null) {     throw new java.lang.IllegalArgumentException( \"Field must not be null\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Field must not be null\" ); }
SDL_114:395:org.joda.time.LocalDateTime_withFieldAdded(org.joda.time.DurationFieldType,int): if (fieldType == null) {     throw new java.lang.IllegalArgumentException( \"Field must not be null\" ); } if (amount == 0) {     return this; } long instant = fieldType.getField( getChronology() ).add( getLocalMillis(), amount ); return withLocalMillis( instant );  =>   if (amount == 0) {     return this; } long instant = fieldType.getField( getChronology() ).add( getLocalMillis(), amount ); return withLocalMillis( instant );
SDL_115:395:org.joda.time.LocalDateTime_withFieldAdded(org.joda.time.DurationFieldType,int): if (fieldType == null) {     throw new java.lang.IllegalArgumentException( \"Field must not be null\" ); } if (amount == 0) {     return this; } long instant = fieldType.getField( getChronology() ).add( getLocalMillis(), amount ); return withLocalMillis( instant );  =>   if (fieldType == null) {     throw new java.lang.IllegalArgumentException( \"Field must not be null\" ); } long instant = fieldType.getField( getChronology() ).add( getLocalMillis(), amount ); return withLocalMillis( instant );
SDL_116:391:org.joda.time.LocalDateTime_withFieldAdded(org.joda.time.DurationFieldType,int): throw new java.lang.IllegalArgumentException( \"Field must not be null\" );  =>  
SDL_117:393:org.joda.time.LocalDateTime_withFieldAdded(org.joda.time.DurationFieldType,int): if (fieldType == null) {     throw new java.lang.IllegalArgumentException( \"Field must not be null\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Field must not be null\" ); }
SDL_118:396:org.joda.time.LocalDateTime_withFieldAdded(org.joda.time.DurationFieldType,int): if (amount == 0) {     return this; }  =>   if (true) {     return this; }
SDL_119:404:org.joda.time.LocalDateTime_withDurationAdded(org.joda.time.ReadableDuration,int): if (durationToAdd == null || scalar == 0) {     return this; } long instant = getChronology().add( getLocalMillis(), durationToAdd.getMillis(), scalar ); return withLocalMillis( instant );  =>   long instant = getChronology().add( getLocalMillis(), durationToAdd.getMillis(), scalar ); return withLocalMillis( instant );
SDL_120:405:org.joda.time.LocalDateTime_withDurationAdded(org.joda.time.ReadableDuration,int): if (durationToAdd == null || scalar == 0) {     return this; }  =>   if (true) {     return this; }
SDL_121:413:org.joda.time.LocalDateTime_withPeriodAdded(org.joda.time.ReadablePeriod,int): if (period == null || scalar == 0) {     return this; } long instant = getChronology().add( period, getLocalMillis(), scalar ); return withLocalMillis( instant );  =>   long instant = getChronology().add( period, getLocalMillis(), scalar ); return withLocalMillis( instant );
SDL_122:414:org.joda.time.LocalDateTime_withPeriodAdded(org.joda.time.ReadablePeriod,int): if (period == null || scalar == 0) {     return this; }  =>   if (true) {     return this; }
SDL_123:432:org.joda.time.LocalDateTime_plusYears(int): if (years == 0) {     return this; } long instant = getChronology().years().add( getLocalMillis(), years ); return withLocalMillis( instant );  =>   long instant = getChronology().years().add( getLocalMillis(), years ); return withLocalMillis( instant );
SDL_124:433:org.joda.time.LocalDateTime_plusYears(int): if (years == 0) {     return this; }  =>   if (true) {     return this; }
SDL_125:441:org.joda.time.LocalDateTime_plusMonths(int): if (months == 0) {     return this; } long instant = getChronology().months().add( getLocalMillis(), months ); return withLocalMillis( instant );  =>   long instant = getChronology().months().add( getLocalMillis(), months ); return withLocalMillis( instant );
SDL_126:442:org.joda.time.LocalDateTime_plusMonths(int): if (months == 0) {     return this; }  =>   if (true) {     return this; }
SDL_127:450:org.joda.time.LocalDateTime_plusWeeks(int): if (weeks == 0) {     return this; } long instant = getChronology().weeks().add( getLocalMillis(), weeks ); return withLocalMillis( instant );  =>   long instant = getChronology().weeks().add( getLocalMillis(), weeks ); return withLocalMillis( instant );
SDL_128:451:org.joda.time.LocalDateTime_plusWeeks(int): if (weeks == 0) {     return this; }  =>   if (true) {     return this; }
SDL_129:459:org.joda.time.LocalDateTime_plusDays(int): if (days == 0) {     return this; } long instant = getChronology().days().add( getLocalMillis(), days ); return withLocalMillis( instant );  =>   long instant = getChronology().days().add( getLocalMillis(), days ); return withLocalMillis( instant );
SDL_130:460:org.joda.time.LocalDateTime_plusDays(int): if (days == 0) {     return this; }  =>   if (true) {     return this; }
SDL_131:468:org.joda.time.LocalDateTime_plusHours(int): if (hours == 0) {     return this; } long instant = getChronology().hours().add( getLocalMillis(), hours ); return withLocalMillis( instant );  =>   long instant = getChronology().hours().add( getLocalMillis(), hours ); return withLocalMillis( instant );
SDL_132:469:org.joda.time.LocalDateTime_plusHours(int): if (hours == 0) {     return this; }  =>   if (true) {     return this; }
SDL_133:477:org.joda.time.LocalDateTime_plusMinutes(int): if (minutes == 0) {     return this; } long instant = getChronology().minutes().add( getLocalMillis(), minutes ); return withLocalMillis( instant );  =>   long instant = getChronology().minutes().add( getLocalMillis(), minutes ); return withLocalMillis( instant );
SDL_134:478:org.joda.time.LocalDateTime_plusMinutes(int): if (minutes == 0) {     return this; }  =>   if (true) {     return this; }
SDL_135:486:org.joda.time.LocalDateTime_plusSeconds(int): if (seconds == 0) {     return this; } long instant = getChronology().seconds().add( getLocalMillis(), seconds ); return withLocalMillis( instant );  =>   long instant = getChronology().seconds().add( getLocalMillis(), seconds ); return withLocalMillis( instant );
SDL_136:487:org.joda.time.LocalDateTime_plusSeconds(int): if (seconds == 0) {     return this; }  =>   if (true) {     return this; }
SDL_137:495:org.joda.time.LocalDateTime_plusMillis(int): if (millis == 0) {     return this; } long instant = getChronology().millis().add( getLocalMillis(), millis ); return withLocalMillis( instant );  =>   long instant = getChronology().millis().add( getLocalMillis(), millis ); return withLocalMillis( instant );
SDL_138:496:org.joda.time.LocalDateTime_plusMillis(int): if (millis == 0) {     return this; }  =>   if (true) {     return this; }
SDL_139:514:org.joda.time.LocalDateTime_minusYears(int): if (years == 0) {     return this; } long instant = getChronology().years().subtract( getLocalMillis(), years ); return withLocalMillis( instant );  =>   long instant = getChronology().years().subtract( getLocalMillis(), years ); return withLocalMillis( instant );
SDL_140:515:org.joda.time.LocalDateTime_minusYears(int): if (years == 0) {     return this; }  =>   if (true) {     return this; }
SDL_141:523:org.joda.time.LocalDateTime_minusMonths(int): if (months == 0) {     return this; } long instant = getChronology().months().subtract( getLocalMillis(), months ); return withLocalMillis( instant );  =>   long instant = getChronology().months().subtract( getLocalMillis(), months ); return withLocalMillis( instant );
SDL_142:524:org.joda.time.LocalDateTime_minusMonths(int): if (months == 0) {     return this; }  =>   if (true) {     return this; }
SDL_143:532:org.joda.time.LocalDateTime_minusWeeks(int): if (weeks == 0) {     return this; } long instant = getChronology().weeks().subtract( getLocalMillis(), weeks ); return withLocalMillis( instant );  =>   long instant = getChronology().weeks().subtract( getLocalMillis(), weeks ); return withLocalMillis( instant );
SDL_144:533:org.joda.time.LocalDateTime_minusWeeks(int): if (weeks == 0) {     return this; }  =>   if (true) {     return this; }
SDL_145:541:org.joda.time.LocalDateTime_minusDays(int): if (days == 0) {     return this; } long instant = getChronology().days().subtract( getLocalMillis(), days ); return withLocalMillis( instant );  =>   long instant = getChronology().days().subtract( getLocalMillis(), days ); return withLocalMillis( instant );
SDL_146:542:org.joda.time.LocalDateTime_minusDays(int): if (days == 0) {     return this; }  =>   if (true) {     return this; }
SDL_147:550:org.joda.time.LocalDateTime_minusHours(int): if (hours == 0) {     return this; } long instant = getChronology().hours().subtract( getLocalMillis(), hours ); return withLocalMillis( instant );  =>   long instant = getChronology().hours().subtract( getLocalMillis(), hours ); return withLocalMillis( instant );
SDL_148:551:org.joda.time.LocalDateTime_minusHours(int): if (hours == 0) {     return this; }  =>   if (true) {     return this; }
SDL_149:559:org.joda.time.LocalDateTime_minusMinutes(int): if (minutes == 0) {     return this; } long instant = getChronology().minutes().subtract( getLocalMillis(), minutes ); return withLocalMillis( instant );  =>   long instant = getChronology().minutes().subtract( getLocalMillis(), minutes ); return withLocalMillis( instant );
SDL_150:560:org.joda.time.LocalDateTime_minusMinutes(int): if (minutes == 0) {     return this; }  =>   if (true) {     return this; }
SDL_151:568:org.joda.time.LocalDateTime_minusSeconds(int): if (seconds == 0) {     return this; } long instant = getChronology().seconds().subtract( getLocalMillis(), seconds ); return withLocalMillis( instant );  =>   long instant = getChronology().seconds().subtract( getLocalMillis(), seconds ); return withLocalMillis( instant );
SDL_152:569:org.joda.time.LocalDateTime_minusSeconds(int): if (seconds == 0) {     return this; }  =>   if (true) {     return this; }
SDL_153:577:org.joda.time.LocalDateTime_minusMillis(int): if (millis == 0) {     return this; } long instant = getChronology().millis().subtract( getLocalMillis(), millis ); return withLocalMillis( instant );  =>   long instant = getChronology().millis().subtract( getLocalMillis(), millis ); return withLocalMillis( instant );
SDL_154:578:org.joda.time.LocalDateTime_minusMillis(int): if (millis == 0) {     return this; }  =>   if (true) {     return this; }
SDL_155:588:org.joda.time.LocalDateTime.Property_property(org.joda.time.DateTimeFieldType): if (fieldType == null) {     throw new java.lang.IllegalArgumentException( \"The DateTimeFieldType must not be null\" ); } if (isSupported( fieldType ) == false) {     throw new java.lang.IllegalArgumentException( \"Field '\" + fieldType + \"' is not supported\" ); } return new org.joda.time.LocalDateTime.Property( this, fieldType.getField( getChronology() ) );  =>   if (isSupported( fieldType ) == false) {     throw new java.lang.IllegalArgumentException( \"Field '\" + fieldType + \"' is not supported\" ); } return new org.joda.time.LocalDateTime.Property( this, fieldType.getField( getChronology() ) );
SDL_156:588:org.joda.time.LocalDateTime.Property_property(org.joda.time.DateTimeFieldType): if (fieldType == null) {     throw new java.lang.IllegalArgumentException( \"The DateTimeFieldType must not be null\" ); } if (isSupported( fieldType ) == false) {     throw new java.lang.IllegalArgumentException( \"Field '\" + fieldType + \"' is not supported\" ); } return new org.joda.time.LocalDateTime.Property( this, fieldType.getField( getChronology() ) );  =>   if (fieldType == null) {     throw new java.lang.IllegalArgumentException( \"The DateTimeFieldType must not be null\" ); } return new org.joda.time.LocalDateTime.Property( this, fieldType.getField( getChronology() ) );
SDL_157:585:org.joda.time.LocalDateTime.Property_property(org.joda.time.DateTimeFieldType): throw new java.lang.IllegalArgumentException( \"The DateTimeFieldType must not be null\" );  =>  
SDL_158:587:org.joda.time.LocalDateTime.Property_property(org.joda.time.DateTimeFieldType): if (fieldType == null) {     throw new java.lang.IllegalArgumentException( \"The DateTimeFieldType must not be null\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"The DateTimeFieldType must not be null\" ); }
SDL_159:588:org.joda.time.LocalDateTime.Property_property(org.joda.time.DateTimeFieldType): throw new java.lang.IllegalArgumentException( \"Field '\" + fieldType + \"' is not supported\" );  =>  
SDL_160:590:org.joda.time.LocalDateTime.Property_property(org.joda.time.DateTimeFieldType): if (isSupported( fieldType ) == false) {     throw new java.lang.IllegalArgumentException( \"Field '\" + fieldType + \"' is not supported\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Field '\" + fieldType + \"' is not supported\" ); }
SDL_161:596:int_getEra(): return getChronology().era().get( getLocalMillis() );  =>   return 0;
SDL_162:601:int_getCenturyOfEra(): return getChronology().centuryOfEra().get( getLocalMillis() );  =>   return 0;
SDL_163:606:int_getYearOfEra(): return getChronology().yearOfEra().get( getLocalMillis() );  =>   return 0;
SDL_164:611:int_getYearOfCentury(): return getChronology().yearOfCentury().get( getLocalMillis() );  =>   return 0;
SDL_165:616:int_getYear(): return getChronology().year().get( getLocalMillis() );  =>   return 0;
SDL_166:621:int_getWeekyear(): return getChronology().weekyear().get( getLocalMillis() );  =>   return 0;
SDL_167:626:int_getMonthOfYear(): return getChronology().monthOfYear().get( getLocalMillis() );  =>   return 0;
SDL_168:631:int_getWeekOfWeekyear(): return getChronology().weekOfWeekyear().get( getLocalMillis() );  =>   return 0;
SDL_169:636:int_getDayOfYear(): return getChronology().dayOfYear().get( getLocalMillis() );  =>   return 0;
SDL_170:641:int_getDayOfMonth(): return getChronology().dayOfMonth().get( getLocalMillis() );  =>   return 0;
SDL_171:646:int_getDayOfWeek(): return getChronology().dayOfWeek().get( getLocalMillis() );  =>   return 0;
SDL_172:651:int_getHourOfDay(): return getChronology().hourOfDay().get( getLocalMillis() );  =>   return 0;
SDL_173:656:int_getMinuteOfHour(): return getChronology().minuteOfHour().get( getLocalMillis() );  =>   return 0;
SDL_174:661:int_getSecondOfMinute(): return getChronology().secondOfMinute().get( getLocalMillis() );  =>   return 0;
SDL_175:666:int_getMillisOfSecond(): return getChronology().millisOfSecond().get( getLocalMillis() );  =>   return 0;
SDL_176:671:int_getMillisOfDay(): return getChronology().millisOfDay().get( getLocalMillis() );  =>   return 0;
SDL_177:836:java.lang.String_toString(): return ISODateTimeFormat.dateTime().print( this );  =>   return \"\";
SDL_178:841:java.lang.String_toString(java.lang.String): if (pattern == null) {     return toString(); } return DateTimeFormat.forPattern( pattern ).print( this );  =>   return DateTimeFormat.forPattern( pattern ).print( this );
SDL_179:843:java.lang.String_toString(java.lang.String): if (pattern == null) {     return toString(); }  =>   if (true) {     return toString(); }
SDL_180:842:java.lang.String_toString(java.lang.String): return toString();  =>   return \"\";
SDL_181:844:java.lang.String_toString(java.lang.String): return DateTimeFormat.forPattern( pattern ).print( this );  =>   return \"\";
SDL_182:850:java.lang.String_toString(java.lang.String,java.util.Locale): if (pattern == null) {     return toString(); } return DateTimeFormat.forPattern( pattern ).withLocale( locale ).print( this );  =>   return DateTimeFormat.forPattern( pattern ).withLocale( locale ).print( this );
SDL_183:852:java.lang.String_toString(java.lang.String,java.util.Locale): if (pattern == null) {     return toString(); }  =>   if (true) {     return toString(); }
SDL_184:851:java.lang.String_toString(java.lang.String,java.util.Locale): return toString();  =>   return \"\";
SDL_185:853:java.lang.String_toString(java.lang.String,java.util.Locale): return DateTimeFormat.forPattern( pattern ).withLocale( locale ).print( this );  =>   return \"\";
SDL_186:868:Property(org.joda.time.LocalDateTime,org.joda.time.DateTimeField): iInstant = instant; iField = field;  =>   iField = field;
SDL_187:868:Property(org.joda.time.LocalDateTime,org.joda.time.DateTimeField): iInstant = instant; iField = field;  =>   iInstant = instant;
SDL_188:875:void_writeObject(java.io.ObjectOutputStream): oos.writeObject( iInstant ); oos.writeObject( iField.getType() );  =>   oos.writeObject( iField.getType() );
SDL_189:875:void_writeObject(java.io.ObjectOutputStream): oos.writeObject( iInstant ); oos.writeObject( iField.getType() );  =>   oos.writeObject( iInstant );
SDL_190:883:void_readObject(java.io.ObjectInputStream): iInstant = (org.joda.time.LocalDateTime) oos.readObject(); org.joda.time.DateTimeFieldType type = (org.joda.time.DateTimeFieldType) oos.readObject(); iField = type.getField( iInstant.getChronology() );  =>   org.joda.time.DateTimeFieldType type = (org.joda.time.DateTimeFieldType) oos.readObject(); iField = type.getField( iInstant.getChronology() );
SDL_191:883:void_readObject(java.io.ObjectInputStream): iInstant = (org.joda.time.LocalDateTime) oos.readObject(); org.joda.time.DateTimeFieldType type = (org.joda.time.DateTimeFieldType) oos.readObject(); iField = type.getField( iInstant.getChronology() );  =>   iInstant = (org.joda.time.LocalDateTime) oos.readObject(); org.joda.time.DateTimeFieldType type = (org.joda.time.DateTimeFieldType) oos.readObject();
SDL_192:894:long_getMillis(): return iInstant.getLocalMillis();  =>   return 0;
