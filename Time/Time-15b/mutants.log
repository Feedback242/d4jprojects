1:ROR:==(int,int):<=(int,int):org.joda.time.field.FieldUtils@safeNegate(int):49:value == Integer.MIN_VALUE |==> value <= Integer.MIN_VALUE
2:ROR:==(int,int):>=(int,int):org.joda.time.field.FieldUtils@safeNegate(int):49:value == Integer.MIN_VALUE |==> value >= Integer.MIN_VALUE
3:ROR:==(int,int):FALSE(int,int):org.joda.time.field.FieldUtils@safeNegate(int):49:value == Integer.MIN_VALUE |==> false
4:AOR:+(int,int):%(int,int):org.joda.time.field.FieldUtils@safeAdd(int,int):64:val1 + val2 |==> val1 % val2
5:AOR:+(int,int):*(int,int):org.joda.time.field.FieldUtils@safeAdd(int,int):64:val1 + val2 |==> val1 * val2
6:AOR:+(int,int):-(int,int):org.joda.time.field.FieldUtils@safeAdd(int,int):64:val1 + val2 |==> val1 - val2
7:AOR:+(int,int):/(int,int):org.joda.time.field.FieldUtils@safeAdd(int,int):64:val1 + val2 |==> val1 / val2
8:ROR:<(int,int):!=(int,int):org.joda.time.field.FieldUtils@safeAdd(int,int):66:(val1 ^ sum) < 0 |==> (val1 ^ sum) != 0
9:ROR:<(int,int):<=(int,int):org.joda.time.field.FieldUtils@safeAdd(int,int):66:(val1 ^ sum) < 0 |==> (val1 ^ sum) <= 0
10:ROR:<(int,int):FALSE(int,int):org.joda.time.field.FieldUtils@safeAdd(int,int):66:(val1 ^ sum) < 0 |==> false
11:ROR:>=(int,int):==(int,int):org.joda.time.field.FieldUtils@safeAdd(int,int):66:(val1 ^ val2) >= 0 |==> (val1 ^ val2) == 0
12:ROR:>=(int,int):>(int,int):org.joda.time.field.FieldUtils@safeAdd(int,int):66:(val1 ^ val2) >= 0 |==> (val1 ^ val2) > 0
13:ROR:>=(int,int):TRUE(int,int):org.joda.time.field.FieldUtils@safeAdd(int,int):66:(val1 ^ val2) >= 0 |==> true
14:COR:&&(boolean,boolean):==(boolean,boolean):org.joda.time.field.FieldUtils@safeAdd(int,int):66:(val1 ^ sum) < 0 && (val1 ^ val2) >= 0 |==> (val1 ^ sum) < 0 == (val1 ^ val2) >= 0
15:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.joda.time.field.FieldUtils@safeAdd(int,int):66:(val1 ^ sum) < 0 && (val1 ^ val2) >= 0 |==> false
16:COR:&&(boolean,boolean):LHS(boolean,boolean):org.joda.time.field.FieldUtils@safeAdd(int,int):66:(val1 ^ sum) < 0 && (val1 ^ val2) >= 0 |==> (val1 ^ sum) < 0
17:COR:&&(boolean,boolean):RHS(boolean,boolean):org.joda.time.field.FieldUtils@safeAdd(int,int):66:(val1 ^ sum) < 0 && (val1 ^ val2) >= 0 |==> (val1 ^ val2) >= 0
18:AOR:+(long,long):%(long,long):org.joda.time.field.FieldUtils@safeAdd(long,long):82:val1 + val2 |==> val1 % val2
19:AOR:+(long,long):*(long,long):org.joda.time.field.FieldUtils@safeAdd(long,long):82:val1 + val2 |==> val1 * val2
20:AOR:+(long,long):-(long,long):org.joda.time.field.FieldUtils@safeAdd(long,long):82:val1 + val2 |==> val1 - val2
21:AOR:+(long,long):/(long,long):org.joda.time.field.FieldUtils@safeAdd(long,long):82:val1 + val2 |==> val1 / val2
22:ROR:<(long,long):!=(long,long):org.joda.time.field.FieldUtils@safeAdd(long,long):84:(val1 ^ sum) < 0 |==> (val1 ^ sum) != 0
23:ROR:<(long,long):<=(long,long):org.joda.time.field.FieldUtils@safeAdd(long,long):84:(val1 ^ sum) < 0 |==> (val1 ^ sum) <= 0
24:ROR:<(long,long):FALSE(long,long):org.joda.time.field.FieldUtils@safeAdd(long,long):84:(val1 ^ sum) < 0 |==> false
25:ROR:>=(long,long):==(long,long):org.joda.time.field.FieldUtils@safeAdd(long,long):84:(val1 ^ val2) >= 0 |==> (val1 ^ val2) == 0
26:ROR:>=(long,long):>(long,long):org.joda.time.field.FieldUtils@safeAdd(long,long):84:(val1 ^ val2) >= 0 |==> (val1 ^ val2) > 0
27:ROR:>=(long,long):TRUE(long,long):org.joda.time.field.FieldUtils@safeAdd(long,long):84:(val1 ^ val2) >= 0 |==> true
28:COR:&&(boolean,boolean):==(boolean,boolean):org.joda.time.field.FieldUtils@safeAdd(long,long):84:(val1 ^ sum) < 0 && (val1 ^ val2) >= 0 |==> (val1 ^ sum) < 0 == (val1 ^ val2) >= 0
29:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.joda.time.field.FieldUtils@safeAdd(long,long):84:(val1 ^ sum) < 0 && (val1 ^ val2) >= 0 |==> false
30:COR:&&(boolean,boolean):LHS(boolean,boolean):org.joda.time.field.FieldUtils@safeAdd(long,long):84:(val1 ^ sum) < 0 && (val1 ^ val2) >= 0 |==> (val1 ^ sum) < 0
31:COR:&&(boolean,boolean):RHS(boolean,boolean):org.joda.time.field.FieldUtils@safeAdd(long,long):84:(val1 ^ sum) < 0 && (val1 ^ val2) >= 0 |==> (val1 ^ val2) >= 0
32:AOR:-(long,long):%(long,long):org.joda.time.field.FieldUtils@safeSubtract(long,long):100:val1 - val2 |==> val1 % val2
33:AOR:-(long,long):*(long,long):org.joda.time.field.FieldUtils@safeSubtract(long,long):100:val1 - val2 |==> val1 * val2
34:AOR:-(long,long):+(long,long):org.joda.time.field.FieldUtils@safeSubtract(long,long):100:val1 - val2 |==> val1 + val2
35:AOR:-(long,long):/(long,long):org.joda.time.field.FieldUtils@safeSubtract(long,long):100:val1 - val2 |==> val1 / val2
36:ROR:<(long,long):!=(long,long):org.joda.time.field.FieldUtils@safeSubtract(long,long):102:(val1 ^ diff) < 0 |==> (val1 ^ diff) != 0
37:ROR:<(long,long):<=(long,long):org.joda.time.field.FieldUtils@safeSubtract(long,long):102:(val1 ^ diff) < 0 |==> (val1 ^ diff) <= 0
38:ROR:<(long,long):FALSE(long,long):org.joda.time.field.FieldUtils@safeSubtract(long,long):102:(val1 ^ diff) < 0 |==> false
39:ROR:<(long,long):!=(long,long):org.joda.time.field.FieldUtils@safeSubtract(long,long):102:(val1 ^ val2) < 0 |==> (val1 ^ val2) != 0
40:ROR:<(long,long):<=(long,long):org.joda.time.field.FieldUtils@safeSubtract(long,long):102:(val1 ^ val2) < 0 |==> (val1 ^ val2) <= 0
41:ROR:<(long,long):FALSE(long,long):org.joda.time.field.FieldUtils@safeSubtract(long,long):102:(val1 ^ val2) < 0 |==> false
42:COR:&&(boolean,boolean):==(boolean,boolean):org.joda.time.field.FieldUtils@safeSubtract(long,long):102:(val1 ^ diff) < 0 && (val1 ^ val2) < 0 |==> (val1 ^ diff) < 0 == (val1 ^ val2) < 0
43:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.joda.time.field.FieldUtils@safeSubtract(long,long):102:(val1 ^ diff) < 0 && (val1 ^ val2) < 0 |==> false
44:COR:&&(boolean,boolean):LHS(boolean,boolean):org.joda.time.field.FieldUtils@safeSubtract(long,long):102:(val1 ^ diff) < 0 && (val1 ^ val2) < 0 |==> (val1 ^ diff) < 0
45:COR:&&(boolean,boolean):RHS(boolean,boolean):org.joda.time.field.FieldUtils@safeSubtract(long,long):102:(val1 ^ diff) < 0 && (val1 ^ val2) < 0 |==> (val1 ^ val2) < 0
46:AOR:*(long,long):%(long,long):org.joda.time.field.FieldUtils@safeMultiply(int,int):119:(long)val1 * (long)val2 |==> (long)val1 % (long)val2
47:AOR:*(long,long):+(long,long):org.joda.time.field.FieldUtils@safeMultiply(int,int):119:(long)val1 * (long)val2 |==> (long)val1 + (long)val2
48:AOR:*(long,long):-(long,long):org.joda.time.field.FieldUtils@safeMultiply(int,int):119:(long)val1 * (long)val2 |==> (long)val1 - (long)val2
49:AOR:*(long,long):/(long,long):org.joda.time.field.FieldUtils@safeMultiply(int,int):119:(long)val1 * (long)val2 |==> (long)val1 / (long)val2
50:ROR:<(long,long):!=(long,long):org.joda.time.field.FieldUtils@safeMultiply(int,int):120:total < Integer.MIN_VALUE |==> total != Integer.MIN_VALUE
51:ROR:<(long,long):<=(long,long):org.joda.time.field.FieldUtils@safeMultiply(int,int):120:total < Integer.MIN_VALUE |==> total <= Integer.MIN_VALUE
52:ROR:<(long,long):FALSE(long,long):org.joda.time.field.FieldUtils@safeMultiply(int,int):120:total < Integer.MIN_VALUE |==> false
53:ROR:>(long,long):!=(long,long):org.joda.time.field.FieldUtils@safeMultiply(int,int):120:total > Integer.MAX_VALUE |==> total != Integer.MAX_VALUE
54:ROR:>(long,long):>=(long,long):org.joda.time.field.FieldUtils@safeMultiply(int,int):120:total > Integer.MAX_VALUE |==> total >= Integer.MAX_VALUE
55:ROR:>(long,long):FALSE(long,long):org.joda.time.field.FieldUtils@safeMultiply(int,int):120:total > Integer.MAX_VALUE |==> false
56:COR:||(boolean,boolean):!=(boolean,boolean):org.joda.time.field.FieldUtils@safeMultiply(int,int):120:total < Integer.MIN_VALUE || total > Integer.MAX_VALUE |==> total < Integer.MIN_VALUE != total > Integer.MAX_VALUE
57:COR:||(boolean,boolean):LHS(boolean,boolean):org.joda.time.field.FieldUtils@safeMultiply(int,int):120:total < Integer.MIN_VALUE || total > Integer.MAX_VALUE |==> total < Integer.MIN_VALUE
58:COR:||(boolean,boolean):RHS(boolean,boolean):org.joda.time.field.FieldUtils@safeMultiply(int,int):120:total < Integer.MIN_VALUE || total > Integer.MAX_VALUE |==> total > Integer.MAX_VALUE
59:COR:||(boolean,boolean):TRUE(boolean,boolean):org.joda.time.field.FieldUtils@safeMultiply(int,int):120:total < Integer.MIN_VALUE || total > Integer.MAX_VALUE |==> true
60:AOR:*(long,long):%(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,int):144:val1 * val2 |==> val1 % val2
61:AOR:*(long,long):+(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,int):144:val1 * val2 |==> val1 + val2
62:AOR:*(long,long):-(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,int):144:val1 * val2 |==> val1 - val2
63:AOR:*(long,long):/(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,int):144:val1 * val2 |==> val1 / val2
64:AOR:/(long,long):%(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,int):145:total / val2 |==> total % val2
65:AOR:/(long,long):*(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,int):145:total / val2 |==> total * val2
66:AOR:/(long,long):+(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,int):145:total / val2 |==> total + val2
67:AOR:/(long,long):-(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,int):145:total / val2 |==> total - val2
68:ROR:!=(long,long):<(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,int):145:total / val2 != val1 |==> total / val2 < val1
69:ROR:!=(long,long):>(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,int):145:total / val2 != val1 |==> total / val2 > val1
70:ROR:!=(long,long):TRUE(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,int):145:total / val2 != val1 |==> true
71:ROR:==(long,long):<=(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,long):160:val2 == 1 |==> val2 <= 1
72:ROR:==(long,long):>=(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,long):160:val2 == 1 |==> val2 >= 1
73:ROR:==(long,long):FALSE(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,long):160:val2 == 1 |==> false
74:ROR:==(long,long):<=(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,long):163:val1 == 1 |==> val1 <= 1
75:ROR:==(long,long):>=(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,long):163:val1 == 1 |==> val1 >= 1
76:ROR:==(long,long):FALSE(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,long):163:val1 == 1 |==> false
77:ROR:==(long,long):<=(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,long):166:val1 == 0 |==> val1 <= 0
78:ROR:==(long,long):>=(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,long):166:val1 == 0 |==> val1 >= 0
79:ROR:==(long,long):FALSE(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,long):166:val1 == 0 |==> false
80:ROR:==(long,long):<=(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,long):166:val2 == 0 |==> val2 <= 0
81:ROR:==(long,long):>=(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,long):166:val2 == 0 |==> val2 >= 0
82:ROR:==(long,long):FALSE(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,long):166:val2 == 0 |==> false
83:COR:||(boolean,boolean):!=(boolean,boolean):org.joda.time.field.FieldUtils@safeMultiply(long,long):166:val1 == 0 || val2 == 0 |==> val1 == 0 != (val2 == 0)
84:COR:||(boolean,boolean):LHS(boolean,boolean):org.joda.time.field.FieldUtils@safeMultiply(long,long):166:val1 == 0 || val2 == 0 |==> val1 == 0
85:COR:||(boolean,boolean):RHS(boolean,boolean):org.joda.time.field.FieldUtils@safeMultiply(long,long):166:val1 == 0 || val2 == 0 |==> val2 == 0
86:COR:||(boolean,boolean):TRUE(boolean,boolean):org.joda.time.field.FieldUtils@safeMultiply(long,long):166:val1 == 0 || val2 == 0 |==> true
87:AOR:*(long,long):%(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,long):169:val1 * val2 |==> val1 % val2
88:AOR:*(long,long):+(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,long):169:val1 * val2 |==> val1 + val2
89:AOR:*(long,long):-(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,long):169:val1 * val2 |==> val1 - val2
90:AOR:*(long,long):/(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,long):169:val1 * val2 |==> val1 / val2
91:AOR:/(long,long):%(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,long):170:total / val2 |==> total % val2
92:AOR:/(long,long):*(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,long):170:total / val2 |==> total * val2
93:AOR:/(long,long):+(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,long):170:total / val2 |==> total + val2
94:AOR:/(long,long):-(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,long):170:total / val2 |==> total - val2
95:ROR:!=(long,long):<(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,long):170:total / val2 != val1 |==> total / val2 < val1
96:ROR:!=(long,long):>(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,long):170:total / val2 != val1 |==> total / val2 > val1
97:ROR:!=(long,long):TRUE(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,long):170:total / val2 != val1 |==> true
98:ROR:==(long,long):<=(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,long):170:val1 == Long.MIN_VALUE |==> val1 <= Long.MIN_VALUE
99:ROR:==(long,long):>=(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,long):170:val1 == Long.MIN_VALUE |==> val1 >= Long.MIN_VALUE
100:ROR:==(long,long):FALSE(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,long):170:val1 == Long.MIN_VALUE |==> false
101:ROR:==(long,long):<=(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,long):170:val2 == -1 |==> val2 <= -1
102:ROR:==(long,long):>=(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,long):170:val2 == -1 |==> val2 >= -1
103:ROR:==(long,long):FALSE(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,long):170:val2 == -1 |==> false
104:COR:&&(boolean,boolean):==(boolean,boolean):org.joda.time.field.FieldUtils@safeMultiply(long,long):170:val1 == Long.MIN_VALUE && val2 == -1 |==> val1 == Long.MIN_VALUE == (val2 == -1)
105:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.joda.time.field.FieldUtils@safeMultiply(long,long):170:val1 == Long.MIN_VALUE && val2 == -1 |==> false
106:COR:&&(boolean,boolean):LHS(boolean,boolean):org.joda.time.field.FieldUtils@safeMultiply(long,long):170:val1 == Long.MIN_VALUE && val2 == -1 |==> val1 == Long.MIN_VALUE
107:COR:&&(boolean,boolean):RHS(boolean,boolean):org.joda.time.field.FieldUtils@safeMultiply(long,long):170:val1 == Long.MIN_VALUE && val2 == -1 |==> val2 == -1
108:COR:||(boolean,boolean):!=(boolean,boolean):org.joda.time.field.FieldUtils@safeMultiply(long,long):170:total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 |==> total / val2 != val1 != (val1 == Long.MIN_VALUE && val2 == -1)
109:COR:||(boolean,boolean):LHS(boolean,boolean):org.joda.time.field.FieldUtils@safeMultiply(long,long):170:total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 |==> total / val2 != val1
110:COR:||(boolean,boolean):RHS(boolean,boolean):org.joda.time.field.FieldUtils@safeMultiply(long,long):170:total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 |==> val1 == Long.MIN_VALUE && val2 == -1
111:COR:||(boolean,boolean):TRUE(boolean,boolean):org.joda.time.field.FieldUtils@safeMultiply(long,long):170:total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 |==> true
112:ROR:==(long,long):<=(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,long):170:val2 == Long.MIN_VALUE |==> val2 <= Long.MIN_VALUE
113:ROR:==(long,long):>=(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,long):170:val2 == Long.MIN_VALUE |==> val2 >= Long.MIN_VALUE
114:ROR:==(long,long):FALSE(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,long):170:val2 == Long.MIN_VALUE |==> false
115:ROR:==(long,long):<=(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,long):170:val1 == -1 |==> val1 <= -1
116:ROR:==(long,long):>=(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,long):170:val1 == -1 |==> val1 >= -1
117:ROR:==(long,long):FALSE(long,long):org.joda.time.field.FieldUtils@safeMultiply(long,long):170:val1 == -1 |==> false
118:COR:&&(boolean,boolean):==(boolean,boolean):org.joda.time.field.FieldUtils@safeMultiply(long,long):170:val2 == Long.MIN_VALUE && val1 == -1 |==> val2 == Long.MIN_VALUE == (val1 == -1)
119:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.joda.time.field.FieldUtils@safeMultiply(long,long):170:val2 == Long.MIN_VALUE && val1 == -1 |==> false
120:COR:&&(boolean,boolean):LHS(boolean,boolean):org.joda.time.field.FieldUtils@safeMultiply(long,long):170:val2 == Long.MIN_VALUE && val1 == -1 |==> val2 == Long.MIN_VALUE
121:COR:&&(boolean,boolean):RHS(boolean,boolean):org.joda.time.field.FieldUtils@safeMultiply(long,long):170:val2 == Long.MIN_VALUE && val1 == -1 |==> val1 == -1
122:COR:||(boolean,boolean):!=(boolean,boolean):org.joda.time.field.FieldUtils@safeMultiply(long,long):170:total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1 |==> (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1) != (val2 == Long.MIN_VALUE && val1 == -1)
123:COR:||(boolean,boolean):LHS(boolean,boolean):org.joda.time.field.FieldUtils@safeMultiply(long,long):170:total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1 |==> total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1
124:COR:||(boolean,boolean):RHS(boolean,boolean):org.joda.time.field.FieldUtils@safeMultiply(long,long):170:total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1 |==> val2 == Long.MIN_VALUE && val1 == -1
125:COR:||(boolean,boolean):TRUE(boolean,boolean):org.joda.time.field.FieldUtils@safeMultiply(long,long):170:total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1 |==> true
126:ROR:<=(long,long):<(long,long):org.joda.time.field.FieldUtils@safeToInt(long):184:Integer.MIN_VALUE <= value |==> Integer.MIN_VALUE < value
127:ROR:<=(long,long):==(long,long):org.joda.time.field.FieldUtils@safeToInt(long):184:Integer.MIN_VALUE <= value |==> Integer.MIN_VALUE == value
128:ROR:<=(long,long):TRUE(long,long):org.joda.time.field.FieldUtils@safeToInt(long):184:Integer.MIN_VALUE <= value |==> true
129:ROR:<=(long,long):<(long,long):org.joda.time.field.FieldUtils@safeToInt(long):184:value <= Integer.MAX_VALUE |==> value < Integer.MAX_VALUE
130:ROR:<=(long,long):==(long,long):org.joda.time.field.FieldUtils@safeToInt(long):184:value <= Integer.MAX_VALUE |==> value == Integer.MAX_VALUE
131:ROR:<=(long,long):TRUE(long,long):org.joda.time.field.FieldUtils@safeToInt(long):184:value <= Integer.MAX_VALUE |==> true
132:COR:&&(boolean,boolean):==(boolean,boolean):org.joda.time.field.FieldUtils@safeToInt(long):184:Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE |==> Integer.MIN_VALUE <= value == value <= Integer.MAX_VALUE
133:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.joda.time.field.FieldUtils@safeToInt(long):184:Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE |==> false
134:COR:&&(boolean,boolean):LHS(boolean,boolean):org.joda.time.field.FieldUtils@safeToInt(long):184:Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE |==> Integer.MIN_VALUE <= value
135:COR:&&(boolean,boolean):RHS(boolean,boolean):org.joda.time.field.FieldUtils@safeToInt(long):184:Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE |==> value <= Integer.MAX_VALUE
136:ROR:<(int,int):!=(int,int):org.joda.time.field.FieldUtils@verifyValueBounds(org.joda.time.DateTimeField,int,int,int):214:value < lowerBound |==> value != lowerBound
137:ROR:<(int,int):<=(int,int):org.joda.time.field.FieldUtils@verifyValueBounds(org.joda.time.DateTimeField,int,int,int):214:value < lowerBound |==> value <= lowerBound
138:ROR:<(int,int):FALSE(int,int):org.joda.time.field.FieldUtils@verifyValueBounds(org.joda.time.DateTimeField,int,int,int):214:value < lowerBound |==> false
139:ROR:>(int,int):!=(int,int):org.joda.time.field.FieldUtils@verifyValueBounds(org.joda.time.DateTimeField,int,int,int):214:value > upperBound |==> value != upperBound
140:ROR:>(int,int):>=(int,int):org.joda.time.field.FieldUtils@verifyValueBounds(org.joda.time.DateTimeField,int,int,int):214:value > upperBound |==> value >= upperBound
141:ROR:>(int,int):FALSE(int,int):org.joda.time.field.FieldUtils@verifyValueBounds(org.joda.time.DateTimeField,int,int,int):214:value > upperBound |==> false
142:COR:||(boolean,boolean):!=(boolean,boolean):org.joda.time.field.FieldUtils@verifyValueBounds(org.joda.time.DateTimeField,int,int,int):214:(value < lowerBound) || (value > upperBound) |==> (value < lowerBound) != (value > upperBound)
143:COR:||(boolean,boolean):LHS(boolean,boolean):org.joda.time.field.FieldUtils@verifyValueBounds(org.joda.time.DateTimeField,int,int,int):214:(value < lowerBound) || (value > upperBound) |==> (value < lowerBound)
144:COR:||(boolean,boolean):RHS(boolean,boolean):org.joda.time.field.FieldUtils@verifyValueBounds(org.joda.time.DateTimeField,int,int,int):214:(value < lowerBound) || (value > upperBound) |==> (value > upperBound)
145:COR:||(boolean,boolean):TRUE(boolean,boolean):org.joda.time.field.FieldUtils@verifyValueBounds(org.joda.time.DateTimeField,int,int,int):214:(value < lowerBound) || (value > upperBound) |==> true
146:ROR:<(int,int):!=(int,int):org.joda.time.field.FieldUtils@verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int):232:value < lowerBound |==> value != lowerBound
147:ROR:<(int,int):<=(int,int):org.joda.time.field.FieldUtils@verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int):232:value < lowerBound |==> value <= lowerBound
148:ROR:<(int,int):FALSE(int,int):org.joda.time.field.FieldUtils@verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int):232:value < lowerBound |==> false
149:ROR:>(int,int):!=(int,int):org.joda.time.field.FieldUtils@verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int):232:value > upperBound |==> value != upperBound
150:ROR:>(int,int):>=(int,int):org.joda.time.field.FieldUtils@verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int):232:value > upperBound |==> value >= upperBound
151:ROR:>(int,int):FALSE(int,int):org.joda.time.field.FieldUtils@verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int):232:value > upperBound |==> false
152:COR:||(boolean,boolean):!=(boolean,boolean):org.joda.time.field.FieldUtils@verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int):232:(value < lowerBound) || (value > upperBound) |==> (value < lowerBound) != (value > upperBound)
153:COR:||(boolean,boolean):LHS(boolean,boolean):org.joda.time.field.FieldUtils@verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int):232:(value < lowerBound) || (value > upperBound) |==> (value < lowerBound)
154:COR:||(boolean,boolean):RHS(boolean,boolean):org.joda.time.field.FieldUtils@verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int):232:(value < lowerBound) || (value > upperBound) |==> (value > upperBound)
155:COR:||(boolean,boolean):TRUE(boolean,boolean):org.joda.time.field.FieldUtils@verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int):232:(value < lowerBound) || (value > upperBound) |==> true
156:ROR:<(int,int):!=(int,int):org.joda.time.field.FieldUtils@verifyValueBounds(java.lang.String,int,int,int):249:value < lowerBound |==> value != lowerBound
157:ROR:<(int,int):<=(int,int):org.joda.time.field.FieldUtils@verifyValueBounds(java.lang.String,int,int,int):249:value < lowerBound |==> value <= lowerBound
158:ROR:<(int,int):FALSE(int,int):org.joda.time.field.FieldUtils@verifyValueBounds(java.lang.String,int,int,int):249:value < lowerBound |==> false
159:ROR:>(int,int):!=(int,int):org.joda.time.field.FieldUtils@verifyValueBounds(java.lang.String,int,int,int):249:value > upperBound |==> value != upperBound
160:ROR:>(int,int):>=(int,int):org.joda.time.field.FieldUtils@verifyValueBounds(java.lang.String,int,int,int):249:value > upperBound |==> value >= upperBound
161:ROR:>(int,int):FALSE(int,int):org.joda.time.field.FieldUtils@verifyValueBounds(java.lang.String,int,int,int):249:value > upperBound |==> false
162:COR:||(boolean,boolean):!=(boolean,boolean):org.joda.time.field.FieldUtils@verifyValueBounds(java.lang.String,int,int,int):249:(value < lowerBound) || (value > upperBound) |==> (value < lowerBound) != (value > upperBound)
163:COR:||(boolean,boolean):LHS(boolean,boolean):org.joda.time.field.FieldUtils@verifyValueBounds(java.lang.String,int,int,int):249:(value < lowerBound) || (value > upperBound) |==> (value < lowerBound)
164:COR:||(boolean,boolean):RHS(boolean,boolean):org.joda.time.field.FieldUtils@verifyValueBounds(java.lang.String,int,int,int):249:(value < lowerBound) || (value > upperBound) |==> (value > upperBound)
165:COR:||(boolean,boolean):TRUE(boolean,boolean):org.joda.time.field.FieldUtils@verifyValueBounds(java.lang.String,int,int,int):249:(value < lowerBound) || (value > upperBound) |==> true
166:AOR:+(int,int):%(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int,int):273:currentValue + wrapValue |==> currentValue % wrapValue
167:AOR:+(int,int):*(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int,int):273:currentValue + wrapValue |==> currentValue * wrapValue
168:AOR:+(int,int):-(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int,int):273:currentValue + wrapValue |==> currentValue - wrapValue
169:AOR:+(int,int):/(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int,int):273:currentValue + wrapValue |==> currentValue / wrapValue
170:ROR:>=(int,int):==(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):289:minValue >= maxValue |==> minValue == maxValue
171:ROR:>=(int,int):>(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):289:minValue >= maxValue |==> minValue > maxValue
172:ROR:>=(int,int):TRUE(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):289:minValue >= maxValue |==> true
173:AOR:-(int,int):%(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):293:maxValue - minValue |==> maxValue % minValue
174:AOR:-(int,int):*(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):293:maxValue - minValue |==> maxValue * minValue
175:AOR:-(int,int):+(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):293:maxValue - minValue |==> maxValue + minValue
176:AOR:-(int,int):/(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):293:maxValue - minValue |==> maxValue / minValue
177:AOR:+(int,int):%(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):293:maxValue - minValue + 1 |==> (maxValue - minValue) % 1
178:AOR:+(int,int):*(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):293:maxValue - minValue + 1 |==> (maxValue - minValue) * 1
179:AOR:+(int,int):-(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):293:maxValue - minValue + 1 |==> maxValue - minValue - 1
180:AOR:+(int,int):/(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):293:maxValue - minValue + 1 |==> (maxValue - minValue) / 1
181:ROR:>=(int,int):==(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):296:value >= 0 |==> value == 0
182:ROR:>=(int,int):>(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):296:value >= 0 |==> value > 0
183:ROR:>=(int,int):TRUE(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):296:value >= 0 |==> true
184:AOR:%(int,int):*(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):297:value % wrapRange |==> value * wrapRange
185:AOR:%(int,int):+(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):297:value % wrapRange |==> value + wrapRange
186:AOR:%(int,int):-(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):297:value % wrapRange |==> value - wrapRange
187:AOR:%(int,int):/(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):297:value % wrapRange |==> value / wrapRange
188:AOR:+(int,int):%(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):297:(value % wrapRange) + minValue |==> (value % wrapRange) % minValue
189:AOR:+(int,int):*(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):297:(value % wrapRange) + minValue |==> (value % wrapRange) * minValue
190:AOR:+(int,int):-(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):297:(value % wrapRange) + minValue |==> (value % wrapRange) - minValue
191:AOR:+(int,int):/(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):297:(value % wrapRange) + minValue |==> (value % wrapRange) / minValue
192:AOR:%(int,int):*(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):300:(-value) % wrapRange |==> (-value) * wrapRange
193:AOR:%(int,int):+(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):300:(-value) % wrapRange |==> (-value) + wrapRange
194:AOR:%(int,int):-(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):300:(-value) % wrapRange |==> (-value) - wrapRange
195:AOR:%(int,int):/(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):300:(-value) % wrapRange |==> (-value) / wrapRange
196:ROR:==(int,int):<=(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):302:remByRange == 0 |==> remByRange <= 0
197:ROR:==(int,int):>=(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):302:remByRange == 0 |==> remByRange >= 0
198:ROR:==(int,int):FALSE(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):302:remByRange == 0 |==> false
199:AOR:+(int,int):%(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):303:0 + minValue |==> 0 % minValue
200:AOR:+(int,int):*(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):303:0 + minValue |==> 0 * minValue
201:AOR:+(int,int):-(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):303:0 + minValue |==> 0 - minValue
202:AOR:+(int,int):/(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):303:0 + minValue |==> 0 / minValue
203:AOR:-(int,int):%(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):305:wrapRange - remByRange |==> wrapRange % remByRange
204:AOR:-(int,int):*(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):305:wrapRange - remByRange |==> wrapRange * remByRange
205:AOR:-(int,int):+(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):305:wrapRange - remByRange |==> wrapRange + remByRange
206:AOR:-(int,int):/(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):305:wrapRange - remByRange |==> wrapRange / remByRange
207:AOR:+(int,int):%(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):305:(wrapRange - remByRange) + minValue |==> (wrapRange - remByRange) % minValue
208:AOR:+(int,int):*(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):305:(wrapRange - remByRange) + minValue |==> (wrapRange - remByRange) * minValue
209:AOR:+(int,int):-(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):305:(wrapRange - remByRange) + minValue |==> (wrapRange - remByRange) - minValue
210:AOR:+(int,int):/(int,int):org.joda.time.field.FieldUtils@getWrappedValue(int,int,int):305:(wrapRange - remByRange) + minValue |==> (wrapRange - remByRange) / minValue
211:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.field.FieldUtils@equals(java.lang.Object,java.lang.Object):318:object1 == object2 |==> false
212:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.field.FieldUtils@equals(java.lang.Object,java.lang.Object):321:object1 == null |==> false
213:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.field.FieldUtils@equals(java.lang.Object,java.lang.Object):321:object2 == null |==> false
214:COR:||(boolean,boolean):!=(boolean,boolean):org.joda.time.field.FieldUtils@equals(java.lang.Object,java.lang.Object):321:object1 == null || object2 == null |==> object1 == null != (object2 == null)
215:COR:||(boolean,boolean):LHS(boolean,boolean):org.joda.time.field.FieldUtils@equals(java.lang.Object,java.lang.Object):321:object1 == null || object2 == null |==> object1 == null
216:COR:||(boolean,boolean):RHS(boolean,boolean):org.joda.time.field.FieldUtils@equals(java.lang.Object,java.lang.Object):321:object1 == null || object2 == null |==> object2 == null
217:COR:||(boolean,boolean):TRUE(boolean,boolean):org.joda.time.field.FieldUtils@equals(java.lang.Object,java.lang.Object):321:object1 == null || object2 == null |==> true
