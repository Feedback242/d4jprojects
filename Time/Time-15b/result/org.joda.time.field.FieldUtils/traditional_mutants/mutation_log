AORB_1:30:int_safeAdd(int,int):val1 + val2 => val1 * val2
AORB_2:30:int_safeAdd(int,int):val1 + val2 => val1 / val2
AORB_3:30:int_safeAdd(int,int):val1 + val2 => val1 % val2
AORB_4:30:int_safeAdd(int,int):val1 + val2 => val1 - val2
AORB_5:39:long_safeAdd(long,long):val1 + val2 => val1 * val2
AORB_6:39:long_safeAdd(long,long):val1 + val2 => val1 / val2
AORB_7:39:long_safeAdd(long,long):val1 + val2 => val1 % val2
AORB_8:39:long_safeAdd(long,long):val1 + val2 => val1 - val2
AORB_9:48:long_safeSubtract(long,long):val1 - val2 => val1 * val2
AORB_10:48:long_safeSubtract(long,long):val1 - val2 => val1 / val2
AORB_11:48:long_safeSubtract(long,long):val1 - val2 => val1 % val2
AORB_12:48:long_safeSubtract(long,long):val1 - val2 => val1 + val2
AORB_13:57:int_safeMultiply(int,int):(long) val1 * (long) val2 => (long) val1 / (long) val2
AORB_14:57:int_safeMultiply(int,int):(long) val1 * (long) val2 => (long) val1 % (long) val2
AORB_15:57:int_safeMultiply(int,int):(long) val1 * (long) val2 => (long) val1 + (long) val2
AORB_16:57:int_safeMultiply(int,int):(long) val1 * (long) val2 => (long) val1 - (long) val2
AORB_17:77:long_safeMultiply(long,int):val1 * val2 => val1 / val2
AORB_18:77:long_safeMultiply(long,int):val1 * val2 => val1 % val2
AORB_19:77:long_safeMultiply(long,int):val1 * val2 => val1 + val2
AORB_20:77:long_safeMultiply(long,int):val1 * val2 => val1 - val2
AORB_21:78:long_safeMultiply(long,int):total / val2 => total * val2
AORB_22:78:long_safeMultiply(long,int):total / val2 => total % val2
AORB_23:78:long_safeMultiply(long,int):total / val2 => total + val2
AORB_24:78:long_safeMultiply(long,int):total / val2 => total - val2
AORB_25:95:long_safeMultiply(long,long):val1 * val2 => val1 / val2
AORB_26:95:long_safeMultiply(long,long):val1 * val2 => val1 % val2
AORB_27:95:long_safeMultiply(long,long):val1 * val2 => val1 + val2
AORB_28:95:long_safeMultiply(long,long):val1 * val2 => val1 - val2
AORB_29:96:long_safeMultiply(long,long):total / val2 => total * val2
AORB_30:96:long_safeMultiply(long,long):total / val2 => total % val2
AORB_31:96:long_safeMultiply(long,long):total / val2 => total + val2
AORB_32:96:long_safeMultiply(long,long):total / val2 => total - val2
AORB_33:139:int_getWrappedValue(int,int,int,int):currentValue + wrapValue => currentValue * wrapValue
AORB_34:139:int_getWrappedValue(int,int,int,int):currentValue + wrapValue => currentValue / wrapValue
AORB_35:139:int_getWrappedValue(int,int,int,int):currentValue + wrapValue => currentValue % wrapValue
AORB_36:139:int_getWrappedValue(int,int,int,int):currentValue + wrapValue => currentValue - wrapValue
AORB_37:147:int_getWrappedValue(int,int,int):maxValue - minValue => maxValue * minValue
AORB_38:147:int_getWrappedValue(int,int,int):maxValue - minValue => maxValue / minValue
AORB_39:147:int_getWrappedValue(int,int,int):maxValue - minValue => maxValue % minValue
AORB_40:147:int_getWrappedValue(int,int,int):maxValue - minValue => maxValue + minValue
AORB_41:147:int_getWrappedValue(int,int,int):maxValue - minValue + 1 => (maxValue - minValue) * 1
AORB_42:147:int_getWrappedValue(int,int,int):maxValue - minValue + 1 => (maxValue - minValue) / 1
AORB_43:147:int_getWrappedValue(int,int,int):maxValue - minValue + 1 => (maxValue - minValue) % 1
AORB_44:147:int_getWrappedValue(int,int,int):maxValue - minValue + 1 => maxValue - minValue - 1
AORB_45:150:int_getWrappedValue(int,int,int):value % wrapRange => value * wrapRange
AORB_46:150:int_getWrappedValue(int,int,int):value % wrapRange => value / wrapRange
AORB_47:150:int_getWrappedValue(int,int,int):value % wrapRange => value + wrapRange
AORB_48:150:int_getWrappedValue(int,int,int):value % wrapRange => value - wrapRange
AORB_49:150:int_getWrappedValue(int,int,int):value % wrapRange + minValue => value % wrapRange * minValue
AORB_50:150:int_getWrappedValue(int,int,int):value % wrapRange + minValue => value % wrapRange / minValue
AORB_51:150:int_getWrappedValue(int,int,int):value % wrapRange + minValue => value % wrapRange % minValue
AORB_52:150:int_getWrappedValue(int,int,int):value % wrapRange + minValue => value % wrapRange - minValue
AORB_53:152:int_getWrappedValue(int,int,int):-value % wrapRange => -value * wrapRange
AORB_54:152:int_getWrappedValue(int,int,int):-value % wrapRange => -value / wrapRange
AORB_55:152:int_getWrappedValue(int,int,int):-value % wrapRange => -value + wrapRange
AORB_56:152:int_getWrappedValue(int,int,int):-value % wrapRange => -value - wrapRange
AORB_57:154:int_getWrappedValue(int,int,int):0 + minValue => 0 * minValue
AORB_58:154:int_getWrappedValue(int,int,int):0 + minValue => 0 / minValue
AORB_59:154:int_getWrappedValue(int,int,int):0 + minValue => 0 % minValue
AORB_60:154:int_getWrappedValue(int,int,int):0 + minValue => 0 - minValue
AORB_61:156:int_getWrappedValue(int,int,int):wrapRange - remByRange => wrapRange * remByRange
AORB_62:156:int_getWrappedValue(int,int,int):wrapRange - remByRange => wrapRange / remByRange
AORB_63:156:int_getWrappedValue(int,int,int):wrapRange - remByRange => wrapRange % remByRange
AORB_64:156:int_getWrappedValue(int,int,int):wrapRange - remByRange => wrapRange + remByRange
AORB_65:156:int_getWrappedValue(int,int,int):wrapRange - remByRange + minValue => (wrapRange - remByRange) * minValue
AORB_66:156:int_getWrappedValue(int,int,int):wrapRange - remByRange + minValue => (wrapRange - remByRange) / minValue
AORB_67:156:int_getWrappedValue(int,int,int):wrapRange - remByRange + minValue => (wrapRange - remByRange) % minValue
AORB_68:156:int_getWrappedValue(int,int,int):wrapRange - remByRange + minValue => wrapRange - remByRange - minValue
ROR_1:22:int_safeNegate(int): value == Integer.MIN_VALUE  =>   value > Integer.MIN_VALUE
ROR_2:22:int_safeNegate(int): value == Integer.MIN_VALUE  =>   value >= Integer.MIN_VALUE
ROR_3:22:int_safeNegate(int): value == Integer.MIN_VALUE  =>   value < Integer.MIN_VALUE
ROR_4:22:int_safeNegate(int): value == Integer.MIN_VALUE  =>   value <= Integer.MIN_VALUE
ROR_5:22:int_safeNegate(int): value == Integer.MIN_VALUE  =>   value != Integer.MIN_VALUE
ROR_6:22:int_safeNegate(int): value == Integer.MIN_VALUE  =>   true
ROR_7:22:int_safeNegate(int): value == Integer.MIN_VALUE  =>   false
ROR_8:31:int_safeAdd(int,int): (val1 ^ sum) < 0  =>   (val1 ^ sum) > 0
ROR_9:31:int_safeAdd(int,int): (val1 ^ sum) < 0  =>   (val1 ^ sum) >= 0
ROR_10:31:int_safeAdd(int,int): (val1 ^ sum) < 0  =>   (val1 ^ sum) <= 0
ROR_11:31:int_safeAdd(int,int): (val1 ^ sum) < 0  =>   (val1 ^ sum) == 0
ROR_12:31:int_safeAdd(int,int): (val1 ^ sum) < 0  =>   (val1 ^ sum) != 0
ROR_13:31:int_safeAdd(int,int): (val1 ^ sum) < 0  =>   true
ROR_14:31:int_safeAdd(int,int): (val1 ^ sum) < 0  =>   false
ROR_15:31:int_safeAdd(int,int): (val1 ^ val2) >= 0  =>   (val1 ^ val2) > 0
ROR_16:31:int_safeAdd(int,int): (val1 ^ val2) >= 0  =>   (val1 ^ val2) < 0
ROR_17:31:int_safeAdd(int,int): (val1 ^ val2) >= 0  =>   (val1 ^ val2) <= 0
ROR_18:31:int_safeAdd(int,int): (val1 ^ val2) >= 0  =>   (val1 ^ val2) == 0
ROR_19:31:int_safeAdd(int,int): (val1 ^ val2) >= 0  =>   (val1 ^ val2) != 0
ROR_20:31:int_safeAdd(int,int): (val1 ^ val2) >= 0  =>   true
ROR_21:31:int_safeAdd(int,int): (val1 ^ val2) >= 0  =>   false
ROR_22:40:long_safeAdd(long,long): (val1 ^ sum) < 0  =>   (val1 ^ sum) > 0
ROR_23:40:long_safeAdd(long,long): (val1 ^ sum) < 0  =>   (val1 ^ sum) >= 0
ROR_24:40:long_safeAdd(long,long): (val1 ^ sum) < 0  =>   (val1 ^ sum) <= 0
ROR_25:40:long_safeAdd(long,long): (val1 ^ sum) < 0  =>   (val1 ^ sum) == 0
ROR_26:40:long_safeAdd(long,long): (val1 ^ sum) < 0  =>   (val1 ^ sum) != 0
ROR_27:40:long_safeAdd(long,long): (val1 ^ sum) < 0  =>   true
ROR_28:40:long_safeAdd(long,long): (val1 ^ sum) < 0  =>   false
ROR_29:40:long_safeAdd(long,long): (val1 ^ val2) >= 0  =>   (val1 ^ val2) > 0
ROR_30:40:long_safeAdd(long,long): (val1 ^ val2) >= 0  =>   (val1 ^ val2) < 0
ROR_31:40:long_safeAdd(long,long): (val1 ^ val2) >= 0  =>   (val1 ^ val2) <= 0
ROR_32:40:long_safeAdd(long,long): (val1 ^ val2) >= 0  =>   (val1 ^ val2) == 0
ROR_33:40:long_safeAdd(long,long): (val1 ^ val2) >= 0  =>   (val1 ^ val2) != 0
ROR_34:40:long_safeAdd(long,long): (val1 ^ val2) >= 0  =>   true
ROR_35:40:long_safeAdd(long,long): (val1 ^ val2) >= 0  =>   false
ROR_36:49:long_safeSubtract(long,long): (val1 ^ diff) < 0  =>   (val1 ^ diff) > 0
ROR_37:49:long_safeSubtract(long,long): (val1 ^ diff) < 0  =>   (val1 ^ diff) >= 0
ROR_38:49:long_safeSubtract(long,long): (val1 ^ diff) < 0  =>   (val1 ^ diff) <= 0
ROR_39:49:long_safeSubtract(long,long): (val1 ^ diff) < 0  =>   (val1 ^ diff) == 0
ROR_40:49:long_safeSubtract(long,long): (val1 ^ diff) < 0  =>   (val1 ^ diff) != 0
ROR_41:49:long_safeSubtract(long,long): (val1 ^ diff) < 0  =>   true
ROR_42:49:long_safeSubtract(long,long): (val1 ^ diff) < 0  =>   false
ROR_43:49:long_safeSubtract(long,long): (val1 ^ val2) < 0  =>   (val1 ^ val2) > 0
ROR_44:49:long_safeSubtract(long,long): (val1 ^ val2) < 0  =>   (val1 ^ val2) >= 0
ROR_45:49:long_safeSubtract(long,long): (val1 ^ val2) < 0  =>   (val1 ^ val2) <= 0
ROR_46:49:long_safeSubtract(long,long): (val1 ^ val2) < 0  =>   (val1 ^ val2) == 0
ROR_47:49:long_safeSubtract(long,long): (val1 ^ val2) < 0  =>   (val1 ^ val2) != 0
ROR_48:49:long_safeSubtract(long,long): (val1 ^ val2) < 0  =>   true
ROR_49:49:long_safeSubtract(long,long): (val1 ^ val2) < 0  =>   false
ROR_50:58:int_safeMultiply(int,int): total < Integer.MIN_VALUE  =>   total > Integer.MIN_VALUE
ROR_51:58:int_safeMultiply(int,int): total < Integer.MIN_VALUE  =>   total >= Integer.MIN_VALUE
ROR_52:58:int_safeMultiply(int,int): total < Integer.MIN_VALUE  =>   total <= Integer.MIN_VALUE
ROR_53:58:int_safeMultiply(int,int): total < Integer.MIN_VALUE  =>   total == Integer.MIN_VALUE
ROR_54:58:int_safeMultiply(int,int): total < Integer.MIN_VALUE  =>   total != Integer.MIN_VALUE
ROR_55:58:int_safeMultiply(int,int): total < Integer.MIN_VALUE  =>   true
ROR_56:58:int_safeMultiply(int,int): total < Integer.MIN_VALUE  =>   false
ROR_57:58:int_safeMultiply(int,int): total > Integer.MAX_VALUE  =>   total >= Integer.MAX_VALUE
ROR_58:58:int_safeMultiply(int,int): total > Integer.MAX_VALUE  =>   total < Integer.MAX_VALUE
ROR_59:58:int_safeMultiply(int,int): total > Integer.MAX_VALUE  =>   total <= Integer.MAX_VALUE
ROR_60:58:int_safeMultiply(int,int): total > Integer.MAX_VALUE  =>   total == Integer.MAX_VALUE
ROR_61:58:int_safeMultiply(int,int): total > Integer.MAX_VALUE  =>   total != Integer.MAX_VALUE
ROR_62:58:int_safeMultiply(int,int): total > Integer.MAX_VALUE  =>   true
ROR_63:58:int_safeMultiply(int,int): total > Integer.MAX_VALUE  =>   false
ROR_64:78:long_safeMultiply(long,int): total / val2 != val1  =>   total / val2 > val1
ROR_65:78:long_safeMultiply(long,int): total / val2 != val1  =>   total / val2 >= val1
ROR_66:78:long_safeMultiply(long,int): total / val2 != val1  =>   total / val2 < val1
ROR_67:78:long_safeMultiply(long,int): total / val2 != val1  =>   total / val2 <= val1
ROR_68:78:long_safeMultiply(long,int): total / val2 != val1  =>   total / val2 == val1
ROR_69:78:long_safeMultiply(long,int): total / val2 != val1  =>   true
ROR_70:78:long_safeMultiply(long,int): total / val2 != val1  =>   false
ROR_71:86:long_safeMultiply(long,long): val2 == 1  =>   val2 > 1
ROR_72:86:long_safeMultiply(long,long): val2 == 1  =>   val2 >= 1
ROR_73:86:long_safeMultiply(long,long): val2 == 1  =>   val2 < 1
ROR_74:86:long_safeMultiply(long,long): val2 == 1  =>   val2 <= 1
ROR_75:86:long_safeMultiply(long,long): val2 == 1  =>   val2 != 1
ROR_76:86:long_safeMultiply(long,long): val2 == 1  =>   true
ROR_77:86:long_safeMultiply(long,long): val2 == 1  =>   false
ROR_78:89:long_safeMultiply(long,long): val1 == 1  =>   val1 > 1
ROR_79:89:long_safeMultiply(long,long): val1 == 1  =>   val1 >= 1
ROR_80:89:long_safeMultiply(long,long): val1 == 1  =>   val1 < 1
ROR_81:89:long_safeMultiply(long,long): val1 == 1  =>   val1 <= 1
ROR_82:89:long_safeMultiply(long,long): val1 == 1  =>   val1 != 1
ROR_83:89:long_safeMultiply(long,long): val1 == 1  =>   true
ROR_84:89:long_safeMultiply(long,long): val1 == 1  =>   false
ROR_85:92:long_safeMultiply(long,long): val1 == 0  =>   val1 > 0
ROR_86:92:long_safeMultiply(long,long): val1 == 0  =>   val1 >= 0
ROR_87:92:long_safeMultiply(long,long): val1 == 0  =>   val1 < 0
ROR_88:92:long_safeMultiply(long,long): val1 == 0  =>   val1 <= 0
ROR_89:92:long_safeMultiply(long,long): val1 == 0  =>   val1 != 0
ROR_90:92:long_safeMultiply(long,long): val1 == 0  =>   true
ROR_91:92:long_safeMultiply(long,long): val1 == 0  =>   false
ROR_92:92:long_safeMultiply(long,long): val2 == 0  =>   val2 > 0
ROR_93:92:long_safeMultiply(long,long): val2 == 0  =>   val2 >= 0
ROR_94:92:long_safeMultiply(long,long): val2 == 0  =>   val2 < 0
ROR_95:92:long_safeMultiply(long,long): val2 == 0  =>   val2 <= 0
ROR_96:92:long_safeMultiply(long,long): val2 == 0  =>   val2 != 0
ROR_97:92:long_safeMultiply(long,long): val2 == 0  =>   true
ROR_98:92:long_safeMultiply(long,long): val2 == 0  =>   false
ROR_99:96:long_safeMultiply(long,long): total / val2 != val1  =>   total / val2 > val1
ROR_100:96:long_safeMultiply(long,long): total / val2 != val1  =>   total / val2 >= val1
ROR_101:96:long_safeMultiply(long,long): total / val2 != val1  =>   total / val2 < val1
ROR_102:96:long_safeMultiply(long,long): total / val2 != val1  =>   total / val2 <= val1
ROR_103:96:long_safeMultiply(long,long): total / val2 != val1  =>   total / val2 == val1
ROR_104:96:long_safeMultiply(long,long): total / val2 != val1  =>   true
ROR_105:96:long_safeMultiply(long,long): total / val2 != val1  =>   false
ROR_106:96:long_safeMultiply(long,long): val1 == Long.MIN_VALUE  =>   val1 > Long.MIN_VALUE
ROR_107:96:long_safeMultiply(long,long): val1 == Long.MIN_VALUE  =>   val1 >= Long.MIN_VALUE
ROR_108:96:long_safeMultiply(long,long): val1 == Long.MIN_VALUE  =>   val1 < Long.MIN_VALUE
ROR_109:96:long_safeMultiply(long,long): val1 == Long.MIN_VALUE  =>   val1 <= Long.MIN_VALUE
ROR_110:96:long_safeMultiply(long,long): val1 == Long.MIN_VALUE  =>   val1 != Long.MIN_VALUE
ROR_111:96:long_safeMultiply(long,long): val1 == Long.MIN_VALUE  =>   true
ROR_112:96:long_safeMultiply(long,long): val1 == Long.MIN_VALUE  =>   false
ROR_113:96:long_safeMultiply(long,long): val2 == -1  =>   val2 > -1
ROR_114:96:long_safeMultiply(long,long): val2 == -1  =>   val2 >= -1
ROR_115:96:long_safeMultiply(long,long): val2 == -1  =>   val2 < -1
ROR_116:96:long_safeMultiply(long,long): val2 == -1  =>   val2 <= -1
ROR_117:96:long_safeMultiply(long,long): val2 == -1  =>   val2 != -1
ROR_118:96:long_safeMultiply(long,long): val2 == -1  =>   true
ROR_119:96:long_safeMultiply(long,long): val2 == -1  =>   false
ROR_120:96:long_safeMultiply(long,long): val2 == Long.MIN_VALUE  =>   val2 > Long.MIN_VALUE
ROR_121:96:long_safeMultiply(long,long): val2 == Long.MIN_VALUE  =>   val2 >= Long.MIN_VALUE
ROR_122:96:long_safeMultiply(long,long): val2 == Long.MIN_VALUE  =>   val2 < Long.MIN_VALUE
ROR_123:96:long_safeMultiply(long,long): val2 == Long.MIN_VALUE  =>   val2 <= Long.MIN_VALUE
ROR_124:96:long_safeMultiply(long,long): val2 == Long.MIN_VALUE  =>   val2 != Long.MIN_VALUE
ROR_125:96:long_safeMultiply(long,long): val2 == Long.MIN_VALUE  =>   true
ROR_126:96:long_safeMultiply(long,long): val2 == Long.MIN_VALUE  =>   false
ROR_127:96:long_safeMultiply(long,long): val1 == -1  =>   val1 > -1
ROR_128:96:long_safeMultiply(long,long): val1 == -1  =>   val1 >= -1
ROR_129:96:long_safeMultiply(long,long): val1 == -1  =>   val1 < -1
ROR_130:96:long_safeMultiply(long,long): val1 == -1  =>   val1 <= -1
ROR_131:96:long_safeMultiply(long,long): val1 == -1  =>   val1 != -1
ROR_132:96:long_safeMultiply(long,long): val1 == -1  =>   true
ROR_133:96:long_safeMultiply(long,long): val1 == -1  =>   false
ROR_134:104:int_safeToInt(long): Integer.MIN_VALUE <= value  =>   Integer.MIN_VALUE > value
ROR_135:104:int_safeToInt(long): Integer.MIN_VALUE <= value  =>   Integer.MIN_VALUE >= value
ROR_136:104:int_safeToInt(long): Integer.MIN_VALUE <= value  =>   Integer.MIN_VALUE < value
ROR_137:104:int_safeToInt(long): Integer.MIN_VALUE <= value  =>   Integer.MIN_VALUE == value
ROR_138:104:int_safeToInt(long): Integer.MIN_VALUE <= value  =>   Integer.MIN_VALUE != value
ROR_139:104:int_safeToInt(long): Integer.MIN_VALUE <= value  =>   true
ROR_140:104:int_safeToInt(long): Integer.MIN_VALUE <= value  =>   false
ROR_141:104:int_safeToInt(long): value <= Integer.MAX_VALUE  =>   value > Integer.MAX_VALUE
ROR_142:104:int_safeToInt(long): value <= Integer.MAX_VALUE  =>   value >= Integer.MAX_VALUE
ROR_143:104:int_safeToInt(long): value <= Integer.MAX_VALUE  =>   value < Integer.MAX_VALUE
ROR_144:104:int_safeToInt(long): value <= Integer.MAX_VALUE  =>   value == Integer.MAX_VALUE
ROR_145:104:int_safeToInt(long): value <= Integer.MAX_VALUE  =>   value != Integer.MAX_VALUE
ROR_146:104:int_safeToInt(long): value <= Integer.MAX_VALUE  =>   true
ROR_147:104:int_safeToInt(long): value <= Integer.MAX_VALUE  =>   false
ROR_148:118:void_verifyValueBounds(org.joda.time.DateTimeField,int,int,int): value < lowerBound  =>   value > lowerBound
ROR_149:118:void_verifyValueBounds(org.joda.time.DateTimeField,int,int,int): value < lowerBound  =>   value >= lowerBound
ROR_150:118:void_verifyValueBounds(org.joda.time.DateTimeField,int,int,int): value < lowerBound  =>   value <= lowerBound
ROR_151:118:void_verifyValueBounds(org.joda.time.DateTimeField,int,int,int): value < lowerBound  =>   value == lowerBound
ROR_152:118:void_verifyValueBounds(org.joda.time.DateTimeField,int,int,int): value < lowerBound  =>   value != lowerBound
ROR_153:118:void_verifyValueBounds(org.joda.time.DateTimeField,int,int,int): value < lowerBound  =>   true
ROR_154:118:void_verifyValueBounds(org.joda.time.DateTimeField,int,int,int): value < lowerBound  =>   false
ROR_155:118:void_verifyValueBounds(org.joda.time.DateTimeField,int,int,int): value > upperBound  =>   value >= upperBound
ROR_156:118:void_verifyValueBounds(org.joda.time.DateTimeField,int,int,int): value > upperBound  =>   value < upperBound
ROR_157:118:void_verifyValueBounds(org.joda.time.DateTimeField,int,int,int): value > upperBound  =>   value <= upperBound
ROR_158:118:void_verifyValueBounds(org.joda.time.DateTimeField,int,int,int): value > upperBound  =>   value == upperBound
ROR_159:118:void_verifyValueBounds(org.joda.time.DateTimeField,int,int,int): value > upperBound  =>   value != upperBound
ROR_160:118:void_verifyValueBounds(org.joda.time.DateTimeField,int,int,int): value > upperBound  =>   true
ROR_161:118:void_verifyValueBounds(org.joda.time.DateTimeField,int,int,int): value > upperBound  =>   false
ROR_162:125:void_verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int): value < lowerBound  =>   value > lowerBound
ROR_163:125:void_verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int): value < lowerBound  =>   value >= lowerBound
ROR_164:125:void_verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int): value < lowerBound  =>   value <= lowerBound
ROR_165:125:void_verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int): value < lowerBound  =>   value == lowerBound
ROR_166:125:void_verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int): value < lowerBound  =>   value != lowerBound
ROR_167:125:void_verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int): value < lowerBound  =>   true
ROR_168:125:void_verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int): value < lowerBound  =>   false
ROR_169:125:void_verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int): value > upperBound  =>   value >= upperBound
ROR_170:125:void_verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int): value > upperBound  =>   value < upperBound
ROR_171:125:void_verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int): value > upperBound  =>   value <= upperBound
ROR_172:125:void_verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int): value > upperBound  =>   value == upperBound
ROR_173:125:void_verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int): value > upperBound  =>   value != upperBound
ROR_174:125:void_verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int): value > upperBound  =>   true
ROR_175:125:void_verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int): value > upperBound  =>   false
ROR_176:132:void_verifyValueBounds(java.lang.String,int,int,int): value < lowerBound  =>   value > lowerBound
ROR_177:132:void_verifyValueBounds(java.lang.String,int,int,int): value < lowerBound  =>   value >= lowerBound
ROR_178:132:void_verifyValueBounds(java.lang.String,int,int,int): value < lowerBound  =>   value <= lowerBound
ROR_179:132:void_verifyValueBounds(java.lang.String,int,int,int): value < lowerBound  =>   value == lowerBound
ROR_180:132:void_verifyValueBounds(java.lang.String,int,int,int): value < lowerBound  =>   value != lowerBound
ROR_181:132:void_verifyValueBounds(java.lang.String,int,int,int): value < lowerBound  =>   true
ROR_182:132:void_verifyValueBounds(java.lang.String,int,int,int): value < lowerBound  =>   false
ROR_183:132:void_verifyValueBounds(java.lang.String,int,int,int): value > upperBound  =>   value >= upperBound
ROR_184:132:void_verifyValueBounds(java.lang.String,int,int,int): value > upperBound  =>   value < upperBound
ROR_185:132:void_verifyValueBounds(java.lang.String,int,int,int): value > upperBound  =>   value <= upperBound
ROR_186:132:void_verifyValueBounds(java.lang.String,int,int,int): value > upperBound  =>   value == upperBound
ROR_187:132:void_verifyValueBounds(java.lang.String,int,int,int): value > upperBound  =>   value != upperBound
ROR_188:132:void_verifyValueBounds(java.lang.String,int,int,int): value > upperBound  =>   true
ROR_189:132:void_verifyValueBounds(java.lang.String,int,int,int): value > upperBound  =>   false
ROR_190:144:int_getWrappedValue(int,int,int): minValue >= maxValue  =>   minValue > maxValue
ROR_191:144:int_getWrappedValue(int,int,int): minValue >= maxValue  =>   minValue < maxValue
ROR_192:144:int_getWrappedValue(int,int,int): minValue >= maxValue  =>   minValue <= maxValue
ROR_193:144:int_getWrappedValue(int,int,int): minValue >= maxValue  =>   minValue == maxValue
ROR_194:144:int_getWrappedValue(int,int,int): minValue >= maxValue  =>   minValue != maxValue
ROR_195:144:int_getWrappedValue(int,int,int): minValue >= maxValue  =>   true
ROR_196:144:int_getWrappedValue(int,int,int): minValue >= maxValue  =>   false
ROR_197:149:int_getWrappedValue(int,int,int): value >= 0  =>   value > 0
ROR_198:149:int_getWrappedValue(int,int,int): value >= 0  =>   value < 0
ROR_199:149:int_getWrappedValue(int,int,int): value >= 0  =>   value <= 0
ROR_200:149:int_getWrappedValue(int,int,int): value >= 0  =>   value == 0
ROR_201:149:int_getWrappedValue(int,int,int): value >= 0  =>   value != 0
ROR_202:149:int_getWrappedValue(int,int,int): value >= 0  =>   true
ROR_203:149:int_getWrappedValue(int,int,int): value >= 0  =>   false
ROR_204:153:int_getWrappedValue(int,int,int): remByRange == 0  =>   remByRange > 0
ROR_205:153:int_getWrappedValue(int,int,int): remByRange == 0  =>   remByRange >= 0
ROR_206:153:int_getWrappedValue(int,int,int): remByRange == 0  =>   remByRange < 0
ROR_207:153:int_getWrappedValue(int,int,int): remByRange == 0  =>   remByRange <= 0
ROR_208:153:int_getWrappedValue(int,int,int): remByRange == 0  =>   remByRange != 0
ROR_209:153:int_getWrappedValue(int,int,int): remByRange == 0  =>   true
ROR_210:153:int_getWrappedValue(int,int,int): remByRange == 0  =>   false
ROR_211:161:boolean_equals(java.lang.Object,java.lang.Object): object1 == object2  =>   object1 != object2
ROR_212:164:boolean_equals(java.lang.Object,java.lang.Object): object1 == null  =>   object1 != null
ROR_213:164:boolean_equals(java.lang.Object,java.lang.Object): object2 == null  =>   object2 != null
COR_1:31:int_safeAdd(int,int): (val1 ^ sum) < 0 && (val1 ^ val2) >= 0  =>   (val1 ^ sum) < 0 || (val1 ^ val2) >= 0
COR_2:31:int_safeAdd(int,int): (val1 ^ sum) < 0 && (val1 ^ val2) >= 0  =>   (val1 ^ sum) < 0 ^ (val1 ^ val2) >= 0
COR_3:40:long_safeAdd(long,long): (val1 ^ sum) < 0 && (val1 ^ val2) >= 0  =>   (val1 ^ sum) < 0 || (val1 ^ val2) >= 0
COR_4:40:long_safeAdd(long,long): (val1 ^ sum) < 0 && (val1 ^ val2) >= 0  =>   (val1 ^ sum) < 0 ^ (val1 ^ val2) >= 0
COR_5:49:long_safeSubtract(long,long): (val1 ^ diff) < 0 && (val1 ^ val2) < 0  =>   (val1 ^ diff) < 0 || (val1 ^ val2) < 0
COR_6:49:long_safeSubtract(long,long): (val1 ^ diff) < 0 && (val1 ^ val2) < 0  =>   (val1 ^ diff) < 0 ^ (val1 ^ val2) < 0
COR_7:58:int_safeMultiply(int,int): total < Integer.MIN_VALUE || total > Integer.MAX_VALUE  =>   total < Integer.MIN_VALUE && total > Integer.MAX_VALUE
COR_8:58:int_safeMultiply(int,int): total < Integer.MIN_VALUE || total > Integer.MAX_VALUE  =>   total < Integer.MIN_VALUE ^ total > Integer.MAX_VALUE
COR_9:92:long_safeMultiply(long,long): val1 == 0 || val2 == 0  =>   val1 == 0 && val2 == 0
COR_10:92:long_safeMultiply(long,long): val1 == 0 || val2 == 0  =>   val1 == 0 ^ val2 == 0
COR_11:96:long_safeMultiply(long,long): val1 == Long.MIN_VALUE && val2 == -1  =>   val1 == Long.MIN_VALUE || val2 == -1
COR_12:96:long_safeMultiply(long,long): val1 == Long.MIN_VALUE && val2 == -1  =>   val1 == Long.MIN_VALUE ^ val2 == -1
COR_13:96:long_safeMultiply(long,long): total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1  =>   total / val2 != val1 && (val1 == Long.MIN_VALUE && val2 == -1)
COR_14:96:long_safeMultiply(long,long): total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1  =>   total / val2 != val1 ^ (val1 == Long.MIN_VALUE && val2 == -1)
COR_15:96:long_safeMultiply(long,long): val2 == Long.MIN_VALUE && val1 == -1  =>   val2 == Long.MIN_VALUE || val1 == -1
COR_16:96:long_safeMultiply(long,long): val2 == Long.MIN_VALUE && val1 == -1  =>   val2 == Long.MIN_VALUE ^ val1 == -1
COR_17:96:long_safeMultiply(long,long): total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1  =>   (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1) && (val2 == Long.MIN_VALUE && val1 == -1)
COR_18:96:long_safeMultiply(long,long): total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1  =>   (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1) ^ (val2 == Long.MIN_VALUE && val1 == -1)
COR_19:104:int_safeToInt(long): Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE  =>   Integer.MIN_VALUE <= value || value <= Integer.MAX_VALUE
COR_20:104:int_safeToInt(long): Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE  =>   Integer.MIN_VALUE <= value ^ value <= Integer.MAX_VALUE
COR_21:118:void_verifyValueBounds(org.joda.time.DateTimeField,int,int,int): value < lowerBound || value > upperBound  =>   value < lowerBound && value > upperBound
COR_22:118:void_verifyValueBounds(org.joda.time.DateTimeField,int,int,int): value < lowerBound || value > upperBound  =>   value < lowerBound ^ value > upperBound
COR_23:125:void_verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int): value < lowerBound || value > upperBound  =>   value < lowerBound && value > upperBound
COR_24:125:void_verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int): value < lowerBound || value > upperBound  =>   value < lowerBound ^ value > upperBound
COR_25:132:void_verifyValueBounds(java.lang.String,int,int,int): value < lowerBound || value > upperBound  =>   value < lowerBound && value > upperBound
COR_26:132:void_verifyValueBounds(java.lang.String,int,int,int): value < lowerBound || value > upperBound  =>   value < lowerBound ^ value > upperBound
COR_27:164:boolean_equals(java.lang.Object,java.lang.Object): object1 == null || object2 == null  =>   object1 == null && object2 == null
COR_28:164:boolean_equals(java.lang.Object,java.lang.Object): object1 == null || object2 == null  =>   object1 == null ^ object2 == null
SDL_1:23:int_safeNegate(int): if (value == Integer.MIN_VALUE) {     throw new java.lang.ArithmeticException( \"Integer.MIN_VALUE cannot be negated\" ); } return -value;  =>   return -value;
SDL_2:23:int_safeNegate(int): throw new java.lang.ArithmeticException( \"Integer.MIN_VALUE cannot be negated\" );  =>  
SDL_3:25:int_safeNegate(int): if (value == Integer.MIN_VALUE) {     throw new java.lang.ArithmeticException( \"Integer.MIN_VALUE cannot be negated\" ); }  =>   if (true) {     throw new java.lang.ArithmeticException( \"Integer.MIN_VALUE cannot be negated\" ); }
SDL_4:26:int_safeNegate(int): return -value;  =>   return 0;
SDL_5:32:int_safeAdd(int,int): int sum = val1 + val2; if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {     throw new java.lang.ArithmeticException( \"The calculation caused an overflow: \" + val1 + \" + \" + val2 ); } return sum;  =>   int sum = val1 + val2; return sum;
SDL_6:32:int_safeAdd(int,int): throw new java.lang.ArithmeticException( \"The calculation caused an overflow: \" + val1 + \" + \" + val2 );  =>  
SDL_7:34:int_safeAdd(int,int): if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {     throw new java.lang.ArithmeticException( \"The calculation caused an overflow: \" + val1 + \" + \" + val2 ); }  =>   if (true) {     throw new java.lang.ArithmeticException( \"The calculation caused an overflow: \" + val1 + \" + \" + val2 ); }
SDL_8:35:int_safeAdd(int,int): return sum;  =>   return 0;
SDL_9:41:long_safeAdd(long,long): long sum = val1 + val2; if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {     throw new java.lang.ArithmeticException( \"The calculation caused an overflow: \" + val1 + \" + \" + val2 ); } return sum;  =>   long sum = val1 + val2; return sum;
SDL_10:41:long_safeAdd(long,long): throw new java.lang.ArithmeticException( \"The calculation caused an overflow: \" + val1 + \" + \" + val2 );  =>  
SDL_11:43:long_safeAdd(long,long): if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {     throw new java.lang.ArithmeticException( \"The calculation caused an overflow: \" + val1 + \" + \" + val2 ); }  =>   if (true) {     throw new java.lang.ArithmeticException( \"The calculation caused an overflow: \" + val1 + \" + \" + val2 ); }
SDL_12:44:long_safeAdd(long,long): return sum;  =>   return 0;
SDL_13:50:long_safeSubtract(long,long): long diff = val1 - val2; if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {     throw new java.lang.ArithmeticException( \"The calculation caused an overflow: \" + val1 + \" - \" + val2 ); } return diff;  =>   long diff = val1 - val2; return diff;
SDL_14:50:long_safeSubtract(long,long): throw new java.lang.ArithmeticException( \"The calculation caused an overflow: \" + val1 + \" - \" + val2 );  =>  
SDL_15:52:long_safeSubtract(long,long): if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {     throw new java.lang.ArithmeticException( \"The calculation caused an overflow: \" + val1 + \" - \" + val2 ); }  =>   if (true) {     throw new java.lang.ArithmeticException( \"The calculation caused an overflow: \" + val1 + \" - \" + val2 ); }
SDL_16:53:long_safeSubtract(long,long): return diff;  =>   return 0;
SDL_17:59:int_safeMultiply(int,int): long total = (long) val1 * (long) val2; if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {     throw new java.lang.ArithmeticException( \"Multiplication overflows an int: \" + val1 + \" * \" + val2 ); } return (int) total;  =>   long total = (long) val1 * (long) val2; return (int) total;
SDL_18:59:int_safeMultiply(int,int): throw new java.lang.ArithmeticException( \"Multiplication overflows an int: \" + val1 + \" * \" + val2 );  =>  
SDL_19:61:int_safeMultiply(int,int): if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {     throw new java.lang.ArithmeticException( \"Multiplication overflows an int: \" + val1 + \" * \" + val2 ); }  =>   if (true) {     throw new java.lang.ArithmeticException( \"Multiplication overflows an int: \" + val1 + \" * \" + val2 ); }
SDL_20:62:int_safeMultiply(int,int): return (int) total;  =>   return 0;
SDL_21:71:long_safeMultiply(long,int): switch (val2) { case -1 :     return -val1; case 0 :     return 0L; case 1 :     return val1; } long total = val1 * val2; if (total / val2 != val1) {     throw new java.lang.ArithmeticException( \"Multiplication overflows a long: \" + val1 + \" * \" + val2 ); } return total;  =>   long total = val1 * val2; if (total / val2 != val1) {     throw new java.lang.ArithmeticException( \"Multiplication overflows a long: \" + val1 + \" * \" + val2 ); } return total;
SDL_22:79:long_safeMultiply(long,int): switch (val2) { case -1 :     return -val1; case 0 :     return 0L; case 1 :     return val1; } long total = val1 * val2; if (total / val2 != val1) {     throw new java.lang.ArithmeticException( \"Multiplication overflows a long: \" + val1 + \" * \" + val2 ); } return total;  =>   switch (val2) { case -1 :     return -val1; case 0 :     return 0L; case 1 :     return val1; } long total = val1 * val2; return total;
SDL_23:69:long_safeMultiply(long,int): return -val1;  =>   return 0;
SDL_24:72:long_safeMultiply(long,int): return 0L;  =>   return 0;
SDL_25:75:long_safeMultiply(long,int): return val1;  =>   return 0;
SDL_26:73:long_safeMultiply(long,int): case -1 :     return -val1; case 0 :     return 0L; case 1 :     return val1;  =>   case 0 :     return 0L; case 1 :     return val1;
SDL_27:73:long_safeMultiply(long,int): case -1 :     return -val1; case 0 :     return 0L; case 1 :     return val1;  =>   case -1 :     return -val1; case 1 :     return val1;
SDL_28:73:long_safeMultiply(long,int): case -1 :     return -val1; case 0 :     return 0L; case 1 :     return val1;  =>   case -1 :     return -val1; case 0 :     return 0L;
SDL_29:79:long_safeMultiply(long,int): throw new java.lang.ArithmeticException( \"Multiplication overflows a long: \" + val1 + \" * \" + val2 );  =>  
SDL_30:81:long_safeMultiply(long,int): if (total / val2 != val1) {     throw new java.lang.ArithmeticException( \"Multiplication overflows a long: \" + val1 + \" * \" + val2 ); }  =>   if (true) {     throw new java.lang.ArithmeticException( \"Multiplication overflows a long: \" + val1 + \" * \" + val2 ); }
SDL_31:82:long_safeMultiply(long,int): return total;  =>   return 0;
SDL_32:97:long_safeMultiply(long,long): if (val2 == 1) {     return val1; } if (val1 == 1) {     return val2; } if (val1 == 0 || val2 == 0) {     return 0; } long total = val1 * val2; if (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1) {     throw new java.lang.ArithmeticException( \"Multiplication overflows a long: \" + val1 + \" * \" + val2 ); } return total;  =>   if (val1 == 1) {     return val2; } if (val1 == 0 || val2 == 0) {     return 0; } long total = val1 * val2; if (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1) {     throw new java.lang.ArithmeticException( \"Multiplication overflows a long: \" + val1 + \" * \" + val2 ); } return total;
SDL_33:97:long_safeMultiply(long,long): if (val2 == 1) {     return val1; } if (val1 == 1) {     return val2; } if (val1 == 0 || val2 == 0) {     return 0; } long total = val1 * val2; if (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1) {     throw new java.lang.ArithmeticException( \"Multiplication overflows a long: \" + val1 + \" * \" + val2 ); } return total;  =>   if (val2 == 1) {     return val1; } if (val1 == 0 || val2 == 0) {     return 0; } long total = val1 * val2; if (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1) {     throw new java.lang.ArithmeticException( \"Multiplication overflows a long: \" + val1 + \" * \" + val2 ); } return total;
SDL_34:97:long_safeMultiply(long,long): if (val2 == 1) {     return val1; } if (val1 == 1) {     return val2; } if (val1 == 0 || val2 == 0) {     return 0; } long total = val1 * val2; if (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1) {     throw new java.lang.ArithmeticException( \"Multiplication overflows a long: \" + val1 + \" * \" + val2 ); } return total;  =>   if (val2 == 1) {     return val1; } if (val1 == 1) {     return val2; } long total = val1 * val2; if (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1) {     throw new java.lang.ArithmeticException( \"Multiplication overflows a long: \" + val1 + \" * \" + val2 ); } return total;
SDL_35:97:long_safeMultiply(long,long): if (val2 == 1) {     return val1; } if (val1 == 1) {     return val2; } if (val1 == 0 || val2 == 0) {     return 0; } long total = val1 * val2; if (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1) {     throw new java.lang.ArithmeticException( \"Multiplication overflows a long: \" + val1 + \" * \" + val2 ); } return total;  =>   if (val2 == 1) {     return val1; } if (val1 == 1) {     return val2; } if (val1 == 0 || val2 == 0) {     return 0; } long total = val1 * val2; return total;
SDL_36:89:long_safeMultiply(long,long): if (val2 == 1) {     return val1; }  =>   if (true) {     return val1; }
SDL_37:88:long_safeMultiply(long,long): return val1;  =>   return 0;
SDL_38:92:long_safeMultiply(long,long): if (val1 == 1) {     return val2; }  =>   if (true) {     return val2; }
SDL_39:91:long_safeMultiply(long,long): return val2;  =>   return 0;
SDL_40:95:long_safeMultiply(long,long): if (val1 == 0 || val2 == 0) {     return 0; }  =>   if (true) {     return 0; }
SDL_41:97:long_safeMultiply(long,long): throw new java.lang.ArithmeticException( \"Multiplication overflows a long: \" + val1 + \" * \" + val2 );  =>  
SDL_42:99:long_safeMultiply(long,long): if (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1) {     throw new java.lang.ArithmeticException( \"Multiplication overflows a long: \" + val1 + \" * \" + val2 ); }  =>   if (true) {     throw new java.lang.ArithmeticException( \"Multiplication overflows a long: \" + val1 + \" * \" + val2 ); }
SDL_43:100:long_safeMultiply(long,long): return total;  =>   return 0;
SDL_44:105:int_safeToInt(long): if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {     return (int) value; } throw new java.lang.ArithmeticException( \"Value cannot fit in an int: \" + value );  =>   throw new java.lang.ArithmeticException( \"Value cannot fit in an int: \" + value );
SDL_45:107:int_safeToInt(long): if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {     return (int) value; } throw new java.lang.ArithmeticException( \"Value cannot fit in an int: \" + value );  =>   if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {     return (int) value; }
SDL_46:107:int_safeToInt(long): if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {     return (int) value; }  =>   if (true) {     return (int) value; }
SDL_47:106:int_safeToInt(long): return (int) value;  =>   return 0;
SDL_48:114:int_safeMultiplyToInt(long,long): return FieldUtils.safeToInt( val );  =>   return 0;
SDL_49:118:void_verifyValueBounds(org.joda.time.DateTimeField,int,int,int): if (value < lowerBound || value > upperBound) {     throw new org.joda.time.IllegalFieldValueException( field.getType(), Integer.valueOf( value ), Integer.valueOf( lowerBound ), Integer.valueOf( upperBound ) ); }  =>  
SDL_50:119:void_verifyValueBounds(org.joda.time.DateTimeField,int,int,int): throw new org.joda.time.IllegalFieldValueException( field.getType(), Integer.valueOf( value ), Integer.valueOf( lowerBound ), Integer.valueOf( upperBound ) );  =>  
SDL_51:121:void_verifyValueBounds(org.joda.time.DateTimeField,int,int,int): if (value < lowerBound || value > upperBound) {     throw new org.joda.time.IllegalFieldValueException( field.getType(), Integer.valueOf( value ), Integer.valueOf( lowerBound ), Integer.valueOf( upperBound ) ); }  =>   if (true) {     throw new org.joda.time.IllegalFieldValueException( field.getType(), Integer.valueOf( value ), Integer.valueOf( lowerBound ), Integer.valueOf( upperBound ) ); }
SDL_52:125:void_verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int): if (value < lowerBound || value > upperBound) {     throw new org.joda.time.IllegalFieldValueException( fieldType, Integer.valueOf( value ), Integer.valueOf( lowerBound ), Integer.valueOf( upperBound ) ); }  =>  
SDL_53:126:void_verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int): throw new org.joda.time.IllegalFieldValueException( fieldType, Integer.valueOf( value ), Integer.valueOf( lowerBound ), Integer.valueOf( upperBound ) );  =>  
SDL_54:128:void_verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int): if (value < lowerBound || value > upperBound) {     throw new org.joda.time.IllegalFieldValueException( fieldType, Integer.valueOf( value ), Integer.valueOf( lowerBound ), Integer.valueOf( upperBound ) ); }  =>   if (true) {     throw new org.joda.time.IllegalFieldValueException( fieldType, Integer.valueOf( value ), Integer.valueOf( lowerBound ), Integer.valueOf( upperBound ) ); }
SDL_55:132:void_verifyValueBounds(java.lang.String,int,int,int): if (value < lowerBound || value > upperBound) {     throw new org.joda.time.IllegalFieldValueException( fieldName, Integer.valueOf( value ), Integer.valueOf( lowerBound ), Integer.valueOf( upperBound ) ); }  =>  
SDL_56:133:void_verifyValueBounds(java.lang.String,int,int,int): throw new org.joda.time.IllegalFieldValueException( fieldName, Integer.valueOf( value ), Integer.valueOf( lowerBound ), Integer.valueOf( upperBound ) );  =>  
SDL_57:135:void_verifyValueBounds(java.lang.String,int,int,int): if (value < lowerBound || value > upperBound) {     throw new org.joda.time.IllegalFieldValueException( fieldName, Integer.valueOf( value ), Integer.valueOf( lowerBound ), Integer.valueOf( upperBound ) ); }  =>   if (true) {     throw new org.joda.time.IllegalFieldValueException( fieldName, Integer.valueOf( value ), Integer.valueOf( lowerBound ), Integer.valueOf( upperBound ) ); }
SDL_58:140:int_getWrappedValue(int,int,int,int): return getWrappedValue( currentValue + wrapValue, minValue, maxValue );  =>   return 0;
SDL_59:154:int_getWrappedValue(int,int,int): if (minValue >= maxValue) {     throw new java.lang.IllegalArgumentException( \"MIN > MAX\" ); } int wrapRange = maxValue - minValue + 1; value -= minValue; if (value >= 0) {     return value % wrapRange + minValue; } int remByRange = -value % wrapRange; if (remByRange == 0) {     return 0 + minValue; } return wrapRange - remByRange + minValue;  =>   int wrapRange = maxValue - minValue + 1; value -= minValue; if (value >= 0) {     return value % wrapRange + minValue; } int remByRange = -value % wrapRange; if (remByRange == 0) {     return 0 + minValue; } return wrapRange - remByRange + minValue;
SDL_60:156:int_getWrappedValue(int,int,int): if (minValue >= maxValue) {     throw new java.lang.IllegalArgumentException( \"MIN > MAX\" ); } int wrapRange = maxValue - minValue + 1; value -= minValue; if (value >= 0) {     return value % wrapRange + minValue; } int remByRange = -value % wrapRange; if (remByRange == 0) {     return 0 + minValue; } return wrapRange - remByRange + minValue;  =>   if (minValue >= maxValue) {     throw new java.lang.IllegalArgumentException( \"MIN > MAX\" ); } int wrapRange = maxValue - minValue + 1; if (value >= 0) {     return value % wrapRange + minValue; } int remByRange = -value % wrapRange; if (remByRange == 0) {     return 0 + minValue; } return wrapRange - remByRange + minValue;
SDL_61:154:int_getWrappedValue(int,int,int): if (minValue >= maxValue) {     throw new java.lang.IllegalArgumentException( \"MIN > MAX\" ); } int wrapRange = maxValue - minValue + 1; value -= minValue; if (value >= 0) {     return value % wrapRange + minValue; } int remByRange = -value % wrapRange; if (remByRange == 0) {     return 0 + minValue; } return wrapRange - remByRange + minValue;  =>   if (minValue >= maxValue) {     throw new java.lang.IllegalArgumentException( \"MIN > MAX\" ); } int wrapRange = maxValue - minValue + 1; value -= minValue; int remByRange = -value % wrapRange; if (remByRange == 0) {     return 0 + minValue; } return wrapRange - remByRange + minValue;
SDL_62:154:int_getWrappedValue(int,int,int): if (minValue >= maxValue) {     throw new java.lang.IllegalArgumentException( \"MIN > MAX\" ); } int wrapRange = maxValue - minValue + 1; value -= minValue; if (value >= 0) {     return value % wrapRange + minValue; } int remByRange = -value % wrapRange; if (remByRange == 0) {     return 0 + minValue; } return wrapRange - remByRange + minValue;  =>   if (minValue >= maxValue) {     throw new java.lang.IllegalArgumentException( \"MIN > MAX\" ); } int wrapRange = maxValue - minValue + 1; value -= minValue; if (value >= 0) {     return value % wrapRange + minValue; } int remByRange = -value % wrapRange; return wrapRange - remByRange + minValue;
SDL_63:145:int_getWrappedValue(int,int,int): throw new java.lang.IllegalArgumentException( \"MIN > MAX\" );  =>  
SDL_64:147:int_getWrappedValue(int,int,int): if (minValue >= maxValue) {     throw new java.lang.IllegalArgumentException( \"MIN > MAX\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"MIN > MAX\" ); }
SDL_65:152:int_getWrappedValue(int,int,int): if (value >= 0) {     return value % wrapRange + minValue; }  =>   if (true) {     return value % wrapRange + minValue; }
SDL_66:151:int_getWrappedValue(int,int,int): return value % wrapRange + minValue;  =>   return 0;
SDL_67:156:int_getWrappedValue(int,int,int): if (remByRange == 0) {     return 0 + minValue; }  =>   if (true) {     return 0 + minValue; }
SDL_68:155:int_getWrappedValue(int,int,int): return 0 + minValue;  =>   return 0;
SDL_69:157:int_getWrappedValue(int,int,int): return wrapRange - remByRange + minValue;  =>   return 0;
SDL_70:165:boolean_equals(java.lang.Object,java.lang.Object): if (object1 == object2) {     return true; } if (object1 == null || object2 == null) {     return false; } return object1.equals( object2 );  =>   if (object1 == null || object2 == null) {     return false; } return object1.equals( object2 );
SDL_71:165:boolean_equals(java.lang.Object,java.lang.Object): if (object1 == object2) {     return true; } if (object1 == null || object2 == null) {     return false; } return object1.equals( object2 );  =>   if (object1 == object2) {     return true; } return object1.equals( object2 );
SDL_72:164:boolean_equals(java.lang.Object,java.lang.Object): if (object1 == object2) {     return true; }  =>   if (true) {     return true; }
SDL_73:163:boolean_equals(java.lang.Object,java.lang.Object): return true;  =>   return false;
SDL_74:167:boolean_equals(java.lang.Object,java.lang.Object): if (object1 == null || object2 == null) {     return false; }  =>   if (true) {     return false; }
SDL_75:166:boolean_equals(java.lang.Object,java.lang.Object): return false;  =>   return true;
SDL_76:168:boolean_equals(java.lang.Object,java.lang.Object): return object1.equals( object2 );  =>   return true;
SDL_77:168:boolean_equals(java.lang.Object,java.lang.Object): return object1.equals( object2 );  =>   return false;
