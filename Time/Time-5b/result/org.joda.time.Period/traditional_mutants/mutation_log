AORB_1:88:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial):i - 1 => i * 1
AORB_2:88:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial):i - 1 => i / 1
AORB_3:88:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial):i - 1 => i % 1
AORB_4:88:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial):i - 1 => i + 1
AORB_5:91:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial):end.getValue( i ) - start.getValue( i ) => end.getValue( i ) * start.getValue( i )
AORB_6:91:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial):end.getValue( i ) - start.getValue( i ) => end.getValue( i ) / start.getValue( i )
AORB_7:91:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial):end.getValue( i ) - start.getValue( i ) => end.getValue( i ) % start.getValue( i )
AORB_8:91:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial):end.getValue( i ) - start.getValue( i ) => end.getValue( i ) + start.getValue( i )
AORB_9:539:org.joda.time.Weeks_toStandardWeeks():(long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND => (long) getSeconds() / DateTimeConstants.MILLIS_PER_SECOND
AORB_10:539:org.joda.time.Weeks_toStandardWeeks():(long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND => (long) getSeconds() % DateTimeConstants.MILLIS_PER_SECOND
AORB_11:539:org.joda.time.Weeks_toStandardWeeks():(long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND => (long) getSeconds() + DateTimeConstants.MILLIS_PER_SECOND
AORB_12:539:org.joda.time.Weeks_toStandardWeeks():(long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND => (long) getSeconds() - DateTimeConstants.MILLIS_PER_SECOND
AORB_13:540:org.joda.time.Weeks_toStandardWeeks():(long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE => (long) getMinutes() / DateTimeConstants.MILLIS_PER_MINUTE
AORB_14:540:org.joda.time.Weeks_toStandardWeeks():(long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE => (long) getMinutes() % DateTimeConstants.MILLIS_PER_MINUTE
AORB_15:540:org.joda.time.Weeks_toStandardWeeks():(long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE => (long) getMinutes() + DateTimeConstants.MILLIS_PER_MINUTE
AORB_16:540:org.joda.time.Weeks_toStandardWeeks():(long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE => (long) getMinutes() - DateTimeConstants.MILLIS_PER_MINUTE
AORB_17:541:org.joda.time.Weeks_toStandardWeeks():(long) getHours() * DateTimeConstants.MILLIS_PER_HOUR => (long) getHours() / DateTimeConstants.MILLIS_PER_HOUR
AORB_18:541:org.joda.time.Weeks_toStandardWeeks():(long) getHours() * DateTimeConstants.MILLIS_PER_HOUR => (long) getHours() % DateTimeConstants.MILLIS_PER_HOUR
AORB_19:541:org.joda.time.Weeks_toStandardWeeks():(long) getHours() * DateTimeConstants.MILLIS_PER_HOUR => (long) getHours() + DateTimeConstants.MILLIS_PER_HOUR
AORB_20:541:org.joda.time.Weeks_toStandardWeeks():(long) getHours() * DateTimeConstants.MILLIS_PER_HOUR => (long) getHours() - DateTimeConstants.MILLIS_PER_HOUR
AORB_21:542:org.joda.time.Weeks_toStandardWeeks():(long) getDays() * DateTimeConstants.MILLIS_PER_DAY => (long) getDays() / DateTimeConstants.MILLIS_PER_DAY
AORB_22:542:org.joda.time.Weeks_toStandardWeeks():(long) getDays() * DateTimeConstants.MILLIS_PER_DAY => (long) getDays() % DateTimeConstants.MILLIS_PER_DAY
AORB_23:542:org.joda.time.Weeks_toStandardWeeks():(long) getDays() * DateTimeConstants.MILLIS_PER_DAY => (long) getDays() + DateTimeConstants.MILLIS_PER_DAY
AORB_24:542:org.joda.time.Weeks_toStandardWeeks():(long) getDays() * DateTimeConstants.MILLIS_PER_DAY => (long) getDays() - DateTimeConstants.MILLIS_PER_DAY
AORB_25:543:org.joda.time.Weeks_toStandardWeeks():millis / DateTimeConstants.MILLIS_PER_WEEK => millis * DateTimeConstants.MILLIS_PER_WEEK
AORB_26:543:org.joda.time.Weeks_toStandardWeeks():millis / DateTimeConstants.MILLIS_PER_WEEK => millis % DateTimeConstants.MILLIS_PER_WEEK
AORB_27:543:org.joda.time.Weeks_toStandardWeeks():millis / DateTimeConstants.MILLIS_PER_WEEK => millis + DateTimeConstants.MILLIS_PER_WEEK
AORB_28:543:org.joda.time.Weeks_toStandardWeeks():millis / DateTimeConstants.MILLIS_PER_WEEK => millis - DateTimeConstants.MILLIS_PER_WEEK
AORB_29:543:org.joda.time.Weeks_toStandardWeeks():(long) getWeeks() + millis / DateTimeConstants.MILLIS_PER_WEEK => (long) getWeeks() * (millis / DateTimeConstants.MILLIS_PER_WEEK)
AORB_30:543:org.joda.time.Weeks_toStandardWeeks():(long) getWeeks() + millis / DateTimeConstants.MILLIS_PER_WEEK => (long) getWeeks() / (millis / DateTimeConstants.MILLIS_PER_WEEK)
AORB_31:543:org.joda.time.Weeks_toStandardWeeks():(long) getWeeks() + millis / DateTimeConstants.MILLIS_PER_WEEK => (long) getWeeks() % (millis / DateTimeConstants.MILLIS_PER_WEEK)
AORB_32:543:org.joda.time.Weeks_toStandardWeeks():(long) getWeeks() + millis / DateTimeConstants.MILLIS_PER_WEEK => (long) getWeeks() - millis / DateTimeConstants.MILLIS_PER_WEEK
AORB_33:551:org.joda.time.Days_toStandardDays():(long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND => (long) getSeconds() / DateTimeConstants.MILLIS_PER_SECOND
AORB_34:551:org.joda.time.Days_toStandardDays():(long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND => (long) getSeconds() % DateTimeConstants.MILLIS_PER_SECOND
AORB_35:551:org.joda.time.Days_toStandardDays():(long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND => (long) getSeconds() + DateTimeConstants.MILLIS_PER_SECOND
AORB_36:551:org.joda.time.Days_toStandardDays():(long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND => (long) getSeconds() - DateTimeConstants.MILLIS_PER_SECOND
AORB_37:552:org.joda.time.Days_toStandardDays():(long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE => (long) getMinutes() / DateTimeConstants.MILLIS_PER_MINUTE
AORB_38:552:org.joda.time.Days_toStandardDays():(long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE => (long) getMinutes() % DateTimeConstants.MILLIS_PER_MINUTE
AORB_39:552:org.joda.time.Days_toStandardDays():(long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE => (long) getMinutes() + DateTimeConstants.MILLIS_PER_MINUTE
AORB_40:552:org.joda.time.Days_toStandardDays():(long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE => (long) getMinutes() - DateTimeConstants.MILLIS_PER_MINUTE
AORB_41:553:org.joda.time.Days_toStandardDays():(long) getHours() * DateTimeConstants.MILLIS_PER_HOUR => (long) getHours() / DateTimeConstants.MILLIS_PER_HOUR
AORB_42:553:org.joda.time.Days_toStandardDays():(long) getHours() * DateTimeConstants.MILLIS_PER_HOUR => (long) getHours() % DateTimeConstants.MILLIS_PER_HOUR
AORB_43:553:org.joda.time.Days_toStandardDays():(long) getHours() * DateTimeConstants.MILLIS_PER_HOUR => (long) getHours() + DateTimeConstants.MILLIS_PER_HOUR
AORB_44:553:org.joda.time.Days_toStandardDays():(long) getHours() * DateTimeConstants.MILLIS_PER_HOUR => (long) getHours() - DateTimeConstants.MILLIS_PER_HOUR
AORB_45:554:org.joda.time.Days_toStandardDays():millis / DateTimeConstants.MILLIS_PER_DAY => millis * DateTimeConstants.MILLIS_PER_DAY
AORB_46:554:org.joda.time.Days_toStandardDays():millis / DateTimeConstants.MILLIS_PER_DAY => millis % DateTimeConstants.MILLIS_PER_DAY
AORB_47:554:org.joda.time.Days_toStandardDays():millis / DateTimeConstants.MILLIS_PER_DAY => millis + DateTimeConstants.MILLIS_PER_DAY
AORB_48:554:org.joda.time.Days_toStandardDays():millis / DateTimeConstants.MILLIS_PER_DAY => millis - DateTimeConstants.MILLIS_PER_DAY
AORB_49:556:org.joda.time.Days_toStandardDays():(long) getWeeks() * (long) DateTimeConstants.DAYS_PER_WEEK => (long) getWeeks() / (long) DateTimeConstants.DAYS_PER_WEEK
AORB_50:556:org.joda.time.Days_toStandardDays():(long) getWeeks() * (long) DateTimeConstants.DAYS_PER_WEEK => (long) getWeeks() % (long) DateTimeConstants.DAYS_PER_WEEK
AORB_51:556:org.joda.time.Days_toStandardDays():(long) getWeeks() * (long) DateTimeConstants.DAYS_PER_WEEK => (long) getWeeks() + (long) DateTimeConstants.DAYS_PER_WEEK
AORB_52:556:org.joda.time.Days_toStandardDays():(long) getWeeks() * (long) DateTimeConstants.DAYS_PER_WEEK => (long) getWeeks() - (long) DateTimeConstants.DAYS_PER_WEEK
AORB_53:564:org.joda.time.Hours_toStandardHours():(long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND => (long) getSeconds() / DateTimeConstants.MILLIS_PER_SECOND
AORB_54:564:org.joda.time.Hours_toStandardHours():(long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND => (long) getSeconds() % DateTimeConstants.MILLIS_PER_SECOND
AORB_55:564:org.joda.time.Hours_toStandardHours():(long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND => (long) getSeconds() + DateTimeConstants.MILLIS_PER_SECOND
AORB_56:564:org.joda.time.Hours_toStandardHours():(long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND => (long) getSeconds() - DateTimeConstants.MILLIS_PER_SECOND
AORB_57:565:org.joda.time.Hours_toStandardHours():(long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE => (long) getMinutes() / DateTimeConstants.MILLIS_PER_MINUTE
AORB_58:565:org.joda.time.Hours_toStandardHours():(long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE => (long) getMinutes() % DateTimeConstants.MILLIS_PER_MINUTE
AORB_59:565:org.joda.time.Hours_toStandardHours():(long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE => (long) getMinutes() + DateTimeConstants.MILLIS_PER_MINUTE
AORB_60:565:org.joda.time.Hours_toStandardHours():(long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE => (long) getMinutes() - DateTimeConstants.MILLIS_PER_MINUTE
AORB_61:566:org.joda.time.Hours_toStandardHours():millis / DateTimeConstants.MILLIS_PER_HOUR => millis * DateTimeConstants.MILLIS_PER_HOUR
AORB_62:566:org.joda.time.Hours_toStandardHours():millis / DateTimeConstants.MILLIS_PER_HOUR => millis % DateTimeConstants.MILLIS_PER_HOUR
AORB_63:566:org.joda.time.Hours_toStandardHours():millis / DateTimeConstants.MILLIS_PER_HOUR => millis + DateTimeConstants.MILLIS_PER_HOUR
AORB_64:566:org.joda.time.Hours_toStandardHours():millis / DateTimeConstants.MILLIS_PER_HOUR => millis - DateTimeConstants.MILLIS_PER_HOUR
AORB_65:568:org.joda.time.Hours_toStandardHours():(long) getDays() * (long) DateTimeConstants.HOURS_PER_DAY => (long) getDays() / (long) DateTimeConstants.HOURS_PER_DAY
AORB_66:568:org.joda.time.Hours_toStandardHours():(long) getDays() * (long) DateTimeConstants.HOURS_PER_DAY => (long) getDays() % (long) DateTimeConstants.HOURS_PER_DAY
AORB_67:568:org.joda.time.Hours_toStandardHours():(long) getDays() * (long) DateTimeConstants.HOURS_PER_DAY => (long) getDays() + (long) DateTimeConstants.HOURS_PER_DAY
AORB_68:568:org.joda.time.Hours_toStandardHours():(long) getDays() * (long) DateTimeConstants.HOURS_PER_DAY => (long) getDays() - (long) DateTimeConstants.HOURS_PER_DAY
AORB_69:569:org.joda.time.Hours_toStandardHours():(long) getWeeks() * (long) DateTimeConstants.HOURS_PER_WEEK => (long) getWeeks() / (long) DateTimeConstants.HOURS_PER_WEEK
AORB_70:569:org.joda.time.Hours_toStandardHours():(long) getWeeks() * (long) DateTimeConstants.HOURS_PER_WEEK => (long) getWeeks() % (long) DateTimeConstants.HOURS_PER_WEEK
AORB_71:569:org.joda.time.Hours_toStandardHours():(long) getWeeks() * (long) DateTimeConstants.HOURS_PER_WEEK => (long) getWeeks() + (long) DateTimeConstants.HOURS_PER_WEEK
AORB_72:569:org.joda.time.Hours_toStandardHours():(long) getWeeks() * (long) DateTimeConstants.HOURS_PER_WEEK => (long) getWeeks() - (long) DateTimeConstants.HOURS_PER_WEEK
AORB_73:577:org.joda.time.Minutes_toStandardMinutes():(long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND => (long) getSeconds() / DateTimeConstants.MILLIS_PER_SECOND
AORB_74:577:org.joda.time.Minutes_toStandardMinutes():(long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND => (long) getSeconds() % DateTimeConstants.MILLIS_PER_SECOND
AORB_75:577:org.joda.time.Minutes_toStandardMinutes():(long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND => (long) getSeconds() + DateTimeConstants.MILLIS_PER_SECOND
AORB_76:577:org.joda.time.Minutes_toStandardMinutes():(long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND => (long) getSeconds() - DateTimeConstants.MILLIS_PER_SECOND
AORB_77:578:org.joda.time.Minutes_toStandardMinutes():millis / DateTimeConstants.MILLIS_PER_MINUTE => millis * DateTimeConstants.MILLIS_PER_MINUTE
AORB_78:578:org.joda.time.Minutes_toStandardMinutes():millis / DateTimeConstants.MILLIS_PER_MINUTE => millis % DateTimeConstants.MILLIS_PER_MINUTE
AORB_79:578:org.joda.time.Minutes_toStandardMinutes():millis / DateTimeConstants.MILLIS_PER_MINUTE => millis + DateTimeConstants.MILLIS_PER_MINUTE
AORB_80:578:org.joda.time.Minutes_toStandardMinutes():millis / DateTimeConstants.MILLIS_PER_MINUTE => millis - DateTimeConstants.MILLIS_PER_MINUTE
AORB_81:580:org.joda.time.Minutes_toStandardMinutes():(long) getHours() * (long) DateTimeConstants.MINUTES_PER_HOUR => (long) getHours() / (long) DateTimeConstants.MINUTES_PER_HOUR
AORB_82:580:org.joda.time.Minutes_toStandardMinutes():(long) getHours() * (long) DateTimeConstants.MINUTES_PER_HOUR => (long) getHours() % (long) DateTimeConstants.MINUTES_PER_HOUR
AORB_83:580:org.joda.time.Minutes_toStandardMinutes():(long) getHours() * (long) DateTimeConstants.MINUTES_PER_HOUR => (long) getHours() + (long) DateTimeConstants.MINUTES_PER_HOUR
AORB_84:580:org.joda.time.Minutes_toStandardMinutes():(long) getHours() * (long) DateTimeConstants.MINUTES_PER_HOUR => (long) getHours() - (long) DateTimeConstants.MINUTES_PER_HOUR
AORB_85:581:org.joda.time.Minutes_toStandardMinutes():(long) getDays() * (long) DateTimeConstants.MINUTES_PER_DAY => (long) getDays() / (long) DateTimeConstants.MINUTES_PER_DAY
AORB_86:581:org.joda.time.Minutes_toStandardMinutes():(long) getDays() * (long) DateTimeConstants.MINUTES_PER_DAY => (long) getDays() % (long) DateTimeConstants.MINUTES_PER_DAY
AORB_87:581:org.joda.time.Minutes_toStandardMinutes():(long) getDays() * (long) DateTimeConstants.MINUTES_PER_DAY => (long) getDays() + (long) DateTimeConstants.MINUTES_PER_DAY
AORB_88:581:org.joda.time.Minutes_toStandardMinutes():(long) getDays() * (long) DateTimeConstants.MINUTES_PER_DAY => (long) getDays() - (long) DateTimeConstants.MINUTES_PER_DAY
AORB_89:582:org.joda.time.Minutes_toStandardMinutes():(long) getWeeks() * (long) DateTimeConstants.MINUTES_PER_WEEK => (long) getWeeks() / (long) DateTimeConstants.MINUTES_PER_WEEK
AORB_90:582:org.joda.time.Minutes_toStandardMinutes():(long) getWeeks() * (long) DateTimeConstants.MINUTES_PER_WEEK => (long) getWeeks() % (long) DateTimeConstants.MINUTES_PER_WEEK
AORB_91:582:org.joda.time.Minutes_toStandardMinutes():(long) getWeeks() * (long) DateTimeConstants.MINUTES_PER_WEEK => (long) getWeeks() + (long) DateTimeConstants.MINUTES_PER_WEEK
AORB_92:582:org.joda.time.Minutes_toStandardMinutes():(long) getWeeks() * (long) DateTimeConstants.MINUTES_PER_WEEK => (long) getWeeks() - (long) DateTimeConstants.MINUTES_PER_WEEK
AORB_93:589:org.joda.time.Seconds_toStandardSeconds():getMillis() / DateTimeConstants.MILLIS_PER_SECOND => getMillis() * DateTimeConstants.MILLIS_PER_SECOND
AORB_94:589:org.joda.time.Seconds_toStandardSeconds():getMillis() / DateTimeConstants.MILLIS_PER_SECOND => getMillis() % DateTimeConstants.MILLIS_PER_SECOND
AORB_95:589:org.joda.time.Seconds_toStandardSeconds():getMillis() / DateTimeConstants.MILLIS_PER_SECOND => getMillis() + DateTimeConstants.MILLIS_PER_SECOND
AORB_96:589:org.joda.time.Seconds_toStandardSeconds():getMillis() / DateTimeConstants.MILLIS_PER_SECOND => getMillis() - DateTimeConstants.MILLIS_PER_SECOND
AORB_97:591:org.joda.time.Seconds_toStandardSeconds():(long) getMinutes() * (long) DateTimeConstants.SECONDS_PER_MINUTE => (long) getMinutes() / (long) DateTimeConstants.SECONDS_PER_MINUTE
AORB_98:591:org.joda.time.Seconds_toStandardSeconds():(long) getMinutes() * (long) DateTimeConstants.SECONDS_PER_MINUTE => (long) getMinutes() % (long) DateTimeConstants.SECONDS_PER_MINUTE
AORB_99:591:org.joda.time.Seconds_toStandardSeconds():(long) getMinutes() * (long) DateTimeConstants.SECONDS_PER_MINUTE => (long) getMinutes() + (long) DateTimeConstants.SECONDS_PER_MINUTE
AORB_100:591:org.joda.time.Seconds_toStandardSeconds():(long) getMinutes() * (long) DateTimeConstants.SECONDS_PER_MINUTE => (long) getMinutes() - (long) DateTimeConstants.SECONDS_PER_MINUTE
AORB_101:592:org.joda.time.Seconds_toStandardSeconds():(long) getHours() * (long) DateTimeConstants.SECONDS_PER_HOUR => (long) getHours() / (long) DateTimeConstants.SECONDS_PER_HOUR
AORB_102:592:org.joda.time.Seconds_toStandardSeconds():(long) getHours() * (long) DateTimeConstants.SECONDS_PER_HOUR => (long) getHours() % (long) DateTimeConstants.SECONDS_PER_HOUR
AORB_103:592:org.joda.time.Seconds_toStandardSeconds():(long) getHours() * (long) DateTimeConstants.SECONDS_PER_HOUR => (long) getHours() + (long) DateTimeConstants.SECONDS_PER_HOUR
AORB_104:592:org.joda.time.Seconds_toStandardSeconds():(long) getHours() * (long) DateTimeConstants.SECONDS_PER_HOUR => (long) getHours() - (long) DateTimeConstants.SECONDS_PER_HOUR
AORB_105:593:org.joda.time.Seconds_toStandardSeconds():(long) getDays() * (long) DateTimeConstants.SECONDS_PER_DAY => (long) getDays() / (long) DateTimeConstants.SECONDS_PER_DAY
AORB_106:593:org.joda.time.Seconds_toStandardSeconds():(long) getDays() * (long) DateTimeConstants.SECONDS_PER_DAY => (long) getDays() % (long) DateTimeConstants.SECONDS_PER_DAY
AORB_107:593:org.joda.time.Seconds_toStandardSeconds():(long) getDays() * (long) DateTimeConstants.SECONDS_PER_DAY => (long) getDays() + (long) DateTimeConstants.SECONDS_PER_DAY
AORB_108:593:org.joda.time.Seconds_toStandardSeconds():(long) getDays() * (long) DateTimeConstants.SECONDS_PER_DAY => (long) getDays() - (long) DateTimeConstants.SECONDS_PER_DAY
AORB_109:594:org.joda.time.Seconds_toStandardSeconds():(long) getWeeks() * (long) DateTimeConstants.SECONDS_PER_WEEK => (long) getWeeks() / (long) DateTimeConstants.SECONDS_PER_WEEK
AORB_110:594:org.joda.time.Seconds_toStandardSeconds():(long) getWeeks() * (long) DateTimeConstants.SECONDS_PER_WEEK => (long) getWeeks() % (long) DateTimeConstants.SECONDS_PER_WEEK
AORB_111:594:org.joda.time.Seconds_toStandardSeconds():(long) getWeeks() * (long) DateTimeConstants.SECONDS_PER_WEEK => (long) getWeeks() + (long) DateTimeConstants.SECONDS_PER_WEEK
AORB_112:594:org.joda.time.Seconds_toStandardSeconds():(long) getWeeks() * (long) DateTimeConstants.SECONDS_PER_WEEK => (long) getWeeks() - (long) DateTimeConstants.SECONDS_PER_WEEK
AORB_113:602:org.joda.time.Duration_toStandardDuration():(long) getSeconds() * (long) DateTimeConstants.MILLIS_PER_SECOND => (long) getSeconds() / (long) DateTimeConstants.MILLIS_PER_SECOND
AORB_114:602:org.joda.time.Duration_toStandardDuration():(long) getSeconds() * (long) DateTimeConstants.MILLIS_PER_SECOND => (long) getSeconds() % (long) DateTimeConstants.MILLIS_PER_SECOND
AORB_115:602:org.joda.time.Duration_toStandardDuration():(long) getSeconds() * (long) DateTimeConstants.MILLIS_PER_SECOND => (long) getSeconds() + (long) DateTimeConstants.MILLIS_PER_SECOND
AORB_116:602:org.joda.time.Duration_toStandardDuration():(long) getSeconds() * (long) DateTimeConstants.MILLIS_PER_SECOND => (long) getSeconds() - (long) DateTimeConstants.MILLIS_PER_SECOND
AORB_117:603:org.joda.time.Duration_toStandardDuration():(long) getMinutes() * (long) DateTimeConstants.MILLIS_PER_MINUTE => (long) getMinutes() / (long) DateTimeConstants.MILLIS_PER_MINUTE
AORB_118:603:org.joda.time.Duration_toStandardDuration():(long) getMinutes() * (long) DateTimeConstants.MILLIS_PER_MINUTE => (long) getMinutes() % (long) DateTimeConstants.MILLIS_PER_MINUTE
AORB_119:603:org.joda.time.Duration_toStandardDuration():(long) getMinutes() * (long) DateTimeConstants.MILLIS_PER_MINUTE => (long) getMinutes() + (long) DateTimeConstants.MILLIS_PER_MINUTE
AORB_120:603:org.joda.time.Duration_toStandardDuration():(long) getMinutes() * (long) DateTimeConstants.MILLIS_PER_MINUTE => (long) getMinutes() - (long) DateTimeConstants.MILLIS_PER_MINUTE
AORB_121:604:org.joda.time.Duration_toStandardDuration():(long) getHours() * (long) DateTimeConstants.MILLIS_PER_HOUR => (long) getHours() / (long) DateTimeConstants.MILLIS_PER_HOUR
AORB_122:604:org.joda.time.Duration_toStandardDuration():(long) getHours() * (long) DateTimeConstants.MILLIS_PER_HOUR => (long) getHours() % (long) DateTimeConstants.MILLIS_PER_HOUR
AORB_123:604:org.joda.time.Duration_toStandardDuration():(long) getHours() * (long) DateTimeConstants.MILLIS_PER_HOUR => (long) getHours() + (long) DateTimeConstants.MILLIS_PER_HOUR
AORB_124:604:org.joda.time.Duration_toStandardDuration():(long) getHours() * (long) DateTimeConstants.MILLIS_PER_HOUR => (long) getHours() - (long) DateTimeConstants.MILLIS_PER_HOUR
AORB_125:605:org.joda.time.Duration_toStandardDuration():(long) getDays() * (long) DateTimeConstants.MILLIS_PER_DAY => (long) getDays() / (long) DateTimeConstants.MILLIS_PER_DAY
AORB_126:605:org.joda.time.Duration_toStandardDuration():(long) getDays() * (long) DateTimeConstants.MILLIS_PER_DAY => (long) getDays() % (long) DateTimeConstants.MILLIS_PER_DAY
AORB_127:605:org.joda.time.Duration_toStandardDuration():(long) getDays() * (long) DateTimeConstants.MILLIS_PER_DAY => (long) getDays() + (long) DateTimeConstants.MILLIS_PER_DAY
AORB_128:605:org.joda.time.Duration_toStandardDuration():(long) getDays() * (long) DateTimeConstants.MILLIS_PER_DAY => (long) getDays() - (long) DateTimeConstants.MILLIS_PER_DAY
AORB_129:606:org.joda.time.Duration_toStandardDuration():(long) getWeeks() * (long) DateTimeConstants.MILLIS_PER_WEEK => (long) getWeeks() / (long) DateTimeConstants.MILLIS_PER_WEEK
AORB_130:606:org.joda.time.Duration_toStandardDuration():(long) getWeeks() * (long) DateTimeConstants.MILLIS_PER_WEEK => (long) getWeeks() % (long) DateTimeConstants.MILLIS_PER_WEEK
AORB_131:606:org.joda.time.Duration_toStandardDuration():(long) getWeeks() * (long) DateTimeConstants.MILLIS_PER_WEEK => (long) getWeeks() + (long) DateTimeConstants.MILLIS_PER_WEEK
AORB_132:606:org.joda.time.Duration_toStandardDuration():(long) getWeeks() * (long) DateTimeConstants.MILLIS_PER_WEEK => (long) getWeeks() - (long) DateTimeConstants.MILLIS_PER_WEEK
AORB_133:629:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType):(long) getSeconds() * (long) DateTimeConstants.MILLIS_PER_SECOND => (long) getSeconds() / (long) DateTimeConstants.MILLIS_PER_SECOND
AORB_134:629:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType):(long) getSeconds() * (long) DateTimeConstants.MILLIS_PER_SECOND => (long) getSeconds() % (long) DateTimeConstants.MILLIS_PER_SECOND
AORB_135:629:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType):(long) getSeconds() * (long) DateTimeConstants.MILLIS_PER_SECOND => (long) getSeconds() + (long) DateTimeConstants.MILLIS_PER_SECOND
AORB_136:629:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType):(long) getSeconds() * (long) DateTimeConstants.MILLIS_PER_SECOND => (long) getSeconds() - (long) DateTimeConstants.MILLIS_PER_SECOND
AORB_137:630:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType):(long) getMinutes() * (long) DateTimeConstants.MILLIS_PER_MINUTE => (long) getMinutes() / (long) DateTimeConstants.MILLIS_PER_MINUTE
AORB_138:630:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType):(long) getMinutes() * (long) DateTimeConstants.MILLIS_PER_MINUTE => (long) getMinutes() % (long) DateTimeConstants.MILLIS_PER_MINUTE
AORB_139:630:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType):(long) getMinutes() * (long) DateTimeConstants.MILLIS_PER_MINUTE => (long) getMinutes() + (long) DateTimeConstants.MILLIS_PER_MINUTE
AORB_140:630:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType):(long) getMinutes() * (long) DateTimeConstants.MILLIS_PER_MINUTE => (long) getMinutes() - (long) DateTimeConstants.MILLIS_PER_MINUTE
AORB_141:631:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType):(long) getHours() * (long) DateTimeConstants.MILLIS_PER_HOUR => (long) getHours() / (long) DateTimeConstants.MILLIS_PER_HOUR
AORB_142:631:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType):(long) getHours() * (long) DateTimeConstants.MILLIS_PER_HOUR => (long) getHours() % (long) DateTimeConstants.MILLIS_PER_HOUR
AORB_143:631:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType):(long) getHours() * (long) DateTimeConstants.MILLIS_PER_HOUR => (long) getHours() + (long) DateTimeConstants.MILLIS_PER_HOUR
AORB_144:631:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType):(long) getHours() * (long) DateTimeConstants.MILLIS_PER_HOUR => (long) getHours() - (long) DateTimeConstants.MILLIS_PER_HOUR
AORB_145:632:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType):(long) getDays() * (long) DateTimeConstants.MILLIS_PER_DAY => (long) getDays() / (long) DateTimeConstants.MILLIS_PER_DAY
AORB_146:632:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType):(long) getDays() * (long) DateTimeConstants.MILLIS_PER_DAY => (long) getDays() % (long) DateTimeConstants.MILLIS_PER_DAY
AORB_147:632:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType):(long) getDays() * (long) DateTimeConstants.MILLIS_PER_DAY => (long) getDays() + (long) DateTimeConstants.MILLIS_PER_DAY
AORB_148:632:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType):(long) getDays() * (long) DateTimeConstants.MILLIS_PER_DAY => (long) getDays() - (long) DateTimeConstants.MILLIS_PER_DAY
AORB_149:633:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType):(long) getWeeks() * (long) DateTimeConstants.MILLIS_PER_WEEK => (long) getWeeks() / (long) DateTimeConstants.MILLIS_PER_WEEK
AORB_150:633:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType):(long) getWeeks() * (long) DateTimeConstants.MILLIS_PER_WEEK => (long) getWeeks() % (long) DateTimeConstants.MILLIS_PER_WEEK
AORB_151:633:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType):(long) getWeeks() * (long) DateTimeConstants.MILLIS_PER_WEEK => (long) getWeeks() + (long) DateTimeConstants.MILLIS_PER_WEEK
AORB_152:633:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType):(long) getWeeks() * (long) DateTimeConstants.MILLIS_PER_WEEK => (long) getWeeks() - (long) DateTimeConstants.MILLIS_PER_WEEK
AORB_153:638:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType):months / 12 => months * 12
AORB_154:638:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType):months / 12 => months % 12
AORB_155:638:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType):months / 12 => months + 12
AORB_156:638:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType):months / 12 => months - 12
AORB_157:639:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType):months % 12 => months * 12
AORB_158:639:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType):months % 12 => months / 12
AORB_159:639:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType):months % 12 => months + 12
AORB_160:639:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType):months % 12 => months - 12
ROR_1:75:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): start == null  =>   start != null
ROR_2:75:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): end == null  =>   end != null
ROR_3:78:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): start.size() != end.size()  =>   start.size() > end.size()
ROR_4:78:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): start.size() != end.size()  =>   start.size() >= end.size()
ROR_5:78:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): start.size() != end.size()  =>   start.size() < end.size()
ROR_6:78:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): start.size() != end.size()  =>   start.size() <= end.size()
ROR_7:78:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): start.size() != end.size()  =>   start.size() == end.size()
ROR_8:78:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): start.size() != end.size()  =>   true
ROR_9:78:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): start.size() != end.size()  =>   false
ROR_10:83:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): i < isize  =>   i > isize
ROR_11:83:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): i < isize  =>   i >= isize
ROR_12:83:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): i < isize  =>   i <= isize
ROR_13:83:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): i < isize  =>   i == isize
ROR_14:83:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): i < isize  =>   i != isize
ROR_15:83:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): i < isize  =>   true
ROR_16:83:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): i < isize  =>   false
ROR_17:84:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): start.getFieldType( i ) != end.getFieldType( i )  =>   start.getFieldType( i ) == end.getFieldType( i )
ROR_18:88:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): i > 0  =>   i >= 0
ROR_19:88:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): i > 0  =>   i < 0
ROR_20:88:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): i > 0  =>   i <= 0
ROR_21:88:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): i > 0  =>   i == 0
ROR_22:88:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): i > 0  =>   i != 0
ROR_23:88:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): i > 0  =>   true
ROR_24:88:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): i > 0  =>   false
ROR_25:88:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): types[i - 1] == types[i]  =>   types[i - 1] != types[i]
ROR_26:277:org.joda.time.Period_withFields(org.joda.time.ReadablePeriod): period == null  =>   period != null
ROR_27:287:org.joda.time.Period_withField(org.joda.time.DurationFieldType,int): field == null  =>   field != null
ROR_28:297:org.joda.time.Period_withFieldAdded(org.joda.time.DurationFieldType,int): field == null  =>   field != null
ROR_29:300:org.joda.time.Period_withFieldAdded(org.joda.time.DurationFieldType,int): value == 0  =>   value > 0
ROR_30:300:org.joda.time.Period_withFieldAdded(org.joda.time.DurationFieldType,int): value == 0  =>   value >= 0
ROR_31:300:org.joda.time.Period_withFieldAdded(org.joda.time.DurationFieldType,int): value == 0  =>   value < 0
ROR_32:300:org.joda.time.Period_withFieldAdded(org.joda.time.DurationFieldType,int): value == 0  =>   value <= 0
ROR_33:300:org.joda.time.Period_withFieldAdded(org.joda.time.DurationFieldType,int): value == 0  =>   value != 0
ROR_34:300:org.joda.time.Period_withFieldAdded(org.joda.time.DurationFieldType,int): value == 0  =>   true
ROR_35:300:org.joda.time.Period_withFieldAdded(org.joda.time.DurationFieldType,int): value == 0  =>   false
ROR_36:366:org.joda.time.Period_plus(org.joda.time.ReadablePeriod): period == null  =>   period != null
ROR_37:383:org.joda.time.Period_plusYears(int): years == 0  =>   years > 0
ROR_38:383:org.joda.time.Period_plusYears(int): years == 0  =>   years >= 0
ROR_39:383:org.joda.time.Period_plusYears(int): years == 0  =>   years < 0
ROR_40:383:org.joda.time.Period_plusYears(int): years == 0  =>   years <= 0
ROR_41:383:org.joda.time.Period_plusYears(int): years == 0  =>   years != 0
ROR_42:383:org.joda.time.Period_plusYears(int): years == 0  =>   true
ROR_43:383:org.joda.time.Period_plusYears(int): years == 0  =>   false
ROR_44:393:org.joda.time.Period_plusMonths(int): months == 0  =>   months > 0
ROR_45:393:org.joda.time.Period_plusMonths(int): months == 0  =>   months >= 0
ROR_46:393:org.joda.time.Period_plusMonths(int): months == 0  =>   months < 0
ROR_47:393:org.joda.time.Period_plusMonths(int): months == 0  =>   months <= 0
ROR_48:393:org.joda.time.Period_plusMonths(int): months == 0  =>   months != 0
ROR_49:393:org.joda.time.Period_plusMonths(int): months == 0  =>   true
ROR_50:393:org.joda.time.Period_plusMonths(int): months == 0  =>   false
ROR_51:403:org.joda.time.Period_plusWeeks(int): weeks == 0  =>   weeks > 0
ROR_52:403:org.joda.time.Period_plusWeeks(int): weeks == 0  =>   weeks >= 0
ROR_53:403:org.joda.time.Period_plusWeeks(int): weeks == 0  =>   weeks < 0
ROR_54:403:org.joda.time.Period_plusWeeks(int): weeks == 0  =>   weeks <= 0
ROR_55:403:org.joda.time.Period_plusWeeks(int): weeks == 0  =>   weeks != 0
ROR_56:403:org.joda.time.Period_plusWeeks(int): weeks == 0  =>   true
ROR_57:403:org.joda.time.Period_plusWeeks(int): weeks == 0  =>   false
ROR_58:413:org.joda.time.Period_plusDays(int): days == 0  =>   days > 0
ROR_59:413:org.joda.time.Period_plusDays(int): days == 0  =>   days >= 0
ROR_60:413:org.joda.time.Period_plusDays(int): days == 0  =>   days < 0
ROR_61:413:org.joda.time.Period_plusDays(int): days == 0  =>   days <= 0
ROR_62:413:org.joda.time.Period_plusDays(int): days == 0  =>   days != 0
ROR_63:413:org.joda.time.Period_plusDays(int): days == 0  =>   true
ROR_64:413:org.joda.time.Period_plusDays(int): days == 0  =>   false
ROR_65:423:org.joda.time.Period_plusHours(int): hours == 0  =>   hours > 0
ROR_66:423:org.joda.time.Period_plusHours(int): hours == 0  =>   hours >= 0
ROR_67:423:org.joda.time.Period_plusHours(int): hours == 0  =>   hours < 0
ROR_68:423:org.joda.time.Period_plusHours(int): hours == 0  =>   hours <= 0
ROR_69:423:org.joda.time.Period_plusHours(int): hours == 0  =>   hours != 0
ROR_70:423:org.joda.time.Period_plusHours(int): hours == 0  =>   true
ROR_71:423:org.joda.time.Period_plusHours(int): hours == 0  =>   false
ROR_72:433:org.joda.time.Period_plusMinutes(int): minutes == 0  =>   minutes > 0
ROR_73:433:org.joda.time.Period_plusMinutes(int): minutes == 0  =>   minutes >= 0
ROR_74:433:org.joda.time.Period_plusMinutes(int): minutes == 0  =>   minutes < 0
ROR_75:433:org.joda.time.Period_plusMinutes(int): minutes == 0  =>   minutes <= 0
ROR_76:433:org.joda.time.Period_plusMinutes(int): minutes == 0  =>   minutes != 0
ROR_77:433:org.joda.time.Period_plusMinutes(int): minutes == 0  =>   true
ROR_78:433:org.joda.time.Period_plusMinutes(int): minutes == 0  =>   false
ROR_79:443:org.joda.time.Period_plusSeconds(int): seconds == 0  =>   seconds > 0
ROR_80:443:org.joda.time.Period_plusSeconds(int): seconds == 0  =>   seconds >= 0
ROR_81:443:org.joda.time.Period_plusSeconds(int): seconds == 0  =>   seconds < 0
ROR_82:443:org.joda.time.Period_plusSeconds(int): seconds == 0  =>   seconds <= 0
ROR_83:443:org.joda.time.Period_plusSeconds(int): seconds == 0  =>   seconds != 0
ROR_84:443:org.joda.time.Period_plusSeconds(int): seconds == 0  =>   true
ROR_85:443:org.joda.time.Period_plusSeconds(int): seconds == 0  =>   false
ROR_86:453:org.joda.time.Period_plusMillis(int): millis == 0  =>   millis > 0
ROR_87:453:org.joda.time.Period_plusMillis(int): millis == 0  =>   millis >= 0
ROR_88:453:org.joda.time.Period_plusMillis(int): millis == 0  =>   millis < 0
ROR_89:453:org.joda.time.Period_plusMillis(int): millis == 0  =>   millis <= 0
ROR_90:453:org.joda.time.Period_plusMillis(int): millis == 0  =>   millis != 0
ROR_91:453:org.joda.time.Period_plusMillis(int): millis == 0  =>   true
ROR_92:453:org.joda.time.Period_plusMillis(int): millis == 0  =>   false
ROR_93:463:org.joda.time.Period_minus(org.joda.time.ReadablePeriod): period == null  =>   period != null
ROR_94:520:org.joda.time.Period_multipliedBy(int): this == ZERO  =>   this != ZERO
ROR_95:520:org.joda.time.Period_multipliedBy(int): scalar == 1  =>   scalar > 1
ROR_96:520:org.joda.time.Period_multipliedBy(int): scalar == 1  =>   scalar >= 1
ROR_97:520:org.joda.time.Period_multipliedBy(int): scalar == 1  =>   scalar < 1
ROR_98:520:org.joda.time.Period_multipliedBy(int): scalar == 1  =>   scalar <= 1
ROR_99:520:org.joda.time.Period_multipliedBy(int): scalar == 1  =>   scalar != 1
ROR_100:520:org.joda.time.Period_multipliedBy(int): scalar == 1  =>   true
ROR_101:520:org.joda.time.Period_multipliedBy(int): scalar == 1  =>   false
ROR_102:524:org.joda.time.Period_multipliedBy(int): i < values.length  =>   i > values.length
ROR_103:524:org.joda.time.Period_multipliedBy(int): i < values.length  =>   i >= values.length
ROR_104:524:org.joda.time.Period_multipliedBy(int): i < values.length  =>   i <= values.length
ROR_105:524:org.joda.time.Period_multipliedBy(int): i < values.length  =>   i == values.length
ROR_106:524:org.joda.time.Period_multipliedBy(int): i < values.length  =>   i != values.length
ROR_107:524:org.joda.time.Period_multipliedBy(int): i < values.length  =>   true
ROR_108:524:org.joda.time.Period_multipliedBy(int): i < values.length  =>   false
ROR_109:612:void_checkYearsAndMonths(java.lang.String): getMonths() != 0  =>   getMonths() > 0
ROR_110:612:void_checkYearsAndMonths(java.lang.String): getMonths() != 0  =>   getMonths() >= 0
ROR_111:612:void_checkYearsAndMonths(java.lang.String): getMonths() != 0  =>   getMonths() < 0
ROR_112:612:void_checkYearsAndMonths(java.lang.String): getMonths() != 0  =>   getMonths() <= 0
ROR_113:612:void_checkYearsAndMonths(java.lang.String): getMonths() != 0  =>   getMonths() == 0
ROR_114:612:void_checkYearsAndMonths(java.lang.String): getMonths() != 0  =>   true
ROR_115:612:void_checkYearsAndMonths(java.lang.String): getMonths() != 0  =>   false
ROR_116:615:void_checkYearsAndMonths(java.lang.String): getYears() != 0  =>   getYears() > 0
ROR_117:615:void_checkYearsAndMonths(java.lang.String): getYears() != 0  =>   getYears() >= 0
ROR_118:615:void_checkYearsAndMonths(java.lang.String): getYears() != 0  =>   getYears() < 0
ROR_119:615:void_checkYearsAndMonths(java.lang.String): getYears() != 0  =>   getYears() <= 0
ROR_120:615:void_checkYearsAndMonths(java.lang.String): getYears() != 0  =>   getYears() == 0
ROR_121:615:void_checkYearsAndMonths(java.lang.String): getYears() != 0  =>   true
ROR_122:615:void_checkYearsAndMonths(java.lang.String): getYears() != 0  =>   false
ROR_123:637:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): years != 0  =>   years > 0
ROR_124:637:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): years != 0  =>   years >= 0
ROR_125:637:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): years != 0  =>   years < 0
ROR_126:637:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): years != 0  =>   years <= 0
ROR_127:637:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): years != 0  =>   years == 0
ROR_128:637:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): years != 0  =>   true
ROR_129:637:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): years != 0  =>   false
ROR_130:637:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): months != 0  =>   months > 0
ROR_131:637:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): months != 0  =>   months >= 0
ROR_132:637:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): months != 0  =>   months < 0
ROR_133:637:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): months != 0  =>   months <= 0
ROR_134:637:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): months != 0  =>   months == 0
ROR_135:637:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): months != 0  =>   true
ROR_136:637:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): months != 0  =>   false
ROR_137:640:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): years != 0  =>   years > 0
ROR_138:640:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): years != 0  =>   years >= 0
ROR_139:640:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): years != 0  =>   years < 0
ROR_140:640:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): years != 0  =>   years <= 0
ROR_141:640:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): years != 0  =>   years == 0
ROR_142:640:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): years != 0  =>   true
ROR_143:640:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): years != 0  =>   false
ROR_144:643:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): months != 0  =>   months > 0
ROR_145:643:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): months != 0  =>   months >= 0
ROR_146:643:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): months != 0  =>   months < 0
ROR_147:643:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): months != 0  =>   months <= 0
ROR_148:643:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): months != 0  =>   months == 0
ROR_149:643:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): months != 0  =>   true
ROR_150:643:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): months != 0  =>   false
COR_1:75:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): start == null || end == null  =>   start == null && end == null
COR_2:75:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): start == null || end == null  =>   start == null ^ end == null
COR_3:88:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): i > 0 && types[i - 1] == types[i]  =>   i > 0 || types[i - 1] == types[i]
COR_4:88:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): i > 0 && types[i - 1] == types[i]  =>   i > 0 ^ types[i - 1] == types[i]
COR_5:520:org.joda.time.Period_multipliedBy(int): this == ZERO || scalar == 1  =>   this == ZERO && scalar == 1
COR_6:520:org.joda.time.Period_multipliedBy(int): this == ZERO || scalar == 1  =>   this == ZERO ^ scalar == 1
COR_7:637:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): years != 0 || months != 0  =>   years != 0 && months != 0
COR_8:637:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): years != 0 || months != 0  =>   years != 0 ^ months != 0
SDL_1:91:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): if (start == null || end == null) {     throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must not be null\" ); } if (start.size() != end.size()) {     throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must have the same set of fields\" ); } org.joda.time.DurationFieldType[] types = new org.joda.time.DurationFieldType[start.size()]; int[] values = new int[start.size()]; for (int i = 0, isize = start.size(); i < isize; i++) {     if (start.getFieldType( i ) != end.getFieldType( i )) {         throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must have the same set of fields\" );     }     types[i] = start.getFieldType( i ).getDurationType();     if (i > 0 && types[i - 1] == types[i]) {         throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must not have overlapping fields\" );     }     values[i] = end.getValue( i ) - start.getValue( i ); } return new org.joda.time.Period( values, PeriodType.forFields( types ) );  =>   if (start.size() != end.size()) {     throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must have the same set of fields\" ); } org.joda.time.DurationFieldType[] types = new org.joda.time.DurationFieldType[start.size()]; int[] values = new int[start.size()]; for (int i = 0, isize = start.size(); i < isize; i++) {     if (start.getFieldType( i ) != end.getFieldType( i )) {         throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must have the same set of fields\" );     }     types[i] = start.getFieldType( i ).getDurationType();     if (i > 0 && types[i - 1] == types[i]) {         throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must not have overlapping fields\" );     }     values[i] = end.getValue( i ) - start.getValue( i ); } return new org.joda.time.Period( values, PeriodType.forFields( types ) );
SDL_2:91:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): if (start == null || end == null) {     throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must not be null\" ); } if (start.size() != end.size()) {     throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must have the same set of fields\" ); } org.joda.time.DurationFieldType[] types = new org.joda.time.DurationFieldType[start.size()]; int[] values = new int[start.size()]; for (int i = 0, isize = start.size(); i < isize; i++) {     if (start.getFieldType( i ) != end.getFieldType( i )) {         throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must have the same set of fields\" );     }     types[i] = start.getFieldType( i ).getDurationType();     if (i > 0 && types[i - 1] == types[i]) {         throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must not have overlapping fields\" );     }     values[i] = end.getValue( i ) - start.getValue( i ); } return new org.joda.time.Period( values, PeriodType.forFields( types ) );  =>   if (start == null || end == null) {     throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must not be null\" ); } org.joda.time.DurationFieldType[] types = new org.joda.time.DurationFieldType[start.size()]; int[] values = new int[start.size()]; for (int i = 0, isize = start.size(); i < isize; i++) {     if (start.getFieldType( i ) != end.getFieldType( i )) {         throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must have the same set of fields\" );     }     types[i] = start.getFieldType( i ).getDurationType();     if (i > 0 && types[i - 1] == types[i]) {         throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must not have overlapping fields\" );     }     values[i] = end.getValue( i ) - start.getValue( i ); } return new org.joda.time.Period( values, PeriodType.forFields( types ) );
SDL_3:84:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): if (start == null || end == null) {     throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must not be null\" ); } if (start.size() != end.size()) {     throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must have the same set of fields\" ); } org.joda.time.DurationFieldType[] types = new org.joda.time.DurationFieldType[start.size()]; int[] values = new int[start.size()]; for (int i = 0, isize = start.size(); i < isize; i++) {     if (start.getFieldType( i ) != end.getFieldType( i )) {         throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must have the same set of fields\" );     }     types[i] = start.getFieldType( i ).getDurationType();     if (i > 0 && types[i - 1] == types[i]) {         throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must not have overlapping fields\" );     }     values[i] = end.getValue( i ) - start.getValue( i ); } return new org.joda.time.Period( values, PeriodType.forFields( types ) );  =>   if (start == null || end == null) {     throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must not be null\" ); } if (start.size() != end.size()) {     throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must have the same set of fields\" ); } org.joda.time.DurationFieldType[] types = new org.joda.time.DurationFieldType[start.size()]; int[] values = new int[start.size()]; return new org.joda.time.Period( values, PeriodType.forFields( types ) );
SDL_4:76:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must not be null\" );  =>  
SDL_5:78:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): if (start == null || end == null) {     throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must not be null\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must not be null\" ); }
SDL_6:79:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must have the same set of fields\" );  =>  
SDL_7:81:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): if (start.size() != end.size()) {     throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must have the same set of fields\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must have the same set of fields\" ); }
SDL_8:89:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): if (start.getFieldType( i ) != end.getFieldType( i )) {     throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must have the same set of fields\" ); } types[i] = start.getFieldType( i ).getDurationType(); if (i > 0 && types[i - 1] == types[i]) {     throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must not have overlapping fields\" ); } values[i] = end.getValue( i ) - start.getValue( i );  =>   types[i] = start.getFieldType( i ).getDurationType(); if (i > 0 && types[i - 1] == types[i]) {     throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must not have overlapping fields\" ); } values[i] = end.getValue( i ) - start.getValue( i );
SDL_9:91:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): if (start.getFieldType( i ) != end.getFieldType( i )) {     throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must have the same set of fields\" ); } types[i] = start.getFieldType( i ).getDurationType(); if (i > 0 && types[i - 1] == types[i]) {     throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must not have overlapping fields\" ); } values[i] = end.getValue( i ) - start.getValue( i );  =>   if (start.getFieldType( i ) != end.getFieldType( i )) {     throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must have the same set of fields\" ); } if (i > 0 && types[i - 1] == types[i]) {     throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must not have overlapping fields\" ); } values[i] = end.getValue( i ) - start.getValue( i );
SDL_10:89:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): if (start.getFieldType( i ) != end.getFieldType( i )) {     throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must have the same set of fields\" ); } types[i] = start.getFieldType( i ).getDurationType(); if (i > 0 && types[i - 1] == types[i]) {     throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must not have overlapping fields\" ); } values[i] = end.getValue( i ) - start.getValue( i );  =>   if (start.getFieldType( i ) != end.getFieldType( i )) {     throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must have the same set of fields\" ); } types[i] = start.getFieldType( i ).getDurationType(); values[i] = end.getValue( i ) - start.getValue( i );
SDL_11:91:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): if (start.getFieldType( i ) != end.getFieldType( i )) {     throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must have the same set of fields\" ); } types[i] = start.getFieldType( i ).getDurationType(); if (i > 0 && types[i - 1] == types[i]) {     throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must not have overlapping fields\" ); } values[i] = end.getValue( i ) - start.getValue( i );  =>   if (start.getFieldType( i ) != end.getFieldType( i )) {     throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must have the same set of fields\" ); } types[i] = start.getFieldType( i ).getDurationType(); if (i > 0 && types[i - 1] == types[i]) {     throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must not have overlapping fields\" ); }
SDL_12:93:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): for (int i = 0, isize = start.size(); i < isize; i++) {     if (start.getFieldType( i ) != end.getFieldType( i )) {         throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must have the same set of fields\" );     }     types[i] = start.getFieldType( i ).getDurationType();     if (i > 0 && types[i - 1] == types[i]) {         throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must not have overlapping fields\" );     }     values[i] = end.getValue( i ) - start.getValue( i ); }  =>   for (int i = 0, isize = start.size();; i++) {     if (start.getFieldType( i ) != end.getFieldType( i )) {         throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must have the same set of fields\" );     }     types[i] = start.getFieldType( i ).getDurationType();     if (i > 0 && types[i - 1] == types[i]) {         throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must not have overlapping fields\" );     }     values[i] = end.getValue( i ) - start.getValue( i ); }
SDL_13:93:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): for (int i = 0, isize = start.size(); i < isize; i++) {     if (start.getFieldType( i ) != end.getFieldType( i )) {         throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must have the same set of fields\" );     }     types[i] = start.getFieldType( i ).getDurationType();     if (i > 0 && types[i - 1] == types[i]) {         throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must not have overlapping fields\" );     }     values[i] = end.getValue( i ) - start.getValue( i ); }  =>   for (int i = 0, isize = start.size(); i < isize;) {     if (start.getFieldType( i ) != end.getFieldType( i )) {         throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must have the same set of fields\" );     }     types[i] = start.getFieldType( i ).getDurationType();     if (i > 0 && types[i - 1] == types[i]) {         throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must not have overlapping fields\" );     }     values[i] = end.getValue( i ) - start.getValue( i ); }
SDL_14:85:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must have the same set of fields\" );  =>  
SDL_15:87:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): if (start.getFieldType( i ) != end.getFieldType( i )) {     throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must have the same set of fields\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must have the same set of fields\" ); }
SDL_16:89:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must not have overlapping fields\" );  =>  
SDL_17:91:org.joda.time.Period_fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial): if (i > 0 && types[i - 1] == types[i]) {     throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must not have overlapping fields\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"ReadablePartial objects must not have overlapping fields\" ); }
SDL_18:229:int_getYears(): return getPeriodType().getIndexedField( this, PeriodType.YEAR_INDEX );  =>   return 0;
SDL_19:234:int_getMonths(): return getPeriodType().getIndexedField( this, PeriodType.MONTH_INDEX );  =>   return 0;
SDL_20:239:int_getWeeks(): return getPeriodType().getIndexedField( this, PeriodType.WEEK_INDEX );  =>   return 0;
SDL_21:244:int_getDays(): return getPeriodType().getIndexedField( this, PeriodType.DAY_INDEX );  =>   return 0;
SDL_22:249:int_getHours(): return getPeriodType().getIndexedField( this, PeriodType.HOUR_INDEX );  =>   return 0;
SDL_23:254:int_getMinutes(): return getPeriodType().getIndexedField( this, PeriodType.MINUTE_INDEX );  =>   return 0;
SDL_24:259:int_getSeconds(): return getPeriodType().getIndexedField( this, PeriodType.SECOND_INDEX );  =>   return 0;
SDL_25:264:int_getMillis(): return getPeriodType().getIndexedField( this, PeriodType.MILLI_INDEX );  =>   return 0;
SDL_26:272:org.joda.time.Period_withPeriodType(org.joda.time.PeriodType): type = DateTimeUtils.getPeriodType( type ); if (type.equals( getPeriodType() )) {     return this; } return new org.joda.time.Period( this, type );  =>   if (type.equals( getPeriodType() )) {     return this; } return new org.joda.time.Period( this, type );
SDL_27:270:org.joda.time.Period_withPeriodType(org.joda.time.PeriodType): type = DateTimeUtils.getPeriodType( type ); if (type.equals( getPeriodType() )) {     return this; } return new org.joda.time.Period( this, type );  =>   type = DateTimeUtils.getPeriodType( type ); return new org.joda.time.Period( this, type );
SDL_28:272:org.joda.time.Period_withPeriodType(org.joda.time.PeriodType): if (type.equals( getPeriodType() )) {     return this; }  =>   if (true) {     return this; }
SDL_29:280:org.joda.time.Period_withFields(org.joda.time.ReadablePeriod): if (period == null) {     return this; } int[] newValues = getValues(); newValues = super.mergePeriodInto( newValues, period ); return new org.joda.time.Period( newValues, getPeriodType() );  =>   int[] newValues = getValues(); newValues = super.mergePeriodInto( newValues, period ); return new org.joda.time.Period( newValues, getPeriodType() );
SDL_30:282:org.joda.time.Period_withFields(org.joda.time.ReadablePeriod): if (period == null) {     return this; } int[] newValues = getValues(); newValues = super.mergePeriodInto( newValues, period ); return new org.joda.time.Period( newValues, getPeriodType() );  =>   if (period == null) {     return this; } int[] newValues = getValues(); return new org.joda.time.Period( newValues, getPeriodType() );
SDL_31:280:org.joda.time.Period_withFields(org.joda.time.ReadablePeriod): if (period == null) {     return this; }  =>   if (true) {     return this; }
SDL_32:290:org.joda.time.Period_withField(org.joda.time.DurationFieldType,int): if (field == null) {     throw new java.lang.IllegalArgumentException( \"Field must not be null\" ); } int[] newValues = getValues(); super.setFieldInto( newValues, field, value ); return new org.joda.time.Period( newValues, getPeriodType() );  =>   int[] newValues = getValues(); super.setFieldInto( newValues, field, value ); return new org.joda.time.Period( newValues, getPeriodType() );
SDL_33:292:org.joda.time.Period_withField(org.joda.time.DurationFieldType,int): if (field == null) {     throw new java.lang.IllegalArgumentException( \"Field must not be null\" ); } int[] newValues = getValues(); super.setFieldInto( newValues, field, value ); return new org.joda.time.Period( newValues, getPeriodType() );  =>   if (field == null) {     throw new java.lang.IllegalArgumentException( \"Field must not be null\" ); } int[] newValues = getValues(); return new org.joda.time.Period( newValues, getPeriodType() );
SDL_34:288:org.joda.time.Period_withField(org.joda.time.DurationFieldType,int): throw new java.lang.IllegalArgumentException( \"Field must not be null\" );  =>  
SDL_35:290:org.joda.time.Period_withField(org.joda.time.DurationFieldType,int): if (field == null) {     throw new java.lang.IllegalArgumentException( \"Field must not be null\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Field must not be null\" ); }
SDL_36:303:org.joda.time.Period_withFieldAdded(org.joda.time.DurationFieldType,int): if (field == null) {     throw new java.lang.IllegalArgumentException( \"Field must not be null\" ); } if (value == 0) {     return this; } int[] newValues = getValues(); super.addFieldInto( newValues, field, value ); return new org.joda.time.Period( newValues, getPeriodType() );  =>   if (value == 0) {     return this; } int[] newValues = getValues(); super.addFieldInto( newValues, field, value ); return new org.joda.time.Period( newValues, getPeriodType() );
SDL_37:303:org.joda.time.Period_withFieldAdded(org.joda.time.DurationFieldType,int): if (field == null) {     throw new java.lang.IllegalArgumentException( \"Field must not be null\" ); } if (value == 0) {     return this; } int[] newValues = getValues(); super.addFieldInto( newValues, field, value ); return new org.joda.time.Period( newValues, getPeriodType() );  =>   if (field == null) {     throw new java.lang.IllegalArgumentException( \"Field must not be null\" ); } int[] newValues = getValues(); super.addFieldInto( newValues, field, value ); return new org.joda.time.Period( newValues, getPeriodType() );
SDL_38:305:org.joda.time.Period_withFieldAdded(org.joda.time.DurationFieldType,int): if (field == null) {     throw new java.lang.IllegalArgumentException( \"Field must not be null\" ); } if (value == 0) {     return this; } int[] newValues = getValues(); super.addFieldInto( newValues, field, value ); return new org.joda.time.Period( newValues, getPeriodType() );  =>   if (field == null) {     throw new java.lang.IllegalArgumentException( \"Field must not be null\" ); } if (value == 0) {     return this; } int[] newValues = getValues(); return new org.joda.time.Period( newValues, getPeriodType() );
SDL_39:298:org.joda.time.Period_withFieldAdded(org.joda.time.DurationFieldType,int): throw new java.lang.IllegalArgumentException( \"Field must not be null\" );  =>  
SDL_40:300:org.joda.time.Period_withFieldAdded(org.joda.time.DurationFieldType,int): if (field == null) {     throw new java.lang.IllegalArgumentException( \"Field must not be null\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Field must not be null\" ); }
SDL_41:303:org.joda.time.Period_withFieldAdded(org.joda.time.DurationFieldType,int): if (value == 0) {     return this; }  =>   if (true) {     return this; }
SDL_42:312:org.joda.time.Period_withYears(int): int[] values = getValues(); getPeriodType().setIndexedField( this, PeriodType.YEAR_INDEX, values, years ); return new org.joda.time.Period( values, getPeriodType() );  =>   int[] values = getValues(); return new org.joda.time.Period( values, getPeriodType() );
SDL_43:319:org.joda.time.Period_withMonths(int): int[] values = getValues(); getPeriodType().setIndexedField( this, PeriodType.MONTH_INDEX, values, months ); return new org.joda.time.Period( values, getPeriodType() );  =>   int[] values = getValues(); return new org.joda.time.Period( values, getPeriodType() );
SDL_44:326:org.joda.time.Period_withWeeks(int): int[] values = getValues(); getPeriodType().setIndexedField( this, PeriodType.WEEK_INDEX, values, weeks ); return new org.joda.time.Period( values, getPeriodType() );  =>   int[] values = getValues(); return new org.joda.time.Period( values, getPeriodType() );
SDL_45:333:org.joda.time.Period_withDays(int): int[] values = getValues(); getPeriodType().setIndexedField( this, PeriodType.DAY_INDEX, values, days ); return new org.joda.time.Period( values, getPeriodType() );  =>   int[] values = getValues(); return new org.joda.time.Period( values, getPeriodType() );
SDL_46:340:org.joda.time.Period_withHours(int): int[] values = getValues(); getPeriodType().setIndexedField( this, PeriodType.HOUR_INDEX, values, hours ); return new org.joda.time.Period( values, getPeriodType() );  =>   int[] values = getValues(); return new org.joda.time.Period( values, getPeriodType() );
SDL_47:347:org.joda.time.Period_withMinutes(int): int[] values = getValues(); getPeriodType().setIndexedField( this, PeriodType.MINUTE_INDEX, values, minutes ); return new org.joda.time.Period( values, getPeriodType() );  =>   int[] values = getValues(); return new org.joda.time.Period( values, getPeriodType() );
SDL_48:354:org.joda.time.Period_withSeconds(int): int[] values = getValues(); getPeriodType().setIndexedField( this, PeriodType.SECOND_INDEX, values, seconds ); return new org.joda.time.Period( values, getPeriodType() );  =>   int[] values = getValues(); return new org.joda.time.Period( values, getPeriodType() );
SDL_49:361:org.joda.time.Period_withMillis(int): int[] values = getValues(); getPeriodType().setIndexedField( this, PeriodType.MILLI_INDEX, values, millis ); return new org.joda.time.Period( values, getPeriodType() );  =>   int[] values = getValues(); return new org.joda.time.Period( values, getPeriodType() );
SDL_50:376:org.joda.time.Period_plus(org.joda.time.ReadablePeriod): if (period == null) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, period.get( DurationFieldType.YEARS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, period.get( DurationFieldType.MONTHS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, period.get( DurationFieldType.WEEKS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, period.get( DurationFieldType.DAYS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, period.get( DurationFieldType.HOURS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, period.get( DurationFieldType.MINUTES_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, period.get( DurationFieldType.SECONDS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, period.get( DurationFieldType.MILLIS_TYPE ) ); return new org.joda.time.Period( values, getPeriodType() );  =>   int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, period.get( DurationFieldType.YEARS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, period.get( DurationFieldType.MONTHS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, period.get( DurationFieldType.WEEKS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, period.get( DurationFieldType.DAYS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, period.get( DurationFieldType.HOURS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, period.get( DurationFieldType.MINUTES_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, period.get( DurationFieldType.SECONDS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, period.get( DurationFieldType.MILLIS_TYPE ) ); return new org.joda.time.Period( values, getPeriodType() );
SDL_51:378:org.joda.time.Period_plus(org.joda.time.ReadablePeriod): if (period == null) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, period.get( DurationFieldType.YEARS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, period.get( DurationFieldType.MONTHS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, period.get( DurationFieldType.WEEKS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, period.get( DurationFieldType.DAYS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, period.get( DurationFieldType.HOURS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, period.get( DurationFieldType.MINUTES_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, period.get( DurationFieldType.SECONDS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, period.get( DurationFieldType.MILLIS_TYPE ) ); return new org.joda.time.Period( values, getPeriodType() );  =>   if (period == null) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, period.get( DurationFieldType.MONTHS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, period.get( DurationFieldType.WEEKS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, period.get( DurationFieldType.DAYS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, period.get( DurationFieldType.HOURS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, period.get( DurationFieldType.MINUTES_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, period.get( DurationFieldType.SECONDS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, period.get( DurationFieldType.MILLIS_TYPE ) ); return new org.joda.time.Period( values, getPeriodType() );
SDL_52:378:org.joda.time.Period_plus(org.joda.time.ReadablePeriod): if (period == null) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, period.get( DurationFieldType.YEARS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, period.get( DurationFieldType.MONTHS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, period.get( DurationFieldType.WEEKS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, period.get( DurationFieldType.DAYS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, period.get( DurationFieldType.HOURS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, period.get( DurationFieldType.MINUTES_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, period.get( DurationFieldType.SECONDS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, period.get( DurationFieldType.MILLIS_TYPE ) ); return new org.joda.time.Period( values, getPeriodType() );  =>   if (period == null) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, period.get( DurationFieldType.YEARS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, period.get( DurationFieldType.WEEKS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, period.get( DurationFieldType.DAYS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, period.get( DurationFieldType.HOURS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, period.get( DurationFieldType.MINUTES_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, period.get( DurationFieldType.SECONDS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, period.get( DurationFieldType.MILLIS_TYPE ) ); return new org.joda.time.Period( values, getPeriodType() );
SDL_53:378:org.joda.time.Period_plus(org.joda.time.ReadablePeriod): if (period == null) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, period.get( DurationFieldType.YEARS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, period.get( DurationFieldType.MONTHS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, period.get( DurationFieldType.WEEKS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, period.get( DurationFieldType.DAYS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, period.get( DurationFieldType.HOURS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, period.get( DurationFieldType.MINUTES_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, period.get( DurationFieldType.SECONDS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, period.get( DurationFieldType.MILLIS_TYPE ) ); return new org.joda.time.Period( values, getPeriodType() );  =>   if (period == null) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, period.get( DurationFieldType.YEARS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, period.get( DurationFieldType.MONTHS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, period.get( DurationFieldType.DAYS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, period.get( DurationFieldType.HOURS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, period.get( DurationFieldType.MINUTES_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, period.get( DurationFieldType.SECONDS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, period.get( DurationFieldType.MILLIS_TYPE ) ); return new org.joda.time.Period( values, getPeriodType() );
SDL_54:378:org.joda.time.Period_plus(org.joda.time.ReadablePeriod): if (period == null) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, period.get( DurationFieldType.YEARS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, period.get( DurationFieldType.MONTHS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, period.get( DurationFieldType.WEEKS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, period.get( DurationFieldType.DAYS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, period.get( DurationFieldType.HOURS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, period.get( DurationFieldType.MINUTES_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, period.get( DurationFieldType.SECONDS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, period.get( DurationFieldType.MILLIS_TYPE ) ); return new org.joda.time.Period( values, getPeriodType() );  =>   if (period == null) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, period.get( DurationFieldType.YEARS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, period.get( DurationFieldType.MONTHS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, period.get( DurationFieldType.WEEKS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, period.get( DurationFieldType.HOURS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, period.get( DurationFieldType.MINUTES_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, period.get( DurationFieldType.SECONDS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, period.get( DurationFieldType.MILLIS_TYPE ) ); return new org.joda.time.Period( values, getPeriodType() );
SDL_55:378:org.joda.time.Period_plus(org.joda.time.ReadablePeriod): if (period == null) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, period.get( DurationFieldType.YEARS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, period.get( DurationFieldType.MONTHS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, period.get( DurationFieldType.WEEKS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, period.get( DurationFieldType.DAYS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, period.get( DurationFieldType.HOURS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, period.get( DurationFieldType.MINUTES_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, period.get( DurationFieldType.SECONDS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, period.get( DurationFieldType.MILLIS_TYPE ) ); return new org.joda.time.Period( values, getPeriodType() );  =>   if (period == null) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, period.get( DurationFieldType.YEARS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, period.get( DurationFieldType.MONTHS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, period.get( DurationFieldType.WEEKS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, period.get( DurationFieldType.DAYS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, period.get( DurationFieldType.MINUTES_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, period.get( DurationFieldType.SECONDS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, period.get( DurationFieldType.MILLIS_TYPE ) ); return new org.joda.time.Period( values, getPeriodType() );
SDL_56:378:org.joda.time.Period_plus(org.joda.time.ReadablePeriod): if (period == null) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, period.get( DurationFieldType.YEARS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, period.get( DurationFieldType.MONTHS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, period.get( DurationFieldType.WEEKS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, period.get( DurationFieldType.DAYS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, period.get( DurationFieldType.HOURS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, period.get( DurationFieldType.MINUTES_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, period.get( DurationFieldType.SECONDS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, period.get( DurationFieldType.MILLIS_TYPE ) ); return new org.joda.time.Period( values, getPeriodType() );  =>   if (period == null) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, period.get( DurationFieldType.YEARS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, period.get( DurationFieldType.MONTHS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, period.get( DurationFieldType.WEEKS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, period.get( DurationFieldType.DAYS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, period.get( DurationFieldType.HOURS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, period.get( DurationFieldType.SECONDS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, period.get( DurationFieldType.MILLIS_TYPE ) ); return new org.joda.time.Period( values, getPeriodType() );
SDL_57:378:org.joda.time.Period_plus(org.joda.time.ReadablePeriod): if (period == null) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, period.get( DurationFieldType.YEARS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, period.get( DurationFieldType.MONTHS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, period.get( DurationFieldType.WEEKS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, period.get( DurationFieldType.DAYS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, period.get( DurationFieldType.HOURS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, period.get( DurationFieldType.MINUTES_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, period.get( DurationFieldType.SECONDS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, period.get( DurationFieldType.MILLIS_TYPE ) ); return new org.joda.time.Period( values, getPeriodType() );  =>   if (period == null) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, period.get( DurationFieldType.YEARS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, period.get( DurationFieldType.MONTHS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, period.get( DurationFieldType.WEEKS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, period.get( DurationFieldType.DAYS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, period.get( DurationFieldType.HOURS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, period.get( DurationFieldType.MINUTES_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, period.get( DurationFieldType.MILLIS_TYPE ) ); return new org.joda.time.Period( values, getPeriodType() );
SDL_58:378:org.joda.time.Period_plus(org.joda.time.ReadablePeriod): if (period == null) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, period.get( DurationFieldType.YEARS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, period.get( DurationFieldType.MONTHS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, period.get( DurationFieldType.WEEKS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, period.get( DurationFieldType.DAYS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, period.get( DurationFieldType.HOURS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, period.get( DurationFieldType.MINUTES_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, period.get( DurationFieldType.SECONDS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, period.get( DurationFieldType.MILLIS_TYPE ) ); return new org.joda.time.Period( values, getPeriodType() );  =>   if (period == null) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, period.get( DurationFieldType.YEARS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, period.get( DurationFieldType.MONTHS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, period.get( DurationFieldType.WEEKS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, period.get( DurationFieldType.DAYS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, period.get( DurationFieldType.HOURS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, period.get( DurationFieldType.MINUTES_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, period.get( DurationFieldType.SECONDS_TYPE ) ); return new org.joda.time.Period( values, getPeriodType() );
SDL_59:369:org.joda.time.Period_plus(org.joda.time.ReadablePeriod): if (period == null) {     return this; }  =>   if (true) {     return this; }
SDL_60:386:org.joda.time.Period_plusYears(int): if (years == 0) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, years ); return new org.joda.time.Period( values, getPeriodType() );  =>   int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, years ); return new org.joda.time.Period( values, getPeriodType() );
SDL_61:388:org.joda.time.Period_plusYears(int): if (years == 0) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, years ); return new org.joda.time.Period( values, getPeriodType() );  =>   if (years == 0) {     return this; } int[] values = getValues(); return new org.joda.time.Period( values, getPeriodType() );
SDL_62:386:org.joda.time.Period_plusYears(int): if (years == 0) {     return this; }  =>   if (true) {     return this; }
SDL_63:396:org.joda.time.Period_plusMonths(int): if (months == 0) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, months ); return new org.joda.time.Period( values, getPeriodType() );  =>   int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, months ); return new org.joda.time.Period( values, getPeriodType() );
SDL_64:398:org.joda.time.Period_plusMonths(int): if (months == 0) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, months ); return new org.joda.time.Period( values, getPeriodType() );  =>   if (months == 0) {     return this; } int[] values = getValues(); return new org.joda.time.Period( values, getPeriodType() );
SDL_65:396:org.joda.time.Period_plusMonths(int): if (months == 0) {     return this; }  =>   if (true) {     return this; }
SDL_66:406:org.joda.time.Period_plusWeeks(int): if (weeks == 0) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, weeks ); return new org.joda.time.Period( values, getPeriodType() );  =>   int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, weeks ); return new org.joda.time.Period( values, getPeriodType() );
SDL_67:408:org.joda.time.Period_plusWeeks(int): if (weeks == 0) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, weeks ); return new org.joda.time.Period( values, getPeriodType() );  =>   if (weeks == 0) {     return this; } int[] values = getValues(); return new org.joda.time.Period( values, getPeriodType() );
SDL_68:406:org.joda.time.Period_plusWeeks(int): if (weeks == 0) {     return this; }  =>   if (true) {     return this; }
SDL_69:416:org.joda.time.Period_plusDays(int): if (days == 0) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, days ); return new org.joda.time.Period( values, getPeriodType() );  =>   int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, days ); return new org.joda.time.Period( values, getPeriodType() );
SDL_70:418:org.joda.time.Period_plusDays(int): if (days == 0) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, days ); return new org.joda.time.Period( values, getPeriodType() );  =>   if (days == 0) {     return this; } int[] values = getValues(); return new org.joda.time.Period( values, getPeriodType() );
SDL_71:416:org.joda.time.Period_plusDays(int): if (days == 0) {     return this; }  =>   if (true) {     return this; }
SDL_72:426:org.joda.time.Period_plusHours(int): if (hours == 0) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, hours ); return new org.joda.time.Period( values, getPeriodType() );  =>   int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, hours ); return new org.joda.time.Period( values, getPeriodType() );
SDL_73:428:org.joda.time.Period_plusHours(int): if (hours == 0) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, hours ); return new org.joda.time.Period( values, getPeriodType() );  =>   if (hours == 0) {     return this; } int[] values = getValues(); return new org.joda.time.Period( values, getPeriodType() );
SDL_74:426:org.joda.time.Period_plusHours(int): if (hours == 0) {     return this; }  =>   if (true) {     return this; }
SDL_75:436:org.joda.time.Period_plusMinutes(int): if (minutes == 0) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, minutes ); return new org.joda.time.Period( values, getPeriodType() );  =>   int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, minutes ); return new org.joda.time.Period( values, getPeriodType() );
SDL_76:438:org.joda.time.Period_plusMinutes(int): if (minutes == 0) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, minutes ); return new org.joda.time.Period( values, getPeriodType() );  =>   if (minutes == 0) {     return this; } int[] values = getValues(); return new org.joda.time.Period( values, getPeriodType() );
SDL_77:436:org.joda.time.Period_plusMinutes(int): if (minutes == 0) {     return this; }  =>   if (true) {     return this; }
SDL_78:446:org.joda.time.Period_plusSeconds(int): if (seconds == 0) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, seconds ); return new org.joda.time.Period( values, getPeriodType() );  =>   int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, seconds ); return new org.joda.time.Period( values, getPeriodType() );
SDL_79:448:org.joda.time.Period_plusSeconds(int): if (seconds == 0) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, seconds ); return new org.joda.time.Period( values, getPeriodType() );  =>   if (seconds == 0) {     return this; } int[] values = getValues(); return new org.joda.time.Period( values, getPeriodType() );
SDL_80:446:org.joda.time.Period_plusSeconds(int): if (seconds == 0) {     return this; }  =>   if (true) {     return this; }
SDL_81:456:org.joda.time.Period_plusMillis(int): if (millis == 0) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, millis ); return new org.joda.time.Period( values, getPeriodType() );  =>   int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, millis ); return new org.joda.time.Period( values, getPeriodType() );
SDL_82:458:org.joda.time.Period_plusMillis(int): if (millis == 0) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, millis ); return new org.joda.time.Period( values, getPeriodType() );  =>   if (millis == 0) {     return this; } int[] values = getValues(); return new org.joda.time.Period( values, getPeriodType() );
SDL_83:456:org.joda.time.Period_plusMillis(int): if (millis == 0) {     return this; }  =>   if (true) {     return this; }
SDL_84:473:org.joda.time.Period_minus(org.joda.time.ReadablePeriod): if (period == null) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, -period.get( DurationFieldType.YEARS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, -period.get( DurationFieldType.MONTHS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, -period.get( DurationFieldType.WEEKS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, -period.get( DurationFieldType.DAYS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, -period.get( DurationFieldType.HOURS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, -period.get( DurationFieldType.MINUTES_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, -period.get( DurationFieldType.SECONDS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, -period.get( DurationFieldType.MILLIS_TYPE ) ); return new org.joda.time.Period( values, getPeriodType() );  =>   int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, -period.get( DurationFieldType.YEARS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, -period.get( DurationFieldType.MONTHS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, -period.get( DurationFieldType.WEEKS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, -period.get( DurationFieldType.DAYS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, -period.get( DurationFieldType.HOURS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, -period.get( DurationFieldType.MINUTES_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, -period.get( DurationFieldType.SECONDS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, -period.get( DurationFieldType.MILLIS_TYPE ) ); return new org.joda.time.Period( values, getPeriodType() );
SDL_85:475:org.joda.time.Period_minus(org.joda.time.ReadablePeriod): if (period == null) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, -period.get( DurationFieldType.YEARS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, -period.get( DurationFieldType.MONTHS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, -period.get( DurationFieldType.WEEKS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, -period.get( DurationFieldType.DAYS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, -period.get( DurationFieldType.HOURS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, -period.get( DurationFieldType.MINUTES_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, -period.get( DurationFieldType.SECONDS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, -period.get( DurationFieldType.MILLIS_TYPE ) ); return new org.joda.time.Period( values, getPeriodType() );  =>   if (period == null) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, -period.get( DurationFieldType.MONTHS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, -period.get( DurationFieldType.WEEKS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, -period.get( DurationFieldType.DAYS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, -period.get( DurationFieldType.HOURS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, -period.get( DurationFieldType.MINUTES_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, -period.get( DurationFieldType.SECONDS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, -period.get( DurationFieldType.MILLIS_TYPE ) ); return new org.joda.time.Period( values, getPeriodType() );
SDL_86:475:org.joda.time.Period_minus(org.joda.time.ReadablePeriod): if (period == null) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, -period.get( DurationFieldType.YEARS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, -period.get( DurationFieldType.MONTHS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, -period.get( DurationFieldType.WEEKS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, -period.get( DurationFieldType.DAYS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, -period.get( DurationFieldType.HOURS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, -period.get( DurationFieldType.MINUTES_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, -period.get( DurationFieldType.SECONDS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, -period.get( DurationFieldType.MILLIS_TYPE ) ); return new org.joda.time.Period( values, getPeriodType() );  =>   if (period == null) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, -period.get( DurationFieldType.YEARS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, -period.get( DurationFieldType.WEEKS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, -period.get( DurationFieldType.DAYS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, -period.get( DurationFieldType.HOURS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, -period.get( DurationFieldType.MINUTES_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, -period.get( DurationFieldType.SECONDS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, -period.get( DurationFieldType.MILLIS_TYPE ) ); return new org.joda.time.Period( values, getPeriodType() );
SDL_87:475:org.joda.time.Period_minus(org.joda.time.ReadablePeriod): if (period == null) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, -period.get( DurationFieldType.YEARS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, -period.get( DurationFieldType.MONTHS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, -period.get( DurationFieldType.WEEKS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, -period.get( DurationFieldType.DAYS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, -period.get( DurationFieldType.HOURS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, -period.get( DurationFieldType.MINUTES_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, -period.get( DurationFieldType.SECONDS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, -period.get( DurationFieldType.MILLIS_TYPE ) ); return new org.joda.time.Period( values, getPeriodType() );  =>   if (period == null) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, -period.get( DurationFieldType.YEARS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, -period.get( DurationFieldType.MONTHS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, -period.get( DurationFieldType.DAYS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, -period.get( DurationFieldType.HOURS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, -period.get( DurationFieldType.MINUTES_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, -period.get( DurationFieldType.SECONDS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, -period.get( DurationFieldType.MILLIS_TYPE ) ); return new org.joda.time.Period( values, getPeriodType() );
SDL_88:475:org.joda.time.Period_minus(org.joda.time.ReadablePeriod): if (period == null) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, -period.get( DurationFieldType.YEARS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, -period.get( DurationFieldType.MONTHS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, -period.get( DurationFieldType.WEEKS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, -period.get( DurationFieldType.DAYS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, -period.get( DurationFieldType.HOURS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, -period.get( DurationFieldType.MINUTES_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, -period.get( DurationFieldType.SECONDS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, -period.get( DurationFieldType.MILLIS_TYPE ) ); return new org.joda.time.Period( values, getPeriodType() );  =>   if (period == null) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, -period.get( DurationFieldType.YEARS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, -period.get( DurationFieldType.MONTHS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, -period.get( DurationFieldType.WEEKS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, -period.get( DurationFieldType.HOURS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, -period.get( DurationFieldType.MINUTES_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, -period.get( DurationFieldType.SECONDS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, -period.get( DurationFieldType.MILLIS_TYPE ) ); return new org.joda.time.Period( values, getPeriodType() );
SDL_89:475:org.joda.time.Period_minus(org.joda.time.ReadablePeriod): if (period == null) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, -period.get( DurationFieldType.YEARS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, -period.get( DurationFieldType.MONTHS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, -period.get( DurationFieldType.WEEKS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, -period.get( DurationFieldType.DAYS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, -period.get( DurationFieldType.HOURS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, -period.get( DurationFieldType.MINUTES_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, -period.get( DurationFieldType.SECONDS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, -period.get( DurationFieldType.MILLIS_TYPE ) ); return new org.joda.time.Period( values, getPeriodType() );  =>   if (period == null) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, -period.get( DurationFieldType.YEARS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, -period.get( DurationFieldType.MONTHS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, -period.get( DurationFieldType.WEEKS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, -period.get( DurationFieldType.DAYS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, -period.get( DurationFieldType.MINUTES_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, -period.get( DurationFieldType.SECONDS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, -period.get( DurationFieldType.MILLIS_TYPE ) ); return new org.joda.time.Period( values, getPeriodType() );
SDL_90:475:org.joda.time.Period_minus(org.joda.time.ReadablePeriod): if (period == null) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, -period.get( DurationFieldType.YEARS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, -period.get( DurationFieldType.MONTHS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, -period.get( DurationFieldType.WEEKS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, -period.get( DurationFieldType.DAYS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, -period.get( DurationFieldType.HOURS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, -period.get( DurationFieldType.MINUTES_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, -period.get( DurationFieldType.SECONDS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, -period.get( DurationFieldType.MILLIS_TYPE ) ); return new org.joda.time.Period( values, getPeriodType() );  =>   if (period == null) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, -period.get( DurationFieldType.YEARS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, -period.get( DurationFieldType.MONTHS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, -period.get( DurationFieldType.WEEKS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, -period.get( DurationFieldType.DAYS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, -period.get( DurationFieldType.HOURS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, -period.get( DurationFieldType.SECONDS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, -period.get( DurationFieldType.MILLIS_TYPE ) ); return new org.joda.time.Period( values, getPeriodType() );
SDL_91:475:org.joda.time.Period_minus(org.joda.time.ReadablePeriod): if (period == null) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, -period.get( DurationFieldType.YEARS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, -period.get( DurationFieldType.MONTHS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, -period.get( DurationFieldType.WEEKS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, -period.get( DurationFieldType.DAYS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, -period.get( DurationFieldType.HOURS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, -period.get( DurationFieldType.MINUTES_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, -period.get( DurationFieldType.SECONDS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, -period.get( DurationFieldType.MILLIS_TYPE ) ); return new org.joda.time.Period( values, getPeriodType() );  =>   if (period == null) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, -period.get( DurationFieldType.YEARS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, -period.get( DurationFieldType.MONTHS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, -period.get( DurationFieldType.WEEKS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, -period.get( DurationFieldType.DAYS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, -period.get( DurationFieldType.HOURS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, -period.get( DurationFieldType.MINUTES_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, -period.get( DurationFieldType.MILLIS_TYPE ) ); return new org.joda.time.Period( values, getPeriodType() );
SDL_92:475:org.joda.time.Period_minus(org.joda.time.ReadablePeriod): if (period == null) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, -period.get( DurationFieldType.YEARS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, -period.get( DurationFieldType.MONTHS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, -period.get( DurationFieldType.WEEKS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, -period.get( DurationFieldType.DAYS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, -period.get( DurationFieldType.HOURS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, -period.get( DurationFieldType.MINUTES_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, -period.get( DurationFieldType.SECONDS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MILLI_INDEX, values, -period.get( DurationFieldType.MILLIS_TYPE ) ); return new org.joda.time.Period( values, getPeriodType() );  =>   if (period == null) {     return this; } int[] values = getValues(); getPeriodType().addIndexedField( this, PeriodType.YEAR_INDEX, values, -period.get( DurationFieldType.YEARS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MONTH_INDEX, values, -period.get( DurationFieldType.MONTHS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.WEEK_INDEX, values, -period.get( DurationFieldType.WEEKS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.DAY_INDEX, values, -period.get( DurationFieldType.DAYS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.HOUR_INDEX, values, -period.get( DurationFieldType.HOURS_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.MINUTE_INDEX, values, -period.get( DurationFieldType.MINUTES_TYPE ) ); getPeriodType().addIndexedField( this, PeriodType.SECOND_INDEX, values, -period.get( DurationFieldType.SECONDS_TYPE ) ); return new org.joda.time.Period( values, getPeriodType() );
SDL_93:466:org.joda.time.Period_minus(org.joda.time.ReadablePeriod): if (period == null) {     return this; }  =>   if (true) {     return this; }
SDL_94:525:org.joda.time.Period_multipliedBy(int): if (this == ZERO || scalar == 1) {     return this; } int[] values = getValues(); for (int i = 0; i < values.length; i++) {     values[i] = FieldUtils.safeMultiply( values[i], scalar ); } return new org.joda.time.Period( values, getPeriodType() );  =>   int[] values = getValues(); for (int i = 0; i < values.length; i++) {     values[i] = FieldUtils.safeMultiply( values[i], scalar ); } return new org.joda.time.Period( values, getPeriodType() );
SDL_95:525:org.joda.time.Period_multipliedBy(int): if (this == ZERO || scalar == 1) {     return this; } int[] values = getValues(); for (int i = 0; i < values.length; i++) {     values[i] = FieldUtils.safeMultiply( values[i], scalar ); } return new org.joda.time.Period( values, getPeriodType() );  =>   if (this == ZERO || scalar == 1) {     return this; } int[] values = getValues(); return new org.joda.time.Period( values, getPeriodType() );
SDL_96:523:org.joda.time.Period_multipliedBy(int): if (this == ZERO || scalar == 1) {     return this; }  =>   if (true) {     return this; }
SDL_97:525:org.joda.time.Period_multipliedBy(int): values[i] = FieldUtils.safeMultiply( values[i], scalar );  =>  
SDL_98:527:org.joda.time.Period_multipliedBy(int): for (int i = 0; i < values.length; i++) {     values[i] = FieldUtils.safeMultiply( values[i], scalar ); }  =>   for (int i = 0;; i++) {     values[i] = FieldUtils.safeMultiply( values[i], scalar ); }
SDL_99:527:org.joda.time.Period_multipliedBy(int): for (int i = 0; i < values.length; i++) {     values[i] = FieldUtils.safeMultiply( values[i], scalar ); }  =>   for (int i = 0; i < values.length;) {     values[i] = FieldUtils.safeMultiply( values[i], scalar ); }
SDL_100:544:org.joda.time.Weeks_toStandardWeeks(): checkYearsAndMonths( \"Weeks\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * DateTimeConstants.MILLIS_PER_HOUR; millis += (long) getDays() * DateTimeConstants.MILLIS_PER_DAY; long weeks = (long) getWeeks() + millis / DateTimeConstants.MILLIS_PER_WEEK; return Weeks.weeks( FieldUtils.safeToInt( weeks ) );  =>   long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * DateTimeConstants.MILLIS_PER_HOUR; millis += (long) getDays() * DateTimeConstants.MILLIS_PER_DAY; long weeks = (long) getWeeks() + millis / DateTimeConstants.MILLIS_PER_WEEK; return Weeks.weeks( FieldUtils.safeToInt( weeks ) );
SDL_101:544:org.joda.time.Weeks_toStandardWeeks(): checkYearsAndMonths( \"Weeks\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * DateTimeConstants.MILLIS_PER_HOUR; millis += (long) getDays() * DateTimeConstants.MILLIS_PER_DAY; long weeks = (long) getWeeks() + millis / DateTimeConstants.MILLIS_PER_WEEK; return Weeks.weeks( FieldUtils.safeToInt( weeks ) );  =>   checkYearsAndMonths( \"Weeks\" ); long millis = getMillis(); millis += (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * DateTimeConstants.MILLIS_PER_HOUR; millis += (long) getDays() * DateTimeConstants.MILLIS_PER_DAY; long weeks = (long) getWeeks() + millis / DateTimeConstants.MILLIS_PER_WEEK; return Weeks.weeks( FieldUtils.safeToInt( weeks ) );
SDL_102:544:org.joda.time.Weeks_toStandardWeeks(): checkYearsAndMonths( \"Weeks\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * DateTimeConstants.MILLIS_PER_HOUR; millis += (long) getDays() * DateTimeConstants.MILLIS_PER_DAY; long weeks = (long) getWeeks() + millis / DateTimeConstants.MILLIS_PER_WEEK; return Weeks.weeks( FieldUtils.safeToInt( weeks ) );  =>   checkYearsAndMonths( \"Weeks\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getHours() * DateTimeConstants.MILLIS_PER_HOUR; millis += (long) getDays() * DateTimeConstants.MILLIS_PER_DAY; long weeks = (long) getWeeks() + millis / DateTimeConstants.MILLIS_PER_WEEK; return Weeks.weeks( FieldUtils.safeToInt( weeks ) );
SDL_103:544:org.joda.time.Weeks_toStandardWeeks(): checkYearsAndMonths( \"Weeks\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * DateTimeConstants.MILLIS_PER_HOUR; millis += (long) getDays() * DateTimeConstants.MILLIS_PER_DAY; long weeks = (long) getWeeks() + millis / DateTimeConstants.MILLIS_PER_WEEK; return Weeks.weeks( FieldUtils.safeToInt( weeks ) );  =>   checkYearsAndMonths( \"Weeks\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getDays() * DateTimeConstants.MILLIS_PER_DAY; long weeks = (long) getWeeks() + millis / DateTimeConstants.MILLIS_PER_WEEK; return Weeks.weeks( FieldUtils.safeToInt( weeks ) );
SDL_104:544:org.joda.time.Weeks_toStandardWeeks(): checkYearsAndMonths( \"Weeks\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * DateTimeConstants.MILLIS_PER_HOUR; millis += (long) getDays() * DateTimeConstants.MILLIS_PER_DAY; long weeks = (long) getWeeks() + millis / DateTimeConstants.MILLIS_PER_WEEK; return Weeks.weeks( FieldUtils.safeToInt( weeks ) );  =>   checkYearsAndMonths( \"Weeks\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * DateTimeConstants.MILLIS_PER_HOUR; long weeks = (long) getWeeks() + millis / DateTimeConstants.MILLIS_PER_WEEK; return Weeks.weeks( FieldUtils.safeToInt( weeks ) );
SDL_105:557:org.joda.time.Days_toStandardDays(): checkYearsAndMonths( \"Days\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * DateTimeConstants.MILLIS_PER_HOUR; long days = millis / DateTimeConstants.MILLIS_PER_DAY; days = FieldUtils.safeAdd( days, getDays() ); days = FieldUtils.safeAdd( days, (long) getWeeks() * (long) DateTimeConstants.DAYS_PER_WEEK ); return Days.days( FieldUtils.safeToInt( days ) );  =>   long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * DateTimeConstants.MILLIS_PER_HOUR; long days = millis / DateTimeConstants.MILLIS_PER_DAY; days = FieldUtils.safeAdd( days, getDays() ); days = FieldUtils.safeAdd( days, (long) getWeeks() * (long) DateTimeConstants.DAYS_PER_WEEK ); return Days.days( FieldUtils.safeToInt( days ) );
SDL_106:557:org.joda.time.Days_toStandardDays(): checkYearsAndMonths( \"Days\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * DateTimeConstants.MILLIS_PER_HOUR; long days = millis / DateTimeConstants.MILLIS_PER_DAY; days = FieldUtils.safeAdd( days, getDays() ); days = FieldUtils.safeAdd( days, (long) getWeeks() * (long) DateTimeConstants.DAYS_PER_WEEK ); return Days.days( FieldUtils.safeToInt( days ) );  =>   checkYearsAndMonths( \"Days\" ); long millis = getMillis(); millis += (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * DateTimeConstants.MILLIS_PER_HOUR; long days = millis / DateTimeConstants.MILLIS_PER_DAY; days = FieldUtils.safeAdd( days, getDays() ); days = FieldUtils.safeAdd( days, (long) getWeeks() * (long) DateTimeConstants.DAYS_PER_WEEK ); return Days.days( FieldUtils.safeToInt( days ) );
SDL_107:557:org.joda.time.Days_toStandardDays(): checkYearsAndMonths( \"Days\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * DateTimeConstants.MILLIS_PER_HOUR; long days = millis / DateTimeConstants.MILLIS_PER_DAY; days = FieldUtils.safeAdd( days, getDays() ); days = FieldUtils.safeAdd( days, (long) getWeeks() * (long) DateTimeConstants.DAYS_PER_WEEK ); return Days.days( FieldUtils.safeToInt( days ) );  =>   checkYearsAndMonths( \"Days\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getHours() * DateTimeConstants.MILLIS_PER_HOUR; long days = millis / DateTimeConstants.MILLIS_PER_DAY; days = FieldUtils.safeAdd( days, getDays() ); days = FieldUtils.safeAdd( days, (long) getWeeks() * (long) DateTimeConstants.DAYS_PER_WEEK ); return Days.days( FieldUtils.safeToInt( days ) );
SDL_108:557:org.joda.time.Days_toStandardDays(): checkYearsAndMonths( \"Days\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * DateTimeConstants.MILLIS_PER_HOUR; long days = millis / DateTimeConstants.MILLIS_PER_DAY; days = FieldUtils.safeAdd( days, getDays() ); days = FieldUtils.safeAdd( days, (long) getWeeks() * (long) DateTimeConstants.DAYS_PER_WEEK ); return Days.days( FieldUtils.safeToInt( days ) );  =>   checkYearsAndMonths( \"Days\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE; long days = millis / DateTimeConstants.MILLIS_PER_DAY; days = FieldUtils.safeAdd( days, getDays() ); days = FieldUtils.safeAdd( days, (long) getWeeks() * (long) DateTimeConstants.DAYS_PER_WEEK ); return Days.days( FieldUtils.safeToInt( days ) );
SDL_109:557:org.joda.time.Days_toStandardDays(): checkYearsAndMonths( \"Days\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * DateTimeConstants.MILLIS_PER_HOUR; long days = millis / DateTimeConstants.MILLIS_PER_DAY; days = FieldUtils.safeAdd( days, getDays() ); days = FieldUtils.safeAdd( days, (long) getWeeks() * (long) DateTimeConstants.DAYS_PER_WEEK ); return Days.days( FieldUtils.safeToInt( days ) );  =>   checkYearsAndMonths( \"Days\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * DateTimeConstants.MILLIS_PER_HOUR; long days = millis / DateTimeConstants.MILLIS_PER_DAY; days = FieldUtils.safeAdd( days, (long) getWeeks() * (long) DateTimeConstants.DAYS_PER_WEEK ); return Days.days( FieldUtils.safeToInt( days ) );
SDL_110:557:org.joda.time.Days_toStandardDays(): checkYearsAndMonths( \"Days\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * DateTimeConstants.MILLIS_PER_HOUR; long days = millis / DateTimeConstants.MILLIS_PER_DAY; days = FieldUtils.safeAdd( days, getDays() ); days = FieldUtils.safeAdd( days, (long) getWeeks() * (long) DateTimeConstants.DAYS_PER_WEEK ); return Days.days( FieldUtils.safeToInt( days ) );  =>   checkYearsAndMonths( \"Days\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * DateTimeConstants.MILLIS_PER_HOUR; long days = millis / DateTimeConstants.MILLIS_PER_DAY; days = FieldUtils.safeAdd( days, getDays() ); return Days.days( FieldUtils.safeToInt( days ) );
SDL_111:570:org.joda.time.Hours_toStandardHours(): checkYearsAndMonths( \"Hours\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE; long hours = millis / DateTimeConstants.MILLIS_PER_HOUR; hours = FieldUtils.safeAdd( hours, getHours() ); hours = FieldUtils.safeAdd( hours, (long) getDays() * (long) DateTimeConstants.HOURS_PER_DAY ); hours = FieldUtils.safeAdd( hours, (long) getWeeks() * (long) DateTimeConstants.HOURS_PER_WEEK ); return Hours.hours( FieldUtils.safeToInt( hours ) );  =>   long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE; long hours = millis / DateTimeConstants.MILLIS_PER_HOUR; hours = FieldUtils.safeAdd( hours, getHours() ); hours = FieldUtils.safeAdd( hours, (long) getDays() * (long) DateTimeConstants.HOURS_PER_DAY ); hours = FieldUtils.safeAdd( hours, (long) getWeeks() * (long) DateTimeConstants.HOURS_PER_WEEK ); return Hours.hours( FieldUtils.safeToInt( hours ) );
SDL_112:570:org.joda.time.Hours_toStandardHours(): checkYearsAndMonths( \"Hours\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE; long hours = millis / DateTimeConstants.MILLIS_PER_HOUR; hours = FieldUtils.safeAdd( hours, getHours() ); hours = FieldUtils.safeAdd( hours, (long) getDays() * (long) DateTimeConstants.HOURS_PER_DAY ); hours = FieldUtils.safeAdd( hours, (long) getWeeks() * (long) DateTimeConstants.HOURS_PER_WEEK ); return Hours.hours( FieldUtils.safeToInt( hours ) );  =>   checkYearsAndMonths( \"Hours\" ); long millis = getMillis(); millis += (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE; long hours = millis / DateTimeConstants.MILLIS_PER_HOUR; hours = FieldUtils.safeAdd( hours, getHours() ); hours = FieldUtils.safeAdd( hours, (long) getDays() * (long) DateTimeConstants.HOURS_PER_DAY ); hours = FieldUtils.safeAdd( hours, (long) getWeeks() * (long) DateTimeConstants.HOURS_PER_WEEK ); return Hours.hours( FieldUtils.safeToInt( hours ) );
SDL_113:570:org.joda.time.Hours_toStandardHours(): checkYearsAndMonths( \"Hours\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE; long hours = millis / DateTimeConstants.MILLIS_PER_HOUR; hours = FieldUtils.safeAdd( hours, getHours() ); hours = FieldUtils.safeAdd( hours, (long) getDays() * (long) DateTimeConstants.HOURS_PER_DAY ); hours = FieldUtils.safeAdd( hours, (long) getWeeks() * (long) DateTimeConstants.HOURS_PER_WEEK ); return Hours.hours( FieldUtils.safeToInt( hours ) );  =>   checkYearsAndMonths( \"Hours\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; long hours = millis / DateTimeConstants.MILLIS_PER_HOUR; hours = FieldUtils.safeAdd( hours, getHours() ); hours = FieldUtils.safeAdd( hours, (long) getDays() * (long) DateTimeConstants.HOURS_PER_DAY ); hours = FieldUtils.safeAdd( hours, (long) getWeeks() * (long) DateTimeConstants.HOURS_PER_WEEK ); return Hours.hours( FieldUtils.safeToInt( hours ) );
SDL_114:570:org.joda.time.Hours_toStandardHours(): checkYearsAndMonths( \"Hours\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE; long hours = millis / DateTimeConstants.MILLIS_PER_HOUR; hours = FieldUtils.safeAdd( hours, getHours() ); hours = FieldUtils.safeAdd( hours, (long) getDays() * (long) DateTimeConstants.HOURS_PER_DAY ); hours = FieldUtils.safeAdd( hours, (long) getWeeks() * (long) DateTimeConstants.HOURS_PER_WEEK ); return Hours.hours( FieldUtils.safeToInt( hours ) );  =>   checkYearsAndMonths( \"Hours\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE; long hours = millis / DateTimeConstants.MILLIS_PER_HOUR; hours = FieldUtils.safeAdd( hours, (long) getDays() * (long) DateTimeConstants.HOURS_PER_DAY ); hours = FieldUtils.safeAdd( hours, (long) getWeeks() * (long) DateTimeConstants.HOURS_PER_WEEK ); return Hours.hours( FieldUtils.safeToInt( hours ) );
SDL_115:570:org.joda.time.Hours_toStandardHours(): checkYearsAndMonths( \"Hours\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE; long hours = millis / DateTimeConstants.MILLIS_PER_HOUR; hours = FieldUtils.safeAdd( hours, getHours() ); hours = FieldUtils.safeAdd( hours, (long) getDays() * (long) DateTimeConstants.HOURS_PER_DAY ); hours = FieldUtils.safeAdd( hours, (long) getWeeks() * (long) DateTimeConstants.HOURS_PER_WEEK ); return Hours.hours( FieldUtils.safeToInt( hours ) );  =>   checkYearsAndMonths( \"Hours\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE; long hours = millis / DateTimeConstants.MILLIS_PER_HOUR; hours = FieldUtils.safeAdd( hours, getHours() ); hours = FieldUtils.safeAdd( hours, (long) getWeeks() * (long) DateTimeConstants.HOURS_PER_WEEK ); return Hours.hours( FieldUtils.safeToInt( hours ) );
SDL_116:570:org.joda.time.Hours_toStandardHours(): checkYearsAndMonths( \"Hours\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE; long hours = millis / DateTimeConstants.MILLIS_PER_HOUR; hours = FieldUtils.safeAdd( hours, getHours() ); hours = FieldUtils.safeAdd( hours, (long) getDays() * (long) DateTimeConstants.HOURS_PER_DAY ); hours = FieldUtils.safeAdd( hours, (long) getWeeks() * (long) DateTimeConstants.HOURS_PER_WEEK ); return Hours.hours( FieldUtils.safeToInt( hours ) );  =>   checkYearsAndMonths( \"Hours\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE; long hours = millis / DateTimeConstants.MILLIS_PER_HOUR; hours = FieldUtils.safeAdd( hours, getHours() ); hours = FieldUtils.safeAdd( hours, (long) getDays() * (long) DateTimeConstants.HOURS_PER_DAY ); return Hours.hours( FieldUtils.safeToInt( hours ) );
SDL_117:583:org.joda.time.Minutes_toStandardMinutes(): checkYearsAndMonths( \"Minutes\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; long minutes = millis / DateTimeConstants.MILLIS_PER_MINUTE; minutes = FieldUtils.safeAdd( minutes, getMinutes() ); minutes = FieldUtils.safeAdd( minutes, (long) getHours() * (long) DateTimeConstants.MINUTES_PER_HOUR ); minutes = FieldUtils.safeAdd( minutes, (long) getDays() * (long) DateTimeConstants.MINUTES_PER_DAY ); minutes = FieldUtils.safeAdd( minutes, (long) getWeeks() * (long) DateTimeConstants.MINUTES_PER_WEEK ); return Minutes.minutes( FieldUtils.safeToInt( minutes ) );  =>   long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; long minutes = millis / DateTimeConstants.MILLIS_PER_MINUTE; minutes = FieldUtils.safeAdd( minutes, getMinutes() ); minutes = FieldUtils.safeAdd( minutes, (long) getHours() * (long) DateTimeConstants.MINUTES_PER_HOUR ); minutes = FieldUtils.safeAdd( minutes, (long) getDays() * (long) DateTimeConstants.MINUTES_PER_DAY ); minutes = FieldUtils.safeAdd( minutes, (long) getWeeks() * (long) DateTimeConstants.MINUTES_PER_WEEK ); return Minutes.minutes( FieldUtils.safeToInt( minutes ) );
SDL_118:583:org.joda.time.Minutes_toStandardMinutes(): checkYearsAndMonths( \"Minutes\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; long minutes = millis / DateTimeConstants.MILLIS_PER_MINUTE; minutes = FieldUtils.safeAdd( minutes, getMinutes() ); minutes = FieldUtils.safeAdd( minutes, (long) getHours() * (long) DateTimeConstants.MINUTES_PER_HOUR ); minutes = FieldUtils.safeAdd( minutes, (long) getDays() * (long) DateTimeConstants.MINUTES_PER_DAY ); minutes = FieldUtils.safeAdd( minutes, (long) getWeeks() * (long) DateTimeConstants.MINUTES_PER_WEEK ); return Minutes.minutes( FieldUtils.safeToInt( minutes ) );  =>   checkYearsAndMonths( \"Minutes\" ); long millis = getMillis(); long minutes = millis / DateTimeConstants.MILLIS_PER_MINUTE; minutes = FieldUtils.safeAdd( minutes, getMinutes() ); minutes = FieldUtils.safeAdd( minutes, (long) getHours() * (long) DateTimeConstants.MINUTES_PER_HOUR ); minutes = FieldUtils.safeAdd( minutes, (long) getDays() * (long) DateTimeConstants.MINUTES_PER_DAY ); minutes = FieldUtils.safeAdd( minutes, (long) getWeeks() * (long) DateTimeConstants.MINUTES_PER_WEEK ); return Minutes.minutes( FieldUtils.safeToInt( minutes ) );
SDL_119:583:org.joda.time.Minutes_toStandardMinutes(): checkYearsAndMonths( \"Minutes\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; long minutes = millis / DateTimeConstants.MILLIS_PER_MINUTE; minutes = FieldUtils.safeAdd( minutes, getMinutes() ); minutes = FieldUtils.safeAdd( minutes, (long) getHours() * (long) DateTimeConstants.MINUTES_PER_HOUR ); minutes = FieldUtils.safeAdd( minutes, (long) getDays() * (long) DateTimeConstants.MINUTES_PER_DAY ); minutes = FieldUtils.safeAdd( minutes, (long) getWeeks() * (long) DateTimeConstants.MINUTES_PER_WEEK ); return Minutes.minutes( FieldUtils.safeToInt( minutes ) );  =>   checkYearsAndMonths( \"Minutes\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; long minutes = millis / DateTimeConstants.MILLIS_PER_MINUTE; minutes = FieldUtils.safeAdd( minutes, (long) getHours() * (long) DateTimeConstants.MINUTES_PER_HOUR ); minutes = FieldUtils.safeAdd( minutes, (long) getDays() * (long) DateTimeConstants.MINUTES_PER_DAY ); minutes = FieldUtils.safeAdd( minutes, (long) getWeeks() * (long) DateTimeConstants.MINUTES_PER_WEEK ); return Minutes.minutes( FieldUtils.safeToInt( minutes ) );
SDL_120:583:org.joda.time.Minutes_toStandardMinutes(): checkYearsAndMonths( \"Minutes\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; long minutes = millis / DateTimeConstants.MILLIS_PER_MINUTE; minutes = FieldUtils.safeAdd( minutes, getMinutes() ); minutes = FieldUtils.safeAdd( minutes, (long) getHours() * (long) DateTimeConstants.MINUTES_PER_HOUR ); minutes = FieldUtils.safeAdd( minutes, (long) getDays() * (long) DateTimeConstants.MINUTES_PER_DAY ); minutes = FieldUtils.safeAdd( minutes, (long) getWeeks() * (long) DateTimeConstants.MINUTES_PER_WEEK ); return Minutes.minutes( FieldUtils.safeToInt( minutes ) );  =>   checkYearsAndMonths( \"Minutes\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; long minutes = millis / DateTimeConstants.MILLIS_PER_MINUTE; minutes = FieldUtils.safeAdd( minutes, getMinutes() ); minutes = FieldUtils.safeAdd( minutes, (long) getDays() * (long) DateTimeConstants.MINUTES_PER_DAY ); minutes = FieldUtils.safeAdd( minutes, (long) getWeeks() * (long) DateTimeConstants.MINUTES_PER_WEEK ); return Minutes.minutes( FieldUtils.safeToInt( minutes ) );
SDL_121:583:org.joda.time.Minutes_toStandardMinutes(): checkYearsAndMonths( \"Minutes\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; long minutes = millis / DateTimeConstants.MILLIS_PER_MINUTE; minutes = FieldUtils.safeAdd( minutes, getMinutes() ); minutes = FieldUtils.safeAdd( minutes, (long) getHours() * (long) DateTimeConstants.MINUTES_PER_HOUR ); minutes = FieldUtils.safeAdd( minutes, (long) getDays() * (long) DateTimeConstants.MINUTES_PER_DAY ); minutes = FieldUtils.safeAdd( minutes, (long) getWeeks() * (long) DateTimeConstants.MINUTES_PER_WEEK ); return Minutes.minutes( FieldUtils.safeToInt( minutes ) );  =>   checkYearsAndMonths( \"Minutes\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; long minutes = millis / DateTimeConstants.MILLIS_PER_MINUTE; minutes = FieldUtils.safeAdd( minutes, getMinutes() ); minutes = FieldUtils.safeAdd( minutes, (long) getHours() * (long) DateTimeConstants.MINUTES_PER_HOUR ); minutes = FieldUtils.safeAdd( minutes, (long) getWeeks() * (long) DateTimeConstants.MINUTES_PER_WEEK ); return Minutes.minutes( FieldUtils.safeToInt( minutes ) );
SDL_122:583:org.joda.time.Minutes_toStandardMinutes(): checkYearsAndMonths( \"Minutes\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; long minutes = millis / DateTimeConstants.MILLIS_PER_MINUTE; minutes = FieldUtils.safeAdd( minutes, getMinutes() ); minutes = FieldUtils.safeAdd( minutes, (long) getHours() * (long) DateTimeConstants.MINUTES_PER_HOUR ); minutes = FieldUtils.safeAdd( minutes, (long) getDays() * (long) DateTimeConstants.MINUTES_PER_DAY ); minutes = FieldUtils.safeAdd( minutes, (long) getWeeks() * (long) DateTimeConstants.MINUTES_PER_WEEK ); return Minutes.minutes( FieldUtils.safeToInt( minutes ) );  =>   checkYearsAndMonths( \"Minutes\" ); long millis = getMillis(); millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND; long minutes = millis / DateTimeConstants.MILLIS_PER_MINUTE; minutes = FieldUtils.safeAdd( minutes, getMinutes() ); minutes = FieldUtils.safeAdd( minutes, (long) getHours() * (long) DateTimeConstants.MINUTES_PER_HOUR ); minutes = FieldUtils.safeAdd( minutes, (long) getDays() * (long) DateTimeConstants.MINUTES_PER_DAY ); return Minutes.minutes( FieldUtils.safeToInt( minutes ) );
SDL_123:595:org.joda.time.Seconds_toStandardSeconds(): checkYearsAndMonths( \"Seconds\" ); long seconds = getMillis() / DateTimeConstants.MILLIS_PER_SECOND; seconds = FieldUtils.safeAdd( seconds, getSeconds() ); seconds = FieldUtils.safeAdd( seconds, (long) getMinutes() * (long) DateTimeConstants.SECONDS_PER_MINUTE ); seconds = FieldUtils.safeAdd( seconds, (long) getHours() * (long) DateTimeConstants.SECONDS_PER_HOUR ); seconds = FieldUtils.safeAdd( seconds, (long) getDays() * (long) DateTimeConstants.SECONDS_PER_DAY ); seconds = FieldUtils.safeAdd( seconds, (long) getWeeks() * (long) DateTimeConstants.SECONDS_PER_WEEK ); return Seconds.seconds( FieldUtils.safeToInt( seconds ) );  =>   long seconds = getMillis() / DateTimeConstants.MILLIS_PER_SECOND; seconds = FieldUtils.safeAdd( seconds, getSeconds() ); seconds = FieldUtils.safeAdd( seconds, (long) getMinutes() * (long) DateTimeConstants.SECONDS_PER_MINUTE ); seconds = FieldUtils.safeAdd( seconds, (long) getHours() * (long) DateTimeConstants.SECONDS_PER_HOUR ); seconds = FieldUtils.safeAdd( seconds, (long) getDays() * (long) DateTimeConstants.SECONDS_PER_DAY ); seconds = FieldUtils.safeAdd( seconds, (long) getWeeks() * (long) DateTimeConstants.SECONDS_PER_WEEK ); return Seconds.seconds( FieldUtils.safeToInt( seconds ) );
SDL_124:595:org.joda.time.Seconds_toStandardSeconds(): checkYearsAndMonths( \"Seconds\" ); long seconds = getMillis() / DateTimeConstants.MILLIS_PER_SECOND; seconds = FieldUtils.safeAdd( seconds, getSeconds() ); seconds = FieldUtils.safeAdd( seconds, (long) getMinutes() * (long) DateTimeConstants.SECONDS_PER_MINUTE ); seconds = FieldUtils.safeAdd( seconds, (long) getHours() * (long) DateTimeConstants.SECONDS_PER_HOUR ); seconds = FieldUtils.safeAdd( seconds, (long) getDays() * (long) DateTimeConstants.SECONDS_PER_DAY ); seconds = FieldUtils.safeAdd( seconds, (long) getWeeks() * (long) DateTimeConstants.SECONDS_PER_WEEK ); return Seconds.seconds( FieldUtils.safeToInt( seconds ) );  =>   checkYearsAndMonths( \"Seconds\" ); long seconds = getMillis() / DateTimeConstants.MILLIS_PER_SECOND; seconds = FieldUtils.safeAdd( seconds, (long) getMinutes() * (long) DateTimeConstants.SECONDS_PER_MINUTE ); seconds = FieldUtils.safeAdd( seconds, (long) getHours() * (long) DateTimeConstants.SECONDS_PER_HOUR ); seconds = FieldUtils.safeAdd( seconds, (long) getDays() * (long) DateTimeConstants.SECONDS_PER_DAY ); seconds = FieldUtils.safeAdd( seconds, (long) getWeeks() * (long) DateTimeConstants.SECONDS_PER_WEEK ); return Seconds.seconds( FieldUtils.safeToInt( seconds ) );
SDL_125:595:org.joda.time.Seconds_toStandardSeconds(): checkYearsAndMonths( \"Seconds\" ); long seconds = getMillis() / DateTimeConstants.MILLIS_PER_SECOND; seconds = FieldUtils.safeAdd( seconds, getSeconds() ); seconds = FieldUtils.safeAdd( seconds, (long) getMinutes() * (long) DateTimeConstants.SECONDS_PER_MINUTE ); seconds = FieldUtils.safeAdd( seconds, (long) getHours() * (long) DateTimeConstants.SECONDS_PER_HOUR ); seconds = FieldUtils.safeAdd( seconds, (long) getDays() * (long) DateTimeConstants.SECONDS_PER_DAY ); seconds = FieldUtils.safeAdd( seconds, (long) getWeeks() * (long) DateTimeConstants.SECONDS_PER_WEEK ); return Seconds.seconds( FieldUtils.safeToInt( seconds ) );  =>   checkYearsAndMonths( \"Seconds\" ); long seconds = getMillis() / DateTimeConstants.MILLIS_PER_SECOND; seconds = FieldUtils.safeAdd( seconds, getSeconds() ); seconds = FieldUtils.safeAdd( seconds, (long) getHours() * (long) DateTimeConstants.SECONDS_PER_HOUR ); seconds = FieldUtils.safeAdd( seconds, (long) getDays() * (long) DateTimeConstants.SECONDS_PER_DAY ); seconds = FieldUtils.safeAdd( seconds, (long) getWeeks() * (long) DateTimeConstants.SECONDS_PER_WEEK ); return Seconds.seconds( FieldUtils.safeToInt( seconds ) );
SDL_126:595:org.joda.time.Seconds_toStandardSeconds(): checkYearsAndMonths( \"Seconds\" ); long seconds = getMillis() / DateTimeConstants.MILLIS_PER_SECOND; seconds = FieldUtils.safeAdd( seconds, getSeconds() ); seconds = FieldUtils.safeAdd( seconds, (long) getMinutes() * (long) DateTimeConstants.SECONDS_PER_MINUTE ); seconds = FieldUtils.safeAdd( seconds, (long) getHours() * (long) DateTimeConstants.SECONDS_PER_HOUR ); seconds = FieldUtils.safeAdd( seconds, (long) getDays() * (long) DateTimeConstants.SECONDS_PER_DAY ); seconds = FieldUtils.safeAdd( seconds, (long) getWeeks() * (long) DateTimeConstants.SECONDS_PER_WEEK ); return Seconds.seconds( FieldUtils.safeToInt( seconds ) );  =>   checkYearsAndMonths( \"Seconds\" ); long seconds = getMillis() / DateTimeConstants.MILLIS_PER_SECOND; seconds = FieldUtils.safeAdd( seconds, getSeconds() ); seconds = FieldUtils.safeAdd( seconds, (long) getMinutes() * (long) DateTimeConstants.SECONDS_PER_MINUTE ); seconds = FieldUtils.safeAdd( seconds, (long) getDays() * (long) DateTimeConstants.SECONDS_PER_DAY ); seconds = FieldUtils.safeAdd( seconds, (long) getWeeks() * (long) DateTimeConstants.SECONDS_PER_WEEK ); return Seconds.seconds( FieldUtils.safeToInt( seconds ) );
SDL_127:595:org.joda.time.Seconds_toStandardSeconds(): checkYearsAndMonths( \"Seconds\" ); long seconds = getMillis() / DateTimeConstants.MILLIS_PER_SECOND; seconds = FieldUtils.safeAdd( seconds, getSeconds() ); seconds = FieldUtils.safeAdd( seconds, (long) getMinutes() * (long) DateTimeConstants.SECONDS_PER_MINUTE ); seconds = FieldUtils.safeAdd( seconds, (long) getHours() * (long) DateTimeConstants.SECONDS_PER_HOUR ); seconds = FieldUtils.safeAdd( seconds, (long) getDays() * (long) DateTimeConstants.SECONDS_PER_DAY ); seconds = FieldUtils.safeAdd( seconds, (long) getWeeks() * (long) DateTimeConstants.SECONDS_PER_WEEK ); return Seconds.seconds( FieldUtils.safeToInt( seconds ) );  =>   checkYearsAndMonths( \"Seconds\" ); long seconds = getMillis() / DateTimeConstants.MILLIS_PER_SECOND; seconds = FieldUtils.safeAdd( seconds, getSeconds() ); seconds = FieldUtils.safeAdd( seconds, (long) getMinutes() * (long) DateTimeConstants.SECONDS_PER_MINUTE ); seconds = FieldUtils.safeAdd( seconds, (long) getHours() * (long) DateTimeConstants.SECONDS_PER_HOUR ); seconds = FieldUtils.safeAdd( seconds, (long) getWeeks() * (long) DateTimeConstants.SECONDS_PER_WEEK ); return Seconds.seconds( FieldUtils.safeToInt( seconds ) );
SDL_128:595:org.joda.time.Seconds_toStandardSeconds(): checkYearsAndMonths( \"Seconds\" ); long seconds = getMillis() / DateTimeConstants.MILLIS_PER_SECOND; seconds = FieldUtils.safeAdd( seconds, getSeconds() ); seconds = FieldUtils.safeAdd( seconds, (long) getMinutes() * (long) DateTimeConstants.SECONDS_PER_MINUTE ); seconds = FieldUtils.safeAdd( seconds, (long) getHours() * (long) DateTimeConstants.SECONDS_PER_HOUR ); seconds = FieldUtils.safeAdd( seconds, (long) getDays() * (long) DateTimeConstants.SECONDS_PER_DAY ); seconds = FieldUtils.safeAdd( seconds, (long) getWeeks() * (long) DateTimeConstants.SECONDS_PER_WEEK ); return Seconds.seconds( FieldUtils.safeToInt( seconds ) );  =>   checkYearsAndMonths( \"Seconds\" ); long seconds = getMillis() / DateTimeConstants.MILLIS_PER_SECOND; seconds = FieldUtils.safeAdd( seconds, getSeconds() ); seconds = FieldUtils.safeAdd( seconds, (long) getMinutes() * (long) DateTimeConstants.SECONDS_PER_MINUTE ); seconds = FieldUtils.safeAdd( seconds, (long) getHours() * (long) DateTimeConstants.SECONDS_PER_HOUR ); seconds = FieldUtils.safeAdd( seconds, (long) getDays() * (long) DateTimeConstants.SECONDS_PER_DAY ); return Seconds.seconds( FieldUtils.safeToInt( seconds ) );
SDL_129:607:org.joda.time.Duration_toStandardDuration(): checkYearsAndMonths( \"Duration\" ); long millis = getMillis(); millis += (long) getSeconds() * (long) DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * (long) DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * (long) DateTimeConstants.MILLIS_PER_HOUR; millis += (long) getDays() * (long) DateTimeConstants.MILLIS_PER_DAY; millis += (long) getWeeks() * (long) DateTimeConstants.MILLIS_PER_WEEK; return new org.joda.time.Duration( millis );  =>   long millis = getMillis(); millis += (long) getSeconds() * (long) DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * (long) DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * (long) DateTimeConstants.MILLIS_PER_HOUR; millis += (long) getDays() * (long) DateTimeConstants.MILLIS_PER_DAY; millis += (long) getWeeks() * (long) DateTimeConstants.MILLIS_PER_WEEK; return new org.joda.time.Duration( millis );
SDL_130:607:org.joda.time.Duration_toStandardDuration(): checkYearsAndMonths( \"Duration\" ); long millis = getMillis(); millis += (long) getSeconds() * (long) DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * (long) DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * (long) DateTimeConstants.MILLIS_PER_HOUR; millis += (long) getDays() * (long) DateTimeConstants.MILLIS_PER_DAY; millis += (long) getWeeks() * (long) DateTimeConstants.MILLIS_PER_WEEK; return new org.joda.time.Duration( millis );  =>   checkYearsAndMonths( \"Duration\" ); long millis = getMillis(); millis += (long) getMinutes() * (long) DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * (long) DateTimeConstants.MILLIS_PER_HOUR; millis += (long) getDays() * (long) DateTimeConstants.MILLIS_PER_DAY; millis += (long) getWeeks() * (long) DateTimeConstants.MILLIS_PER_WEEK; return new org.joda.time.Duration( millis );
SDL_131:607:org.joda.time.Duration_toStandardDuration(): checkYearsAndMonths( \"Duration\" ); long millis = getMillis(); millis += (long) getSeconds() * (long) DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * (long) DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * (long) DateTimeConstants.MILLIS_PER_HOUR; millis += (long) getDays() * (long) DateTimeConstants.MILLIS_PER_DAY; millis += (long) getWeeks() * (long) DateTimeConstants.MILLIS_PER_WEEK; return new org.joda.time.Duration( millis );  =>   checkYearsAndMonths( \"Duration\" ); long millis = getMillis(); millis += (long) getSeconds() * (long) DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getHours() * (long) DateTimeConstants.MILLIS_PER_HOUR; millis += (long) getDays() * (long) DateTimeConstants.MILLIS_PER_DAY; millis += (long) getWeeks() * (long) DateTimeConstants.MILLIS_PER_WEEK; return new org.joda.time.Duration( millis );
SDL_132:607:org.joda.time.Duration_toStandardDuration(): checkYearsAndMonths( \"Duration\" ); long millis = getMillis(); millis += (long) getSeconds() * (long) DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * (long) DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * (long) DateTimeConstants.MILLIS_PER_HOUR; millis += (long) getDays() * (long) DateTimeConstants.MILLIS_PER_DAY; millis += (long) getWeeks() * (long) DateTimeConstants.MILLIS_PER_WEEK; return new org.joda.time.Duration( millis );  =>   checkYearsAndMonths( \"Duration\" ); long millis = getMillis(); millis += (long) getSeconds() * (long) DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * (long) DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getDays() * (long) DateTimeConstants.MILLIS_PER_DAY; millis += (long) getWeeks() * (long) DateTimeConstants.MILLIS_PER_WEEK; return new org.joda.time.Duration( millis );
SDL_133:607:org.joda.time.Duration_toStandardDuration(): checkYearsAndMonths( \"Duration\" ); long millis = getMillis(); millis += (long) getSeconds() * (long) DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * (long) DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * (long) DateTimeConstants.MILLIS_PER_HOUR; millis += (long) getDays() * (long) DateTimeConstants.MILLIS_PER_DAY; millis += (long) getWeeks() * (long) DateTimeConstants.MILLIS_PER_WEEK; return new org.joda.time.Duration( millis );  =>   checkYearsAndMonths( \"Duration\" ); long millis = getMillis(); millis += (long) getSeconds() * (long) DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * (long) DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * (long) DateTimeConstants.MILLIS_PER_HOUR; millis += (long) getWeeks() * (long) DateTimeConstants.MILLIS_PER_WEEK; return new org.joda.time.Duration( millis );
SDL_134:607:org.joda.time.Duration_toStandardDuration(): checkYearsAndMonths( \"Duration\" ); long millis = getMillis(); millis += (long) getSeconds() * (long) DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * (long) DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * (long) DateTimeConstants.MILLIS_PER_HOUR; millis += (long) getDays() * (long) DateTimeConstants.MILLIS_PER_DAY; millis += (long) getWeeks() * (long) DateTimeConstants.MILLIS_PER_WEEK; return new org.joda.time.Duration( millis );  =>   checkYearsAndMonths( \"Duration\" ); long millis = getMillis(); millis += (long) getSeconds() * (long) DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * (long) DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * (long) DateTimeConstants.MILLIS_PER_HOUR; millis += (long) getDays() * (long) DateTimeConstants.MILLIS_PER_DAY; return new org.joda.time.Duration( millis );
SDL_135:615:void_checkYearsAndMonths(java.lang.String): if (getMonths() != 0) {     throw new java.lang.UnsupportedOperationException( \"Cannot convert to \" + destintionType + \" as this period contains months and months vary in length\" ); } if (getYears() != 0) {     throw new java.lang.UnsupportedOperationException( \"Cannot convert to \" + destintionType + \" as this period contains years and years vary in length\" ); }  =>   if (getYears() != 0) {     throw new java.lang.UnsupportedOperationException( \"Cannot convert to \" + destintionType + \" as this period contains years and years vary in length\" ); }
SDL_136:615:void_checkYearsAndMonths(java.lang.String): if (getMonths() != 0) {     throw new java.lang.UnsupportedOperationException( \"Cannot convert to \" + destintionType + \" as this period contains months and months vary in length\" ); } if (getYears() != 0) {     throw new java.lang.UnsupportedOperationException( \"Cannot convert to \" + destintionType + \" as this period contains years and years vary in length\" ); }  =>   if (getMonths() != 0) {     throw new java.lang.UnsupportedOperationException( \"Cannot convert to \" + destintionType + \" as this period contains months and months vary in length\" ); }
SDL_137:613:void_checkYearsAndMonths(java.lang.String): throw new java.lang.UnsupportedOperationException( \"Cannot convert to \" + destintionType + \" as this period contains months and months vary in length\" );  =>  
SDL_138:615:void_checkYearsAndMonths(java.lang.String): if (getMonths() != 0) {     throw new java.lang.UnsupportedOperationException( \"Cannot convert to \" + destintionType + \" as this period contains months and months vary in length\" ); }  =>   if (true) {     throw new java.lang.UnsupportedOperationException( \"Cannot convert to \" + destintionType + \" as this period contains months and months vary in length\" ); }
SDL_139:616:void_checkYearsAndMonths(java.lang.String): throw new java.lang.UnsupportedOperationException( \"Cannot convert to \" + destintionType + \" as this period contains years and years vary in length\" );  =>  
SDL_140:618:void_checkYearsAndMonths(java.lang.String): if (getYears() != 0) {     throw new java.lang.UnsupportedOperationException( \"Cannot convert to \" + destintionType + \" as this period contains years and years vary in length\" ); }  =>   if (true) {     throw new java.lang.UnsupportedOperationException( \"Cannot convert to \" + destintionType + \" as this period contains years and years vary in length\" ); }
SDL_141:647:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): type = DateTimeUtils.getPeriodType( type ); long millis = getMillis(); millis += (long) getSeconds() * (long) DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * (long) DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * (long) DateTimeConstants.MILLIS_PER_HOUR; millis += (long) getDays() * (long) DateTimeConstants.MILLIS_PER_DAY; millis += (long) getWeeks() * (long) DateTimeConstants.MILLIS_PER_WEEK; org.joda.time.Period result = new org.joda.time.Period( millis, type, ISOChronology.getInstanceUTC() ); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) {     years = FieldUtils.safeAdd( years, months / 12 );     months = months % 12;     if (years != 0) {         result = result.withYears( years );     }     if (months != 0) {         result = result.withMonths( months );     } } return result;  =>   long millis = getMillis(); millis += (long) getSeconds() * (long) DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * (long) DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * (long) DateTimeConstants.MILLIS_PER_HOUR; millis += (long) getDays() * (long) DateTimeConstants.MILLIS_PER_DAY; millis += (long) getWeeks() * (long) DateTimeConstants.MILLIS_PER_WEEK; org.joda.time.Period result = new org.joda.time.Period( millis, type, ISOChronology.getInstanceUTC() ); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) {     years = FieldUtils.safeAdd( years, months / 12 );     months = months % 12;     if (years != 0) {         result = result.withYears( years );     }     if (months != 0) {         result = result.withMonths( months );     } } return result;
SDL_142:647:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): type = DateTimeUtils.getPeriodType( type ); long millis = getMillis(); millis += (long) getSeconds() * (long) DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * (long) DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * (long) DateTimeConstants.MILLIS_PER_HOUR; millis += (long) getDays() * (long) DateTimeConstants.MILLIS_PER_DAY; millis += (long) getWeeks() * (long) DateTimeConstants.MILLIS_PER_WEEK; org.joda.time.Period result = new org.joda.time.Period( millis, type, ISOChronology.getInstanceUTC() ); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) {     years = FieldUtils.safeAdd( years, months / 12 );     months = months % 12;     if (years != 0) {         result = result.withYears( years );     }     if (months != 0) {         result = result.withMonths( months );     } } return result;  =>   type = DateTimeUtils.getPeriodType( type ); long millis = getMillis(); millis += (long) getMinutes() * (long) DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * (long) DateTimeConstants.MILLIS_PER_HOUR; millis += (long) getDays() * (long) DateTimeConstants.MILLIS_PER_DAY; millis += (long) getWeeks() * (long) DateTimeConstants.MILLIS_PER_WEEK; org.joda.time.Period result = new org.joda.time.Period( millis, type, ISOChronology.getInstanceUTC() ); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) {     years = FieldUtils.safeAdd( years, months / 12 );     months = months % 12;     if (years != 0) {         result = result.withYears( years );     }     if (months != 0) {         result = result.withMonths( months );     } } return result;
SDL_143:647:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): type = DateTimeUtils.getPeriodType( type ); long millis = getMillis(); millis += (long) getSeconds() * (long) DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * (long) DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * (long) DateTimeConstants.MILLIS_PER_HOUR; millis += (long) getDays() * (long) DateTimeConstants.MILLIS_PER_DAY; millis += (long) getWeeks() * (long) DateTimeConstants.MILLIS_PER_WEEK; org.joda.time.Period result = new org.joda.time.Period( millis, type, ISOChronology.getInstanceUTC() ); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) {     years = FieldUtils.safeAdd( years, months / 12 );     months = months % 12;     if (years != 0) {         result = result.withYears( years );     }     if (months != 0) {         result = result.withMonths( months );     } } return result;  =>   type = DateTimeUtils.getPeriodType( type ); long millis = getMillis(); millis += (long) getSeconds() * (long) DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getHours() * (long) DateTimeConstants.MILLIS_PER_HOUR; millis += (long) getDays() * (long) DateTimeConstants.MILLIS_PER_DAY; millis += (long) getWeeks() * (long) DateTimeConstants.MILLIS_PER_WEEK; org.joda.time.Period result = new org.joda.time.Period( millis, type, ISOChronology.getInstanceUTC() ); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) {     years = FieldUtils.safeAdd( years, months / 12 );     months = months % 12;     if (years != 0) {         result = result.withYears( years );     }     if (months != 0) {         result = result.withMonths( months );     } } return result;
SDL_144:647:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): type = DateTimeUtils.getPeriodType( type ); long millis = getMillis(); millis += (long) getSeconds() * (long) DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * (long) DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * (long) DateTimeConstants.MILLIS_PER_HOUR; millis += (long) getDays() * (long) DateTimeConstants.MILLIS_PER_DAY; millis += (long) getWeeks() * (long) DateTimeConstants.MILLIS_PER_WEEK; org.joda.time.Period result = new org.joda.time.Period( millis, type, ISOChronology.getInstanceUTC() ); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) {     years = FieldUtils.safeAdd( years, months / 12 );     months = months % 12;     if (years != 0) {         result = result.withYears( years );     }     if (months != 0) {         result = result.withMonths( months );     } } return result;  =>   type = DateTimeUtils.getPeriodType( type ); long millis = getMillis(); millis += (long) getSeconds() * (long) DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * (long) DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getDays() * (long) DateTimeConstants.MILLIS_PER_DAY; millis += (long) getWeeks() * (long) DateTimeConstants.MILLIS_PER_WEEK; org.joda.time.Period result = new org.joda.time.Period( millis, type, ISOChronology.getInstanceUTC() ); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) {     years = FieldUtils.safeAdd( years, months / 12 );     months = months % 12;     if (years != 0) {         result = result.withYears( years );     }     if (months != 0) {         result = result.withMonths( months );     } } return result;
SDL_145:647:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): type = DateTimeUtils.getPeriodType( type ); long millis = getMillis(); millis += (long) getSeconds() * (long) DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * (long) DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * (long) DateTimeConstants.MILLIS_PER_HOUR; millis += (long) getDays() * (long) DateTimeConstants.MILLIS_PER_DAY; millis += (long) getWeeks() * (long) DateTimeConstants.MILLIS_PER_WEEK; org.joda.time.Period result = new org.joda.time.Period( millis, type, ISOChronology.getInstanceUTC() ); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) {     years = FieldUtils.safeAdd( years, months / 12 );     months = months % 12;     if (years != 0) {         result = result.withYears( years );     }     if (months != 0) {         result = result.withMonths( months );     } } return result;  =>   type = DateTimeUtils.getPeriodType( type ); long millis = getMillis(); millis += (long) getSeconds() * (long) DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * (long) DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * (long) DateTimeConstants.MILLIS_PER_HOUR; millis += (long) getWeeks() * (long) DateTimeConstants.MILLIS_PER_WEEK; org.joda.time.Period result = new org.joda.time.Period( millis, type, ISOChronology.getInstanceUTC() ); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) {     years = FieldUtils.safeAdd( years, months / 12 );     months = months % 12;     if (years != 0) {         result = result.withYears( years );     }     if (months != 0) {         result = result.withMonths( months );     } } return result;
SDL_146:647:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): type = DateTimeUtils.getPeriodType( type ); long millis = getMillis(); millis += (long) getSeconds() * (long) DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * (long) DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * (long) DateTimeConstants.MILLIS_PER_HOUR; millis += (long) getDays() * (long) DateTimeConstants.MILLIS_PER_DAY; millis += (long) getWeeks() * (long) DateTimeConstants.MILLIS_PER_WEEK; org.joda.time.Period result = new org.joda.time.Period( millis, type, ISOChronology.getInstanceUTC() ); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) {     years = FieldUtils.safeAdd( years, months / 12 );     months = months % 12;     if (years != 0) {         result = result.withYears( years );     }     if (months != 0) {         result = result.withMonths( months );     } } return result;  =>   type = DateTimeUtils.getPeriodType( type ); long millis = getMillis(); millis += (long) getSeconds() * (long) DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * (long) DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * (long) DateTimeConstants.MILLIS_PER_HOUR; millis += (long) getDays() * (long) DateTimeConstants.MILLIS_PER_DAY; org.joda.time.Period result = new org.joda.time.Period( millis, type, ISOChronology.getInstanceUTC() ); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) {     years = FieldUtils.safeAdd( years, months / 12 );     months = months % 12;     if (years != 0) {         result = result.withYears( years );     }     if (months != 0) {         result = result.withMonths( months );     } } return result;
SDL_147:638:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): type = DateTimeUtils.getPeriodType( type ); long millis = getMillis(); millis += (long) getSeconds() * (long) DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * (long) DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * (long) DateTimeConstants.MILLIS_PER_HOUR; millis += (long) getDays() * (long) DateTimeConstants.MILLIS_PER_DAY; millis += (long) getWeeks() * (long) DateTimeConstants.MILLIS_PER_WEEK; org.joda.time.Period result = new org.joda.time.Period( millis, type, ISOChronology.getInstanceUTC() ); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) {     years = FieldUtils.safeAdd( years, months / 12 );     months = months % 12;     if (years != 0) {         result = result.withYears( years );     }     if (months != 0) {         result = result.withMonths( months );     } } return result;  =>   type = DateTimeUtils.getPeriodType( type ); long millis = getMillis(); millis += (long) getSeconds() * (long) DateTimeConstants.MILLIS_PER_SECOND; millis += (long) getMinutes() * (long) DateTimeConstants.MILLIS_PER_MINUTE; millis += (long) getHours() * (long) DateTimeConstants.MILLIS_PER_HOUR; millis += (long) getDays() * (long) DateTimeConstants.MILLIS_PER_DAY; millis += (long) getWeeks() * (long) DateTimeConstants.MILLIS_PER_WEEK; org.joda.time.Period result = new org.joda.time.Period( millis, type, ISOChronology.getInstanceUTC() ); int years = getYears(); int months = getMonths(); return result;
SDL_148:645:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): years = FieldUtils.safeAdd( years, months / 12 ); months = months % 12; if (years != 0) {     result = result.withYears( years ); } if (months != 0) {     result = result.withMonths( months ); }  =>   months = months % 12; if (years != 0) {     result = result.withYears( years ); } if (months != 0) {     result = result.withMonths( months ); }
SDL_149:645:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): years = FieldUtils.safeAdd( years, months / 12 ); months = months % 12; if (years != 0) {     result = result.withYears( years ); } if (months != 0) {     result = result.withMonths( months ); }  =>   years = FieldUtils.safeAdd( years, months / 12 ); if (years != 0) {     result = result.withYears( years ); } if (months != 0) {     result = result.withMonths( months ); }
SDL_150:643:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): years = FieldUtils.safeAdd( years, months / 12 ); months = months % 12; if (years != 0) {     result = result.withYears( years ); } if (months != 0) {     result = result.withMonths( months ); }  =>   years = FieldUtils.safeAdd( years, months / 12 ); months = months % 12; if (months != 0) {     result = result.withMonths( months ); }
SDL_151:643:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): years = FieldUtils.safeAdd( years, months / 12 ); months = months % 12; if (years != 0) {     result = result.withYears( years ); } if (months != 0) {     result = result.withMonths( months ); }  =>   years = FieldUtils.safeAdd( years, months / 12 ); months = months % 12; if (years != 0) {     result = result.withYears( years ); }
SDL_152:647:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): if (years != 0 || months != 0) {     years = FieldUtils.safeAdd( years, months / 12 );     months = months % 12;     if (years != 0) {         result = result.withYears( years );     }     if (months != 0) {         result = result.withMonths( months );     } }  =>   if (true) {     years = FieldUtils.safeAdd( years, months / 12 );     months = months % 12;     if (years != 0) {         result = result.withYears( years );     }     if (months != 0) {         result = result.withMonths( months );     } }
SDL_153:641:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): result = result.withYears( years );  =>  
SDL_154:643:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): if (years != 0) {     result = result.withYears( years ); }  =>   if (true) {     result = result.withYears( years ); }
SDL_155:644:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): result = result.withMonths( months );  =>  
SDL_156:646:org.joda.time.Period_normalizedStandard(org.joda.time.PeriodType): if (months != 0) {     result = result.withMonths( months ); }  =>   if (true) {     result = result.withMonths( months ); }
